"use strict";
export var main;
(function() {
var $rt_seed = 2463534242;
function $rt_nextId() {
    var x = $rt_seed;
    x ^= x << 13;
    x ^= x >> 17;
    x ^= x << 5;
    $rt_seed = x;
    return x;
}
function $rt_compare(a, b) {
    return a > b ? 1 : a < b ?  -1 : a === b ? 0 : 1;
}
function $rt_isInstance(obj, cls) {
    return obj !== null && !!obj.constructor.$meta && $rt_isAssignable(obj.constructor, cls);
}
function $rt_isAssignable(from, to) {
    if (from === to) {
        return true;
    }
    if (to.$meta.item !== null) {
        return from.$meta.item !== null && $rt_isAssignable(from.$meta.item, to.$meta.item);
    }
    var supertypes = from.$meta.supertypes;
    for (var i = 0;i < supertypes.length;i = i + 1 | 0) {
        if ($rt_isAssignable(supertypes[i], to)) {
            return true;
        }
    }
    return false;
}
function $rt_createArray(cls, sz) {
    var data = new Array(sz);
    var arr = new $rt_array(cls, data);
    if (sz > 0) {
        var i = 0;
        do  {
            data[i] = null;
            i = i + 1 | 0;
        }while (i < sz);
    }
    return arr;
}
function $rt_wrapArray(cls, data) {
    return new $rt_array(cls, data);
}
function $rt_createUnfilledArray(cls, sz) {
    return new $rt_array(cls, new Array(sz));
}
function $rt_createLongArray(sz) {
    var data = new Array(sz);
    var arr = new $rt_array($rt_longcls(), data);
    for (var i = 0;i < sz;i = i + 1 | 0) {
        data[i] = Long_ZERO;
    }
    return arr;
}
function $rt_createNumericArray(cls, nativeArray) {
    return new $rt_array(cls, nativeArray);
}
function $rt_createCharArray(sz) {
    return $rt_createNumericArray($rt_charcls(), new Uint16Array(sz));
}
function $rt_createByteArray(sz) {
    return $rt_createNumericArray($rt_bytecls(), new Int8Array(sz));
}
function $rt_createShortArray(sz) {
    return $rt_createNumericArray($rt_shortcls(), new Int16Array(sz));
}
function $rt_createIntArray(sz) {
    return $rt_createNumericArray($rt_intcls(), new Int32Array(sz));
}
function $rt_createBooleanArray(sz) {
    return $rt_createNumericArray($rt_booleancls(), new Int8Array(sz));
}
function $rt_createFloatArray(sz) {
    return $rt_createNumericArray($rt_floatcls(), new Float32Array(sz));
}
function $rt_createDoubleArray(sz) {
    return $rt_createNumericArray($rt_doublecls(), new Float64Array(sz));
}
function $rt_arraycls(cls) {
    var result = cls.$array;
    if (result === null) {
        var arraycls = {  };
        var name = "[" + cls.$meta.binaryName;
        arraycls.$meta = { item : cls, supertypes : [$rt_objcls()], primitive : false, superclass : $rt_objcls(), name : name, binaryName : name, enum : false };
        arraycls.classObject = null;
        arraycls.$array = null;
        result = arraycls;
        cls.$array = arraycls;
    }
    return result;
}
function $rt_createcls() {
    return { $array : null, classObject : null, $meta : { supertypes : [], superclass : null } };
}
function $rt_createPrimitiveCls(name, binaryName) {
    var cls = $rt_createcls();
    cls.$meta.primitive = true;
    cls.$meta.name = name;
    cls.$meta.binaryName = binaryName;
    cls.$meta.enum = false;
    cls.$meta.item = null;
    return cls;
}
var $rt_booleanclsCache = null;
function $rt_booleancls() {
    if ($rt_booleanclsCache === null) {
        $rt_booleanclsCache = $rt_createPrimitiveCls("boolean", "Z");
    }
    return $rt_booleanclsCache;
}
var $rt_charclsCache = null;
function $rt_charcls() {
    if ($rt_charclsCache === null) {
        $rt_charclsCache = $rt_createPrimitiveCls("char", "C");
    }
    return $rt_charclsCache;
}
var $rt_byteclsCache = null;
function $rt_bytecls() {
    if ($rt_byteclsCache === null) {
        $rt_byteclsCache = $rt_createPrimitiveCls("byte", "B");
    }
    return $rt_byteclsCache;
}
var $rt_shortclsCache = null;
function $rt_shortcls() {
    if ($rt_shortclsCache === null) {
        $rt_shortclsCache = $rt_createPrimitiveCls("short", "S");
    }
    return $rt_shortclsCache;
}
var $rt_intclsCache = null;
function $rt_intcls() {
    if ($rt_intclsCache === null) {
        $rt_intclsCache = $rt_createPrimitiveCls("int", "I");
    }
    return $rt_intclsCache;
}
var $rt_longclsCache = null;
function $rt_longcls() {
    if ($rt_longclsCache === null) {
        $rt_longclsCache = $rt_createPrimitiveCls("long", "J");
    }
    return $rt_longclsCache;
}
var $rt_floatclsCache = null;
function $rt_floatcls() {
    if ($rt_floatclsCache === null) {
        $rt_floatclsCache = $rt_createPrimitiveCls("float", "F");
    }
    return $rt_floatclsCache;
}
var $rt_doubleclsCache = null;
function $rt_doublecls() {
    if ($rt_doubleclsCache === null) {
        $rt_doubleclsCache = $rt_createPrimitiveCls("double", "D");
    }
    return $rt_doubleclsCache;
}
var $rt_voidclsCache = null;
function $rt_voidcls() {
    if ($rt_voidclsCache === null) {
        $rt_voidclsCache = $rt_createPrimitiveCls("void", "V");
    }
    return $rt_voidclsCache;
}
function $rt_throw(ex) {
    throw $rt_exception(ex);
}
function $rt_exception(ex) {
    var err = ex.$jsException;
    if (!err) {
        err = new Error("Java exception thrown");
        if (typeof Error.captureStackTrace === "function") {
            Error.captureStackTrace(err);
        }
        err.$javaException = ex;
        ex.$jsException = err;
        $rt_fillStack(err, ex);
    }
    return err;
}
function $rt_fillStack(err, ex) {
    if (typeof $rt_decodeStack === "function" && err.stack) {
        var stack = $rt_decodeStack(err.stack);
        var javaStack = $rt_createArray($rt_objcls(), stack.length);
        var elem;
        var noStack = false;
        for (var i = 0;i < stack.length;++i) {
            var element = stack[i];
            elem = $rt_createStackElement($rt_str(element.className), $rt_str(element.methodName), $rt_str(element.fileName), element.lineNumber);
            if (elem == null) {
                noStack = true;
                break;
            }
            javaStack.data[i] = elem;
        }
        if (!noStack) {
            $rt_setStack(ex, javaStack);
        }
    }
}
function $rt_createMultiArray(cls, dimensions) {
    var first = 0;
    for (var i = dimensions.length - 1;i >= 0;i = i - 1 | 0) {
        if (dimensions[i] === 0) {
            first = i;
            break;
        }
    }
    if (first > 0) {
        for (i = 0;i < first;i = i + 1 | 0) {
            cls = $rt_arraycls(cls);
        }
        if (first === dimensions.length - 1) {
            return $rt_createArray(cls, dimensions[first]);
        }
    }
    var arrays = new Array($rt_primitiveArrayCount(dimensions, first));
    var firstDim = dimensions[first] | 0;
    for (i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createArray(cls, firstDim);
    }
    return $rt_createMultiArrayImpl(cls, arrays, dimensions, first);
}
function $rt_createByteMultiArray(dimensions) {
    var arrays = new Array($rt_primitiveArrayCount(dimensions, 0));
    if (arrays.length === 0) {
        return $rt_createMultiArray($rt_bytecls(), dimensions);
    }
    var firstDim = dimensions[0] | 0;
    for (var i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createByteArray(firstDim);
    }
    return $rt_createMultiArrayImpl($rt_bytecls(), arrays, dimensions);
}
function $rt_createCharMultiArray(dimensions) {
    var arrays = new Array($rt_primitiveArrayCount(dimensions, 0));
    if (arrays.length === 0) {
        return $rt_createMultiArray($rt_charcls(), dimensions);
    }
    var firstDim = dimensions[0] | 0;
    for (var i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createCharArray(firstDim);
    }
    return $rt_createMultiArrayImpl($rt_charcls(), arrays, dimensions, 0);
}
function $rt_createBooleanMultiArray(dimensions) {
    var arrays = new Array($rt_primitiveArrayCount(dimensions, 0));
    if (arrays.length === 0) {
        return $rt_createMultiArray($rt_booleancls(), dimensions);
    }
    var firstDim = dimensions[0] | 0;
    for (var i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createBooleanArray(firstDim);
    }
    return $rt_createMultiArrayImpl($rt_booleancls(), arrays, dimensions, 0);
}
function $rt_createShortMultiArray(dimensions) {
    var arrays = new Array($rt_primitiveArrayCount(dimensions, 0));
    if (arrays.length === 0) {
        return $rt_createMultiArray($rt_shortcls(), dimensions);
    }
    var firstDim = dimensions[0] | 0;
    for (var i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createShortArray(firstDim);
    }
    return $rt_createMultiArrayImpl($rt_shortcls(), arrays, dimensions, 0);
}
function $rt_createIntMultiArray(dimensions) {
    var arrays = new Array($rt_primitiveArrayCount(dimensions, 0));
    if (arrays.length === 0) {
        return $rt_createMultiArray($rt_intcls(), dimensions);
    }
    var firstDim = dimensions[0] | 0;
    for (var i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createIntArray(firstDim);
    }
    return $rt_createMultiArrayImpl($rt_intcls(), arrays, dimensions, 0);
}
function $rt_createLongMultiArray(dimensions) {
    var arrays = new Array($rt_primitiveArrayCount(dimensions, 0));
    if (arrays.length === 0) {
        return $rt_createMultiArray($rt_longcls(), dimensions);
    }
    var firstDim = dimensions[0] | 0;
    for (var i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createLongArray(firstDim);
    }
    return $rt_createMultiArrayImpl($rt_longcls(), arrays, dimensions, 0);
}
function $rt_createFloatMultiArray(dimensions) {
    var arrays = new Array($rt_primitiveArrayCount(dimensions, 0));
    if (arrays.length === 0) {
        return $rt_createMultiArray($rt_floatcls(), dimensions);
    }
    var firstDim = dimensions[0] | 0;
    for (var i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createFloatArray(firstDim);
    }
    return $rt_createMultiArrayImpl($rt_floatcls(), arrays, dimensions, 0);
}
function $rt_createDoubleMultiArray(dimensions) {
    var arrays = new Array($rt_primitiveArrayCount(dimensions, 0));
    if (arrays.length === 0) {
        return $rt_createMultiArray($rt_doublecls(), dimensions);
    }
    var firstDim = dimensions[0] | 0;
    for (var i = 0;i < arrays.length;i = i + 1 | 0) {
        arrays[i] = $rt_createDoubleArray(firstDim);
    }
    return $rt_createMultiArrayImpl($rt_doublecls(), arrays, dimensions, 0);
}
function $rt_primitiveArrayCount(dimensions, start) {
    var val = dimensions[start + 1] | 0;
    for (var i = start + 2;i < dimensions.length;i = i + 1 | 0) {
        val = val * (dimensions[i] | 0) | 0;
        if (val === 0) {
            break;
        }
    }
    return val;
}
function $rt_createMultiArrayImpl(cls, arrays, dimensions, start) {
    var limit = arrays.length;
    for (var i = start + 1 | 0;i < dimensions.length;i = i + 1 | 0) {
        cls = $rt_arraycls(cls);
        var dim = dimensions[i];
        var index = 0;
        var packedIndex = 0;
        while (index < limit) {
            var arr = $rt_createUnfilledArray(cls, dim);
            for (var j = 0;j < dim;j = j + 1 | 0) {
                arr.data[j] = arrays[index];
                index = index + 1 | 0;
            }
            arrays[packedIndex] = arr;
            packedIndex = packedIndex + 1 | 0;
        }
        limit = packedIndex;
    }
    return arrays[0];
}
function $rt_assertNotNaN(value) {
    if (typeof value === 'number' && isNaN(value)) {
        throw "NaN";
    }
    return value;
}
var $rt_stdoutBuffer = "";
var $rt_putStdout = typeof $rt_putStdoutCustom === "function" ? $rt_putStdoutCustom : function(ch) {
    if (ch === 0xA) {
        if (console) {
            console.info($rt_stdoutBuffer);
        }
        $rt_stdoutBuffer = "";
    } else {
        $rt_stdoutBuffer += String.fromCharCode(ch);
    }
};
var $rt_stderrBuffer = "";
var $rt_putStderr = typeof $rt_putStderrCustom === "function" ? $rt_putStderrCustom : function(ch) {
    if (ch === 0xA) {
        if (console) {
            console.error($rt_stderrBuffer);
        }
        $rt_stderrBuffer = "";
    } else {
        $rt_stderrBuffer += String.fromCharCode(ch);
    }
};
var $rt_packageData = null;
function $rt_packages(data) {
    var i = 0;
    var packages = new Array(data.length);
    for (var j = 0;j < data.length;++j) {
        var prefixIndex = data[i++];
        var prefix = prefixIndex >= 0 ? packages[prefixIndex] : "";
        packages[j] = prefix + data[i++] + ".";
    }
    $rt_packageData = packages;
}
function $rt_metadata(data) {
    var packages = $rt_packageData;
    var i = 0;
    while (i < data.length) {
        var cls = data[i++];
        cls.$meta = {  };
        var m = cls.$meta;
        var className = data[i++];
        m.name = className !== 0 ? className : null;
        if (m.name !== null) {
            var packageIndex = data[i++];
            if (packageIndex >= 0) {
                m.name = packages[packageIndex] + m.name;
            }
        }
        m.binaryName = "L" + m.name + ";";
        var superclass = data[i++];
        m.superclass = superclass !== 0 ? superclass : null;
        m.supertypes = data[i++];
        if (m.superclass) {
            m.supertypes.push(m.superclass);
            cls.prototype = Object.create(m.superclass.prototype);
        } else {
            cls.prototype = {  };
        }
        var flags = data[i++];
        m.enum = (flags & 8) !== 0;
        m.flags = flags;
        m.primitive = false;
        m.item = null;
        cls.prototype.constructor = cls;
        cls.classObject = null;
        m.accessLevel = data[i++];
        var clinit = data[i++];
        cls.$clinit = clinit !== 0 ? clinit : function() {
        };
        var virtualMethods = data[i++];
        if (virtualMethods !== 0) {
            for (var j = 0;j < virtualMethods.length;j += 2) {
                var name = virtualMethods[j];
                var func = virtualMethods[j + 1];
                if (typeof name === 'string') {
                    name = [name];
                }
                for (var k = 0;k < name.length;++k) {
                    cls.prototype[name[k]] = func;
                }
            }
        }
        cls.$array = null;
    }
}
function $rt_threadStarter(f) {
    return function() {
        var args = Array.prototype.slice.apply(arguments);
        $rt_startThread(function() {
            f.apply(this, args);
        });
    };
}
function $rt_mainStarter(f) {
    return function(args, callback) {
        if (!args) {
            args = [];
        }
        var javaArgs = $rt_createArray($rt_objcls(), args.length);
        for (var i = 0;i < args.length;++i) {
            javaArgs.data[i] = $rt_str(args[i]);
        }
        $rt_startThread(function() {
            f.call(null, javaArgs);
        }, callback);
    };
}
var $rt_stringPool_instance;
function $rt_stringPool(strings) {
    $rt_stringPool_instance = new Array(strings.length);
    for (var i = 0;i < strings.length;++i) {
        $rt_stringPool_instance[i] = $rt_intern($rt_str(strings[i]));
    }
}
function $rt_s(index) {
    return $rt_stringPool_instance[index];
}
function $rt_eraseClinit(target) {
    return target.$clinit = function() {
    };
}
var $rt_numberConversionView = new DataView(new ArrayBuffer(8));
function $rt_doubleToLongBits(n) {
    $rt_numberConversionView.setFloat64(0, n, true);
    return new Long($rt_numberConversionView.getInt32(0, true), $rt_numberConversionView.getInt32(4, true));
}
function $rt_longBitsToDouble(n) {
    $rt_numberConversionView.setInt32(0, n.lo, true);
    $rt_numberConversionView.setInt32(4, n.hi, true);
    return $rt_numberConversionView.getFloat64(0, true);
}
function $rt_floatToIntBits(n) {
    $rt_numberConversionView.setFloat32(0, n);
    return $rt_numberConversionView.getInt32(0);
}
function $rt_intBitsToFloat(n) {
    $rt_numberConversionView.setInt32(0, n);
    return $rt_numberConversionView.getFloat32(0);
}
function $rt_javaException(e) {
    return e instanceof Error && typeof e.$javaException === 'object' ? e.$javaException : null;
}
function $rt_jsException(e) {
    return typeof e.$jsException === 'object' ? e.$jsException : null;
}
function $rt_wrapException(err) {
    var ex = err.$javaException;
    if (!ex) {
        ex = $rt_createException($rt_str("(JavaScript) " + err.toString()));
        err.$javaException = ex;
        ex.$jsException = err;
        $rt_fillStack(err, ex);
    }
    return ex;
}
function $dbg_class(obj) {
    var cls = obj.constructor;
    var arrayDegree = 0;
    while (cls.$meta && cls.$meta.item) {
        ++arrayDegree;
        cls = cls.$meta.item;
    }
    var clsName = "";
    if (cls === $rt_booleancls()) {
        clsName = "boolean";
    } else if (cls === $rt_bytecls()) {
        clsName = "byte";
    } else if (cls === $rt_shortcls()) {
        clsName = "short";
    } else if (cls === $rt_charcls()) {
        clsName = "char";
    } else if (cls === $rt_intcls()) {
        clsName = "int";
    } else if (cls === $rt_longcls()) {
        clsName = "long";
    } else if (cls === $rt_floatcls()) {
        clsName = "float";
    } else if (cls === $rt_doublecls()) {
        clsName = "double";
    } else {
        clsName = cls.$meta ? cls.$meta.name || "a/" + cls.name : "@" + cls.name;
    }
    while (arrayDegree-- > 0) {
        clsName += "[]";
    }
    return clsName;
}
function Long(lo, hi) {
    this.lo = lo | 0;
    this.hi = hi | 0;
}
Long.prototype.__teavm_class__ = function() {
    return "long";
};
Long.prototype.toString = function() {
    var result = [];
    var n = this;
    var positive = Long_isPositive(n);
    if (!positive) {
        n = Long_neg(n);
    }
    var radix = new Long(10, 0);
    do  {
        var divRem = Long_divRem(n, radix);
        result.push(String.fromCharCode(48 + divRem[1].lo));
        n = divRem[0];
    }while (n.lo !== 0 || n.hi !== 0);
    result = (result.reverse()).join('');
    return positive ? result : "-" + result;
};
Long.prototype.valueOf = function() {
    return Long_toNumber(this);
};
var Long_ZERO = new Long(0, 0);
var Long_MAX_NORMAL = 1 << 18;
function Long_fromInt(val) {
    return val >= 0 ? new Long(val, 0) : new Long(val,  -1);
}
function Long_fromNumber(val) {
    if (val >= 0) {
        return new Long(val | 0, val / 0x100000000 | 0);
    } else {
        return Long_neg(new Long( -val | 0,  -val / 0x100000000 | 0));
    }
}
function Long_toNumber(val) {
    var lo = val.lo;
    var hi = val.hi;
    if (lo < 0) {
        lo += 0x100000000;
    }
    return 0x100000000 * hi + lo;
}
var $rt_imul = Math.imul || function(a, b) {
    var ah = a >>> 16 & 0xFFFF;
    var al = a & 0xFFFF;
    var bh = b >>> 16 & 0xFFFF;
    var bl = b & 0xFFFF;
    return al * bl + (ah * bl + al * bh << 16 >>> 0) | 0;
};
var $rt_udiv = function(a, b) {
    if (a < 0) {
        a += 0x100000000;
    }
    if (b < 0) {
        b += 0x100000000;
    }
    return a / b | 0;
};
var $rt_umod = function(a, b) {
    if (a < 0) {
        a += 0x100000000;
    }
    if (b < 0) {
        b += 0x100000000;
    }
    return a % b | 0;
};
function $rt_setCloneMethod(target, f) {
    target.$clone = f;
}
function $rt_cls(cls) {
    return jl_Class_getClass(cls);
}
function $rt_str(str) {
    if (str === null) {
        return null;
    }
    var characters = $rt_createCharArray(str.length);
    var charsBuffer = characters.data;
    for (var i = 0; i < str.length; i = (i + 1) | 0) {
        charsBuffer[i] = str.charCodeAt(i) & 0xFFFF;
    }
    return jl_String__init_(characters);
}
function $rt_ustr(str) {
    if (str === null) {
        return null;
    }
    var data = str.$characters.data;
    var result = "";
    for (var i = 0; i < data.length; i = (i + 1) | 0) {
        result += String.fromCharCode(data[i]);
    }
    return result;
}
function $rt_objcls() { return jl_Object; }
function $rt_nullCheck(val) {
    if (val === null) {
        $rt_throw(jl_NullPointerException__init_());
    }
    return val;
}
function $rt_intern(str) {
    return str;
}
function $rt_getThread() {
    return jl_Thread_currentThread();
}
function $rt_setThread(t) {
    return jl_Thread_setCurrentThread(t);
}
function $rt_createException(message) {
    return jl_RuntimeException__init_(message);
}
function $rt_createStackElement(className, methodName, fileName, lineNumber) {
    return null;
}
function $rt_setStack(e, stack) {
}
var $java = Object.create(null);
function jl_Object() {
    this.$monitor = null;
    this.$id$ = 0;
}
function jl_Object_monitorEnterSync($o) {
    var var$2;
    if ($o.$monitor === null)
        jl_Object_createMonitor($o);
    if ($o.$monitor.$owner === null)
        $o.$monitor.$owner = jl_Thread_currentThread0;
    else if ($o.$monitor.$owner !== jl_Thread_currentThread0) {
        var$2 = new jl_IllegalStateException;
        jl_Throwable__init_(var$2, $rt_s(0));
        $rt_throw(var$2);
    }
    $o = $o.$monitor;
    $o.$count = $o.$count + 1 | 0;
}
function jl_Object_monitorExitSync($o) {
    var var$2, var$3;
    if (!jl_Object_isEmptyMonitor($o) && $o.$monitor.$owner === jl_Thread_currentThread0) {
        var$2 = $o.$monitor;
        var$3 = var$2.$count - 1 | 0;
        var$2.$count = var$3;
        if (!var$3)
            $o.$monitor.$owner = null;
        jl_Object_isEmptyMonitor($o);
        return;
    }
    $o = new jl_IllegalMonitorStateException;
    jl_Throwable__init_0($o);
    $rt_throw($o);
}
function jl_Object_monitorEnter($o) {
    if ($o.$monitor === null)
        jl_Object_createMonitor($o);
    if ($o.$monitor.$owner === null)
        $o.$monitor.$owner = jl_Thread_currentThread0;
    if ($o.$monitor.$owner !== jl_Thread_currentThread0)
        jl_Object_monitorEnterWait($o, 1);
    else {
        $o = $o.$monitor;
        $o.$count = $o.$count + 1 | 0;
    }
}
function jl_Object_createMonitor($o) {
    var var$2;
    var$2 = new jl_Object$Monitor;
    var$2.$owner = jl_Thread_currentThread0;
    $o.$monitor = var$2;
}
function jl_Object_monitorEnterWait(var$1, var$2) {
    var thread = $rt_nativeThread();
    var javaThread = $rt_getThread();
    if (thread.isResuming()) {
        thread.status = 0;
        var result = thread.attribute;
        if (result instanceof Error) {
            throw result;
        }
        return result;
    }
    var callback = function() {};
    callback.$complete = function(val) {
        thread.attribute = val;
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback.$error = function(e) {
        thread.attribute = $rt_exception(e);
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback = otpp_AsyncCallbackWrapper_create(callback);
    return thread.suspend(function() {
        try {
            jl_Object_monitorEnterWait0(var$1, var$2, callback);
        } catch($e) {
            callback.$error($rt_exception($e));
        }
    });
}
function jl_Object_monitorEnterWait0($o, $count, $callback) {
    var $thread_0, $monitor, var$6;
    $thread_0 = jl_Thread_currentThread0;
    if ($o.$monitor === null) {
        jl_Object_createMonitor($o);
        jl_Thread_setCurrentThread($thread_0);
        $o = $o.$monitor;
        $o.$count = $o.$count + $count | 0;
        otpp_AsyncCallbackWrapper_complete($callback, null);
        return;
    }
    if ($o.$monitor.$owner === null) {
        $o.$monitor.$owner = $thread_0;
        jl_Thread_setCurrentThread($thread_0);
        $o = $o.$monitor;
        $o.$count = $o.$count + $count | 0;
        otpp_AsyncCallbackWrapper_complete($callback, null);
        return;
    }
    $monitor = $o.$monitor;
    if ($monitor.$enteringThreads === null)
        $monitor.$enteringThreads = otp_Platform_createQueueJs$js_body$_30();
    $monitor = $monitor.$enteringThreads;
    var$6 = new jl_Object$monitorEnterWait$lambda$_6_0;
    var$6.$_0 = $thread_0;
    var$6.$_1 = $o;
    var$6.$_2 = $count;
    var$6.$_3 = $callback;
    $callback = var$6;
    $monitor.push($callback);
}
function jl_Object_monitorExit($o) {
    var var$2;
    if (!jl_Object_isEmptyMonitor($o) && $o.$monitor.$owner === jl_Thread_currentThread0) {
        var$2 = $o.$monitor;
        var$2.$count = var$2.$count - 1 | 0;
        if (var$2.$count <= 0) {
            var$2.$owner = null;
            if (var$2.$enteringThreads !== null && !otp_PlatformQueue_isEmpty$static(var$2.$enteringThreads)) {
                var$2 = new jl_Object$monitorExit$lambda$_8_0;
                var$2.$_00 = $o;
                otp_Platform_schedule(var$2, 0);
            } else
                jl_Object_isEmptyMonitor($o);
        }
        return;
    }
    $o = new jl_IllegalMonitorStateException;
    jl_Throwable__init_0($o);
    $rt_throw($o);
}
function jl_Object_isEmptyMonitor($this) {
    var $monitor;
    $monitor = $this.$monitor;
    if ($monitor === null)
        return 1;
    a: {
        if ($monitor.$owner === null && !($monitor.$enteringThreads !== null && !otp_PlatformQueue_isEmpty$static($monitor.$enteringThreads))) {
            if ($monitor.$notifyListeners === null)
                break a;
            if (otp_PlatformQueue_isEmpty$static($monitor.$notifyListeners))
                break a;
        }
        return 0;
    }
    $this.$monitor = null;
    return 1;
}
function jl_Object_getClass($this) {
    return jl_Class_getClass($this.constructor);
}
function jl_Object_hashCode($this) {
    return jl_Object_identity($this);
}
function jl_Object_equals($this, $other) {
    return $this !== $other ? 0 : 1;
}
function jl_Object_toString($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, jl_Class_getName(jl_Object_getClass($this)));
    jl_AbstractStringBuilder_append(var$1, $rt_s(1));
    jl_AbstractStringBuilder_append(var$1, jl_Integer_toHexString(jl_Object_identity($this)));
    return jl_AbstractStringBuilder_toString(var$1);
}
function jl_Object_identity($this) {
    var $platformThis, var$2;
    $platformThis = $this;
    if (!$platformThis.$id$) {
        var$2 = $rt_nextId();
        $platformThis.$id$ = var$2;
    }
    return $this.$id$;
}
function jl_Object_clone($this) {
    var $result, var$2, var$3;
    if (!$rt_isInstance($this, jl_Cloneable) && $this.constructor.$meta.item === null) {
        $result = new jl_CloneNotSupportedException;
        jl_Throwable__init_0($result);
        $rt_throw($result);
    }
    $result = otp_Platform_clone($this);
    var$2 = $result;
    var$3 = $rt_nextId();
    var$2.$id$ = var$3;
    return $result;
}
function oe_Client() {
    jl_Object.call(this);
}
var oe_Client_$assertionsDisabled = 0;
function oe_Client_checkValue($v1, $v2, $msg) {
    var var$4, var$5;
    if (!oe_Client_$assertionsDisabled && jl_Math_abs($v2 - $v1) >= 0.011) {
        var$4 = new jl_AssertionError;
        var$5 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$5);
        jl_AbstractStringBuilder_append(var$5, $msg);
        jl_AbstractStringBuilder_append(var$5, $rt_s(2));
        $msg = jl_StringBuilder_append(var$5, $v1);
        jl_AbstractStringBuilder_append($msg, $rt_s(3));
        jl_AssertionError__init_(var$4, jl_AbstractStringBuilder_toString(jl_StringBuilder_append($msg, $v2)));
        $rt_throw(var$4);
    }
}
function oe_Client_checkValue0($v1, $v2, $msg) {
    var var$4, var$5, var$6;
    if (!oe_Client_$assertionsDisabled) {
        var$4 = $v2 - $v1;
        if (var$4 <= 0.0)
            var$4 =  -var$4;
        if (var$4 >= 0.011) {
            var$5 = new jl_AssertionError;
            var$6 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$6);
            jl_AbstractStringBuilder_append(var$6, $msg);
            jl_AbstractStringBuilder_append(var$6, $rt_s(2));
            $msg = jl_StringBuilder_append0(var$6, $v1);
            jl_AbstractStringBuilder_append($msg, $rt_s(3));
            jl_AssertionError__init_(var$5, jl_AbstractStringBuilder_toString(jl_StringBuilder_append0($msg, $v2)));
            $rt_throw(var$5);
        }
    }
}
function oe_Client_testTextElements() {
    var $doc, $e, var$3, $pos, $text, $i, $elem, $$je, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();$elem = $thread.pop();$i = $thread.pop();$text = $thread.pop();$pos = $thread.pop();var$3 = $thread.pop();$e = $thread.pop();$doc = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        $doc = oe_Client_getDocument$js_body$_1();
        a: {
            try {
                $e = tt_TextStripper__init_($doc, 1);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
            return;
        }
        try {
            $ptr = 1;
            continue main;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof ji_IOException) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace();
        return;
    case 1:
        a: {
            try {
                tt_TextStripper_process($e);
                if ($rt_suspending()) {
                    break main;
                }
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
            return;
        }
        var$3 = $rt_createArray($rt_arraycls($rt_floatcls()), 24).data;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 290.20001220703125;
        $text[1] = 61.720001220703125;
        $text[2] = 6.659999847412109;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[0] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 296.79998779296875;
        $text[1] = 61.720001220703125;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[1] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 302.3900146484375;
        $text[1] = 61.720001220703125;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[2] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 307.9800109863281;
        $text[1] = 61.720001220703125;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[3] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 313.4800109863281;
        $text[1] = 61.720001220703125;
        $text[2] = 2.7699999809265137;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[4] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 316.2699890136719;
        $text[1] = 61.720001220703125;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[5] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 290.20001220703125;
        $text[1] = 726.1199951171875;
        $text[2] = 6.659999847412109;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[6] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 296.79998779296875;
        $text[1] = 726.1199951171875;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[7] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 302.3900146484375;
        $text[1] = 726.1199951171875;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[8] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 307.9800109863281;
        $text[1] = 726.1199951171875;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[9] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 313.4800109863281;
        $text[1] = 726.1199951171875;
        $text[2] = 2.7699999809265137;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[10] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 316.29998779296875;
        $text[1] = 726.1199951171875;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7699999809265137;
        $text[6] = 0.0;
        var$3[11] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 57.709999084472656;
        $text[1] = 82.01000213623047;
        $text[2] = 6.659999847412109;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[12] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 121.69000244140625;
        $text[1] = 82.01000213623047;
        $text[2] = 6.659999847412109;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[13] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 185.61000061035156;
        $text[1] = 82.01000213623047;
        $text[2] = 7.21999979019165;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[14] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 114.01000213623047;
        $text[1] = 94.81999969482422;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[15] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 177.99000549316406;
        $text[1] = 94.81999969482422;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[16] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 241.99000549316406;
        $text[1] = 94.81999969482422;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[17] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 114.01000213623047;
        $text[1] = 107.5999984741211;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[18] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 172.39999389648438;
        $text[1] = 107.5999984741211;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[19] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 178.0;
        $text[1] = 107.5999984741211;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[20] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 230.8000030517578;
        $text[1] = 107.5999984741211;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[21] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 236.38999938964844;
        $text[1] = 107.5999984741211;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[22] = $pos;
        $pos = $rt_createFloatArray(7);
        $text = $pos.data;
        $text[0] = 241.97999572753906;
        $text[1] = 107.5999984741211;
        $text[2] = 5.559999942779541;
        $text[3] = 5.579999923706055;
        $text[4] = 10.0;
        $text[5] = 2.7716619968414307;
        $text[6] = 0.0;
        var$3[23] = $pos;
        $pos = $rt_createArray(jl_String, 24).data;
        $pos[0] = $rt_s(4);
        $pos[1] = $rt_s(5);
        $pos[2] = $rt_s(6);
        $pos[3] = $rt_s(6);
        $pos[4] = $rt_s(7);
        $pos[5] = $rt_s(8);
        $pos[6] = $rt_s(9);
        $pos[7] = $rt_s(10);
        $pos[8] = $rt_s(11);
        $pos[9] = $rt_s(6);
        $pos[10] = $rt_s(12);
        $pos[11] = $rt_s(8);
        $pos[12] = $rt_s(13);
        $pos[13] = $rt_s(14);
        $pos[14] = $rt_s(15);
        $pos[15] = $rt_s(8);
        $pos[16] = $rt_s(16);
        $pos[17] = $rt_s(17);
        $pos[18] = $rt_s(8);
        $pos[19] = $rt_s(16);
        $pos[20] = $rt_s(16);
        $pos[21] = $rt_s(17);
        $pos[22] = $rt_s(17);
        $pos[23] = $rt_s(17);
        if (!oe_Client_$assertionsDisabled && $pos.length != var$3.length)
            $rt_throw(jl_AssertionError__init_0($rt_s(18)));
        if (!oe_Client_$assertionsDisabled && ju_ArrayList_size($e.$textElements) != var$3.length)
            $rt_throw(jl_AssertionError__init_0($rt_s(19)));
        $i = 0;
        while ($i < var$3.length) {
            $elem = ju_ArrayList_get($e.$textElements, $i);
            oe_Client_checkValue(cjag_Rectangle2D$Float_getX($elem), var$3[$i].data[0], jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(20)), $i), $rt_s(21))));
            oe_Client_checkValue(cjag_Rectangle2D$Float_getY($elem), var$3[$i].data[1], jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(20)), $i), $rt_s(22))));
            oe_Client_checkValue(cjag_Rectangle2D$Float_getWidth($elem), var$3[$i].data[2], jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(20)), $i), $rt_s(23))));
            oe_Client_checkValue(cjag_Rectangle2D$Float_getHeight($elem), var$3[$i].data[3], jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(20)), $i), $rt_s(24))));
            oe_Client_checkValue0(tt_TextElement_getFontSize($elem), var$3[$i].data[4], jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(20)), $i), $rt_s(25))));
            oe_Client_checkValue0(tt_TextElement_getWidthOfSpace($elem), var$3[$i].data[5], jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(20)), $i), $rt_s(26))));
            oe_Client_checkValue0(tt_TextElement_getDirection($elem), var$3[$i].data[6], jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(20)), $i), $rt_s(27))));
            $i = $i + 1 | 0;
        }
        oe_Client_signalDone$js_body$_2();
        return;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($doc, $e, var$3, $pos, $text, $i, $elem, $ptr);
}
function oe_Client_extractTable($arg) {
    var $percentSplit, $areaStr, $pageNumStr, $extrStr, $pageNum, $top, $left, $bottom, $right, $doc, var$12, $page, $extractor, $p, $pa, $tables, $sw, $e, $$je, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();$e = $thread.pop();$sw = $thread.pop();$tables = $thread.pop();$pa = $thread.pop();$p = $thread.pop();$extractor = $thread.pop();$page = $thread.pop();var$12 = $thread.pop();$doc = $thread.pop();$right = $thread.pop();$bottom = $thread.pop();$left = $thread.pop();$top = $thread.pop();$pageNum = $thread.pop();$extrStr = $thread.pop();$pageNumStr = $thread.pop();$areaStr = $thread.pop();$percentSplit = $thread.pop();$arg = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        $percentSplit = jl_String_split($arg, $rt_s(28)).data;
        if ($percentSplit.length != 4) {
            $areaStr = jl_System_err();
            $pageNumStr = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($pageNumStr);
            jl_AbstractStringBuilder_append($pageNumStr, $rt_s(29));
            jl_AbstractStringBuilder_append($pageNumStr, $arg);
            ji_PrintStream_println($areaStr, jl_AbstractStringBuilder_toString($pageNumStr));
            return;
        }
        $areaStr = $percentSplit[1];
        $pageNumStr = $percentSplit[2];
        $extrStr = $percentSplit[3];
        $pageNum = jl_Integer_valueOf(jl_Integer_parseInt($pageNumStr));
        $arg = jl_System_out();
        $top = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($top);
        jl_AbstractStringBuilder_append($top, $rt_s(30));
        jl_AbstractStringBuilder_append($top, $areaStr);
        ji_PrintStream_println($arg, jl_AbstractStringBuilder_toString($top));
        $arg = jl_System_out();
        $top = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($top);
        jl_AbstractStringBuilder_append($top, $rt_s(31));
        jl_AbstractStringBuilder_append($top, $pageNumStr);
        ji_PrintStream_println($arg, jl_AbstractStringBuilder_toString($top));
        $percentSplit = jl_String_split($areaStr, $rt_s(32)).data;
        $top = jl_Float_valueOf(jl_Float_parseFloat($percentSplit[0]));
        $left = jl_Float_valueOf(jl_Float_parseFloat($percentSplit[1]));
        $bottom = jl_Float_valueOf(jl_Float_parseFloat($percentSplit[2]));
        $right = jl_Float_valueOf(jl_Float_parseFloat($percentSplit[3]));
        $arg = jl_System_out();
        $areaStr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($areaStr);
        jl_AbstractStringBuilder_append($areaStr, $rt_s(33));
        ji_PrintStream_println($arg, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3($areaStr, $pageNum)));
        $arg = jl_System_out();
        $areaStr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($areaStr);
        jl_AbstractStringBuilder_append($areaStr, $rt_s(34));
        ji_PrintStream_println($arg, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3($areaStr, $top)));
        $arg = jl_System_out();
        $areaStr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($areaStr);
        jl_AbstractStringBuilder_append($areaStr, $rt_s(35));
        ji_PrintStream_println($arg, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3($areaStr, $left)));
        $arg = jl_System_out();
        $areaStr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($areaStr);
        jl_AbstractStringBuilder_append($areaStr, $rt_s(36));
        ji_PrintStream_println($arg, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3($areaStr, $bottom)));
        $arg = jl_System_out();
        $areaStr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($areaStr);
        jl_AbstractStringBuilder_append($areaStr, $rt_s(37));
        ji_PrintStream_println($arg, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3($areaStr, $right)));
        $doc = oe_Client_getDocument$js_body$_1();
        if (!($pageNum.$value <= $doc.getNumberOfPages() && $pageNum.$value >= 1)) {
            $arg = jl_System_err();
            $areaStr = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($areaStr);
            jl_AbstractStringBuilder_append($areaStr, $rt_s(38));
            ji_PrintStream_println($arg, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3($areaStr, $pageNum)));
        }
        var$12 = $pageNum.$value - 1 | 0;
        $ptr = 1;
    case 1:
        $tmp = p_PDDocument_getPage$static($doc, var$12);
        if ($rt_suspending()) {
            break main;
        }
        $page = $tmp;
        $extractor = new tt_ObjectExtractor;
        $extractor.$pdfDocument = $doc;
        var$12 = $pageNum.$value;
        $ptr = 2;
    case 2:
        $tmp = tt_ObjectExtractor_extract($extractor, var$12);
        if ($rt_suspending()) {
            break main;
        }
        $p = $tmp;
        $areaStr = jl_System_out();
        $pageNumStr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($pageNumStr);
        jl_AbstractStringBuilder_append($pageNumStr, $rt_s(39));
        ji_PrintStream_println($areaStr, jl_AbstractStringBuilder_toString(jl_StringBuilder_append2($pageNumStr, $page.getHeight())));
        $areaStr = jl_System_out();
        $pageNumStr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($pageNumStr);
        jl_AbstractStringBuilder_append($pageNumStr, $rt_s(40));
        ji_PrintStream_println($areaStr, jl_AbstractStringBuilder_toString(jl_StringBuilder_append2($pageNumStr, $page.getWidth())));
        $pageNumStr = jl_System_out();
        $arg = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($arg);
        ji_PrintStream_println($pageNumStr, jl_StringBuilder_toString(jl_StringBuilder_append0(jl_StringBuilder_append1($arg, $rt_s(34)), jl_Float_floatValue($top) / 100.0 * $page.getHeight())));
        $pa = tt_Page_getArea($p, tt_Rectangle__init_(jl_Float_floatValue($top) / 100.0 * $page.getHeight(), jl_Float_floatValue($left) / 100.0 * $page.getWidth(), (jl_Float_floatValue($right) - jl_Float_floatValue($left)) / 100.0 * $page.getWidth(), (jl_Float_floatValue($bottom) - jl_Float_floatValue($top)) / 100.0 * $page.getHeight()));
        ji_PrintStream_println(jl_System_out(), $rt_s(41));
        $tables = ju_ArrayList__init_();
        if (!jl_String_equals($extrStr, $rt_s(42)))
            ju_AbstractCollection_addAll($tables, tte_BasicExtractionAlgorithm_extract(tte_BasicExtractionAlgorithm__init_(), $pa));
        else
            ju_AbstractCollection_addAll($tables, tte_SpreadsheetExtractionAlgorithm_extract(tte_SpreadsheetExtractionAlgorithm__init_(), $pa));
        $sw = ji_StringWriter__init_();
        a: {
            try {
                ttw_CSVWriter_write(ttw_CSVWriter__init_(), $sw, $tables);
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
        }
        oe_Client_saveResult$js_body$_3($rt_ustr(ji_StringWriter_toString($sw)));
        ji_PrintStream_println(jl_System_out(), $rt_s(43));
        oe_Client_signalDone$js_body$_2();
        return;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($arg, $percentSplit, $areaStr, $pageNumStr, $extrStr, $pageNum, $top, $left, $bottom, $right, $doc, var$12, $page, $extractor, $p, $pa, $tables, $sw, $e, $ptr);
}
function oe_Client_main($args) {
    var var$2, $arg, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, $$je, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();var$12 = $thread.pop();var$11 = $thread.pop();var$10 = $thread.pop();var$9 = $thread.pop();var$8 = $thread.pop();var$7 = $thread.pop();var$6 = $thread.pop();var$5 = $thread.pop();var$4 = $thread.pop();$arg = $thread.pop();var$2 = $thread.pop();$args = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        oe_Client__clinit_();
        jl_String__clinit_();
        jl_Integer__clinit_();
        jl_Float__clinit_();
        tt_Rectangle__clinit_();
        tte_SpreadsheetExtractionAlgorithm__clinit_();
        jl_Character__clinit_();
        cjag_Path2D__clinit_();
        cjag_AffineTransform__clinit_();
        oacc_Constants__clinit_();
        ju_Locale__clinit_();
        jl_Boolean__clinit_();
        jl_Long__clinit_();
        jt_DecimalFormat__clinit_();
        jm_RoundingMode__clinit_();
        jl_Double__clinit_();
        jl_AbstractStringBuilder$Constants__clinit_();
        otcit_FloatAnalyzer__clinit_();
        jl_Byte__clinit_();
        tt_TextChunk$DirectionalityOptions__clinit_();
        cjt_Normalizer$Form__clinit_();
        ju_Collections__clinit_();
        cjl_Character__clinit_();
        ju_Hashtable__clinit_();
        jl_Thread__clinit_();
        jur_AbstractSet__clinit_();
        jur_AbstractCharClass$PredefinedCharacterClasses__clinit_();
        jur_AbstractCharClass__clinit_();
        jur_FSet__clinit_();
        tt_Utils__clinit_();
        jm_BigInteger__clinit_();
        otcit_DoubleAnalyzer__clinit_();
        jm_Conversion__clinit_();
        oljis_STRtree__clinit_();
        tt_Ruling__clinit_();
        tt_Ruling$SOType__clinit_();
        oacc_QuoteMode__clinit_();
        tt_Line__clinit_();
        jnc_CodingErrorAction__clinit_();
        jnc_CoderResult__clinit_();
        jn_ByteOrder__clinit_();
        cjag_Path2D$Iterator__clinit_();
        tte_SpreadsheetExtractionAlgorithm$Direction__clinit_();
        tt_QuickSort__clinit_();
        ju_Vector__clinit_();
        cjag_Area__clinit_();
        csag_AreaOp__clinit_();
        jl_Short__clinit_();
        $args = $args.data;
        var$2 = $args.length;
        if (!var$2)
            $arg = $rt_s(44);
        else {
            var$4 = 0;
            var$5 = 0;
            while (var$5 < var$2) {
                var$4 = var$4 + jl_String_length($args[var$5]) | 0;
                var$5 = var$5 + 1 | 0;
            }
            var$6 = $rt_createCharArray(var$4 + $rt_imul(var$2, jl_String_length($rt_s(44))) | 0);
            var$7 = var$6.data;
            var$4 = 0;
            var$8 = $args[0];
            var$5 = 0;
            while (var$5 < jl_String_length(var$8)) {
                var$9 = var$4 + 1 | 0;
                var$7[var$4] = jl_String_charAt(var$8, var$5);
                var$5 = var$5 + 1 | 0;
                var$4 = var$9;
            }
            var$5 = 1;
            while (var$5 < var$2) {
                var$9 = 0;
                while (var$9 < jl_String_length($rt_s(44))) {
                    var$10 = var$4 + 1 | 0;
                    var$7[var$4] = jl_String_charAt($rt_s(44), var$9);
                    var$9 = var$9 + 1 | 0;
                    var$4 = var$10;
                }
                var$8 = $args[var$5];
                var$9 = 0;
                while (var$9 < jl_String_length(var$8)) {
                    var$10 = var$4 + 1 | 0;
                    var$7[var$4] = jl_String_charAt(var$8, var$9);
                    var$9 = var$9 + 1 | 0;
                    var$4 = var$10;
                }
                var$5 = var$5 + 1 | 0;
            }
            $arg = jl_String__init_(var$6);
        }
        if (jl_String_equals($arg, $rt_s(45))) {
            var$8 = oe_Client_getDocument$js_body$_1();
            var$2 = 0;
            $ptr = 1;
            continue main;
        }
        if (jl_String_equals($arg, $rt_s(46)))
            oe_Client_signalDone$js_body$_2();
        if (jl_String_equals($arg, $rt_s(47)))
            oe_Client_signalDone$js_body$_2();
        if (jl_String_equals($arg, $rt_s(48))) {
            var$8 = oe_Client_getDocument$js_body$_1();
            var$2 = 0;
            $ptr = 2;
            continue main;
        }
        if (jl_String_equals($arg, $rt_s(49))) {
            $ptr = 3;
            continue main;
        }
        if (!jl_String_startsWith($arg, $rt_s(28)))
            return;
        $ptr = 5;
        continue main;
    case 1:
        $tmp = p_PDDocument_getPage$static(var$8, var$2);
        if ($rt_suspending()) {
            break main;
        }
        var$8 = $tmp;
        var$8.getCropBox();
        oe_Client_signalDone$js_body$_2();
        if (jl_String_equals($arg, $rt_s(46)))
            oe_Client_signalDone$js_body$_2();
        if (jl_String_equals($arg, $rt_s(47)))
            oe_Client_signalDone$js_body$_2();
        if (jl_String_equals($arg, $rt_s(48))) {
            var$8 = oe_Client_getDocument$js_body$_1();
            var$2 = 0;
            $ptr = 2;
            continue main;
        }
        if (jl_String_equals($arg, $rt_s(49))) {
            $ptr = 3;
            continue main;
        }
        if (!jl_String_startsWith($arg, $rt_s(28)))
            return;
        $ptr = 5;
        continue main;
    case 2:
        $tmp = p_PDDocument_getPage$static(var$8, var$2);
        if ($rt_suspending()) {
            break main;
        }
        var$8 = $tmp;
        var$11 = tt_ObjectExtractorStreamEngine__init_(var$8);
        try {
            $ptr = 4;
            continue main;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof ji_IOException) {
                var$8 = $$je;
            } else {
                throw $$e;
            }
        }
        var$8.$printStackTrace();
        var$8 = new jl_StringBuilder;
        var$8.$buffer = $rt_createCharArray(jl_String_length($rt_s(50)));
        var$2 = 0;
        while (var$2 < var$8.$buffer.data.length) {
            var$8.$buffer.data[var$2] = jl_String_charAt($rt_s(50), var$2);
            var$2 = var$2 + 1 | 0;
        }
        var$8.$length0 = jl_String_length($rt_s(50));
        var$11 = ju_AbstractList_iterator(var$11.$rulings);
        while (ju_AbstractList$1_hasNext(var$11)) {
            var$12 = ju_AbstractList$1_next(var$11);
            jl_AbstractStringBuilder_append(var$8, $rt_s(51));
            jl_StringBuilder_append(var$8, cjag_Line2D$Float_getX1(var$12));
            jl_AbstractStringBuilder_append(var$8, $rt_s(52));
            jl_StringBuilder_append(var$8, cjag_Line2D$Float_getY1(var$12));
            jl_AbstractStringBuilder_append(var$8, $rt_s(53));
            jl_StringBuilder_append(var$8, cjag_Line2D$Float_getX2(var$12));
            jl_AbstractStringBuilder_append(var$8, $rt_s(54));
            jl_StringBuilder_append(var$8, cjag_Line2D$Float_getY2(var$12));
            jl_AbstractStringBuilder_append(var$8, $rt_s(55));
        }
        jl_StringBuilder_deleteCharAt(var$8, jl_StringBuilder_length(var$8) - 1 | 0);
        jl_AbstractStringBuilder_append(var$8, $rt_s(56));
        oe_Client_saveResult$js_body$_3($rt_ustr(jl_AbstractStringBuilder_toString(var$8)));
        oe_Client_signalDone$js_body$_2();
        if (jl_String_equals($arg, $rt_s(49))) {
            $ptr = 3;
            continue main;
        }
        if (!jl_String_startsWith($arg, $rt_s(28)))
            return;
        $ptr = 5;
        continue main;
    case 3:
        oe_Client_testTextElements();
        if ($rt_suspending()) {
            break main;
        }
        if (!jl_String_startsWith($arg, $rt_s(28)))
            return;
        $ptr = 5;
        continue main;
    case 4:
        a: {
            try {
                p_PDFGraphicsStreamEngine_processPage(var$11, var$8);
                if ($rt_suspending()) {
                    break main;
                }
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    var$8 = $$je;
                } else {
                    throw $$e;
                }
            }
            var$8.$printStackTrace();
        }
        var$8 = new jl_StringBuilder;
        var$8.$buffer = $rt_createCharArray(jl_String_length($rt_s(50)));
        var$2 = 0;
        while (var$2 < var$8.$buffer.data.length) {
            var$8.$buffer.data[var$2] = jl_String_charAt($rt_s(50), var$2);
            var$2 = var$2 + 1 | 0;
        }
        var$8.$length0 = jl_String_length($rt_s(50));
        var$11 = ju_AbstractList_iterator(var$11.$rulings);
        while (ju_AbstractList$1_hasNext(var$11)) {
            var$12 = ju_AbstractList$1_next(var$11);
            jl_AbstractStringBuilder_append(var$8, $rt_s(51));
            jl_StringBuilder_append(var$8, cjag_Line2D$Float_getX1(var$12));
            jl_AbstractStringBuilder_append(var$8, $rt_s(52));
            jl_StringBuilder_append(var$8, cjag_Line2D$Float_getY1(var$12));
            jl_AbstractStringBuilder_append(var$8, $rt_s(53));
            jl_StringBuilder_append(var$8, cjag_Line2D$Float_getX2(var$12));
            jl_AbstractStringBuilder_append(var$8, $rt_s(54));
            jl_StringBuilder_append(var$8, cjag_Line2D$Float_getY2(var$12));
            jl_AbstractStringBuilder_append(var$8, $rt_s(55));
        }
        jl_StringBuilder_deleteCharAt(var$8, jl_StringBuilder_length(var$8) - 1 | 0);
        jl_AbstractStringBuilder_append(var$8, $rt_s(56));
        oe_Client_saveResult$js_body$_3($rt_ustr(jl_AbstractStringBuilder_toString(var$8)));
        oe_Client_signalDone$js_body$_2();
        if (jl_String_equals($arg, $rt_s(49))) {
            $ptr = 3;
            continue main;
        }
        if (!jl_String_startsWith($arg, $rt_s(28)))
            return;
        $ptr = 5;
    case 5:
        oe_Client_extractTable($arg);
        if ($rt_suspending()) {
            break main;
        }
        return;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($args, var$2, $arg, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, $ptr);
}
function oe_Client__clinit_() {
    oe_Client_$assertionsDisabled = 0;
}
function oe_Client_getDocument$js_body$_1() {
    var g = window ? window : global;
    return new g.PDDocument(g.pdfDoc);
}
function oe_Client_signalDone$js_body$_2() {
    var g = window ? window : global;
    g.done = true;
}
function oe_Client_saveResult$js_body$_3(var$1) {
    var g = window ? window : global;
    g.result = var$1;
}
function jlr_AnnotatedElement() {
}
function jl_Class() {
    var a = this; jl_Object.call(a);
    a.$name = null;
    a.$platformClass = null;
}
function jl_Class_getClass($cls) {
    var $result, var$3;
    if ($cls === null)
        return null;
    $result = $cls.classObject;
    if ($result === null) {
        $result = new jl_Class;
        $result.$platformClass = $cls;
        var$3 = $result;
        $cls.classObject = var$3;
    }
    return $result;
}
function jl_Class_getPlatformClass($this) {
    return $this.$platformClass;
}
function jl_Class_isInstance($this, $obj) {
    var var$2;
    $obj = $obj;
    var$2 = $this.$platformClass;
    return $obj !== null && !(typeof $obj.constructor.$meta === 'undefined' ? 1 : 0) && otp_Platform_isAssignable($obj.constructor, var$2) ? 1 : 0;
}
function jl_Class_getName($this) {
    if ($this.$name === null)
        $this.$name = $rt_str($this.$platformClass.$meta.name);
    return $this.$name;
}
function jl_Class_isPrimitive($this) {
    return $this.$platformClass.$meta.primitive ? 1 : 0;
}
function jl_Class_getComponentType($this) {
    return jl_Class_getClass($this.$platformClass.$meta.item);
}
function jl_Class_desiredAssertionStatus($this) {
    return 1;
}
function otji_JS() {
    jl_Object.call(this);
}
function otji_JS_function(var$1, var$2) {
    var name = 'jso$functor$' + var$2;
    if (!var$1[name]) {
        var fn = function() {
            return var$1[var$2].apply(var$1, arguments);
        };
        var$1[name] = function() {
            return fn;
        };
    }
    return var$1[name]();
}
function otp_Platform() {
    jl_Object.call(this);
}
function otp_Platform_clone(var$1) {
    var copy = new var$1.constructor();
    for (var field in var$1) {
        if (!var$1.hasOwnProperty(field)) {
            continue;
        }
        copy[field] = var$1[field];
    }
    return copy;
}
function otp_Platform_isAssignable($from, $to) {
    var $supertypes, $i;
    if ($from === $to)
        return 1;
    $supertypes = $from.$meta.supertypes;
    $i = 0;
    while ($i < $supertypes.length) {
        if (otp_Platform_isAssignable($supertypes[$i], $to))
            return 1;
        $i = $i + 1 | 0;
    }
    return 0;
}
function otp_Platform_launchThread($runnable) {
    jl_Object$monitorExit$lambda$_8_0_run($runnable);
}
function otp_Platform_schedule(var$1, var$2) {
    return setTimeout(function() {
        otp_Platform_launchThread(var$1);
    }, var$2);
}
function otp_Platform_stringFromCharCode($charCode) {
    return String.fromCharCode($charCode);
}
function otp_Platform_createQueueJs$js_body$_30() {
    return [];
}
function ji_Serializable() {
}
function jl_Comparable() {
}
function jl_CharSequence() {
}
function jl_String() {
    var a = this; jl_Object.call(a);
    a.$characters = null;
    a.$hashCode = 0;
}
var jl_String_CASE_INSENSITIVE_ORDER = null;
function jl_String__init_(var_0) {
    var var_1 = new jl_String();
    jl_String__init_0(var_1, var_0);
    return var_1;
}
function jl_String__init_1(var_0, var_1, var_2) {
    var var_3 = new jl_String();
    jl_String__init_2(var_3, var_0, var_1, var_2);
    return var_3;
}
function jl_String__init_0($this, $characters) {
    var var$2, $i;
    $characters = $characters.data;
    var$2 = $characters.length;
    $this.$characters = $rt_createCharArray(var$2);
    $i = 0;
    while ($i < var$2) {
        $this.$characters.data[$i] = $characters[$i];
        $i = $i + 1 | 0;
    }
}
function jl_String__init_2($this, $value, $offset, $count) {
    var $i, var$5;
    $this.$characters = $rt_createCharArray($count);
    $i = 0;
    while ($i < $count) {
        var$5 = $value.data;
        $this.$characters.data[$i] = var$5[$i + $offset | 0];
        $i = $i + 1 | 0;
    }
}
function jl_String_charAt($this, $index) {
    var var$2;
    if ($index >= 0 && $index < $this.$characters.data.length)
        return $this.$characters.data[$index];
    var$2 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_0(var$2);
    $rt_throw(var$2);
}
function jl_String_length($this) {
    return $this.$characters.data.length;
}
function jl_String_isEmpty($this) {
    return $this.$characters.data.length ? 0 : 1;
}
function jl_String_compareTo($this, $anotherString) {
    var $l, $i, $a;
    if ($this === $anotherString)
        return 0;
    $l = jl_Math_min(jl_String_length($this), jl_String_length($anotherString));
    $i = 0;
    while (true) {
        if ($i >= $l)
            return jl_String_length($this) - jl_String_length($anotherString) | 0;
        $a = jl_String_charAt($this, $i) - jl_String_charAt($anotherString, $i) | 0;
        if ($a)
            break;
        $i = $i + 1 | 0;
    }
    return $a;
}
function jl_String_startsWith0($this, $prefix, $toffset) {
    var $i, var$4, var$5;
    if (($toffset + jl_String_length($prefix) | 0) > jl_String_length($this))
        return 0;
    $i = 0;
    while ($i < jl_String_length($prefix)) {
        var$4 = jl_String_charAt($prefix, $i);
        var$5 = $toffset + 1 | 0;
        if (var$4 != jl_String_charAt($this, $toffset))
            return 0;
        $i = $i + 1 | 0;
        $toffset = var$5;
    }
    return 1;
}
function jl_String_startsWith($this, $prefix) {
    if ($this === $prefix)
        return 1;
    return jl_String_startsWith0($this, $prefix, 0);
}
function jl_String_endsWith($this, $suffix) {
    var $j, $i, var$4, var$5;
    if ($this === $suffix)
        return 1;
    if (jl_String_length($suffix) > jl_String_length($this))
        return 0;
    $j = 0;
    $i = jl_String_length($this) - jl_String_length($suffix) | 0;
    while ($i < jl_String_length($this)) {
        var$4 = jl_String_charAt($this, $i);
        var$5 = $j + 1 | 0;
        if (var$4 != jl_String_charAt($suffix, $j))
            return 0;
        $i = $i + 1 | 0;
        $j = var$5;
    }
    return 1;
}
function jl_String_indexOf($this, $ch, $fromIndex) {
    var $i, $bmpChar, $hi, $lo;
    $i = jl_Math_max(0, $fromIndex);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i >= $this.$characters.data.length)
                return (-1);
            if ($this.$characters.data[$i] == $bmpChar)
                break;
            $i = $i + 1 | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i >= ($this.$characters.data.length - 1 | 0))
            return (-1);
        if ($this.$characters.data[$i] == $hi && $this.$characters.data[$i + 1 | 0] == $lo)
            break;
        $i = $i + 1 | 0;
    }
    return $i;
}
function jl_String_indexOf0($this, $ch) {
    return jl_String_indexOf($this, $ch, 0);
}
function jl_String_lastIndexOf($this, $ch, $fromIndex) {
    var $i, $bmpChar, $hi, $lo, var$7;
    $i = jl_Math_min($fromIndex, jl_String_length($this) - 1 | 0);
    if ($ch < 65536) {
        $bmpChar = $ch & 65535;
        while (true) {
            if ($i < 0)
                return (-1);
            if ($this.$characters.data[$i] == $bmpChar)
                break;
            $i = $i + (-1) | 0;
        }
        return $i;
    }
    $hi = jl_Character_highSurrogate($ch);
    $lo = jl_Character_lowSurrogate($ch);
    while (true) {
        if ($i < 1)
            return (-1);
        if ($this.$characters.data[$i] == $lo) {
            var$7 = $this.$characters.data;
            $ch = $i - 1 | 0;
            if (var$7[$ch] == $hi)
                break;
        }
        $i = $i + (-1) | 0;
    }
    return $ch;
}
function jl_String_lastIndexOf0($this, $ch) {
    return jl_String_lastIndexOf($this, $ch, jl_String_length($this) - 1 | 0);
}
function jl_String_indexOf1($this, $str, $fromIndex) {
    var $i, $toIndex, $j;
    $i = jl_Math_max(0, $fromIndex);
    $toIndex = jl_String_length($this) - jl_String_length($str) | 0;
    a: while (true) {
        if ($i > $toIndex)
            return (-1);
        $j = 0;
        while (true) {
            if ($j >= jl_String_length($str))
                break a;
            if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
    }
    return $i;
}
function jl_String_lastIndexOf1($this, $str, $fromIndex) {
    var $i, $j;
    $i = jl_Math_min($fromIndex, jl_String_length($this) - jl_String_length($str) | 0);
    a: while (true) {
        if ($i < 0)
            return (-1);
        $j = 0;
        while (true) {
            if ($j >= jl_String_length($str))
                break a;
            if (jl_String_charAt($this, $i + $j | 0) != jl_String_charAt($str, $j))
                break;
            $j = $j + 1 | 0;
        }
        $i = $i + (-1) | 0;
    }
    return $i;
}
function jl_String_substring($this, $beginIndex, $endIndex) {
    var var$3;
    if ($beginIndex <= $endIndex)
        return jl_String__init_1($this.$characters, $beginIndex, $endIndex - $beginIndex | 0);
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$3);
    $rt_throw(var$3);
}
function jl_String_substring0($this, $beginIndex) {
    return jl_String_substring($this, $beginIndex, jl_String_length($this));
}
function jl_String_subSequence($this, $beginIndex, $endIndex) {
    return jl_String_substring($this, $beginIndex, $endIndex);
}
function jl_String_trim($this) {
    var $lower, $upper;
    $lower = 0;
    $upper = jl_String_length($this) - 1 | 0;
    a: {
        while ($lower <= $upper) {
            if (jl_String_charAt($this, $lower) > 32)
                break a;
            $lower = $lower + 1 | 0;
        }
    }
    while ($lower <= $upper && jl_String_charAt($this, $upper) <= 32) {
        $upper = $upper + (-1) | 0;
    }
    return jl_String_substring($this, $lower, $upper + 1 | 0);
}
function jl_String_toString($this) {
    return $this;
}
function jl_String_toCharArray($this) {
    var $array, var$2, $i, var$4;
    $array = $rt_createCharArray($this.$characters.data.length);
    var$2 = $array.data;
    $i = 0;
    var$4 = var$2.length;
    while ($i < var$4) {
        var$2[$i] = $this.$characters.data[$i];
        $i = $i + 1 | 0;
    }
    return $array;
}
function jl_String_valueOf($obj) {
    return $obj === null ? $rt_s(57) : $obj.$toString();
}
function jl_String_valueOf0($c) {
    var var$2, var$3;
    var$2 = new jl_String;
    var$3 = $rt_createCharArray(1);
    var$3.data[0] = $c;
    jl_String__init_0(var$2, var$3);
    return var$2;
}
function jl_String_valueOf1($i) {
    var var$2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append2(var$2, $i));
}
function jl_String_equals($this, $other) {
    var $str, $i;
    if ($this === $other)
        return 1;
    if (!($other instanceof jl_String))
        return 0;
    $str = $other;
    if (jl_String_length($str) != jl_String_length($this))
        return 0;
    $i = 0;
    while ($i < jl_String_length($str)) {
        if (jl_String_charAt($this, $i) != jl_String_charAt($str, $i))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
}
function jl_String_hashCode($this) {
    var var$1, var$2, var$3, $c;
    a: {
        if (!$this.$hashCode) {
            var$1 = $this.$characters.data;
            var$2 = var$1.length;
            var$3 = 0;
            while (true) {
                if (var$3 >= var$2)
                    break a;
                $c = var$1[var$3];
                $this.$hashCode = (31 * $this.$hashCode | 0) + $c | 0;
                var$3 = var$3 + 1 | 0;
            }
        }
    }
    return $this.$hashCode;
}
function jl_String_toUpperCase($this) {
    var var$1, $codePointCount, $i, $codePoints, var$5, var$6, var$7, var$8, var$9, var$10;
    if (jl_String_isEmpty($this))
        return $this;
    var$1 = $rt_createIntArray($this.$characters.data.length).data;
    $codePointCount = 0;
    $i = 0;
    while ($i < $this.$characters.data.length) {
        a: {
            if ($i != ($this.$characters.data.length - 1 | 0) && jl_Character_isHighSurrogate($this.$characters.data[$i])) {
                $codePoints = $this.$characters.data;
                var$5 = $i + 1 | 0;
                if (jl_Character_isLowSurrogate($codePoints[var$5])) {
                    var$6 = $codePointCount + 1 | 0;
                    var$1[$codePointCount] = jl_Character_toUpperCase(jl_Character_toCodePoint($this.$characters.data[$i], $this.$characters.data[var$5]));
                    $i = var$5;
                    break a;
                }
            }
            var$6 = $codePointCount + 1 | 0;
            var$1[$codePointCount] = jl_Character_toUpperCase0($this.$characters.data[$i]);
        }
        $i = $i + 1 | 0;
        $codePointCount = var$6;
    }
    var$7 = new jl_String;
    $i = 0;
    var$7.$characters = $rt_createCharArray($codePointCount * 2 | 0);
    var$6 = 0;
    var$5 = 0;
    while (var$5 < $codePointCount) {
        var$8 = $i + 1 | 0;
        $i = var$1[$i];
        if ($i < 65536) {
            $codePoints = var$7.$characters.data;
            var$9 = var$6 + 1 | 0;
            $codePoints[var$6] = $i & 65535;
        } else {
            $codePoints = var$7.$characters.data;
            var$10 = var$6 + 1 | 0;
            $codePoints[var$6] = jl_Character_highSurrogate($i);
            $codePoints = var$7.$characters.data;
            var$9 = var$10 + 1 | 0;
            $codePoints[var$10] = jl_Character_lowSurrogate($i);
        }
        var$5 = var$5 + 1 | 0;
        $i = var$8;
        var$6 = var$9;
    }
    if (var$6 < var$7.$characters.data.length)
        var$7.$characters = ju_Arrays_copyOf(var$7.$characters, var$6);
    return var$7;
}
function jl_String_split($this, $regex) {
    var var$2, var$3;
    if ($regex === null) {
        $regex = new jl_NullPointerException;
        jl_Throwable__init_($regex, $rt_s(58));
        $rt_throw($regex);
    }
    jur_AbstractSet_counter = 1;
    var$2 = new jur_Pattern;
    var$2.$backRefs = $rt_createArray(jur_FSet, 10);
    var$2.$globalGroupIndex = (-1);
    var$2.$compCount = (-1);
    var$2.$consCount = (-1);
    var$3 = new jur_Lexer;
    var$3.$mode = 1;
    var$3.$orig = $regex;
    var$3.$pattern = $rt_createCharArray(jl_String_length($regex) + 2 | 0);
    jl_System_arraycopy(jl_String_toCharArray($regex), 0, var$3.$pattern, 0, jl_String_length($regex));
    var$3.$pattern.data[var$3.$pattern.data.length - 1 | 0] = 0;
    var$3.$pattern.data[var$3.$pattern.data.length - 2 | 0] = 0;
    var$3.$patternFullLength = var$3.$pattern.data.length;
    var$3.$flags = 0;
    jur_Lexer_movePointer(var$3);
    jur_Lexer_movePointer(var$3);
    var$2.$lexemes = var$3;
    var$2.$flags0 = 0;
    var$2.$start = jur_Pattern_processExpression(var$2, (-1), var$2.$flags0, null);
    if (!jur_Lexer_isEmpty(var$2.$lexemes))
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), var$2.$lexemes.$orig, var$2.$lexemes.$curToc));
    if (var$2.$needsBackRefReplacement)
        var$2.$start.$processSecondPass();
    return jur_Pattern_split(var$2, $this);
}
function jl_String_format($format, $args) {
    return ju_Formatter_toString(ju_Formatter_format(ju_Formatter__init_(ju_Locale_defaultLocale), $format, $args));
}
function jl_String_compareTo0($this, var$1) {
    return jl_String_compareTo($this, var$1);
}
function jl_String__clinit_() {
    jl_String_CASE_INSENSITIVE_ORDER = new jl_String$_clinit_$lambda$_81_0;
}
function jl_Throwable() {
    var a = this; jl_Object.call(a);
    a.$message = null;
    a.$cause = null;
    a.$suppressionEnabled = 0;
    a.$writableStackTrace = 0;
    a.$suppressed = null;
    a.$stackTrace = null;
}
function jl_Throwable__init_1() {
    var var_0 = new jl_Throwable();
    jl_Throwable__init_0(var_0);
    return var_0;
}
function jl_Throwable__init_2(var_0) {
    var var_1 = new jl_Throwable();
    jl_Throwable__init_(var_1, var_0);
    return var_1;
}
function jl_Throwable__init_0($this) {
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
}
function jl_Throwable__init_($this, $message) {
    $this.$suppressionEnabled = 1;
    $this.$writableStackTrace = 1;
    $this.$message = $message;
}
function jl_Throwable_fillInStackTrace($this) {
    return $this;
}
function jl_Throwable_getMessage($this) {
    return $this.$message;
}
function jl_Throwable_getLocalizedMessage($this) {
    return $this.$message;
}
function jl_Throwable_toString($this) {
    var var$1, var$2, var$3;
    var$1 = $this.$message;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, jl_Class_getName(jl_Object_getClass($this)));
    if (var$1 === null)
        var$1 = $rt_s(44);
    else {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $rt_s(2));
        jl_AbstractStringBuilder_append(var$3, var$1);
        var$1 = jl_AbstractStringBuilder_toString(var$3);
    }
    jl_AbstractStringBuilder_append(var$2, var$1);
    return jl_AbstractStringBuilder_toString(var$2);
}
function jl_Throwable_printStackTrace($this) {
    jl_Throwable_printStackTrace0($this, jl_System_err());
}
function jl_Throwable_printStackTrace0($this, $stream) {
    var var$2, $element, var$4, var$5, var$6;
    ji_PrintStream_print($stream, jl_Class_getName(jl_Object_getClass($this)));
    var$2 = $this.$message;
    if (var$2 !== null) {
        $element = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($element);
        jl_AbstractStringBuilder_append($element, $rt_s(2));
        jl_AbstractStringBuilder_append($element, var$2);
        ji_PrintStream_print($stream, jl_AbstractStringBuilder_toString($element));
    }
    a: {
        ji_PrintStream_println0($stream);
        if ($this.$stackTrace !== null) {
            var$4 = $this.$stackTrace.data;
            var$5 = var$4.length;
            var$6 = 0;
            while (true) {
                if (var$6 >= var$5)
                    break a;
                $element = var$4[var$6];
                ji_PrintStream_print($stream, $rt_s(59));
                ji_PrintStream_println1($stream, $element);
                var$6 = var$6 + 1 | 0;
            }
        }
    }
    if ($this.$cause !== null && $this.$cause !== $this) {
        ji_PrintStream_print($stream, $rt_s(60));
        jl_Throwable_printStackTrace0($this.$cause, $stream);
    }
}
function jl_Throwable_addSuppressed($this, $exception) {
    if (!$this.$suppressionEnabled)
        return;
    $this.$suppressed = ju_Arrays_copyOf0($this.$suppressed, $this.$suppressed.data.length + 1 | 0);
    $this.$suppressed.data[$this.$suppressed.data.length - 1 | 0] = $exception;
}
function jl_Error() {
    jl_Throwable.call(this);
}
function jl_LinkageError() {
    jl_Error.call(this);
}
function jl_NoClassDefFoundError() {
    jl_LinkageError.call(this);
}
function jl_AbstractStringBuilder() {
    var a = this; jl_Object.call(a);
    a.$buffer = null;
    a.$length0 = 0;
}
function jl_AbstractStringBuilder__init_0() {
    var var_0 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_(var_0);
    return var_0;
}
function jl_AbstractStringBuilder__init_1(var_0) {
    var var_1 = new jl_AbstractStringBuilder();
    jl_AbstractStringBuilder__init_2(var_1, var_0);
    return var_1;
}
function jl_AbstractStringBuilder__init_($this) {
    jl_AbstractStringBuilder__init_2($this, 16);
}
function jl_AbstractStringBuilder__init_2($this, $capacity) {
    $this.$buffer = $rt_createCharArray($capacity);
}
function jl_AbstractStringBuilder_append($this, $string) {
    return $this.$insert($this.$length0, $string);
}
function jl_AbstractStringBuilder_insert($this, $index, $string) {
    var $i, var$4, var$5;
    if ($index >= 0 && $index <= $this.$length0) {
        if ($string === null)
            $string = $rt_s(57);
        else if (jl_String_isEmpty($string))
            return $this;
        $this.$ensureCapacity($this.$length0 + jl_String_length($string) | 0);
        $i = $this.$length0 - 1 | 0;
        while ($i >= $index) {
            $this.$buffer.data[$i + jl_String_length($string) | 0] = $this.$buffer.data[$i];
            $i = $i + (-1) | 0;
        }
        $this.$length0 = $this.$length0 + jl_String_length($string) | 0;
        $i = 0;
        while ($i < jl_String_length($string)) {
            var$4 = $this.$buffer.data;
            var$5 = $index + 1 | 0;
            var$4[$index] = jl_String_charAt($string, $i);
            $i = $i + 1 | 0;
            $index = var$5;
        }
        return $this;
    }
    $string = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_0($string);
    $rt_throw($string);
}
function jl_AbstractStringBuilder_append0($this, $value, $radix) {
    return jl_AbstractStringBuilder_insert0($this, $this.$length0, $value, $radix);
}
function jl_AbstractStringBuilder_insert0($this, $target, $value, $radix) {
    var $positive, var$5, var$6, $pos, $sz, $posLimit, var$10;
    $positive = 1;
    if ($value < 0) {
        $positive = 0;
        $value =  -$value;
    }
    a: {
        if ($value < $radix) {
            if ($positive)
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 1 | 0);
            else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 2 | 0);
                var$5 = $this.$buffer.data;
                var$6 = $target + 1 | 0;
                var$5[$target] = 45;
                $target = var$6;
            }
            $this.$buffer.data[$target] = jl_Character_forDigit($value, $radix);
        } else {
            $pos = 1;
            $sz = 1;
            $posLimit = 2147483647 / $radix | 0;
            b: {
                while (true) {
                    var$10 = $rt_imul($pos, $radix);
                    if (var$10 > $value) {
                        var$10 = $pos;
                        break b;
                    }
                    $sz = $sz + 1 | 0;
                    if (var$10 > $posLimit)
                        break;
                    $pos = var$10;
                }
            }
            if (!$positive)
                $sz = $sz + 1 | 0;
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + $sz | 0);
            if ($positive)
                $positive = $target;
            else {
                var$5 = $this.$buffer.data;
                $positive = $target + 1 | 0;
                var$5[$target] = 45;
            }
            while (true) {
                if (var$10 <= 0)
                    break a;
                var$5 = $this.$buffer.data;
                $target = $positive + 1 | 0;
                var$5[$positive] = jl_Character_forDigit($value / var$10 | 0, $radix);
                $value = $value % var$10 | 0;
                var$10 = var$10 / $radix | 0;
                $positive = $target;
            }
        }
    }
    return $this;
}
function jl_AbstractStringBuilder_insert1($this, $target, $value, $radix) {
    var $positive, var$5, var$6, var$7, $sz, $pos, $pos_0;
    $positive = 1;
    if (Long_lt($value, Long_ZERO)) {
        $positive = 0;
        $value = Long_neg($value);
    }
    a: {
        var$5 = Long_fromInt($radix);
        if (Long_lt($value, var$5)) {
            if ($positive)
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 1 | 0);
            else {
                jl_AbstractStringBuilder_insertSpace($this, $target, $target + 2 | 0);
                var$6 = $this.$buffer.data;
                var$7 = $target + 1 | 0;
                var$6[$target] = 45;
                $target = var$7;
            }
            $this.$buffer.data[$target] = jl_Character_forDigit($value.lo, $radix);
        } else {
            $sz = 1;
            $pos = Long_fromInt(1);
            while (true) {
                $pos_0 = Long_mul($pos, var$5);
                if (Long_le($pos_0, $pos))
                    break;
                if (Long_gt($pos_0, $value))
                    break;
                $sz = $sz + 1 | 0;
                $pos = $pos_0;
            }
            if (!$positive)
                $sz = $sz + 1 | 0;
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + $sz | 0);
            if ($positive)
                $sz = $target;
            else {
                var$6 = $this.$buffer.data;
                $sz = $target + 1 | 0;
                var$6[$target] = 45;
            }
            while (true) {
                if (Long_le($pos, Long_ZERO))
                    break a;
                var$6 = $this.$buffer.data;
                $target = $sz + 1 | 0;
                var$6[$sz] = jl_Character_forDigit(Long_div($value, $pos).lo, $radix);
                $value = Long_rem($value, $pos);
                $pos = Long_div($pos, var$5);
                $sz = $target;
            }
        }
    }
    return $this;
}
function jl_AbstractStringBuilder_insert2($this, $target, $value) {
    var $mantissa, var$4, $number, $exp, $negative, $intPart, $sz, $digits, $zeros, $pos, $i, $intDigit;
    $mantissa = $rt_compare($value, 0.0);
    if (!$mantissa) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 48;
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 46;
        $this.$buffer.data[$target] = 48;
        return $this;
    }
    if (!$mantissa) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 45;
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 48;
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 46;
        $this.$buffer.data[$mantissa] = 48;
        return $this;
    }
    if (isNaN($value) ? 1 : 0) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 78;
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 97;
        $this.$buffer.data[$target] = 78;
        return $this;
    }
    if (!isFinite($value) ? 1 : 0) {
        if ($mantissa > 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
            $mantissa = $target;
        } else {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
        }
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 73;
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 110;
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 102;
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 105;
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 110;
        var$4 = $this.$buffer.data;
        $mantissa = $target + 1 | 0;
        var$4[$target] = 105;
        var$4 = $this.$buffer.data;
        $target = $mantissa + 1 | 0;
        var$4[$mantissa] = 116;
        $this.$buffer.data[$target] = 121;
        return $this;
    }
    $number = jl_AbstractStringBuilder$Constants_floatAnalysisResult;
    otcit_FloatAnalyzer_analyze($value, $number);
    $mantissa = $number.$mantissa;
    $exp = $number.$exponent;
    $negative = $number.$sign;
    $intPart = 1;
    $sz = 1;
    if ($negative) {
        $negative = 1;
        $sz = 2;
    }
    $digits = 9;
    $zeros = jl_AbstractStringBuilder_trailingDecimalZeros($mantissa);
    if ($zeros > 0)
        $digits = $digits - $zeros | 0;
    if ($exp < 7 && $exp >= (-3)) {
        if ($exp >= 0) {
            $intPart = $exp + 1 | 0;
            $digits = jl_Math_max($digits, $intPart + 1 | 0);
            $exp = 0;
        } else if ($exp < 0) {
            $mantissa = $mantissa / jl_AbstractStringBuilder$Constants_intPowersOfTen.data[ -$exp] | 0;
            $digits = $digits - $exp | 0;
            $exp = 0;
        }
    }
    if ($exp) {
        $sz = $sz + 2 | 0;
        if (!($exp > (-10) && $exp < 10))
            $sz = $sz + 1 | 0;
        if ($exp < 0)
            $sz = $sz + 1 | 0;
    }
    if ($exp && $digits == $intPart)
        $digits = $digits + 1 | 0;
    jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + $digits | 0) | 0);
    if (!$negative)
        $negative = $target;
    else {
        var$4 = $this.$buffer.data;
        $negative = $target + 1 | 0;
        var$4[$target] = 45;
    }
    $pos = 100000000;
    $i = 0;
    while ($i < $digits) {
        if ($pos <= 0)
            $intDigit = 0;
        else {
            $intDigit = $mantissa / $pos | 0;
            $mantissa = $mantissa % $pos | 0;
        }
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = (48 + $intDigit | 0) & 65535;
        $intPart = $intPart + (-1) | 0;
        if ($intPart)
            $negative = $target;
        else {
            var$4 = $this.$buffer.data;
            $negative = $target + 1 | 0;
            var$4[$target] = 46;
        }
        $pos = $pos / 10 | 0;
        $i = $i + 1 | 0;
    }
    if ($exp) {
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = 69;
        if ($exp >= 0)
            $mantissa = $target;
        else {
            $exp =  -$exp;
            var$4 = $this.$buffer.data;
            $mantissa = $target + 1 | 0;
            var$4[$target] = 45;
        }
        if ($exp < 10)
            $zeros = $mantissa;
        else {
            var$4 = $this.$buffer.data;
            $zeros = $mantissa + 1 | 0;
            var$4[$mantissa] = (48 + ($exp / 10 | 0) | 0) & 65535;
        }
        $this.$buffer.data[$zeros] = (48 + ($exp % 10 | 0) | 0) & 65535;
    }
    return $this;
}
function jl_AbstractStringBuilder_insert3($this, $target, $value) {
    var $zeros, var$4, $number, $mantissa, $exp, $negative, $intPart, $sz, $digits, $pos, $i, $intDigit;
    $zeros = $rt_compare($value, 0.0);
    if (!$zeros) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
        var$4 = $this.$buffer.data;
        $zeros = $target + 1 | 0;
        var$4[$target] = 48;
        var$4 = $this.$buffer.data;
        $target = $zeros + 1 | 0;
        var$4[$zeros] = 46;
        $this.$buffer.data[$target] = 48;
        return $this;
    }
    if (!$zeros) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 4 | 0);
        var$4 = $this.$buffer.data;
        $zeros = $target + 1 | 0;
        var$4[$target] = 45;
        var$4 = $this.$buffer.data;
        $target = $zeros + 1 | 0;
        var$4[$zeros] = 48;
        var$4 = $this.$buffer.data;
        $zeros = $target + 1 | 0;
        var$4[$target] = 46;
        $this.$buffer.data[$zeros] = 48;
        return $this;
    }
    if (isNaN($value) ? 1 : 0) {
        jl_AbstractStringBuilder_insertSpace($this, $target, $target + 3 | 0);
        var$4 = $this.$buffer.data;
        $zeros = $target + 1 | 0;
        var$4[$target] = 78;
        var$4 = $this.$buffer.data;
        $target = $zeros + 1 | 0;
        var$4[$zeros] = 97;
        $this.$buffer.data[$target] = 78;
        return $this;
    }
    if (!isFinite($value) ? 1 : 0) {
        if ($zeros > 0) {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 8 | 0);
            $zeros = $target;
        } else {
            jl_AbstractStringBuilder_insertSpace($this, $target, $target + 9 | 0);
            var$4 = $this.$buffer.data;
            $zeros = $target + 1 | 0;
            var$4[$target] = 45;
        }
        var$4 = $this.$buffer.data;
        $target = $zeros + 1 | 0;
        var$4[$zeros] = 73;
        var$4 = $this.$buffer.data;
        $zeros = $target + 1 | 0;
        var$4[$target] = 110;
        var$4 = $this.$buffer.data;
        $target = $zeros + 1 | 0;
        var$4[$zeros] = 102;
        var$4 = $this.$buffer.data;
        $zeros = $target + 1 | 0;
        var$4[$target] = 105;
        var$4 = $this.$buffer.data;
        $target = $zeros + 1 | 0;
        var$4[$zeros] = 110;
        var$4 = $this.$buffer.data;
        $zeros = $target + 1 | 0;
        var$4[$target] = 105;
        var$4 = $this.$buffer.data;
        $target = $zeros + 1 | 0;
        var$4[$zeros] = 116;
        $this.$buffer.data[$target] = 121;
        return $this;
    }
    $number = jl_AbstractStringBuilder$Constants_doubleAnalysisResult;
    otcit_DoubleAnalyzer_analyze($value, $number);
    $mantissa = $number.$mantissa0;
    $exp = $number.$exponent0;
    $negative = $number.$sign0;
    $intPart = 1;
    $sz = 1;
    if ($negative)
        $sz = 2;
    $digits = 18;
    $zeros = jl_AbstractStringBuilder_trailingDecimalZeros0($mantissa);
    if ($zeros > 0)
        $digits = $digits - $zeros | 0;
    if ($exp < 7 && $exp >= (-3)) {
        if ($exp >= 0) {
            $intPart = $exp + 1 | 0;
            $digits = jl_Math_max($digits, $intPart + 1 | 0);
            $exp = 0;
        } else if ($exp < 0) {
            $mantissa = Long_div($mantissa, jl_AbstractStringBuilder$Constants_longPowersOfTen.data[ -$exp]);
            $digits = $digits - $exp | 0;
            $exp = 0;
        }
    }
    if ($exp) {
        $sz = $sz + 2 | 0;
        if (!($exp > (-10) && $exp < 10))
            $sz = $sz + 1 | 0;
        if (!($exp > (-100) && $exp < 100))
            $sz = $sz + 1 | 0;
        if ($exp < 0)
            $sz = $sz + 1 | 0;
    }
    if ($exp && $digits == $intPart)
        $digits = $digits + 1 | 0;
    jl_AbstractStringBuilder_insertSpace($this, $target, $target + ($sz + $digits | 0) | 0);
    if (!$negative)
        $negative = $target;
    else {
        var$4 = $this.$buffer.data;
        $negative = $target + 1 | 0;
        var$4[$target] = 45;
    }
    $pos = new Long(1569325056, 23283064);
    $i = 0;
    while ($i < $digits) {
        if (Long_le($pos, Long_ZERO))
            $intDigit = 0;
        else {
            $intDigit = Long_div($mantissa, $pos).lo;
            $mantissa = Long_rem($mantissa, $pos);
        }
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = (48 + $intDigit | 0) & 65535;
        $intPart = $intPart + (-1) | 0;
        if ($intPart)
            $negative = $target;
        else {
            var$4 = $this.$buffer.data;
            $negative = $target + 1 | 0;
            var$4[$target] = 46;
        }
        $pos = Long_div($pos, Long_fromInt(10));
        $i = $i + 1 | 0;
    }
    if ($exp) {
        var$4 = $this.$buffer.data;
        $target = $negative + 1 | 0;
        var$4[$negative] = 69;
        if ($exp >= 0)
            $zeros = $target;
        else {
            $exp =  -$exp;
            var$4 = $this.$buffer.data;
            $zeros = $target + 1 | 0;
            var$4[$target] = 45;
        }
        if ($exp >= 100) {
            var$4 = $this.$buffer.data;
            $target = $zeros + 1 | 0;
            var$4[$zeros] = (48 + ($exp / 100 | 0) | 0) & 65535;
            $exp = $exp % 100 | 0;
            var$4 = $this.$buffer.data;
            $intPart = $target + 1 | 0;
            var$4[$target] = (48 + ($exp / 10 | 0) | 0) & 65535;
        } else if ($exp < 10)
            $intPart = $zeros;
        else {
            var$4 = $this.$buffer.data;
            $intPart = $zeros + 1 | 0;
            var$4[$zeros] = (48 + ($exp / 10 | 0) | 0) & 65535;
        }
        $this.$buffer.data[$intPart] = (48 + ($exp % 10 | 0) | 0) & 65535;
    }
    return $this;
}
function jl_AbstractStringBuilder_trailingDecimalZeros($n) {
    var $result, $zeros, var$4;
    if (!($n % 1000000000 | 0))
        return 9;
    $result = 0;
    $zeros = 1;
    if (!($n % 100000000 | 0)) {
        $result = 8;
        $zeros = 100000000;
    }
    var$4 = $zeros * 10000 | 0;
    if ($n % var$4 | 0)
        var$4 = $zeros;
    else
        $result = $result | 4;
    $zeros = var$4 * 100 | 0;
    if ($n % $zeros | 0)
        $zeros = var$4;
    else
        $result = $result | 2;
    if (!($n % ($zeros * 10 | 0) | 0))
        $result = $result | 1;
    return $result;
}
function jl_AbstractStringBuilder_trailingDecimalZeros0($n) {
    var $zeros, $result, $bit, $i;
    $zeros = Long_fromInt(1);
    $result = 0;
    $bit = 16;
    $i = jl_AbstractStringBuilder$Constants_longLogPowersOfTen.data.length - 1 | 0;
    while ($i >= 0) {
        if (Long_eq(Long_rem($n, Long_mul($zeros, jl_AbstractStringBuilder$Constants_longLogPowersOfTen.data[$i])), Long_ZERO)) {
            $result = $result | $bit;
            $zeros = Long_mul($zeros, jl_AbstractStringBuilder$Constants_longLogPowersOfTen.data[$i]);
        }
        $bit = $bit >>> 1;
        $i = $i + (-1) | 0;
    }
    return $result;
}
function jl_AbstractStringBuilder_append1($this, $c) {
    return $this.$insert1($this.$length0, $c);
}
function jl_AbstractStringBuilder_insert4($this, $index, $c) {
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + 1 | 0);
    $this.$buffer.data[$index] = $c;
    return $this;
}
function jl_AbstractStringBuilder_ensureCapacity($this, $capacity) {
    var $newLength;
    if ($this.$buffer.data.length >= $capacity)
        return;
    $newLength = $this.$buffer.data.length >= 1073741823 ? 2147483647 : jl_Math_max($capacity, jl_Math_max($this.$buffer.data.length * 2 | 0, 5));
    $this.$buffer = ju_Arrays_copyOf($this.$buffer, $newLength);
}
function jl_AbstractStringBuilder_toString($this) {
    return jl_String__init_1($this.$buffer, 0, $this.$length0);
}
function jl_AbstractStringBuilder_charAt($this, $index) {
    var var$2;
    if ($index >= 0 && $index < $this.$length0)
        return $this.$buffer.data[$index];
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$2);
    $rt_throw(var$2);
}
function jl_AbstractStringBuilder_append2($this, $chars, $offset, $len) {
    return $this.$insert2($this.$length0, $chars, $offset, $len);
}
function jl_AbstractStringBuilder_insert5($this, $index, $chars, $offset, $len) {
    var var$5, var$6, var$7, var$8;
    jl_AbstractStringBuilder_insertSpace($this, $index, $index + $len | 0);
    var$5 = $len + $offset | 0;
    while ($offset < var$5) {
        var$6 = $chars.data;
        var$7 = $this.$buffer.data;
        $len = $index + 1 | 0;
        var$8 = $offset + 1 | 0;
        var$7[$index] = var$6[$offset];
        $index = $len;
        $offset = var$8;
    }
    return $this;
}
function jl_AbstractStringBuilder_append3($this, $chars) {
    return $this.$append5($chars, 0, $chars.data.length);
}
function jl_AbstractStringBuilder_insertSpace($this, $start, $end) {
    var $sz, $i;
    $sz = $this.$length0 - $start | 0;
    $this.$ensureCapacity(($this.$length0 + $end | 0) - $start | 0);
    $i = $sz - 1 | 0;
    while ($i >= 0) {
        $this.$buffer.data[$end + $i | 0] = $this.$buffer.data[$start + $i | 0];
        $i = $i + (-1) | 0;
    }
    $this.$length0 = $this.$length0 + ($end - $start | 0) | 0;
}
function jl_Appendable() {
}
function jl_StringBuilder() {
    jl_AbstractStringBuilder.call(this);
}
function jl_StringBuilder__init_() {
    var var_0 = new jl_StringBuilder();
    jl_StringBuilder__init_0(var_0);
    return var_0;
}
function jl_StringBuilder__init_0($this) {
    jl_AbstractStringBuilder__init_($this);
}
function jl_StringBuilder_append1($this, $string) {
    jl_AbstractStringBuilder_append($this, $string);
    return $this;
}
function jl_StringBuilder_append2($this, $value) {
    jl_AbstractStringBuilder_append0($this, $value, 10);
    return $this;
}
function jl_StringBuilder_append4($this, $value) {
    jl_StringBuilder_insert($this, $this.$length0, $value);
    return $this;
}
function jl_StringBuilder_append0($this, $value) {
    jl_StringBuilder_insert0($this, $this.$length0, $value);
    return $this;
}
function jl_StringBuilder_append($this, $value) {
    jl_StringBuilder_insert1($this, $this.$length0, $value);
    return $this;
}
function jl_StringBuilder_append5($this, $c) {
    jl_AbstractStringBuilder_append1($this, $c);
    return $this;
}
function jl_StringBuilder_append6($this, $chars, $offset, $len) {
    jl_AbstractStringBuilder_append2($this, $chars, $offset, $len);
    return $this;
}
function jl_StringBuilder_append7($this, $chars) {
    jl_AbstractStringBuilder_append3($this, $chars);
    return $this;
}
function jl_StringBuilder_append8($this, $s, $start, $end) {
    jl_StringBuilder_insert2($this, $this.$length0, $s, $start, $end);
    return $this;
}
function jl_StringBuilder_append9($this, $s) {
    jl_StringBuilder_append8($this, $s, 0, $s.$length());
    return $this;
}
function jl_StringBuilder_append3($this, $obj) {
    jl_StringBuilder_insert3($this, $this.$length0, $obj);
    return $this;
}
function jl_StringBuilder_insert($this, $target, $value) {
    jl_AbstractStringBuilder_insert1($this, $target, $value, 10);
    return $this;
}
function jl_StringBuilder_insert0($this, $target, $value) {
    jl_AbstractStringBuilder_insert2($this, $target, $value);
    return $this;
}
function jl_StringBuilder_insert1($this, $target, $value) {
    jl_AbstractStringBuilder_insert3($this, $target, $value);
    return $this;
}
function jl_StringBuilder_insert2($this, $index, $s, $start, $end) {
    var var$5, var$6;
    if ($start <= $end && $end <= $s.$length() && $start >= 0) {
        jl_AbstractStringBuilder_insertSpace($this, $index, ($index + $end | 0) - $start | 0);
        while ($start < $end) {
            var$5 = $this.$buffer.data;
            var$6 = $index + 1 | 0;
            var$5[$index] = $s.$charAt($start);
            $start = $start + 1 | 0;
            $index = var$6;
        }
        return $this;
    }
    $s = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0($s);
    $rt_throw($s);
}
function jl_StringBuilder_insert4($this, $index, $chars, $offset, $len) {
    jl_AbstractStringBuilder_insert5($this, $index, $chars, $offset, $len);
    return $this;
}
function jl_StringBuilder_insert3($this, $index, $obj) {
    jl_StringBuilder_insert5($this, $index, $obj === null ? $rt_s(57) : $obj.$toString());
    return $this;
}
function jl_StringBuilder_insert6($this, $index, $c) {
    jl_AbstractStringBuilder_insert4($this, $index, $c);
    return $this;
}
function jl_StringBuilder_delete($this, $start, $end) {
    var var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$3 = $rt_compare($start, $end);
    if (var$3 <= 0 && $start <= $this.$length0) {
        if (var$3) {
            var$4 = $this.$length0 - $end | 0;
            $this.$length0 = $this.$length0 - ($end - $start | 0) | 0;
            var$3 = 0;
            while (var$3 < var$4) {
                var$5 = $this.$buffer.data;
                var$6 = $start + 1 | 0;
                var$7 = $this.$buffer.data;
                var$8 = $end + 1 | 0;
                var$5[$start] = var$7[$end];
                var$3 = var$3 + 1 | 0;
                $start = var$6;
                $end = var$8;
            }
        }
        return $this;
    }
    var$9 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_0(var$9);
    $rt_throw(var$9);
}
function jl_StringBuilder_deleteCharAt($this, $index) {
    var var$2, var$3, var$4, var$5;
    if ($index >= 0 && $index < $this.$length0) {
        $this.$length0 = $this.$length0 - 1 | 0;
        while ($index < $this.$length0) {
            var$2 = $this.$buffer.data;
            var$3 = $this.$buffer.data;
            var$4 = $index + 1 | 0;
            var$2[$index] = var$3[var$4];
            $index = var$4;
        }
        return $this;
    }
    var$5 = new jl_StringIndexOutOfBoundsException;
    jl_Throwable__init_0(var$5);
    $rt_throw(var$5);
}
function jl_StringBuilder_insert7($this, $index, $string) {
    jl_AbstractStringBuilder_insert($this, $index, $string);
    return $this;
}
function jl_StringBuilder_substring($this, var$1, var$2) {
    var var$3;
    if (var$1 <= var$2 && var$1 >= 0 && var$2 <= $this.$length0)
        return jl_String__init_1($this.$buffer, var$1, var$2 - var$1 | 0);
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$3);
    $rt_throw(var$3);
}
function jl_StringBuilder_setLength($this, var$1) {
    $this.$length0 = var$1;
}
function jl_StringBuilder_getChars($this, var$1, var$2, var$3, var$4) {
    var var$5, var$6, var$7, var$8, var$9;
    if (var$1 > var$2) {
        var$5 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_(var$5, $rt_s(61));
        $rt_throw(var$5);
    }
    while (var$1 < var$2) {
        var$6 = var$3.data;
        var$7 = var$4 + 1 | 0;
        var$8 = $this.$buffer.data;
        var$9 = var$1 + 1 | 0;
        var$6[var$4] = var$8[var$1];
        var$4 = var$7;
        var$1 = var$9;
    }
}
function jl_StringBuilder_insert8($this, var$1, var$2, var$3, var$4) {
    jl_AbstractStringBuilder_insert5($this, var$1, var$2, var$3, var$4);
    return $this;
}
function jl_StringBuilder_append10($this, var$1, var$2, var$3) {
    jl_AbstractStringBuilder_append2($this, var$1, var$2, var$3);
    return $this;
}
function jl_StringBuilder_insert9($this, var$1, var$2, var$3, var$4) {
    return jl_StringBuilder_insert2($this, var$1, var$2, var$3, var$4);
}
function jl_StringBuilder_append11($this, var$1, var$2, var$3) {
    return jl_StringBuilder_append8($this, var$1, var$2, var$3);
}
function jl_StringBuilder_charAt($this, var$1) {
    return jl_AbstractStringBuilder_charAt($this, var$1);
}
function jl_StringBuilder_length($this) {
    return $this.$length0;
}
function jl_StringBuilder_toString($this) {
    return jl_AbstractStringBuilder_toString($this);
}
function jl_StringBuilder_ensureCapacity($this, var$1) {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
}
function jl_StringBuilder_insert10($this, var$1, var$2) {
    return jl_StringBuilder_insert3($this, var$1, var$2);
}
function jl_StringBuilder_insert11($this, var$1, var$2) {
    jl_AbstractStringBuilder_insert4($this, var$1, var$2);
    return $this;
}
function jl_StringBuilder_insert12($this, var$1, var$2) {
    return jl_StringBuilder_insert1($this, var$1, var$2);
}
function jl_StringBuilder_insert13($this, var$1, var$2) {
    return jl_StringBuilder_insert0($this, var$1, var$2);
}
function jl_StringBuilder_insert14($this, var$1, var$2) {
    return jl_StringBuilder_insert($this, var$1, var$2);
}
function jl_StringBuilder_insert5($this, var$1, var$2) {
    jl_AbstractStringBuilder_insert($this, var$1, var$2);
    return $this;
}
function jl_StringBuilder_append12($this, var$1) {
    return jl_StringBuilder_append9($this, var$1);
}
function jl_Number() {
    jl_Object.call(this);
}
function jl_Integer() {
    jl_Number.call(this);
    this.$value = 0;
}
var jl_Integer_TYPE = null;
var jl_Integer_integerCache = null;
function jl_Integer__init_(var_0) {
    var var_1 = new jl_Integer();
    jl_Integer__init_0(var_1, var_0);
    return var_1;
}
function jl_Integer__init_0($this, $value) {
    $this.$value = $value;
}
function jl_Integer_toHexString($i) {
    return otci_IntegerUtil_toUnsignedLogRadixString($i, 4);
}
function jl_Integer_toString($i) {
    return jl_AbstractStringBuilder_append0(jl_AbstractStringBuilder__init_1(20), $i, 10).$toString();
}
function jl_Integer_parseInt0($s, $radix) {
    var $negative, $index, $value, var$6, $digit, var$8, var$9;
    if ($radix >= 2 && $radix <= 36) {
        if ($s !== null && !jl_String_isEmpty($s)) {
            a: {
                $negative = 0;
                $index = 0;
                switch (jl_String_charAt($s, 0)) {
                    case 43:
                        $index = 1;
                        break a;
                    case 45:
                        $negative = 1;
                        $index = 1;
                        break a;
                    default:
                }
            }
            $value = 0;
            if ($index == jl_String_length($s)) {
                $s = new jl_NumberFormatException;
                jl_Throwable__init_0($s);
                $rt_throw($s);
            }
            while ($index < jl_String_length($s)) {
                var$6 = $index + 1 | 0;
                $digit = jl_Character_getNumericValue(jl_String_charAt($s, $index));
                if ($digit < 0) {
                    var$8 = new jl_NumberFormatException;
                    var$9 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$9);
                    jl_AbstractStringBuilder_append(var$9, $rt_s(62));
                    jl_AbstractStringBuilder_append(var$9, $s);
                    jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$9));
                    $rt_throw(var$8);
                }
                if ($digit >= $radix) {
                    var$8 = new jl_NumberFormatException;
                    var$9 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$9);
                    jl_AbstractStringBuilder_append(var$9, $rt_s(63));
                    var$9 = jl_StringBuilder_append2(var$9, $radix);
                    jl_AbstractStringBuilder_append(var$9, $rt_s(2));
                    jl_AbstractStringBuilder_append(var$9, $s);
                    jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$9));
                    $rt_throw(var$8);
                }
                $value = $rt_imul($radix, $value) + $digit | 0;
                if ($value < 0) {
                    if (var$6 == jl_String_length($s) && $value == (-2147483648) && $negative)
                        return (-2147483648);
                    var$8 = new jl_NumberFormatException;
                    var$9 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$9);
                    jl_AbstractStringBuilder_append(var$9, $rt_s(64));
                    jl_AbstractStringBuilder_append(var$9, $s);
                    jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$9));
                    $rt_throw(var$8);
                }
                $index = var$6;
            }
            if ($negative)
                $value =  -$value;
            return $value;
        }
        $s = new jl_NumberFormatException;
        jl_Throwable__init_($s, $rt_s(65));
        $rt_throw($s);
    }
    var$8 = new jl_NumberFormatException;
    $s = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($s);
    jl_AbstractStringBuilder_append($s, $rt_s(66));
    jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(jl_StringBuilder_append2($s, $radix)));
    $rt_throw(var$8);
}
function jl_Integer_parseInt($s) {
    return jl_Integer_parseInt0($s, 10);
}
function jl_Integer_valueOf($i) {
    var var$2;
    if ($i >= (-128) && $i <= 127) {
        a: {
            if (jl_Integer_integerCache === null) {
                jl_Integer_integerCache = $rt_createArray(jl_Integer, 256);
                var$2 = 0;
                while (true) {
                    if (var$2 >= jl_Integer_integerCache.data.length)
                        break a;
                    jl_Integer_integerCache.data[var$2] = jl_Integer__init_(var$2 - 128 | 0);
                    var$2 = var$2 + 1 | 0;
                }
            }
        }
        return jl_Integer_integerCache.data[$i + 128 | 0];
    }
    return jl_Integer__init_($i);
}
function jl_Integer_intValue($this) {
    return $this.$value;
}
function jl_Integer_toString0($this) {
    return jl_Integer_toString($this.$value);
}
function jl_Integer_hashCode($this) {
    return $this.$value >>> 4 ^ $this.$value << 28 ^ $this.$value << 8 ^ $this.$value >>> 24;
}
function jl_Integer_equals($this, $other) {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Integer && $other.$value == $this.$value ? 1 : 0;
}
function jl_Integer_compareTo($this, $other) {
    return $rt_compare($this.$value, $other.$value);
}
function jl_Integer_numberOfLeadingZeros($i) {
    var $n, var$3;
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i >>> 16;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    $i = var$3 >>> 8;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 8;
    var$3 = $i >>> 4;
    if (!var$3)
        var$3 = $i;
    else
        $n = $n | 4;
    $i = var$3 >>> 2;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 2;
    if ($i >>> 1)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
}
function jl_Integer_numberOfTrailingZeros($i) {
    var $n, var$3;
    if (!$i)
        return 32;
    $n = 0;
    var$3 = $i << 16;
    if (var$3)
        $n = 16;
    else
        var$3 = $i;
    $i = var$3 << 8;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 8;
    var$3 = $i << 4;
    if (!var$3)
        var$3 = $i;
    else
        $n = $n | 4;
    $i = var$3 << 2;
    if (!$i)
        $i = var$3;
    else
        $n = $n | 2;
    if ($i << 1)
        $n = $n | 1;
    return (32 - $n | 0) - 1 | 0;
}
function jl_Integer_signum($i) {
    return $i >> 31 |  -$i >>> 31;
}
function jl_Integer_compareTo0($this, var$1) {
    return jl_Integer_compareTo($this, var$1);
}
function jl_Integer__clinit_() {
    jl_Integer_TYPE = $rt_cls($rt_intcls());
}
function jl_IncompatibleClassChangeError() {
    jl_LinkageError.call(this);
}
function jl_IncompatibleClassChangeError__init_(var_0) {
    var var_1 = new jl_IncompatibleClassChangeError();
    jl_IncompatibleClassChangeError__init_0(var_1, var_0);
    return var_1;
}
function jl_IncompatibleClassChangeError__init_0($this, $message) {
    jl_Throwable__init_($this, $message);
}
function jl_NoSuchFieldError() {
    jl_IncompatibleClassChangeError.call(this);
}
function jl_NoSuchFieldError__init_(var_0) {
    var var_1 = new jl_NoSuchFieldError();
    jl_NoSuchFieldError__init_0(var_1, var_0);
    return var_1;
}
function jl_NoSuchFieldError__init_0($this, $message) {
    jl_IncompatibleClassChangeError__init_0($this, $message);
}
function jl_NoSuchMethodError() {
    jl_IncompatibleClassChangeError.call(this);
}
function jl_NoSuchMethodError__init_(var_0) {
    var var_1 = new jl_NoSuchMethodError();
    jl_NoSuchMethodError__init_0(var_1, var_0);
    return var_1;
}
function jl_NoSuchMethodError__init_0($this, $message) {
    jl_IncompatibleClassChangeError__init_0($this, $message);
}
function jl_Exception() {
    jl_Throwable.call(this);
}
function jl_Exception__init_(var_0) {
    var var_1 = new jl_Exception();
    jl_Exception__init_0(var_1, var_0);
    return var_1;
}
function jl_Exception__init_0($this, $message) {
    jl_Throwable__init_($this, $message);
}
function jl_RuntimeException() {
    jl_Exception.call(this);
}
function jl_RuntimeException__init_(var_0) {
    var var_1 = new jl_RuntimeException();
    jl_RuntimeException__init_0(var_1, var_0);
    return var_1;
}
function jl_RuntimeException__init_0($this, $message) {
    jl_Throwable__init_($this, $message);
}
function otci_IntegerUtil() {
    jl_Object.call(this);
}
function otci_IntegerUtil_toUnsignedLogRadixString($value, $radixLog2) {
    var $radix, $mask, $sz, $chars, var$7, $pos, $target, $target_0;
    if (!$value)
        return $rt_s(67);
    $radix = 1 << $radixLog2;
    $mask = $radix - 1 | 0;
    $sz = (((32 - jl_Integer_numberOfLeadingZeros($value) | 0) + $radixLog2 | 0) - 1 | 0) / $radixLog2 | 0;
    $chars = $rt_createCharArray($sz);
    var$7 = $chars.data;
    $pos = $rt_imul($sz - 1 | 0, $radixLog2);
    $target = 0;
    while ($pos >= 0) {
        $target_0 = $target + 1 | 0;
        var$7[$target] = jl_Character_forDigit($value >>> $pos & $mask, $radix);
        $pos = $pos - $radixLog2 | 0;
        $target = $target_0;
    }
    return jl_String__init_($chars);
}
function otj_JSObject() {
}
function p_PDDocument() {
    jl_Object.call(this);
}
function p_PDDocument_getPage(var$1, var$2) {
    var thread = $rt_nativeThread();
    var javaThread = $rt_getThread();
    if (thread.isResuming()) {
        thread.status = 0;
        var result = thread.attribute;
        if (result instanceof Error) {
            throw result;
        }
        return result;
    }
    var callback = function() {};
    callback.$complete = function(val) {
        thread.attribute = val;
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback.$error = function(e) {
        thread.attribute = $rt_exception(e);
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback = otpp_AsyncCallbackWrapper_create(callback);
    return thread.suspend(function() {
        try {
            p_PDDocument_getPage0(var$1, var$2, callback);
        } catch($e) {
            callback.$error($rt_exception($e));
        }
    });
}
function p_PDDocument_getPage0($doc, $pageIndex, $cb) {
    var var$4;
    var$4 = new p_PDDocument$getPage$lambda$_5_0;
    var$4.$_01 = $cb;
    (($doc.getPageAsync($pageIndex + 1)).then(otji_JS_function(var$4, "complete"))).catch(console.error);
}
function p_PDDocument_getPage$static($this, $pageIndex) {
    var $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();$pageIndex = $thread.pop();$this = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        $ptr = 1;
    case 1:
        $tmp = p_PDDocument_getPage($this, $pageIndex);
        if ($rt_suspending()) {
            break main;
        }
        $this = $tmp;
        return $this;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($this, $pageIndex, $ptr);
}
function p_PDFGraphicsStreamEngine() {
    var a = this; jl_Object.call(a);
    a.$page = null;
    a.$gs = null;
}
function p_PDFGraphicsStreamEngine_getPage($this) {
    return $this.$page;
}
function p_PDFGraphicsStreamEngine_appendRectangle($this, $p0x, $p0y, $p1x, $p1y, $p2x, $p2y, $p3x, $p3y) {
    tt_ObjectExtractorStreamEngine_appendRectangle($this, cjag_Point2D$Float__init_($p0x, $p0y), cjag_Point2D$Float__init_($p1x, $p1y), cjag_Point2D$Float__init_($p2x, $p2y), cjag_Point2D$Float__init_($p3x, $p3y));
}
function p_PDFGraphicsStreamEngine_getGraphicsState($this) {
    return $this.$gs;
}
function p_PDFGraphicsStreamEngine_setGraphicsState($this, $state) {
    $this.$gs = $state;
}
function p_PDFGraphicsStreamEngine_processPage($this, $page) {
    var var$2, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();var$2 = $thread.pop();$page = $thread.pop();$this = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        var$2 = $this;
        $ptr = 1;
    case 1:
        p_PDFGraphicsStreamEngine_getObjectsAsync(var$2, $page);
        if ($rt_suspending()) {
            break main;
        }
        return;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($this, $page, var$2, $ptr);
}
function p_PDFGraphicsStreamEngine_getObjectsAsync(var$1, var$2) {
    var thread = $rt_nativeThread();
    var javaThread = $rt_getThread();
    if (thread.isResuming()) {
        thread.status = 0;
        var result = thread.attribute;
        if (result instanceof Error) {
            throw result;
        }
        return result;
    }
    var callback = function() {};
    callback.$complete = function(val) {
        thread.attribute = val;
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback.$error = function(e) {
        thread.attribute = $rt_exception(e);
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback = otpp_AsyncCallbackWrapper_create(callback);
    return thread.suspend(function() {
        try {
            p_PDFGraphicsStreamEngine_getObjectsAsync0(var$1, var$2, callback);
        } catch($e) {
            callback.$error($rt_exception($e));
        }
    });
}
function p_PDFGraphicsStreamEngine_getObjectsAsync0($processor, $page, $cb) {
    var var$4;
    var$4 = new p_PDFGraphicsStreamEngine$getObjectsAsync$lambda$_19_0;
    var$4.$_02 = $cb;
    p_PDFGraphicsStreamEngine_getObjectsAsyncJS$js_body$_20($processor, $page, otji_JS_function(var$4, "complete"));
}
function p_PDFGraphicsStreamEngine_getObjectsAsyncJS$js_body$_20(var$1, var$2, var$3) {
    return runPDFGraphicsStreamEngine(var$1, var$2, var$3);
}
function p_PDFGraphicsStreamEngineOverlay() {
}
function tt_ObjectExtractorStreamEngine() {
    var a = this; p_PDFGraphicsStreamEngine.call(a);
    a.$rulings = null;
    a.$pageTransform = null;
    a.$extractRulingLines = 0;
    a.$clipWindingRule = 0;
    a.$currentPath = null;
}
function tt_ObjectExtractorStreamEngine__init_(var_0) {
    var var_1 = new tt_ObjectExtractorStreamEngine();
    tt_ObjectExtractorStreamEngine__init_0(var_1, var_0);
    return var_1;
}
function tt_ObjectExtractorStreamEngine__init_0($this, $page) {
    var $cb, $rotation, var$4, var$5;
    $this.$page = null;
    $this.$gs = null;
    $this.$page = $page;
    $this.$extractRulingLines = 1;
    $this.$clipWindingRule = (-1);
    $page = new cjag_GeneralPath;
    cjag_Path2D_setWindingRule($page, 1);
    $page.$pointTypes = $rt_createByteArray(20);
    $page.$floatCoords = $rt_createFloatArray(40);
    $this.$currentPath = $page;
    $this.$rulings = ju_ArrayList__init_();
    $this.$pageTransform = null;
    $cb = $this.$page.getCropBox();
    $rotation = $this.$page.getRotation();
    $this.$pageTransform = cjag_AffineTransform__init_();
    if (jl_Math_abs0($rotation) != 90 && jl_Math_abs0($rotation) != 270) {
        $page = $this.$pageTransform;
        var$4 = $cb.getHeight();
        var$5 = cjag_AffineTransform__init_();
        cjag_AffineTransform_setToTranslation(var$5, 0.0, var$4);
        cjag_AffineTransform_concatenate($page, var$5);
        cjag_AffineTransform_concatenate($this.$pageTransform, cjag_AffineTransform_getScaleInstance(1.0, (-1.0)));
    } else {
        var$4 = $rotation * 0.017453292519943295;
        $page = cjag_AffineTransform__init_();
        cjag_AffineTransform_setToRotation($page, var$4, 0.0, 0.0);
        $this.$pageTransform = $page;
        cjag_AffineTransform_concatenate($this.$pageTransform, cjag_AffineTransform_getScaleInstance(1.0, (-1.0)));
    }
    cjag_AffineTransform_translate($this.$pageTransform,  -$cb.getLowerLeftX(),  -$cb.getLowerLeftY());
}
function tt_ObjectExtractorStreamEngine_appendRectangle($this, $p0, $p1, $p2, $p3) {
    cjag_Path2D$Float_moveTo($this.$currentPath, cjag_Point2D$Float_getX($p0), cjag_Point2D$Float_getY($p0));
    cjag_Path2D$Float_lineTo($this.$currentPath, cjag_Point2D$Float_getX($p1), cjag_Point2D$Float_getY($p1));
    cjag_Path2D$Float_lineTo($this.$currentPath, cjag_Point2D$Float_getX($p2), cjag_Point2D$Float_getY($p2));
    cjag_Path2D$Float_lineTo($this.$currentPath, cjag_Point2D$Float_getX($p3), cjag_Point2D$Float_getY($p3));
    cjag_Path2D_closePath($this.$currentPath);
}
function tt_ObjectExtractorStreamEngine_clip($this, $windingRule) {
    $this.$clipWindingRule = $windingRule;
}
function tt_ObjectExtractorStreamEngine_closePath($this) {
    cjag_Path2D_closePath($this.$currentPath);
}
function tt_ObjectExtractorStreamEngine_curveTo($this, $x1, $y1, $x2, $y2, $x3, $y3) {
    cjag_Path2D$Float_curveTo($this.$currentPath, $x1, $y1, $x2, $y2, $x3, $y3);
}
function tt_ObjectExtractorStreamEngine_drawImage($this, $arg0) {
    return;
}
function tt_ObjectExtractorStreamEngine_endPath($this) {
    if ($this.$clipWindingRule != (-1)) {
        cjag_Path2D_setWindingRule($this.$currentPath, $this.$clipWindingRule);
        $this.$clipWindingRule = (-1);
    }
    cjag_Path2D_reset($this.$currentPath);
}
function tt_ObjectExtractorStreamEngine_fillAndStrokePath($this, $arg0) {
    tt_ObjectExtractorStreamEngine_strokeOrFillPath($this, 1);
}
function tt_ObjectExtractorStreamEngine_fillPath($this, $arg0) {
    tt_ObjectExtractorStreamEngine_strokeOrFillPath($this, 1);
}
function tt_ObjectExtractorStreamEngine_lineTo($this, $x, $y) {
    cjag_Path2D$Float_lineTo($this.$currentPath, $x, $y);
}
function tt_ObjectExtractorStreamEngine_moveTo($this, $x, $y) {
    cjag_Path2D$Float_moveTo($this.$currentPath, $x, $y);
}
function tt_ObjectExtractorStreamEngine_shadingFill($this, $arg0) {
    return;
}
function tt_ObjectExtractorStreamEngine_strokePath($this) {
    tt_ObjectExtractorStreamEngine_strokeOrFillPath($this, 0);
}
function tt_ObjectExtractorStreamEngine_strokeOrFillPath($this, $isFill) {
    var $path, $pi, $c, var$5, $first, var$7, $start_pos, $end_pos, $pc, $line, $currentSegment, $line_0, $r, $$je;
    $path = $this.$currentPath;
    if (!$this.$extractRulingLines) {
        cjag_Path2D_reset($this.$currentPath);
        return;
    }
    $pi = cjag_Path2D$Float_getPathIterator($path, $this.$pageTransform);
    $c = $rt_createFloatArray(6);
    if ($pi.$currentSegment($c)) {
        cjag_Path2D_reset($path);
        return;
    }
    cjag_Path2D$Iterator_next($pi);
    while (true) {
        if (cjag_Path2D$Iterator_isDone($pi)) {
            var$5 = $c.data;
            $first = $rt_createFloatArray(6);
            var$7 = $first.data;
            $pi = cjag_Path2D$Float_getPathIterator($path, $this.$pageTransform);
            $pi.$currentSegment($first);
            $start_pos = cjag_Point2D$Float__init_(tt_Utils_round(var$7[0], 2), tt_Utils_round(var$7[1], 2));
            $end_pos = null;
            $pc = new tt_ObjectExtractorStreamEngine$PointComparator;
            $pc.$this$0 = $this;
            $line = $start_pos;
            a: while (!cjag_Path2D$Iterator_isDone($pi)) {
                cjag_Path2D$Iterator_next($pi);
                b: {
                    try {
                        $currentSegment = $pi.$currentSegment($c);
                        break b;
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof jl_IndexOutOfBoundsException) {
                        } else {
                            throw $$e;
                        }
                    }
                    continue a;
                }
                c: {
                    switch ($currentSegment) {
                        case 0:
                            $start_pos = cjag_Point2D$Float__init_(var$5[0], var$5[1]);
                            $end_pos = $start_pos;
                            break c;
                        case 1:
                            $end_pos = cjag_Point2D$Float__init_(var$5[0], var$5[1]);
                            if ($line === null)
                                break c;
                            $line_0 = tt_ObjectExtractorStreamEngine$PointComparator_compare($pc, $line, $end_pos) != (-1) ? cjag_Line2D$Float__init_($end_pos, $line) : cjag_Line2D$Float__init_($line, $end_pos);
                            if (!cjag_Line2D_intersects($line_0, tt_ObjectExtractorStreamEngine_currentClippingPath($this)))
                                break c;
                            $r = tt_Ruling_intersect(tt_Ruling__init_(cjag_Line2D$Float_getP1($line_0), cjag_Line2D$Float_getP2($line_0)), tt_ObjectExtractorStreamEngine_currentClippingPath($this));
                            if (tt_Ruling_length($r) > 0.01)
                                ju_ArrayList_add($this.$rulings, $r);
                            break c;
                        case 4:
                            if ($line === null)
                                break c;
                            if ($end_pos === null)
                                break c;
                            $line = tt_ObjectExtractorStreamEngine$PointComparator_compare($pc, $end_pos, $start_pos) != (-1) ? cjag_Line2D$Float__init_($start_pos, $end_pos) : cjag_Line2D$Float__init_($end_pos, $start_pos);
                            if (!cjag_Line2D_intersects($line, tt_ObjectExtractorStreamEngine_currentClippingPath($this)))
                                break c;
                            $r = tt_Ruling_intersect(tt_Ruling__init_(cjag_Line2D$Float_getP1($line), cjag_Line2D$Float_getP2($line)), tt_ObjectExtractorStreamEngine_currentClippingPath($this));
                            if (tt_Ruling_length($r) <= 0.01)
                                break c;
                            ju_ArrayList_add($this.$rulings, $r);
                            break c;
                        case 2:
                        case 3:
                            break;
                        default:
                    }
                }
                $line = $end_pos;
            }
            cjag_Path2D_reset($path);
            return;
        }
        $currentSegment = $pi.$currentSegment($c);
        if ($currentSegment != 1 && $currentSegment != 4 && $currentSegment)
            break;
        cjag_Path2D$Iterator_next($pi);
    }
    cjag_Path2D_reset($path);
}
function tt_ObjectExtractorStreamEngine_getPageTransform($this) {
    return $this.$pageTransform;
}
function tt_ObjectExtractorStreamEngine_currentClippingPath($this) {
    var var$1, var$2, var$3, $clippingPath, $transformedClippingPath, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, var$16;
    var$1 = $this.$gs.getCurrentClipPathArea();
    var$2 = var$1.x1;
    var$3 = var$1.y1;
    $clippingPath = new cjag_Area;
    $transformedClippingPath = cjag_Rectangle2D$Double__init_(var$2, var$3, var$1.x2 - var$2, var$1.y2 - var$3);
    if ($transformedClippingPath instanceof cjag_Area)
        $clippingPath.$curves = $transformedClippingPath.$curves;
    if (!($transformedClippingPath instanceof cjag_Rectangle2D)) {
        ji_PrintStream_println(jl_System_err(), $rt_s(68));
        $clippingPath = new jl_RuntimeException;
        jl_Throwable__init_($clippingPath, $rt_s(68));
        $rt_throw($clippingPath);
    }
    $transformedClippingPath = cjag_Rectangle2D_getPathIterator($transformedClippingPath, null);
    var$1 = ju_Vector__init_();
    var$6 = $rt_createDoubleArray(23);
    var$7 = var$6.data;
    var$8 = 0.0;
    var$9 = 0.0;
    var$10 = 0.0;
    var$11 = 0.0;
    while (!cjag_RectIterator_isDone($transformedClippingPath)) {
        a: {
            switch (cjag_RectIterator_currentSegment($transformedClippingPath, var$6)) {
                case 0:
                    csag_Curve_insertLine(var$1, var$10, var$11, var$8, var$9);
                    var$8 = var$7[0];
                    var$9 = var$7[1];
                    ju_Vector_add(var$1, csag_Order0__init_(var$8, var$9));
                    var$12 = var$8;
                    var$13 = var$9;
                    break a;
                case 1:
                    var$12 = var$7[0];
                    var$13 = var$7[1];
                    csag_Curve_insertLine(var$1, var$10, var$11, var$12, var$13);
                    break a;
                case 2:
                    var$12 = var$7[2];
                    var$13 = var$7[3];
                    var$14 = var$7[3];
                    var$15 = $rt_compare(var$11, var$14);
                    if (var$15 > 0)
                        csag_Order2_insert(var$1, var$6, var$7[2], var$14, var$7[0], var$7[1], var$10, var$11, (-1));
                    else if (!(!var$15 && var$11 === var$7[1]))
                        csag_Order2_insert(var$1, var$6, var$10, var$11, var$7[0], var$7[1], var$7[2], var$14, 1);
                    break a;
                case 3:
                    var$12 = var$7[4];
                    var$13 = var$7[5];
                    var$14 = var$7[5];
                    var$15 = $rt_compare(var$11, var$14);
                    if (var$15 > 0)
                        csag_Order3_insert(var$1, var$6, var$7[4], var$14, var$7[2], var$7[3], var$7[0], var$7[1], var$10, var$11, (-1));
                    else if (!(!var$15 && var$11 === var$7[1] && var$11 === var$7[3]))
                        csag_Order3_insert(var$1, var$6, var$10, var$11, var$7[0], var$7[1], var$7[2], var$7[3], var$7[4], var$14, 1);
                    break a;
                case 4:
                    csag_Curve_insertLine(var$1, var$10, var$11, var$8, var$9);
                    var$12 = var$8;
                    var$13 = var$9;
                    break a;
                default:
            }
            var$12 = var$10;
            var$13 = var$11;
        }
        cjag_RectIterator_next($transformedClippingPath);
        var$10 = var$12;
        var$11 = var$13;
    }
    csag_Curve_insertLine(var$1, var$10, var$11, var$8, var$9);
    var$16 = new csag_AreaOp$NZWindOp;
    csag_AreaOp__init_(var$16, null);
    $clippingPath.$curves = csag_AreaOp_calculate(var$16, var$1, cjag_Area_EmptyCurves);
    return cjag_Path2D$Double_getBounds2D(cjag_AffineTransform_createTransformedShape($this.$pageTransform, $clippingPath));
}
function tt_ObjectExtractorStreamEngine_clip$exported$0(var$0, var$1) {
    var$0.$clipWindingRule = var$1;
}
function tt_ObjectExtractorStreamEngine_fillPath$exported$1(var$0, var$1) {
    tt_ObjectExtractorStreamEngine_fillPath(var$0, var$1);
}
function tt_ObjectExtractorStreamEngine_endPath$exported$2(var$0) {
    tt_ObjectExtractorStreamEngine_endPath(var$0);
}
function tt_ObjectExtractorStreamEngine_appendRectangle$exported$3(var$0, var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8) {
    p_PDFGraphicsStreamEngine_appendRectangle(var$0, var$1, var$2, var$3, var$4, var$5, var$6, var$7, var$8);
}
function tt_ObjectExtractorStreamEngine_curveTo$exported$4(var$0, var$1, var$2, var$3, var$4, var$5, var$6) {
    tt_ObjectExtractorStreamEngine_curveTo(var$0, var$1, var$2, var$3, var$4, var$5, var$6);
}
function tt_ObjectExtractorStreamEngine_fillAndStrokePath$exported$5(var$0, var$1) {
    tt_ObjectExtractorStreamEngine_fillAndStrokePath(var$0, var$1);
}
function tt_ObjectExtractorStreamEngine_lineTo$exported$6(var$0, var$1, var$2) {
    tt_ObjectExtractorStreamEngine_lineTo(var$0, var$1, var$2);
}
function tt_ObjectExtractorStreamEngine_strokePath$exported$7(var$0) {
    tt_ObjectExtractorStreamEngine_strokePath(var$0);
}
function tt_ObjectExtractorStreamEngine_moveTo$exported$8(var$0, var$1, var$2) {
    tt_ObjectExtractorStreamEngine_moveTo(var$0, var$1, var$2);
}
function tt_ObjectExtractorStreamEngine_setGraphicsState$exported$9(var$0, var$1) {
    var$0.$gs = var$1;
}
function tt_ObjectExtractorStreamEngine_closePath$exported$10(var$0) {
    tt_ObjectExtractorStreamEngine_closePath(var$0);
}
function tt_ObjectExtractorStreamEngine_shadingFill$exported$11(var$0, var$1) {
    return;
}
function tt_ObjectExtractorStreamEngine_drawImage$exported$12(var$0, var$1) {
    return;
}
function ji_IOException() {
    jl_Exception.call(this);
}
function jl_AssertionError() {
    jl_Error.call(this);
}
function jl_AssertionError__init_0(var_0) {
    var var_1 = new jl_AssertionError();
    jl_AssertionError__init_(var_1, var_0);
    return var_1;
}
function jl_AssertionError__init_($this, $message) {
    jl_Throwable__init_($this, jl_String_valueOf($message));
}
function p_PDFTextStripper() {
    var a = this; jl_Object.call(a);
    a.$startPageIndex = 0;
    a.$endPageIndex = 0;
}
function p_PDFTextStripper_setStartPage($this, $startPageIndex) {
    $this.$startPageIndex = $startPageIndex;
}
function p_PDFTextStripper_setEndPage($this, $endPageIndex) {
    $this.$endPageIndex = $endPageIndex;
}
function p_PDFTextStripper_getText($this, $doc) {
    var var$2, var$3, var$4, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();var$4 = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$doc = $thread.pop();$this = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        var$2 = $this;
        var$3 = $this.$startPageIndex;
        var$4 = $this.$endPageIndex;
        $ptr = 1;
    case 1:
        $tmp = p_PDFTextStripper_getTextAsync(var$2, $doc, var$3, var$4);
        if ($rt_suspending()) {
            break main;
        }
        $doc = $tmp;
        return $doc;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($this, $doc, var$2, var$3, var$4, $ptr);
}
function p_PDFTextStripper_writeStringJS($this, $text, $textPositions) {
    var $e, $$je;
    a: {
        try {
            tt_TextStripper_writeString($this, $text, ju_Arrays_asList($textPositions));
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof ji_IOException) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace();
    }
}
function p_PDFTextStripper_getTextAsync(var$1, var$2, var$3, var$4) {
    var thread = $rt_nativeThread();
    var javaThread = $rt_getThread();
    if (thread.isResuming()) {
        thread.status = 0;
        var result = thread.attribute;
        if (result instanceof Error) {
            throw result;
        }
        return result;
    }
    var callback = function() {};
    callback.$complete = function(val) {
        thread.attribute = val;
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback.$error = function(e) {
        thread.attribute = $rt_exception(e);
        $rt_setThread(javaThread);
        thread.resume();
    };
    callback = otpp_AsyncCallbackWrapper_create(callback);
    return thread.suspend(function() {
        try {
            p_PDFTextStripper_getTextAsync0(var$1, var$2, var$3, var$4, callback);
        } catch($e) {
            callback.$error($rt_exception($e));
        }
    });
}
function p_PDFTextStripper_getTextAsync0($processor, $doc, $startIndex, $endIndex, $cb) {
    var var$6;
    var$6 = new p_PDFTextStripper$getTextAsync$lambda$_7_0;
    var$6.$_03 = $cb;
    p_PDFTextStripper_getTextAsyncJS$js_body$_8($processor, $doc, $startIndex, $endIndex, otji_JS_function(var$6, "complete"));
}
function p_PDFTextStripper_getTextAsyncJS$js_body$_8(var$1, var$2, var$3, var$4, var$5) {
    return runPDFTextStripper(var$1, var$2, var$3, var$4, var$5);
}
function p_PDFTextStripperOverlay() {
}
function tt_TextStripper() {
    var a = this; p_PDFTextStripper.call(a);
    a.$document = null;
    a.$textElements = null;
    a.$spatialIndex = null;
    a.$minCharWidth = 0.0;
    a.$minCharHeight = 0.0;
    a.$totalHeight = 0.0;
    a.$countHeight = 0;
}
function tt_TextStripper__init_(var_0, var_1) {
    var var_2 = new tt_TextStripper();
    tt_TextStripper__init_0(var_2, var_0, var_1);
    return var_2;
}
function tt_TextStripper__init_0($this, $document, $pageNumber) {
    $this.$startPageIndex = 0;
    $this.$endPageIndex = 0;
    $this.$minCharWidth = 3.4028234663852886E38;
    $this.$minCharHeight = 3.4028234663852886E38;
    $this.$totalHeight = 0.0;
    $this.$countHeight = 0;
    $this.$document = $document;
    $this.$startPageIndex = $pageNumber;
    $this.$endPageIndex = $pageNumber;
    $this.$textElements = ju_ArrayList__init_();
    $this.$spatialIndex = tt_RectangleSpatialIndex__init_();
}
function tt_TextStripper_process($this) {
    var var$1, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();var$1 = $thread.pop();$this = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        var$1 = $this.$document;
        $ptr = 1;
    case 1:
        p_PDFTextStripper_getText($this, var$1);
        if ($rt_suspending()) {
            break main;
        }
        return;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($this, var$1, $ptr);
}
function tt_TextStripper_writeString($this, $string, $textPositions) {
    var $textPosition, $c, $h, $wos, $te, $avgHeight;
    $textPositions = ju_AbstractList_iterator($textPositions);
    while (ju_AbstractList$1_hasNext($textPositions)) {
        $textPosition = ju_AbstractList$1_next($textPositions);
        if ($textPosition === null)
            continue;
        $c = $rt_str($textPosition.getUnicode());
        $h = jl_Float_valueOf($textPosition.getHeightDir());
        if (jl_String_equals($c, $rt_s(69)))
            $c = $rt_s(12);
        $wos = $textPosition.getWidthOfSpace();
        $te = tt_TextElement__init_(tt_Utils_round($textPosition.getYDirAdj() - $h.$value0, 2), tt_Utils_round($textPosition.getXDirAdj(), 2), tt_Utils_round($textPosition.getWidthDirAdj(), 2), tt_Utils_round($textPosition.getHeightDir(), 2), $textPosition.getFont(), $textPosition.getFontSizeInPt(), $c, $wos, $textPosition.getDir());
        $this.$minCharWidth = jl_Math_min0($this.$minCharWidth, cjag_Rectangle2D$Float_getWidth($te));
        $this.$minCharHeight = jl_Math_min0($this.$minCharHeight, cjag_Rectangle2D$Float_getHeight($te));
        $this.$countHeight = $this.$countHeight + 1 | 0;
        $this.$totalHeight = $this.$totalHeight + cjag_Rectangle2D$Float_getHeight($te);
        $avgHeight = $this.$totalHeight / $this.$countHeight;
        if ($avgHeight > 0.0 && cjag_Rectangle2D$Float_getHeight($te) >= $avgHeight * 6.0) {
            if ($te.$text === null)
                continue;
            if (jl_String_equals(jl_String_trim($te.$text), $rt_s(44)))
                continue;
        }
        tt_RectangleSpatialIndex_add($this.$spatialIndex, $te);
        ju_ArrayList_add($this.$textElements, $te);
    }
}
function tt_TextStripper_writeStringJS$exported$0(var$0, var$1, var$2) {
    var var$3, var$4, var$5;
    var$1 = $rt_str(var$1);
    var$2 = var$2;
    if (var$2 === null)
        var$3 = null;
    else {
        var$3 = jlr_Array_newInstance($rt_cls(p_TextPosition), var$2.length);
        var$4 = 0;
        while (true) {
            var$5 = var$3.data;
            if (var$4 >= var$5.length)
                break;
            var$5[var$4] = var$2[var$4];
            var$4 = var$4 + 1 | 0;
        }
    }
    p_PDFTextStripper_writeStringJS(var$0, var$1, var$3);
}
function jl_System() {
    jl_Object.call(this);
}
var jl_System_outCache = null;
var jl_System_errCache = null;
var jl_System_properties = null;
function jl_System_out() {
    if (jl_System_outCache === null)
        jl_System_outCache = ji_PrintStream__init_(new jl_ConsoleOutputStreamStdout, 0);
    return jl_System_outCache;
}
function jl_System_err() {
    if (jl_System_errCache === null)
        jl_System_errCache = ji_PrintStream__init_(new jl_ConsoleOutputStreamStderr, 0);
    return jl_System_errCache;
}
function jl_System_arraycopy($src, $srcPos, $dest, $destPos, $length) {
    var $srcType, $targetType, $srcArray, $i, var$10, var$11, var$12;
    if ($src !== null && $dest !== null) {
        if ($srcPos >= 0 && $destPos >= 0 && $length >= 0 && ($srcPos + $length | 0) <= jlr_Array_getLength($src) && ($destPos + $length | 0) <= jlr_Array_getLength($dest)) {
            a: {
                b: {
                    if ($src !== $dest) {
                        $srcType = jl_Class_getComponentType(jl_Object_getClass($src));
                        $targetType = jl_Class_getComponentType(jl_Object_getClass($dest));
                        if ($srcType !== null && $targetType !== null) {
                            if ($srcType === $targetType)
                                break b;
                            if (!jl_Class_isPrimitive($srcType) && !jl_Class_isPrimitive($targetType)) {
                                $srcArray = $src;
                                $i = 0;
                                var$10 = $srcPos;
                                while ($i < $length) {
                                    var$11 = $srcArray.data;
                                    var$12 = var$10 + 1 | 0;
                                    if (!jl_Class_isInstance($targetType, var$11[var$10])) {
                                        jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $i);
                                        $src = new jl_ArrayStoreException;
                                        jl_Throwable__init_0($src);
                                        $rt_throw($src);
                                    }
                                    $i = $i + 1 | 0;
                                    var$10 = var$12;
                                }
                                jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                                return;
                            }
                            if (!jl_Class_isPrimitive($srcType))
                                break a;
                            if (jl_Class_isPrimitive($targetType))
                                break b;
                            else
                                break a;
                        }
                        $src = new jl_ArrayStoreException;
                        jl_Throwable__init_0($src);
                        $rt_throw($src);
                    }
                }
                jl_System_doArrayCopy($src, $srcPos, $dest, $destPos, $length);
                return;
            }
            $src = new jl_ArrayStoreException;
            jl_Throwable__init_0($src);
            $rt_throw($src);
        }
        $src = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0($src);
        $rt_throw($src);
    }
    $dest = new jl_NullPointerException;
    jl_Throwable__init_($dest, $rt_s(70));
    $rt_throw($dest);
}
function jl_System_doArrayCopy(var$1, var$2, var$3, var$4, var$5) {
    if (var$1 !== var$3 || var$4 < var$2) {
        for (var i = 0; i < var$5; i = (i + 1) | 0) {
            var$3.data[var$4++] = var$1.data[var$2++];
        }
    } else {
        var$2 = (var$2 + var$5) | 0;
        var$4 = (var$4 + var$5) | 0;
        for (var i = 0; i < var$5; i = (i + 1) | 0) {
            var$3.data[--var$4] = var$1.data[--var$2];
        }
    }
}
function jl_System_currentTimeMillis() {
    return Long_fromNumber(new Date().getTime());
}
function jl_System_getProperty($key) {
    var var$2, var$3;
    if (jl_System_properties === null) {
        var$2 = new ju_Properties;
        ju_Hashtable__init_(var$2);
        ju_Hashtable_put(var$2, $rt_s(71), $rt_s(72));
        ju_Hashtable_put(var$2, $rt_s(73), $rt_s(74));
        ju_Hashtable_put(var$2, $rt_s(75), $rt_s(76));
        ju_Hashtable_put(var$2, $rt_s(77), $rt_s(78));
        ju_Hashtable_put(var$2, $rt_s(79), $rt_s(80));
        ju_Hashtable_put(var$2, $rt_s(81), $rt_s(82));
        ju_Hashtable_put(var$2, $rt_s(83), $rt_s(72));
        ju_Hashtable_put(var$2, $rt_s(84), $rt_s(76));
        var$3 = new ju_Properties;
        ju_Hashtable__init_(var$3);
        var$3.$defaults = var$2;
        jl_System_properties = var$3;
    }
    return ju_Properties_getProperty(jl_System_properties, $key);
}
function jl_Float() {
    jl_Number.call(this);
    this.$value0 = 0.0;
}
var jl_Float_NaN = 0.0;
var jl_Float_TYPE = null;
function jl_Float__init_(var_0) {
    var var_1 = new jl_Float();
    jl_Float__init_0(var_1, var_0);
    return var_1;
}
function jl_Float__init_0($this, $value) {
    $this.$value0 = $value;
}
function jl_Float_intValue($this) {
    return $this.$value0 | 0;
}
function jl_Float_floatValue($this) {
    return $this.$value0;
}
function jl_Float_valueOf($d) {
    return jl_Float__init_($d);
}
function jl_Float_toString($this) {
    var var$1, var$2;
    var$1 = $this.$value0;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append0(var$2, var$1));
}
function jl_Float_equals($this, $other) {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Float && $other.$value0 === $this.$value0 ? 1 : 0;
}
function jl_Float_hashCode($this) {
    return $rt_floatToIntBits($this.$value0);
}
function jl_Float_parseFloat($string) {
    var $start, $end, $negative, $c, $mantissa, $exp, $hasOneDigit, var$9, $negativeExp, $numExp;
    if (jl_String_isEmpty($string)) {
        $string = new jl_NumberFormatException;
        jl_Throwable__init_0($string);
        $rt_throw($string);
    }
    $start = 0;
    $end = jl_String_length($string);
    while (true) {
        if (jl_String_charAt($string, $start) > 32) {
            while (jl_String_charAt($string, $end - 1 | 0) <= 32) {
                $end = $end + (-1) | 0;
            }
            $negative = 0;
            if (jl_String_charAt($string, $start) == 45) {
                $start = $start + 1 | 0;
                $negative = 1;
            } else if (jl_String_charAt($string, $start) == 43)
                $start = $start + 1 | 0;
            if ($start == $end) {
                $string = new jl_NumberFormatException;
                jl_Throwable__init_0($string);
                $rt_throw($string);
            }
            a: {
                $c = jl_String_charAt($string, $start);
                $mantissa = 0;
                $exp = 0;
                $hasOneDigit = 0;
                if ($c != 46) {
                    $hasOneDigit = 1;
                    if ($c >= 48 && $c <= 57) {
                        b: {
                            while ($start < $end) {
                                if (jl_String_charAt($string, $start) != 48)
                                    break b;
                                $start = $start + 1 | 0;
                            }
                        }
                        while ($start < $end) {
                            var$9 = jl_String_charAt($string, $start);
                            if (var$9 < 48)
                                break a;
                            if (var$9 > 57)
                                break a;
                            if ($mantissa >= 1.0E8)
                                $exp = $exp + 1 | 0;
                            else
                                $mantissa = ($mantissa * 10 | 0) + (var$9 - 48 | 0) | 0;
                            $start = $start + 1 | 0;
                        }
                    } else {
                        $string = new jl_NumberFormatException;
                        jl_Throwable__init_0($string);
                        $rt_throw($string);
                    }
                }
            }
            if ($start < $end && jl_String_charAt($string, $start) == 46) {
                $start = $start + 1 | 0;
                c: {
                    while (true) {
                        if ($start >= $end)
                            break c;
                        $negativeExp = jl_String_charAt($string, $start);
                        if ($negativeExp < 48)
                            break c;
                        if ($negativeExp > 57)
                            break;
                        if ($mantissa < 1.0E38) {
                            $mantissa = ($mantissa * 10 | 0) + ($negativeExp - 48 | 0) | 0;
                            $exp = $exp + (-1) | 0;
                        }
                        $start = $start + 1 | 0;
                        $hasOneDigit = 1;
                    }
                }
                if (!$hasOneDigit) {
                    $string = new jl_NumberFormatException;
                    jl_Throwable__init_0($string);
                    $rt_throw($string);
                }
            }
            if ($start < $end) {
                var$9 = jl_String_charAt($string, $start);
                if (var$9 != 101 && var$9 != 69) {
                    $string = new jl_NumberFormatException;
                    jl_IllegalArgumentException__init_($string);
                    $rt_throw($string);
                }
                var$9 = $start + 1 | 0;
                $negativeExp = 0;
                if (var$9 == $end)
                    $rt_throw(jl_NumberFormatException__init_());
                if (jl_String_charAt($string, var$9) == 45) {
                    var$9 = var$9 + 1 | 0;
                    $negativeExp = 1;
                } else if (jl_String_charAt($string, var$9) == 43)
                    var$9 = var$9 + 1 | 0;
                $numExp = 0;
                $start = 0;
                d: {
                    while (true) {
                        if (var$9 >= $end)
                            break d;
                        $c = jl_String_charAt($string, var$9);
                        if ($c < 48)
                            break d;
                        if ($c > 57)
                            break;
                        $numExp = (10 * $numExp | 0) + ($c - 48 | 0) | 0;
                        $start = 1;
                        var$9 = var$9 + 1 | 0;
                    }
                }
                if (!$start)
                    $rt_throw(jl_NumberFormatException__init_());
                if ($negativeExp)
                    $numExp =  -$numExp;
                $exp = $exp + $numExp | 0;
            }
            e: {
                var$9 = $rt_compare($exp, 38);
                if (var$9 <= 0) {
                    if (var$9)
                        break e;
                    if ($mantissa <= 34028234)
                        break e;
                }
                return $negative ? (-Infinity) : Infinity;
            }
            if ($negative)
                $mantissa =  -$mantissa;
            return $mantissa * jl_Float_decimalExponent($exp);
        }
        $start = $start + 1 | 0;
        if ($start == $end)
            break;
    }
    $string = new jl_NumberFormatException;
    jl_Throwable__init_0($string);
    $rt_throw($string);
}
function jl_Float_decimalExponent($n) {
    var $d, $result;
    if ($n >= 0)
        $d = 10.0;
    else {
        $d = 0.1;
        $n =  -$n;
    }
    $result = 1.0;
    while ($n) {
        if ($n % 2 | 0)
            $result = $result * $d;
        $d = $d * $d;
        $n = $n / 2 | 0;
    }
    return $result;
}
function jl_Float_compareTo($this, $other) {
    return $rt_compare($this.$value0, $other.$value0);
}
function jl_Float_compareTo0($this, var$1) {
    return jl_Float_compareTo($this, var$1);
}
function jl_Float__clinit_() {
    jl_Float_NaN = NaN;
    jl_Float_TYPE = $rt_cls($rt_floatcls());
}
function tt_ObjectExtractor() {
    jl_Object.call(this);
    this.$pdfDocument = null;
}
function tt_ObjectExtractor_extractPage($this, $pageNumber) {
    var $p, $pageRotation, $se, $pdfTextStripper, $w, $h, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();$h = $thread.pop();$w = $thread.pop();$pdfTextStripper = $thread.pop();$se = $thread.pop();$pageRotation = $thread.pop();$p = $thread.pop();$pageNumber = $thread.pop();$this = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        if ($pageNumber.$value <= $this.$pdfDocument.getNumberOfPages() && $pageNumber.$value >= 1) {
            $p = $this.$pdfDocument;
            $pageRotation = $pageNumber.$value - 1 | 0;
            $ptr = 1;
            continue main;
        }
        $p = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_($p, $rt_s(85));
        $rt_throw($p);
    case 1:
        $tmp = p_PDDocument_getPage$static($p, $pageRotation);
        if ($rt_suspending()) {
            break main;
        }
        $p = $tmp;
        $se = tt_ObjectExtractorStreamEngine__init_($p);
        $ptr = 2;
    case 2:
        p_PDFGraphicsStreamEngine_processPage($se, $p);
        if ($rt_suspending()) {
            break main;
        }
        $pdfTextStripper = tt_TextStripper__init_($this.$pdfDocument, $pageNumber.$value);
        $ptr = 3;
    case 3:
        tt_TextStripper_process($pdfTextStripper);
        if ($rt_suspending()) {
            break main;
        }
        tt_Utils_sort($pdfTextStripper.$textElements, tt_Rectangle_ILL_DEFINED_ORDER);
        $pageRotation = $p.getRotation();
        if (jl_Math_abs0($pageRotation) != 90 && jl_Math_abs0($pageRotation) != 270) {
            $w = $p.getCropBox().getWidth();
            $h = $p.getCropBox().getHeight();
        } else {
            $w = $p.getCropBox().getHeight();
            $h = $p.getCropBox().getWidth();
        }
        return tt_Page__init_(0.0, 0.0, $w, $h, $pageRotation, $pageNumber.$value, $p, $this.$pdfDocument, $pdfTextStripper.$textElements, $se.$rulings, $pdfTextStripper.$minCharWidth, $pdfTextStripper.$minCharHeight, $pdfTextStripper.$spatialIndex);
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($this, $pageNumber, $p, $pageRotation, $se, $pdfTextStripper, $w, $h, $ptr);
}
function tt_ObjectExtractor_extract0($this, $pages) {
    var var$2;
    var$2 = new tt_PageIterator;
    var$2.$oe = $this;
    var$2.$pageIndexIterator = ju_AbstractList_iterator($pages);
    return var$2;
}
function tt_ObjectExtractor_extract($this, $pageNumber) {
    var var$2, var$3, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();var$3 = $thread.pop();var$2 = $thread.pop();$pageNumber = $thread.pop();$this = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        var$2 = $pageNumber + 1 | 0;
        var$3 = new tt_Utils$1;
        var$3.$val$begin = $pageNumber;
        var$3.$val$end = var$2;
        var$3 = tt_ObjectExtractor_extract0($this, var$3);
        $ptr = 1;
    case 1:
        $tmp = tt_PageIterator_next(var$3);
        if ($rt_suspending()) {
            break main;
        }
        var$3 = $tmp;
        return var$3;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($this, $pageNumber, var$2, var$3, $ptr);
}
function cja_Shape() {
}
function jl_Cloneable() {
}
function cjag_RectangularShape() {
    jl_Object.call(this);
}
function cjag_RectangularShape_getMinX($this) {
    return cjag_Rectangle2D$Float_getX($this);
}
function cjag_RectangularShape_getMinY($this) {
    return cjag_Rectangle2D$Float_getY($this);
}
function cjag_RectangularShape_getMaxX($this) {
    return cjag_Rectangle2D$Float_getX($this) + cjag_Rectangle2D$Float_getWidth($this);
}
function cjag_RectangularShape_getMaxY($this) {
    return cjag_Rectangle2D$Float_getY($this) + cjag_Rectangle2D$Float_getHeight($this);
}
function cjag_RectangularShape_setFrameFromDiagonal($this, $x1, $y1, $x2, $y2) {
    var var$5;
    if ($x2 >= $x1) {
        var$5 = $x2;
        $x2 = $x1;
        $x1 = var$5;
    }
    if ($y2 >= $y1) {
        var$5 = $y2;
        $y2 = $y1;
        $y1 = var$5;
    }
    $this.$setRect($x2, $y2, $x1 - $x2, $y1 - $y2);
}
function cjag_RectangularShape_intersects($this, $r) {
    return cjag_Rectangle2D_intersects($this, cjag_Rectangle2D$Float_getX($r), cjag_Rectangle2D$Float_getY($r), cjag_Rectangle2D$Float_getWidth($r), cjag_Rectangle2D$Float_getHeight($r));
}
function cjag_RectangularShape_contains($this, $r) {
    return cjag_Rectangle2D_contains($this, cjag_Rectangle2D$Float_getX($r), cjag_Rectangle2D$Float_getY($r), cjag_Rectangle2D$Float_getWidth($r), cjag_Rectangle2D$Float_getHeight($r));
}
function cjag_Rectangle2D() {
    cjag_RectangularShape.call(this);
}
function cjag_Rectangle2D__init_() {
    var var_0 = new cjag_Rectangle2D();
    cjag_Rectangle2D__init_0(var_0);
    return var_0;
}
function cjag_Rectangle2D__init_0($this) {
    return;
}
function cjag_Rectangle2D_intersectsLine($this, $x1, $y1, $x2, $y2) {
    var var$5, var$6, $y, $x;
    var$5 = $this.$outcode($x2, $y2);
    if (!var$5)
        return 1;
    while (true) {
        var$6 = $this.$outcode($x1, $y1);
        if (!var$6)
            break;
        if (var$6 & var$5)
            return 0;
        if (!(var$6 & 5)) {
            $y = $this.$getY();
            if (var$6 & 8)
                $y = $y + $this.$getHeight();
            $x1 = $x1 + ($y - $y1) * ($x2 - $x1) / ($y2 - $y1);
            $y1 = $y;
            continue;
        }
        $x = $this.$getX();
        if (var$6 & 4)
            $x = $x + $this.$getWidth();
        $y1 = $y1 + ($x - $x1) * ($y2 - $y1) / ($x2 - $x1);
        $x1 = $x;
    }
    return 1;
}
function cjag_Rectangle2D_intersectsLine0($this, $l) {
    return cjag_Rectangle2D_intersectsLine($this, cjag_Line2D$Float_getX1($l), cjag_Line2D$Float_getY1($l), cjag_Line2D$Float_getX2($l), cjag_Line2D$Float_getY2($l));
}
function cjag_Rectangle2D_setFrame($this, $x, $y, $w, $h) {
    $this.$setRect($x, $y, $w, $h);
}
function cjag_Rectangle2D_intersects($this, $x, $y, $w, $h) {
    var $x0, $y0;
    if (!cjag_Rectangle2D$Float_isEmpty($this) && $w > 0.0 && $h > 0.0) {
        $x0 = cjag_Rectangle2D$Float_getX($this);
        $y0 = cjag_Rectangle2D$Float_getY($this);
        return $x + $w > $x0 && $y + $h > $y0 && $x < $x0 + cjag_Rectangle2D$Float_getWidth($this) && $y < $y0 + cjag_Rectangle2D$Float_getHeight($this) ? 1 : 0;
    }
    return 0;
}
function cjag_Rectangle2D_contains($this, $x, $y, $w, $h) {
    var $x0, $y0;
    if (!cjag_Rectangle2D$Float_isEmpty($this) && $w > 0.0 && $h > 0.0) {
        $x0 = cjag_Rectangle2D$Float_getX($this);
        $y0 = cjag_Rectangle2D$Float_getY($this);
        return $x >= $x0 && $y >= $y0 && $x + $w <= $x0 + cjag_Rectangle2D$Float_getWidth($this) && $y + $h <= $y0 + cjag_Rectangle2D$Float_getHeight($this) ? 1 : 0;
    }
    return 0;
}
function cjag_Rectangle2D_getPathIterator($this, $at) {
    var var$2;
    var$2 = new cjag_RectIterator;
    var$2.$x = $this.$x0;
    var$2.$y = $this.$y0;
    var$2.$w = $this.$width;
    var$2.$h = $this.$height;
    var$2.$affine = $at;
    if (!(var$2.$w >= 0.0 && var$2.$h >= 0.0))
        var$2.$index = 6;
    return var$2;
}
function cjag_Rectangle2D_hashCode($this) {
    var var$1;
    var$1 = Long_add(Long_add(Long_add($rt_doubleToLongBits(cjag_Rectangle2D$Float_getX($this)), Long_mul($rt_doubleToLongBits(cjag_Rectangle2D$Float_getY($this)), Long_fromInt(37))), Long_mul($rt_doubleToLongBits(cjag_Rectangle2D$Float_getWidth($this)), Long_fromInt(43))), Long_mul($rt_doubleToLongBits(cjag_Rectangle2D$Float_getHeight($this)), Long_fromInt(47)));
    return var$1.lo ^ var$1.hi;
}
function cjag_Rectangle2D_equals($this, $obj) {
    var $r2d;
    if ($obj === $this)
        return 1;
    if (!($obj instanceof cjag_Rectangle2D))
        return 0;
    $r2d = $obj;
    return cjag_Rectangle2D$Float_getX($this) === cjag_Rectangle2D$Float_getX($r2d) && cjag_Rectangle2D$Float_getY($this) === cjag_Rectangle2D$Float_getY($r2d) && cjag_Rectangle2D$Float_getWidth($this) === cjag_Rectangle2D$Float_getWidth($r2d) && cjag_Rectangle2D$Float_getHeight($this) === cjag_Rectangle2D$Float_getHeight($r2d) ? 1 : 0;
}
function cjag_Rectangle2D$Float() {
    var a = this; cjag_Rectangle2D.call(a);
    a.$x1 = 0.0;
    a.$y1 = 0.0;
    a.$width0 = 0.0;
    a.$height0 = 0.0;
}
function cjag_Rectangle2D$Float_getX($this) {
    return $this.$x1;
}
function cjag_Rectangle2D$Float_getY($this) {
    return $this.$y1;
}
function cjag_Rectangle2D$Float_getWidth($this) {
    return $this.$width0;
}
function cjag_Rectangle2D$Float_getHeight($this) {
    return $this.$height0;
}
function cjag_Rectangle2D$Float_isEmpty($this) {
    return $this.$width0 > 0.0 && $this.$height0 > 0.0 ? 0 : 1;
}
function cjag_Rectangle2D$Float_setRect($this, $x, $y, $w, $h) {
    $this.$x1 = $x;
    $this.$y1 = $y;
    $this.$width0 = $w;
    $this.$height0 = $h;
}
function cjag_Rectangle2D$Float_setRect0($this, $x, $y, $w, $h) {
    $this.$x1 = $x;
    $this.$y1 = $y;
    $this.$width0 = $w;
    $this.$height0 = $h;
}
function cjag_Rectangle2D$Float_setRect1($this, $r) {
    $this.$x1 = $r.$getX();
    $this.$y1 = $r.$getY();
    $this.$width0 = $r.$getWidth();
    $this.$height0 = $r.$getHeight();
}
function cjag_Rectangle2D$Float_outcode($this, $x, $y) {
    var $out;
    $out = 0;
    if ($this.$width0 <= 0.0)
        $out = 5;
    else if ($x < $this.$x1)
        $out = 1;
    else if ($x > $this.$x1 + $this.$width0)
        $out = 4;
    if ($this.$height0 <= 0.0)
        $out = $out | 10;
    else if ($y < $this.$y1)
        $out = $out | 2;
    else if ($y > $this.$y1 + $this.$height0)
        $out = $out | 8;
    return $out;
}
function cjag_Rectangle2D$Float_createUnion($this, $r) {
    var $dest;
    if (!($r instanceof cjag_Rectangle2D$Float)) {
        $dest = new cjag_Rectangle2D$Double;
        cjag_Rectangle2D__init_0($dest);
    } else {
        $dest = new cjag_Rectangle2D$Float;
        cjag_Rectangle2D__init_0($dest);
    }
    cjag_RectangularShape_setFrameFromDiagonal($dest, jl_Math_min0(cjag_Rectangle2D$Float_getX($this), cjag_Rectangle2D$Float_getX($r)), jl_Math_min0(cjag_Rectangle2D$Float_getY($this), cjag_Rectangle2D$Float_getY($r)), jl_Math_max0(cjag_RectangularShape_getMaxX($this), cjag_RectangularShape_getMaxX($r)), jl_Math_max0(cjag_RectangularShape_getMaxY($this), cjag_RectangularShape_getMaxY($r)));
    return $dest;
}
function tt_Rectangle() {
    cjag_Rectangle2D$Float.call(this);
}
var tt_Rectangle_ILL_DEFINED_ORDER = null;
function tt_Rectangle__init_(var_0, var_1, var_2, var_3) {
    var var_4 = new tt_Rectangle();
    tt_Rectangle__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
}
function tt_Rectangle__init_0($this, $top, $left, $width, $height) {
    cjag_Rectangle2D__init_0($this);
    cjag_Rectangle2D$Float_setRect($this, $left, $top, $width, $height);
}
function tt_Rectangle_compareTo($this, $other) {
    return tt_Rectangle$1_compare(tt_Rectangle_ILL_DEFINED_ORDER, $this, $other);
}
function tt_Rectangle_isLtrDominant($this) {
    return 0;
}
function tt_Rectangle_getArea($this) {
    return $this.$width0 * $this.$height0;
}
function tt_Rectangle_verticalOverlap($this, $other) {
    return jl_Math_max1(0.0, jl_Math_min1(tt_Rectangle_getBottom($this), tt_Rectangle_getBottom($other)) - jl_Math_max1(tt_Rectangle_getTop($this), tt_Rectangle_getTop($other)));
}
function tt_Rectangle_verticallyOverlaps($this, $other) {
    return tt_Rectangle_verticalOverlap($this, $other) <= 0.0 ? 0 : 1;
}
function tt_Rectangle_horizontalOverlap($this, $other) {
    return jl_Math_max1(0.0, jl_Math_min1(tt_Rectangle_getRight($this), tt_Rectangle_getRight($other)) - jl_Math_max1(tt_Rectangle_getLeft($this), tt_Rectangle_getLeft($other)));
}
function tt_Rectangle_horizontallyOverlaps($this, $other) {
    return tt_Rectangle_horizontalOverlap($this, $other) <= 0.0 ? 0 : 1;
}
function tt_Rectangle_verticalOverlapRatio($this, $other) {
    var $rv, $delta;
    $rv = 0.0;
    $delta = jl_Math_min1(tt_Rectangle_getBottom($this) - tt_Rectangle_getTop($this), tt_Rectangle_getBottom($other) - tt_Rectangle_getTop($other));
    if (tt_Rectangle_getTop($other) <= tt_Rectangle_getTop($this) && tt_Rectangle_getTop($this) <= tt_Rectangle_getBottom($other) && tt_Rectangle_getBottom($other) <= tt_Rectangle_getBottom($this))
        $rv = (tt_Rectangle_getBottom($other) - tt_Rectangle_getTop($this)) / $delta;
    else if (tt_Rectangle_getTop($this) <= tt_Rectangle_getTop($other) && tt_Rectangle_getTop($other) <= tt_Rectangle_getBottom($this) && tt_Rectangle_getBottom($this) <= tt_Rectangle_getBottom($other))
        $rv = (tt_Rectangle_getBottom($this) - tt_Rectangle_getTop($other)) / $delta;
    else if (tt_Rectangle_getTop($this) <= tt_Rectangle_getTop($other) && tt_Rectangle_getTop($other) <= tt_Rectangle_getBottom($other) && tt_Rectangle_getBottom($other) <= tt_Rectangle_getBottom($this))
        $rv = (tt_Rectangle_getBottom($other) - tt_Rectangle_getTop($other)) / $delta;
    else if (tt_Rectangle_getTop($other) <= tt_Rectangle_getTop($this) && tt_Rectangle_getTop($this) <= tt_Rectangle_getBottom($this) && tt_Rectangle_getBottom($this) <= tt_Rectangle_getBottom($other))
        $rv = (tt_Rectangle_getBottom($this) - tt_Rectangle_getTop($this)) / $delta;
    return $rv;
}
function tt_Rectangle_overlapRatio($this, $other) {
    var $intersectionArea;
    $intersectionArea = jl_Math_max0(0.0, jl_Math_max1(0.0, jl_Math_min1(tt_Rectangle_getRight($this), tt_Rectangle_getRight($other)) - jl_Math_max1(tt_Rectangle_getLeft($this), tt_Rectangle_getLeft($other))) * jl_Math_max1(0.0, jl_Math_min1(tt_Rectangle_getBottom($this), tt_Rectangle_getBottom($other)) - jl_Math_max1(tt_Rectangle_getTop($this), tt_Rectangle_getTop($other))));
    return $intersectionArea / (tt_Rectangle_getArea($this) + tt_Rectangle_getArea($other) - $intersectionArea);
}
function tt_Rectangle_merge($this, $other) {
    cjag_Rectangle2D$Float_setRect1($this, cjag_Rectangle2D$Float_createUnion($this, $other));
    return $this;
}
function tt_Rectangle_getTop($this) {
    return cjag_Rectangle2D$Float_getY($this);
}
function tt_Rectangle_getRight($this) {
    return cjag_RectangularShape_getMaxX($this);
}
function tt_Rectangle_getLeft($this) {
    return cjag_Rectangle2D$Float_getX($this);
}
function tt_Rectangle_getBottom($this) {
    return cjag_RectangularShape_getMaxY($this);
}
function tt_Rectangle_getPoints($this) {
    var var$1, var$2;
    var$1 = $rt_createArray(cjag_Point2D, 4);
    var$2 = var$1.data;
    var$2[0] = cjag_Point2D$Float__init_(tt_Rectangle_getLeft($this), tt_Rectangle_getTop($this));
    var$2[1] = cjag_Point2D$Float__init_(tt_Rectangle_getRight($this), tt_Rectangle_getTop($this));
    var$2[2] = cjag_Point2D$Float__init_(tt_Rectangle_getRight($this), tt_Rectangle_getBottom($this));
    var$2[3] = cjag_Point2D$Float__init_(tt_Rectangle_getLeft($this), tt_Rectangle_getBottom($this));
    return var$1;
}
function tt_Rectangle_toString($this) {
    var $sb, var$2, var$3, var$4;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, jl_Class_getName(jl_Object_getClass($this)));
    jl_AbstractStringBuilder_append(var$2, $rt_s(86));
    var$2 = jl_StringBuilder_append0(var$2, $this.$x1);
    jl_AbstractStringBuilder_append(var$2, $rt_s(87));
    var$2 = jl_StringBuilder_append0(var$2, $this.$y1);
    jl_AbstractStringBuilder_append(var$2, $rt_s(88));
    var$2 = jl_StringBuilder_append0(var$2, $this.$width0);
    jl_AbstractStringBuilder_append(var$2, $rt_s(89));
    var$2 = jl_StringBuilder_append0(var$2, $this.$height0);
    jl_AbstractStringBuilder_append(var$2, $rt_s(56));
    var$2 = jl_AbstractStringBuilder_toString(var$2);
    jl_AbstractStringBuilder_append($sb, jl_String_substring(var$2, 0, jl_String_length(var$2) - 1 | 0));
    var$2 = ju_Locale_US;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = jl_Float_valueOf(tt_Rectangle_getBottom($this));
    var$4[1] = jl_Float_valueOf(tt_Rectangle_getRight($this));
    jl_AbstractStringBuilder_append($sb, ju_Formatter_toString(ju_Formatter_format(ju_Formatter__init_(var$2), $rt_s(90), var$3)));
    return jl_AbstractStringBuilder_toString($sb);
}
function tt_Rectangle_boundingBoxOf($rectangles) {
    var $minx, $miny, $maxx, $maxy, $r;
    $minx = 3.4028234663852886E38;
    $miny = 3.4028234663852886E38;
    $maxx = 1.401298464324817E-45;
    $maxy = 1.401298464324817E-45;
    $rectangles = ju_AbstractList_iterator($rectangles);
    while (ju_AbstractList$1_hasNext($rectangles)) {
        $r = ju_AbstractList$1_next($rectangles);
        $minx = jl_Math_min0(cjag_Rectangle2D$Float_getX($r), $minx);
        $miny = jl_Math_min0(cjag_Rectangle2D$Float_getY($r), $miny);
        $maxx = jl_Math_max0(cjag_RectangularShape_getMaxX($r), $maxx);
        $maxy = jl_Math_max0(cjag_RectangularShape_getMaxY($r), $maxy);
    }
    return tt_Rectangle__init_($miny, $minx, $maxx - $minx, $maxy - $miny);
}
function tt_Rectangle__clinit_() {
    tt_Rectangle_ILL_DEFINED_ORDER = new tt_Rectangle$1;
}
function jl_Iterable() {
}
function ju_Collection() {
}
function ju_AbstractCollection() {
    jl_Object.call(this);
}
function ju_AbstractCollection_isEmpty($this) {
    return $this.$size0 ? 0 : 1;
}
function ju_AbstractCollection_contains($this, $o) {
    var $iter, $e;
    $iter = ju_AbstractList_iterator($this);
    a: {
        while (ju_AbstractList$1_hasNext($iter)) {
            b: {
                $e = ju_AbstractList$1_next($iter);
                if ($e !== null) {
                    if (!$e.$equals($o))
                        break b;
                    else
                        break a;
                }
                if ($o === null)
                    break a;
            }
        }
        return 0;
    }
    return 1;
}
function ju_AbstractCollection_toArray($this, $a) {
    var var$2, $i, $i_0, $iter, var$6;
    var$2 = $a.data;
    $i = $this.$size0;
    $i_0 = var$2.length;
    if ($i_0 < $i)
        $a = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($a)), $i);
    else
        while ($i < $i_0) {
            var$2[$i] = null;
            $i = $i + 1 | 0;
        }
    $i_0 = 0;
    $iter = ju_AbstractList_iterator($this);
    while (ju_AbstractList$1_hasNext($iter)) {
        var$2 = $a.data;
        var$6 = $i_0 + 1 | 0;
        var$2[$i_0] = ju_AbstractList$1_next($iter);
        $i_0 = var$6;
    }
    return $a;
}
function ju_AbstractCollection_addAll($this, $c) {
    var $changed, $iter;
    $changed = 0;
    $iter = ju_AbstractList_iterator($c);
    while (ju_AbstractList$1_hasNext($iter)) {
        if (!ju_ArrayList_add($this, ju_AbstractList$1_next($iter)))
            continue;
        $changed = 1;
    }
    return $changed;
}
function ju_AbstractCollection_removeAll($this, $c) {
    var $changed, $iter;
    $changed = 0;
    $iter = ju_AbstractList_iterator($this);
    while (ju_AbstractList$1_hasNext($iter)) {
        if (ju_AbstractCollection_contains($c, ju_AbstractList$1_next($iter))) {
            ju_AbstractList$1_remove($iter);
            $changed = 1;
        }
    }
    return $changed;
}
function ju_AbstractCollection_toString($this) {
    var $sb, $iter;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    jl_AbstractStringBuilder_append($sb, $rt_s(50));
    $iter = ju_AbstractList_iterator($this);
    if (ju_AbstractList$1_hasNext($iter))
        jl_AbstractStringBuilder_append($sb, jl_String_valueOf(ju_AbstractList$1_next($iter)));
    while (ju_AbstractList$1_hasNext($iter)) {
        jl_AbstractStringBuilder_append($sb, $rt_s(91));
        jl_AbstractStringBuilder_append($sb, jl_String_valueOf(ju_AbstractList$1_next($iter)));
    }
    jl_AbstractStringBuilder_append($sb, $rt_s(56));
    return jl_AbstractStringBuilder_toString($sb);
}
function ju_List() {
}
function ju_AbstractList() {
    ju_AbstractCollection.call(this);
    this.$modCount = 0;
}
function ju_AbstractList_iterator($this) {
    var var$1;
    var$1 = new ju_AbstractList$1;
    var$1.$this$00 = $this;
    var$1.$modCount0 = var$1.$this$00.$modCount;
    var$1.$size1 = var$1.$this$00.$size();
    var$1.$removeIndex = (-1);
    return var$1;
}
function ju_AbstractList_remove($this, $index) {
    var var$2;
    var$2 = new jl_UnsupportedOperationException;
    jl_Throwable__init_0(var$2);
    $rt_throw(var$2);
}
function ju_AbstractList_listIterator($this, $index) {
    var var$2, var$3, var$4;
    var$2 = new ju_AbstractList$TListIteratorImpl;
    var$3 = $this.$modCount;
    var$4 = $this.$size0;
    var$2.$this$01 = $this;
    var$2.$i = $index;
    var$2.$j = $index;
    var$2.$lastModCount = var$3;
    var$2.$sz = var$4;
    return var$2;
}
function ju_AbstractList_subList($this, $fromIndex, $toIndex) {
    var var$3;
    if ($fromIndex > $toIndex) {
        var$3 = new jl_IllegalArgumentException;
        jl_Throwable__init_0(var$3);
        $rt_throw(var$3);
    }
    if ($fromIndex >= 0 && $toIndex <= $this.$size0) {
        if (!$rt_isInstance($this, ju_RandomAccess))
            return ju_AbstractList$SubAbstractList__init_($this, $fromIndex, $toIndex);
        var$3 = new ju_AbstractList$SubAbstractListRandomAccess;
        ju_AbstractList$SubAbstractList__init_0(var$3, $this, $fromIndex, $toIndex);
        return var$3;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$3);
    $rt_throw(var$3);
}
function ju_AbstractList_hashCode($this) {
    var $hashCode, $iter, $elem;
    $hashCode = 1;
    $iter = ju_AbstractList_iterator($this);
    while (ju_AbstractList$1_hasNext($iter)) {
        $elem = ju_AbstractList$1_next($iter);
        $hashCode = (31 * $hashCode | 0) + ($elem === null ? 0 : $elem.$hashCode0()) | 0;
    }
    return $hashCode;
}
function ju_AbstractList_equals($this, $other) {
    var $list, $i, var$4;
    if (!$rt_isInstance($other, ju_List))
        return 0;
    $list = $other;
    if ($this.$size0 != $list.$size0)
        return 0;
    $i = 0;
    while ($i < $list.$size0) {
        $other = ju_ArrayList_get($this, $i);
        var$4 = ju_ArrayList_get($list, $i);
        if (!($other === var$4 ? 1 : $other !== null ? $other.$equals(var$4) : var$4 !== null ? 0 : 1))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
}
function ju_RandomAccess() {
}
function ju_ArrayList() {
    var a = this; ju_AbstractList.call(a);
    a.$array = null;
    a.$size0 = 0;
}
function ju_ArrayList__init_() {
    var var_0 = new ju_ArrayList();
    ju_ArrayList__init_0(var_0);
    return var_0;
}
function ju_ArrayList__init_1(var_0) {
    var var_1 = new ju_ArrayList();
    ju_ArrayList__init_2(var_1, var_0);
    return var_1;
}
function ju_ArrayList__init_3(var_0) {
    var var_1 = new ju_ArrayList();
    ju_ArrayList__init_4(var_1, var_0);
    return var_1;
}
function ju_ArrayList__init_0($this) {
    ju_ArrayList__init_2($this, 10);
}
function ju_ArrayList__init_2($this, $initialCapacity) {
    $this.$array = $rt_createArray(jl_Object, $initialCapacity);
}
function ju_ArrayList__init_4($this, $c) {
    var $iter, $i;
    ju_ArrayList__init_2($this, $c.$size());
    $iter = $c.$iterator();
    $i = 0;
    while ($i < $this.$array.data.length) {
        $this.$array.data[$i] = $iter.$next();
        $i = $i + 1 | 0;
    }
    $this.$size0 = $this.$array.data.length;
}
function ju_ArrayList_ensureCapacity($this, $minCapacity) {
    var $newLength;
    if ($this.$array.data.length < $minCapacity) {
        $newLength = $this.$array.data.length >= 1073741823 ? 2147483647 : jl_Math_max($minCapacity, jl_Math_max($this.$array.data.length * 2 | 0, 5));
        $this.$array = ju_Arrays_copyOf0($this.$array, $newLength);
    }
}
function ju_ArrayList_get($this, $index) {
    ju_ArrayList_checkIndex($this, $index);
    return $this.$array.data[$index];
}
function ju_ArrayList_size($this) {
    return $this.$size0;
}
function ju_ArrayList_set($this, $index, $element) {
    var $old;
    ju_ArrayList_checkIndex($this, $index);
    $old = $this.$array.data[$index];
    $this.$array.data[$index] = $element;
    return $old;
}
function ju_ArrayList_add($this, $element) {
    var var$2, var$3;
    ju_ArrayList_ensureCapacity($this, $this.$size0 + 1 | 0);
    var$2 = $this.$array.data;
    var$3 = $this.$size0;
    $this.$size0 = var$3 + 1 | 0;
    var$2[var$3] = $element;
    $this.$modCount = $this.$modCount + 1 | 0;
    return 1;
}
function ju_ArrayList_add0($this, $index, $element) {
    var $i;
    ju_ArrayList_checkIndexForAdd($this, $index);
    ju_ArrayList_ensureCapacity($this, $this.$size0 + 1 | 0);
    $i = $this.$size0;
    while ($i > $index) {
        $this.$array.data[$i] = $this.$array.data[$i - 1 | 0];
        $i = $i + (-1) | 0;
    }
    $this.$array.data[$index] = $element;
    $this.$size0 = $this.$size0 + 1 | 0;
    $this.$modCount = $this.$modCount + 1 | 0;
}
function ju_ArrayList_remove($this, $i) {
    var $old, var$3, var$4, $i_0;
    ju_ArrayList_checkIndex($this, $i);
    $old = $this.$array.data[$i];
    $this.$size0 = $this.$size0 - 1 | 0;
    while ($i < $this.$size0) {
        var$3 = $this.$array.data;
        var$4 = $this.$array.data;
        $i_0 = $i + 1 | 0;
        var$3[$i] = var$4[$i_0];
        $i = $i_0;
    }
    $this.$array.data[$this.$size0] = null;
    $this.$modCount = $this.$modCount + 1 | 0;
    return $old;
}
function ju_ArrayList_clear($this) {
    var var$1, var$2, var$3, var$4, var$5, var$6;
    var$1 = $this.$array;
    var$2 = 0;
    var$3 = $this.$size0;
    var$4 = null;
    if (var$2 > var$3) {
        var$4 = new jl_IllegalArgumentException;
        jl_Throwable__init_0(var$4);
        $rt_throw(var$4);
    }
    while (var$2 < var$3) {
        var$5 = var$1.data;
        var$6 = var$2 + 1 | 0;
        var$5[var$2] = var$4;
        var$2 = var$6;
    }
    $this.$size0 = 0;
}
function ju_ArrayList_addAll($this, $index, $c) {
    var $gap, $i, $iter, $i_0, var$7;
    ju_ArrayList_checkIndexForAdd($this, $index);
    if (ju_AbstractCollection_isEmpty($c))
        return 0;
    ju_ArrayList_ensureCapacity($this, $this.$size0 + $c.$size0 | 0);
    $gap = $c.$size0;
    $i = $this.$size0 - 1 | 0;
    while ($i >= $index) {
        $this.$array.data[$i + $gap | 0] = $this.$array.data[$i];
        $i = $i + (-1) | 0;
    }
    $this.$size0 = $this.$size0 + $gap | 0;
    $iter = ju_AbstractList_iterator($c);
    $i_0 = 0;
    while ($i_0 < $gap) {
        var$7 = $this.$array.data;
        $i = $index + 1 | 0;
        var$7[$index] = ju_AbstractList$1_next($iter);
        $i_0 = $i_0 + 1 | 0;
        $index = $i;
    }
    $this.$modCount = $this.$modCount + 1 | 0;
    return 1;
}
function ju_ArrayList_checkIndex($this, $index) {
    var var$2;
    if ($index >= 0 && $index < $this.$size0)
        return;
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$2);
    $rt_throw(var$2);
}
function ju_ArrayList_checkIndexForAdd($this, $index) {
    var var$2;
    if ($index >= 0 && $index <= $this.$size0)
        return;
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$2);
    $rt_throw(var$2);
}
function tte_ExtractionAlgorithm() {
}
function tte_BasicExtractionAlgorithm() {
    jl_Object.call(this);
    this.$verticalRulings = null;
}
function tte_BasicExtractionAlgorithm__init_() {
    var var_0 = new tte_BasicExtractionAlgorithm();
    tte_BasicExtractionAlgorithm__init_0(var_0);
    return var_0;
}
function tte_BasicExtractionAlgorithm__init_0($this) {
    $this.$verticalRulings = null;
}
function tte_BasicExtractionAlgorithm_extract($this, $page) {
    var var$2, $textChunks, $lines, var$5, $elements, $lines_0, $table, $tc, $i, $j, $found;
    if (!$page.$texts.$size0) {
        var$2 = $rt_createArray(tt_Table, 1);
        var$2.data[0] = tt_Table__init_($rt_s(44));
        return ju_Arrays_asList(var$2);
    }
    $textChunks = $this.$verticalRulings === null ? tt_TextElement_mergeWords($page.$texts) : tt_TextElement_mergeWords0($page.$texts, $this.$verticalRulings);
    tt_TextChunk_$callClinit();
    $lines = ju_ArrayList__init_();
    if ($textChunks.$size0) {
        var$5 = tt_Rectangle_boundingBoxOf($textChunks).$width0;
        $elements = tt_Line__init_();
        tt_Line_addTextChunk($elements, ju_ArrayList_get($textChunks, 0));
        ju_ArrayList_remove($textChunks, 0);
        ju_ArrayList_add($lines, $elements);
        $elements = ju_ArrayList_get($lines, $lines.$size0 - 1 | 0);
        $textChunks = ju_AbstractList_iterator($textChunks);
        while (ju_AbstractList$1_hasNext($textChunks)) {
            $lines_0 = ju_AbstractList$1_next($textChunks);
            if (tt_Rectangle_verticalOverlapRatio($elements, $lines_0) < 0.1) {
                if ($elements.$width0 / var$5 > 0.9 && tt_TextChunk_allSameChar($elements.$textChunks))
                    ju_ArrayList_remove($lines, $lines.$size0 - 1 | 0);
                ju_ArrayList_add($lines, tt_Line__init_());
                $elements = ju_ArrayList_get($lines, $lines.$size0 - 1 | 0);
            }
            tt_Line_addTextChunk($elements, $lines_0);
        }
        if ($elements.$width0 / var$5 > 0.9 && tt_TextChunk_allSameChar($elements.$textChunks))
            ju_ArrayList_remove($lines, $lines.$size0 - 1 | 0);
        $lines_0 = ju_ArrayList__init_1($lines.$size0);
        $textChunks = ju_AbstractList_iterator($lines);
        while (ju_AbstractList$1_hasNext($textChunks)) {
            $lines = ju_AbstractList$1_next($textChunks);
            $elements = jl_Character_valueOf(32);
            $table = tt_Line__init_();
            $lines = ju_AbstractList_iterator($lines.$textChunks);
            while (ju_AbstractList$1_hasNext($lines)) {
                $tc = ju_AbstractList_iterator(tt_TextChunk_squeeze(ju_AbstractList$1_next($lines), $elements, 3));
                while (ju_AbstractList$1_hasNext($tc)) {
                    tt_Line_addTextChunk($table, ju_AbstractList$1_next($tc));
                }
            }
            ju_ArrayList_add($lines_0, $table);
        }
        $lines = $lines_0;
    }
    if ($this.$verticalRulings === null)
        $textChunks = tte_BasicExtractionAlgorithm_columnPositions($lines);
    else {
        $textChunks = $this.$verticalRulings;
        $elements = new tte_BasicExtractionAlgorithm$1;
        $elements.$this$02 = $this;
        ju_Collections_sort($textChunks, $elements);
        $textChunks = ju_ArrayList__init_1($this.$verticalRulings.$size());
        $elements = $this.$verticalRulings.$iterator();
        while ($elements.$hasNext()) {
            ju_ArrayList_add($textChunks, jl_Float_valueOf($elements.$next().$getLeft()));
        }
    }
    $table = tt_Table__init_0($this);
    cjag_Rectangle2D$Float_setRect0($table, tt_Rectangle_getLeft($page), tt_Rectangle_getTop($page), cjag_Rectangle2D$Float_getWidth($page), cjag_Rectangle2D$Float_getHeight($page));
    $i = 0;
    while ($i < $lines.$size0) {
        $elements = ju_ArrayList_get($lines, $i).$textChunks;
        $page = new tte_BasicExtractionAlgorithm$2;
        $page.$this$03 = $this;
        ju_Collections_sort($elements, $page);
        $page = ju_AbstractList_iterator($elements);
        while (ju_AbstractList$1_hasNext($page)) {
            $tc = ju_AbstractList$1_next($page);
            if (tt_TextChunk_isSameChar($tc, tt_Line_WHITE_SPACE_CHARS))
                continue;
            $j = 0;
            $found = 0;
            a: {
                while ($j < $textChunks.$size0) {
                    if (tt_Rectangle_getLeft($tc) <= ju_ArrayList_get($textChunks, $j).$value0) {
                        $found = 1;
                        break a;
                    }
                    $j = $j + 1 | 0;
                }
            }
            if (!$found)
                $j = $textChunks.$size0;
            tt_Table_add($table, $tc, $i, $j);
        }
        $i = $i + 1 | 0;
    }
    var$2 = $rt_createArray(tt_Table, 1);
    var$2.data[0] = $table;
    return ju_Arrays_asList(var$2);
}
function tte_BasicExtractionAlgorithm_toString($this) {
    return $rt_s(92);
}
function tte_BasicExtractionAlgorithm_columnPositions($lines) {
    var $regions, $rv, $tc, $r, $l, $lineTextElements, $cr, $overlaps, $te;
    $regions = ju_ArrayList__init_();
    $rv = ju_AbstractList_iterator(ju_ArrayList_get($lines, 0).$textChunks);
    while (ju_AbstractList$1_hasNext($rv)) {
        $tc = ju_AbstractList$1_next($rv);
        if (tt_TextChunk_isSameChar($tc, tt_Line_WHITE_SPACE_CHARS))
            continue;
        $r = new tt_Rectangle;
        cjag_Rectangle2D__init_0($r);
        cjag_Rectangle2D$Float_setRect1($r, $tc);
        ju_ArrayList_add($regions, $r);
    }
    $lines = ju_AbstractList$SubAbstractList_iterator(ju_AbstractList_subList($lines, 1, $lines.$size0));
    while (ju_AbstractList$SubAbstractList$SubAbstractListIterator_hasNext($lines)) {
        $l = ju_AbstractList$SubAbstractList$SubAbstractListIterator_next($lines);
        $lineTextElements = ju_ArrayList__init_();
        $rv = ju_AbstractList_iterator($l.$textChunks);
        while (ju_AbstractList$1_hasNext($rv)) {
            $tc = ju_AbstractList$1_next($rv);
            if (!tt_TextChunk_isSameChar($tc, tt_Line_WHITE_SPACE_CHARS))
                ju_ArrayList_add($lineTextElements, $tc);
        }
        $rv = ju_AbstractList_iterator($regions);
        while (ju_AbstractList$1_hasNext($rv)) {
            $cr = ju_AbstractList$1_next($rv);
            $overlaps = ju_ArrayList__init_();
            $r = ju_AbstractList_iterator($lineTextElements);
            while (ju_AbstractList$1_hasNext($r)) {
                $te = ju_AbstractList$1_next($r);
                if (tt_Rectangle_horizontallyOverlaps($cr, $te))
                    ju_ArrayList_add($overlaps, $te);
            }
            $r = ju_AbstractList_iterator($overlaps);
            while (ju_AbstractList$1_hasNext($r)) {
                tt_Rectangle_merge($cr, ju_AbstractList$1_next($r));
            }
            ju_AbstractCollection_removeAll($lineTextElements, $overlaps);
        }
        $rv = ju_AbstractList_iterator($lineTextElements);
        while (ju_AbstractList$1_hasNext($rv)) {
            $te = ju_AbstractList$1_next($rv);
            $r = new tt_Rectangle;
            cjag_Rectangle2D__init_0($r);
            cjag_Rectangle2D$Float_setRect1($r, $te);
            ju_ArrayList_add($regions, $r);
        }
    }
    $rv = ju_ArrayList__init_();
    $lines = ju_AbstractList_iterator($regions);
    while (ju_AbstractList$1_hasNext($lines)) {
        ju_ArrayList_add($rv, jl_Float_valueOf(tt_Rectangle_getRight(ju_AbstractList$1_next($lines))));
    }
    ju_Collections_sort($rv, ju_Collections_naturalOrder);
    return $rv;
}
function tte_SpreadsheetExtractionAlgorithm() {
    jl_Object.call(this);
}
var tte_SpreadsheetExtractionAlgorithm_POINT_COMPARATOR = null;
var tte_SpreadsheetExtractionAlgorithm_X_FIRST_POINT_COMPARATOR = null;
function tte_SpreadsheetExtractionAlgorithm__init_() {
    var var_0 = new tte_SpreadsheetExtractionAlgorithm();
    tte_SpreadsheetExtractionAlgorithm__init_0(var_0);
    return var_0;
}
function tte_SpreadsheetExtractionAlgorithm__init_0($this) {
    return;
}
function tte_SpreadsheetExtractionAlgorithm_extract($this, $page) {
    return tte_SpreadsheetExtractionAlgorithm_extract0($this, $page, tt_Page_getRulings($page));
}
function tte_SpreadsheetExtractionAlgorithm_extract0($this, $page, $rulings) {
    var $horizontalR, $verticalR, $r, $cells, $spreadsheetAreas, $spreadsheets, $area, $overlappingCells, $c, $horizontalOverlappingRulings, $hr, $verticalOverlappingRulings, $vr, $t, var$17, var$18, var$19;
    $horizontalR = ju_ArrayList__init_();
    $verticalR = ju_ArrayList__init_();
    $rulings = ju_AbstractList_iterator($rulings);
    while (ju_AbstractList$1_hasNext($rulings)) {
        $r = ju_AbstractList$1_next($rulings);
        if (tt_Ruling_horizontal($r))
            ju_ArrayList_add($horizontalR, $r);
        else if (tt_Ruling_vertical($r))
            ju_ArrayList_add($verticalR, $r);
    }
    $rulings = tt_Ruling_collapseOrientedRulings($horizontalR);
    $horizontalR = tt_Ruling_collapseOrientedRulings($verticalR);
    $cells = tte_SpreadsheetExtractionAlgorithm_findCells($rulings, $horizontalR);
    $spreadsheetAreas = tte_SpreadsheetExtractionAlgorithm_findSpreadsheetsFromCells($cells);
    $spreadsheets = ju_ArrayList__init_();
    $spreadsheetAreas = ju_AbstractList_iterator($spreadsheetAreas);
    while (ju_AbstractList$1_hasNext($spreadsheetAreas)) {
        $area = ju_AbstractList$1_next($spreadsheetAreas);
        $overlappingCells = ju_ArrayList__init_();
        $verticalR = ju_AbstractList_iterator($cells);
        while (ju_AbstractList$1_hasNext($verticalR)) {
            $c = ju_AbstractList$1_next($verticalR);
            if (cjag_RectangularShape_intersects($c, $area)) {
                $c.$textElements0 = tt_TextElement_mergeWords(tt_Page_getText($page, $c));
                ju_ArrayList_add($overlappingCells, $c);
            }
        }
        $horizontalOverlappingRulings = ju_ArrayList__init_();
        $verticalR = ju_AbstractList_iterator($rulings);
        while (ju_AbstractList$1_hasNext($verticalR)) {
            $hr = ju_AbstractList$1_next($verticalR);
            if (cjag_Rectangle2D_intersectsLine0($area, $hr))
                ju_ArrayList_add($horizontalOverlappingRulings, $hr);
        }
        $verticalOverlappingRulings = ju_ArrayList__init_();
        $verticalR = ju_AbstractList_iterator($horizontalR);
        while (ju_AbstractList$1_hasNext($verticalR)) {
            $vr = ju_AbstractList$1_next($verticalR);
            if (cjag_Rectangle2D_intersectsLine0($area, $vr))
                ju_ArrayList_add($verticalOverlappingRulings, $vr);
        }
        $t = new tt_TableWithRulingLines;
        tt_Table__init_1($t, $this);
        $t.$si = tt_RectangleSpatialIndex__init_();
        cjag_Rectangle2D$Float_setRect1($t, $area);
        $t.$verticalRulings0 = $verticalOverlappingRulings;
        $t.$horizontalRulings = $horizontalOverlappingRulings;
        if (!ju_AbstractCollection_isEmpty($overlappingCells)) {
            $verticalR = ju_AbstractList_iterator($overlappingCells);
            while (ju_AbstractList$1_hasNext($verticalR)) {
                $r = ju_AbstractList$1_next($verticalR);
                tt_RectangleSpatialIndex_add($t.$si, $r);
            }
            $verticalR = tt_TableWithRulingLines_rowsOfCells($overlappingCells);
            var$17 = 0;
            while (var$17 < $verticalR.$size0) {
                $r = ju_AbstractList_iterator(ju_ArrayList_get($verticalR, var$17));
                $horizontalOverlappingRulings = ju_AbstractList$1_next($r);
                $area = tt_TableWithRulingLines_rowsOfCells(tt_RectangleSpatialIndex_contains($t.$si, tt_Rectangle__init_(tt_Rectangle_getBottom($horizontalOverlappingRulings), tt_Rectangle_getLeft(tt_RectangleSpatialIndex_getBounds($t.$si)), tt_Rectangle_getLeft($horizontalOverlappingRulings) - tt_Rectangle_getLeft(tt_RectangleSpatialIndex_getBounds($t.$si)), tt_Rectangle_getBottom(tt_RectangleSpatialIndex_getBounds($t.$si)) - tt_Rectangle_getBottom($horizontalOverlappingRulings))));
                var$18 = 0;
                $overlappingCells = ju_AbstractList_iterator($area);
                while (ju_AbstractList$1_hasNext($overlappingCells)) {
                    var$18 = jl_Math_max(var$18, ju_AbstractList$1_next($overlappingCells).$size0);
                }
                var$19 = var$18 + 1 | 0;
                tt_Table_add($t, $horizontalOverlappingRulings, var$17, var$18);
                while (ju_AbstractList$1_hasNext($r)) {
                    $area = ju_AbstractList$1_next($r);
                    var$18 = var$19 + 1 | 0;
                    tt_Table_add($t, $area, var$17, var$19);
                    var$19 = var$18;
                }
                var$17 = var$17 + 1 | 0;
            }
        }
        ju_ArrayList_add($spreadsheets, $t);
    }
    tt_Utils_sort($spreadsheets, tt_Rectangle_ILL_DEFINED_ORDER);
    return $spreadsheets;
}
function tte_SpreadsheetExtractionAlgorithm_findCells($horizontalRulingLines, $verticalRulingLines) {
    var $cellsFound, $intersectionPoints, $intersectionPointsList, $i, $topLeft, $hv, $xPoints, $yPoints, $p, var$12, $xPoint, $yPoint, $btmRight;
    $cellsFound = ju_ArrayList__init_();
    $intersectionPoints = tt_Ruling_findIntersections($horizontalRulingLines, $verticalRulingLines);
    $intersectionPointsList = ju_ArrayList__init_3(ju_AbstractMap_keySet($intersectionPoints));
    ju_Collections_sort($intersectionPointsList, tte_SpreadsheetExtractionAlgorithm_POINT_COMPARATOR);
    $i = 0;
    while ($i < $intersectionPointsList.$size0) {
        $topLeft = ju_ArrayList_get($intersectionPointsList, $i);
        $hv = ju_TreeMap_get($intersectionPoints, $topLeft);
        $xPoints = ju_ArrayList__init_();
        $yPoints = ju_ArrayList__init_();
        $horizontalRulingLines = ju_AbstractList$SubAbstractList_iterator(ju_AbstractList_subList($intersectionPointsList, $i, $intersectionPointsList.$size0));
        while (ju_AbstractList$SubAbstractList$SubAbstractListIterator_hasNext($horizontalRulingLines)) {
            $p = ju_AbstractList$SubAbstractList$SubAbstractListIterator_next($horizontalRulingLines);
            if (cjag_Point2D$Float_getX($p) === cjag_Point2D$Float_getX($topLeft) && cjag_Point2D$Float_getY($p) > cjag_Point2D$Float_getY($topLeft))
                ju_ArrayList_add($xPoints, $p);
            if (cjag_Point2D$Float_getY($p) === cjag_Point2D$Float_getY($topLeft) && cjag_Point2D$Float_getX($p) > cjag_Point2D$Float_getX($topLeft))
                ju_ArrayList_add($yPoints, $p);
        }
        $horizontalRulingLines = ju_AbstractList_iterator($xPoints);
        a: {
            b: while (true) {
                if (!ju_AbstractList$1_hasNext($horizontalRulingLines))
                    break a;
                var$12 = $hv.data;
                $xPoint = ju_AbstractList$1_next($horizontalRulingLines);
                if (!tt_Ruling_equals(var$12[1], ju_TreeMap_get($intersectionPoints, $xPoint).data[1]))
                    continue;
                $p = ju_AbstractList_iterator($yPoints);
                while (ju_AbstractList$1_hasNext($p)) {
                    $yPoint = ju_AbstractList$1_next($p);
                    if (!tt_Ruling_equals(var$12[0], ju_TreeMap_get($intersectionPoints, $yPoint).data[0]))
                        continue;
                    $btmRight = cjag_Point2D$Float__init_(cjag_Point2D$Float_getX($yPoint), cjag_Point2D$Float_getY($xPoint));
                    if (ju_TreeMap_containsKey($intersectionPoints, $btmRight) && tt_Ruling_equals(ju_TreeMap_get($intersectionPoints, $btmRight).data[0], ju_TreeMap_get($intersectionPoints, $xPoint).data[0]) && tt_Ruling_equals(ju_TreeMap_get($intersectionPoints, $btmRight).data[1], ju_TreeMap_get($intersectionPoints, $yPoint).data[1]))
                        break b;
                }
            }
            $horizontalRulingLines = new tt_Cell;
            tt_Rectangle__init_0($horizontalRulingLines, cjag_Point2D$Float_getY($topLeft), cjag_Point2D$Float_getX($topLeft), cjag_Point2D$Float_getX($btmRight) - cjag_Point2D$Float_getX($topLeft), cjag_Point2D$Float_getY($btmRight) - cjag_Point2D$Float_getY($topLeft));
            $horizontalRulingLines.$placeholder = 0;
            $horizontalRulingLines.$spanning = 0;
            $horizontalRulingLines.$textElements0 = ju_ArrayList__init_();
            ju_ArrayList_add($cellsFound, $horizontalRulingLines);
        }
        $i = $i + 1 | 0;
    }
    return $cellsFound;
}
function tte_SpreadsheetExtractionAlgorithm_findSpreadsheetsFromCells($cells) {
    var $rectangles, $pointSet, $edgesH, $edgesV, $i, $vertex, $cell, var$9, var$10, var$11, $pt, $pointsSortX, $pointsSortY, var$15, $polygons, $polygon, $first, $curr, $nextVertex, $lastAddedVertex, $poly, $top, $left, $bottom, $right;
    $rectangles = ju_ArrayList__init_();
    $pointSet = ju_HashSet__init_();
    $edgesH = ju_HashMap__init_();
    $edgesV = ju_HashMap__init_();
    $i = 0;
    $vertex = new ju_ArrayList;
    $cell = ju_HashSet__init_0(ju_HashMap__init_0($cells.$size0 < 6 ? 11 : $cells.$size0 * 2 | 0));
    $cells = ju_AbstractList_iterator($cells);
    while (ju_AbstractList$1_hasNext($cells)) {
        ju_HashSet_add($cell, ju_AbstractList$1_next($cells));
    }
    ju_ArrayList__init_4($vertex, $cell);
    tt_Utils_sort($vertex, tt_Rectangle_ILL_DEFINED_ORDER);
    $vertex = ju_AbstractList_iterator($vertex);
    while (ju_AbstractList$1_hasNext($vertex)) {
        var$9 = tt_Rectangle_getPoints(ju_AbstractList$1_next($vertex)).data;
        var$10 = var$9.length;
        var$11 = 0;
        while (var$11 < var$10) {
            $pt = var$9[var$11];
            if (!ju_HashSet_contains($pointSet, $pt))
                ju_HashSet_add($pointSet, $pt);
            else
                ju_HashSet_remove($pointSet, $pt);
            var$11 = var$11 + 1 | 0;
        }
    }
    $pointsSortX = ju_ArrayList__init_3($pointSet);
    ju_Collections_sort($pointsSortX, tte_SpreadsheetExtractionAlgorithm_X_FIRST_POINT_COMPARATOR);
    $pointsSortY = ju_ArrayList__init_3($pointSet);
    ju_Collections_sort($pointsSortY, tte_SpreadsheetExtractionAlgorithm_POINT_COMPARATOR);
    while ($i < ju_HashSet_size($pointSet)) {
        var$15 = cjag_Point2D$Float_getY(ju_ArrayList_get($pointsSortY, $i));
        while ($i < ju_HashSet_size($pointSet) && tt_Utils_feq(cjag_Point2D$Float_getY(ju_ArrayList_get($pointsSortY, $i)), var$15)) {
            $cells = ju_ArrayList_get($pointsSortY, $i);
            var$10 = $i + 1 | 0;
            ju_HashMap_putImpl($edgesH, $cells, ju_ArrayList_get($pointsSortY, var$10));
            ju_HashMap_putImpl($edgesH, ju_ArrayList_get($pointsSortY, var$10), ju_ArrayList_get($pointsSortY, $i));
            $i = $i + 2 | 0;
        }
    }
    var$11 = 0;
    while (var$11 < ju_HashSet_size($pointSet)) {
        var$15 = cjag_Point2D$Float_getX(ju_ArrayList_get($pointsSortX, var$11));
        while (var$11 < ju_HashSet_size($pointSet) && tt_Utils_feq(cjag_Point2D$Float_getX(ju_ArrayList_get($pointsSortX, var$11)), var$15)) {
            $cells = ju_ArrayList_get($pointsSortX, var$11);
            var$10 = var$11 + 1 | 0;
            ju_HashMap_putImpl($edgesV, $cells, ju_ArrayList_get($pointsSortX, var$10));
            ju_HashMap_putImpl($edgesV, ju_ArrayList_get($pointsSortX, var$10), ju_ArrayList_get($pointsSortX, var$11));
            var$11 = var$11 + 2 | 0;
        }
    }
    $polygons = ju_ArrayList__init_();
    while (!ju_HashMap_isEmpty($edgesH)) {
        $polygon = ju_ArrayList__init_();
        $first = ju_HashMap_keySet($edgesH).$iterator().$next();
        ju_ArrayList_add($polygon, tte_SpreadsheetExtractionAlgorithm$PolygonVertex__init_($first, tte_SpreadsheetExtractionAlgorithm$Direction_HORIZONTAL));
        ju_HashMap_remove($edgesH, $first);
        while (true) {
            $curr = ju_ArrayList_get($polygon, $polygon.$size0 - 1 | 0);
            if ($curr.$direction !== tte_SpreadsheetExtractionAlgorithm$Direction_HORIZONTAL) {
                $nextVertex = ju_HashMap_get($edgesH, $curr.$point);
                ju_HashMap_remove($edgesH, $curr.$point);
                $lastAddedVertex = tte_SpreadsheetExtractionAlgorithm$PolygonVertex__init_($nextVertex, tte_SpreadsheetExtractionAlgorithm$Direction_HORIZONTAL);
                ju_ArrayList_add($polygon, $lastAddedVertex);
            } else {
                $nextVertex = ju_HashMap_get($edgesV, $curr.$point);
                ju_HashMap_remove($edgesV, $curr.$point);
                $lastAddedVertex = tte_SpreadsheetExtractionAlgorithm$PolygonVertex__init_($nextVertex, tte_SpreadsheetExtractionAlgorithm$Direction_VERTICAL);
                ju_ArrayList_add($polygon, $lastAddedVertex);
            }
            if (tte_SpreadsheetExtractionAlgorithm$PolygonVertex_equals($lastAddedVertex, ju_ArrayList_get($polygon, 0)))
                break;
        }
        ju_ArrayList_remove($polygon, $polygon.$size0 - 1 | 0);
        $cells = ju_AbstractList_iterator($polygon);
        while (ju_AbstractList$1_hasNext($cells)) {
            $vertex = ju_AbstractList$1_next($cells);
            ju_HashMap_remove($edgesH, $vertex.$point);
            ju_HashMap_remove($edgesV, $vertex.$point);
        }
        ju_ArrayList_add($polygons, $polygon);
    }
    $cells = ju_AbstractList_iterator($polygons);
    while (ju_AbstractList$1_hasNext($cells)) {
        $poly = ju_AbstractList$1_next($cells);
        $top = 3.4028234663852886E38;
        $left = 3.4028234663852886E38;
        $bottom = 1.401298464324817E-45;
        $right = 1.401298464324817E-45;
        $cell = ju_AbstractList_iterator($poly);
        while (ju_AbstractList$1_hasNext($cell)) {
            $pt = ju_AbstractList$1_next($cell);
            $top = jl_Math_min0($top, cjag_Point2D$Float_getY($pt.$point));
            $left = jl_Math_min0($left, cjag_Point2D$Float_getX($pt.$point));
            $bottom = jl_Math_max0($bottom, cjag_Point2D$Float_getY($pt.$point));
            $right = jl_Math_max0($right, cjag_Point2D$Float_getX($pt.$point));
        }
        ju_ArrayList_add($rectangles, tt_Rectangle__init_($top, $left, $right - $left, $bottom - $top));
    }
    return $rectangles;
}
function tte_SpreadsheetExtractionAlgorithm_toString($this) {
    return $rt_s(93);
}
function tte_SpreadsheetExtractionAlgorithm__clinit_() {
    tte_SpreadsheetExtractionAlgorithm_POINT_COMPARATOR = new tte_SpreadsheetExtractionAlgorithm$1;
    tte_SpreadsheetExtractionAlgorithm_X_FIRST_POINT_COMPARATOR = new tte_SpreadsheetExtractionAlgorithm$2;
}
function jl_AutoCloseable() {
}
function ji_Closeable() {
}
function ji_Flushable() {
}
function ji_Writer() {
    jl_Object.call(this);
    this.$lock = null;
}
function ji_StringWriter() {
    ji_Writer.call(this);
    this.$buf = null;
}
function ji_StringWriter__init_() {
    var var_0 = new ji_StringWriter();
    ji_StringWriter__init_0(var_0);
    return var_0;
}
function ji_StringWriter__init_0($this) {
    var var$1;
    $this.$lock = $this;
    var$1 = new jl_StringBuffer;
    jl_AbstractStringBuilder__init_2(var$1, 16);
    $this.$buf = var$1;
    $this.$lock = $this.$buf;
}
function ji_StringWriter_close($this) {
    return;
}
function ji_StringWriter_flush($this) {
    return;
}
function ji_StringWriter_toString($this) {
    return jl_AbstractStringBuilder_toString($this.$buf);
}
function ji_StringWriter_write($this, $cbuf, $offset, $count) {
    var var$4, var$5;
    if ($offset >= 0) {
        var$4 = $cbuf.data.length;
        if ($offset <= var$4 && $count >= 0 && $count <= (var$4 - $offset | 0)) {
            if (!$count)
                return;
            jl_AbstractStringBuilder_append2($this.$buf, $cbuf, $offset, $count);
            return;
        }
    }
    var$5 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$5);
    $rt_throw(var$5);
}
function ji_StringWriter_write0($this, $oneChar) {
    jl_AbstractStringBuilder_append1($this.$buf, $oneChar & 65535);
}
function ji_StringWriter_write1($this, $str) {
    jl_AbstractStringBuilder_append($this.$buf, $str);
}
function ji_StringWriter_write2($this, $str, $offset, $count) {
    var $sub;
    $sub = jl_String_substring($str, $offset, $offset + $count | 0);
    jl_AbstractStringBuilder_append($this.$buf, $sub);
}
function ji_StringWriter_append($this, $c) {
    ji_StringWriter_write0($this, $c);
    return $this;
}
function ji_StringWriter_append0($this, $csq) {
    if (null === $csq)
        ji_StringWriter_write1($this, $rt_s(57));
    else
        ji_StringWriter_write1($this, $csq);
    return $this;
}
function ji_StringWriter_append1($this, $csq, $start, $end) {
    var $output;
    if (null === $csq)
        $csq = $rt_s(57);
    $output = $csq.$subSequence($start, $end).$toString();
    ji_StringWriter_write2($this, $output, 0, jl_String_length($output));
    return $this;
}
function ji_StringWriter_append2($this, var$1) {
    ji_StringWriter_write0($this, var$1);
    return $this;
}
function ji_StringWriter_append3($this, var$1, var$2, var$3) {
    return ji_StringWriter_append1($this, var$1, var$2, var$3);
}
function ji_StringWriter_append4($this, var$1) {
    return ji_StringWriter_append0($this, var$1);
}
function ttw_Writer() {
}
function ttw_CSVWriter() {
    jl_Object.call(this);
    this.$format0 = null;
}
function ttw_CSVWriter__init_() {
    var var_0 = new ttw_CSVWriter();
    ttw_CSVWriter__init_0(var_0);
    return var_0;
}
function ttw_CSVWriter__init_0($this) {
    oacc_CSVFormat_$callClinit();
    $this.$format0 = oacc_CSVFormat_EXCEL;
}
function ttw_CSVWriter_write($this, $out, $tables) {
    var $printer, $table, var$5, var$6, var$7, var$8, $row, $cells, $$je;
    a: {
        $printer = new oacc_CSVPrinter;
        $table = $this.$format0;
        $printer.$newRecord = 1;
        oacc_Assertions_notNull($out, $rt_s(94));
        oacc_Assertions_notNull($table, $rt_s(95));
        $printer.$out0 = $out;
        $printer.$format1 = $table;
        if (oacc_CSVFormat_getHeaderComments($table) !== null) {
            var$5 = oacc_CSVFormat_getHeaderComments($table).data;
            var$6 = var$5.length;
            var$7 = 0;
            while (true) {
                if (var$7 >= var$6)
                    break a;
                $out = var$5[var$7];
                if ($out !== null)
                    oacc_CSVPrinter_printComment($printer, $out);
                var$7 = var$7 + 1 | 0;
            }
        }
    }
    if (oacc_CSVFormat_getHeader($table) !== null && !$table.$skipHeaderRecord)
        oacc_CSVPrinter_printRecord($printer, oacc_CSVFormat_getHeader($table));
    $out = null;
    b: {
        c: {
            try {
                var$8 = $out;
                $tables = ju_AbstractList_iterator($tables);
                while (true) {
                    var$8 = $out;
                    if (!ju_AbstractList$1_hasNext($tables))
                        break;
                    var$8 = $out;
                    $table = ju_AbstractList_iterator(tt_Table_getRows(ju_AbstractList$1_next($tables)));
                    while (true) {
                        var$8 = $out;
                        if (!ju_AbstractList$1_hasNext($table))
                            break;
                        var$8 = $out;
                        $row = ju_AbstractList$1_next($table);
                        $cells = ju_ArrayList__init_1(ju_ArrayList_size($row));
                        $row = ju_AbstractList_iterator($row);
                        while (true) {
                            var$8 = $out;
                            if (!ju_AbstractList$1_hasNext($row))
                                break;
                            var$8 = $out;
                            ju_ArrayList_add($cells, ju_AbstractList$1_next($row).$getText1());
                        }
                        var$8 = $out;
                        oacc_CSVPrinter_printRecord0($printer, $cells);
                    }
                    var$8 = $out;
                }
                var$8 = $out;
                oacc_CSVPrinter_flush($printer);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Throwable) {
                    $tables = $$je;
                    break c;
                } else{
                    $out = $$je;
                    break b;
                }
            }
            oacc_CSVPrinter_close($printer);
            return;
        }
        try {
            var$8 = $tables;
            var$8 = $out;
            $rt_throw($tables);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            $out = $$je;

        }
    }
    d: {
        if (var$8 === null)
            oacc_CSVPrinter_close($printer);
        else {
            try {
                oacc_CSVPrinter_close($printer);
                break d;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_Throwable) {
                    $tables = $$je;
                } else {
                    throw $$e;
                }
            }
            jl_Throwable_addSuppressed(var$8, $tables);
        }
    }
    $rt_throw($out);
}
function ju_Comparator() {
}
function jl_String$_clinit_$lambda$_81_0() {
    jl_Object.call(this);
}
function jl_Character() {
    jl_Object.call(this);
    this.$value1 = 0;
}
var jl_Character_TYPE = null;
var jl_Character_digitMapping = null;
var jl_Character_classMapping = null;
var jl_Character_characterCache = null;
var jl_Character_$$metadata$$0 = null;
var jl_Character_$$metadata$$1 = null;
function jl_Character__init_(var_0) {
    var var_1 = new jl_Character();
    jl_Character__init_0(var_1, var_0);
    return var_1;
}
function jl_Character__init_0($this, $value) {
    $this.$value1 = $value;
}
function jl_Character_charValue($this) {
    return $this.$value1;
}
function jl_Character_valueOf($value) {
    var $result;
    if ($value >= jl_Character_characterCache.data.length)
        return jl_Character__init_($value);
    $result = jl_Character_characterCache.data[$value];
    if ($result === null) {
        $result = jl_Character__init_($value);
        jl_Character_characterCache.data[$value] = $result;
    }
    return $result;
}
function jl_Character_toString($this) {
    return jl_Character_toString0($this.$value1);
}
function jl_Character_equals($this, $other) {
    if ($this === $other)
        return 1;
    return $other instanceof jl_Character && $other.$value1 == $this.$value1 ? 1 : 0;
}
function jl_Character_hashCode($this) {
    return $this.$value1;
}
function jl_Character_toString0($c) {
    var var$2, var$3;
    var$2 = new jl_String;
    var$3 = $rt_createCharArray(1);
    var$3.data[0] = $c;
    jl_String__init_0(var$2, var$3);
    return var$2;
}
function jl_Character_isSupplementaryCodePoint($codePoint) {
    return $codePoint >= 65536 && $codePoint <= 1114111 ? 1 : 0;
}
function jl_Character_isHighSurrogate($ch) {
    return ($ch & 64512) != 55296 ? 0 : 1;
}
function jl_Character_isLowSurrogate($ch) {
    return ($ch & 64512) != 56320 ? 0 : 1;
}
function jl_Character_isSurrogate($ch) {
    return !jl_Character_isHighSurrogate($ch) && !jl_Character_isLowSurrogate($ch) ? 0 : 1;
}
function jl_Character_isSurrogatePair($high, $low) {
    return jl_Character_isHighSurrogate($high) && jl_Character_isLowSurrogate($low) ? 1 : 0;
}
function jl_Character_toCodePoint($high, $low) {
    return (($high & 1023) << 10 | $low & 1023) + 65536 | 0;
}
function jl_Character_highSurrogate($codePoint) {
    return (55296 | ($codePoint - 65536 | 0) >> 10 & 1023) & 65535;
}
function jl_Character_lowSurrogate($codePoint) {
    return (56320 | $codePoint & 1023) & 65535;
}
function jl_Character_toLowerCase($ch) {
    return jl_Character_toLowerCase0($ch) & 65535;
}
function jl_Character_toLowerCase0($ch) {
    return otp_Platform_stringFromCharCode($ch).toLowerCase().charCodeAt(0);
}
function jl_Character_toUpperCase0($ch) {
    return jl_Character_toUpperCase($ch) & 65535;
}
function jl_Character_toUpperCase($codePoint) {
    return otp_Platform_stringFromCharCode($codePoint).toUpperCase().charCodeAt(0);
}
function jl_Character_digit($ch, $radix) {
    if ($radix >= 2 && $radix <= 36) {
        $ch = jl_Character_getNumericValue($ch);
        if ($ch >= $radix)
            $ch = (-1);
    } else
        $ch = (-1);
    return $ch;
}
function jl_Character_getNumericValue($codePoint) {
    var var$2, var$3, var$4, $digitMapping, var$6, $l, $u, $idx, $val;
    if (jl_Character_digitMapping === null) {
        if (jl_Character_$$metadata$$0 === null)
            jl_Character_$$metadata$$0 = jl_Character_obtainDigitMapping$$create();
        var$2 = (jl_Character_$$metadata$$0.value !== null ? $rt_str(jl_Character_$$metadata$$0.value) : null);
        var$3 = new otci_CharFlow;
        var$3.$characters0 = jl_String_toCharArray(var$2);
        var$4 = otci_Base46_decode(var$3);
        $digitMapping = $rt_createIntArray(var$4);
        var$6 = $digitMapping.data;
        $l = 0;
        while ($l < var$4) {
            var$6[$l] = otci_Base46_decode(var$3);
            $l = $l + 1 | 0;
        }
        jl_Character_digitMapping = $digitMapping;
    }
    $digitMapping = jl_Character_digitMapping.data;
    $l = 0;
    $u = ($digitMapping.length / 2 | 0) - 1 | 0;
    while ($u >= $l) {
        $idx = ($l + $u | 0) / 2 | 0;
        var$4 = $idx * 2 | 0;
        $val = $rt_compare($codePoint, $digitMapping[var$4]);
        if ($val > 0)
            $l = $idx + 1 | 0;
        else {
            if ($val >= 0)
                return $digitMapping[var$4 + 1 | 0];
            $u = $idx - 1 | 0;
        }
    }
    return (-1);
}
function jl_Character_forDigit($digit, $radix) {
    if ($radix >= 2 && $radix <= 36 && $digit < $radix)
        return $digit < 10 ? (48 + $digit | 0) & 65535 : ((97 + $digit | 0) - 10 | 0) & 65535;
    return 0;
}
function jl_Character_toChars($codePoint) {
    var var$2, var$3;
    if ($codePoint < 65536) {
        var$2 = $rt_createCharArray(1);
        var$2.data[0] = $codePoint & 65535;
        return var$2;
    }
    var$2 = $rt_createCharArray(2);
    var$3 = var$2.data;
    var$3[0] = jl_Character_highSurrogate($codePoint);
    var$3[1] = jl_Character_lowSurrogate($codePoint);
    return var$2;
}
function jl_Character_getType($codePoint) {
    var $u, $classes, $l, $i, $range;
    $u = $codePoint > 0 && $codePoint <= 65535 ? 1 : 0;
    if ($u && jl_Character_isSurrogate($codePoint & 65535))
        return 19;
    if (jl_Character_classMapping === null) {
        if (jl_Character_$$metadata$$1 === null)
            jl_Character_$$metadata$$1 = jl_Character_obtainClasses$$create();
        jl_Character_classMapping = otciu_UnicodeHelper_extractRle((jl_Character_$$metadata$$1.value !== null ? $rt_str(jl_Character_$$metadata$$1.value) : null));
    }
    $classes = jl_Character_classMapping.data;
    $l = 0;
    $u = $classes.length - 1 | 0;
    while ($l <= $u) {
        $i = ($l + $u | 0) / 2 | 0;
        $range = $classes[$i];
        if ($codePoint >= $range.$end)
            $l = $i + 1 | 0;
        else {
            if ($codePoint >= $range.$start0)
                return $range.$data.data[$codePoint - $range.$start0 | 0];
            $u = $i - 1 | 0;
        }
    }
    return 0;
}
function jl_Character_isLetterOrDigit($codePoint) {
    a: {
        switch (jl_Character_getType($codePoint)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 9:
                break;
            case 6:
            case 7:
            case 8:
                break a;
            default:
                break a;
        }
        return 1;
    }
    return 0;
}
function jl_Character_isIdentifierIgnorable($codePoint) {
    a: {
        if (!($codePoint >= 0 && $codePoint <= 8) && !($codePoint >= 14 && $codePoint <= 27)) {
            if ($codePoint < 127)
                break a;
            if ($codePoint > 159)
                break a;
        }
        return 1;
    }
    return jl_Character_getType($codePoint) != 16 ? 0 : 1;
}
function jl_Character_isSpaceChar($codePoint) {
    switch (jl_Character_getType($codePoint)) {
        case 12:
        case 13:
        case 14:
            break;
        default:
            return 0;
    }
    return 1;
}
function jl_Character_isWhitespace($codePoint) {
    switch ($codePoint) {
        case 9:
        case 10:
        case 11:
        case 12:
        case 13:
        case 28:
        case 29:
        case 30:
        case 31:
            break;
        case 160:
        case 8199:
        case 8239:
            return 0;
        default:
            return jl_Character_isSpaceChar($codePoint);
    }
    return 1;
}
function jl_Character_compareTo($this, $anotherCharacter) {
    return $this.$value1 - $anotherCharacter.$value1 | 0;
}
function jl_Character_compareTo0($this, var$1) {
    return jl_Character_compareTo($this, var$1);
}
function jl_Character__clinit_() {
    jl_Character_TYPE = $rt_cls($rt_charcls());
    jl_Character_characterCache = $rt_createArray(jl_Character, 128);
}
function jl_Character_obtainDigitMapping$$create() {
    return {"value" : "oD#*% .%%2%)6%-:%1>%5B%9F%=J%AN%Eo%Is%Mw%Q{%U!\'Y&\'^*\'b.\'f2\'j6\'n:\'r>\'vB\'zF\'!#J\'&#N\'*#R\'.#V\'2#Z\'6#_\':#c\'>#g\'B#k\'F#o\'J#s\'N#w\'R#6)I:)M>)QB)UF)YJ)^N)bR)fV)jZ)n_)rc)vg)zk)!#o)&#s)*#w).#{)2#!+6#&+:#*+>#.+B#2+F#6+J#:+N#>+R#{R# !T#%&T#)*T#-.T#12T#56T#9:T#=>T#ABT#E6a# :a#%>a#)Ba#-Fa#1Ja#5Na#9Ra#=Va#AZa#E:s# >s#%Bs#)Fs#-Js#1Ns#5Rs#9Vs#=Zs#A_s#EZ:% _:%%c:%)g:%-k:%1o:%5s:%9w:%={:%A!<%E2F% 6F%%:F%)>F%-BF%1FF%5JF%9NF%=RF%AVF%EgP% kP%%oP%)sP%-wP%1{P%5!R%9&R%=*R%A.R%E>]% B]%%F]%)J]%-N]%1R]%5V]%9Z]%=_]%Ac]%Esg% wg%%{g%)!i%-&"
    + "i%1*i%5.i%92i%=6i%A:i%EJs% Ns%%Rs%)Vs%-Zs%1_s%5cs%9gs%=ks%Aos%E!!\' &!\'%*!\').!\'-2!\'16!\'5:!\'9>!\'=B!\'AF!\'EV,\' Z,\'%_,\')c,\'-g,\'1k,\'5o,\'9s,\'=w,\'A{,\'E.8\' 28\'%68\'):8\'->8\'1B8\'5F8\'9J8\'=N8\'AR8\'EcB\' gB\'%kB\')oB\'-sB\'1wB\'5{B\'9!D\'=&D\'A*D\'E>L\' BL\'%FL\')JL\'-NL\'1RL\'5VL\'9ZL\'=_L\'AcL\'EsV\' wV\'%{V\')!X\'-&X\'1*X\'5.X\'92X\'=6X\'A:X\'EB_\' F_\'%J_\')N_\'-R_\'1V_\'5Z_\'9__\'=c_\'Ag_\'Esw\' ww\'%{w\')!y\'-&y\'1*y\'5.y\'92y\'=6y\'A:y\'EB!) F!)%J!))N!)-R!)1V!)5Z!)9_!)=c!)Ag!)Egi+ ki+%oi+)si+-wi+1{i+5!k+9&k+=*k+A.k+Eom+ sm+%wm+){m+-!o+1&o+5*o+9.o+=2o+A6o+E>,- B,-%F"
    + ",-)J,--N,-1R,-5V,-9Z,-=_,-Ac,-E>8- B8-%F8-)J8--N8-1R8-5V8-9Z8-=_8-Ac8-E{F- !H-%&H-)*H--.H-12H-56H-9:H-=>H-ABH-E_H- cH-%gH-)kH--oH-1sH-5wH-9{H-=!J-A&J-E!Z- &Z-%*Z-).Z--2Z-16Z-5:Z-9>Z-=BZ-AFZ-E2c- 6c-%:c-)>c--Bc-1Fc-5Jc-9Nc-=Rc-AVc-EJo- No-%Ro-)Vo--Zo-1_o-5co-9go-=ko-Aoo-E.q- 2q-%6q-):q-->q-1Bq-5Fq-9Jq-=Nq-ARq-E&4r *4r%.4r)24r-64r1:4r5>4r9B4r=F4rAJ4rE{or !qr%&qr)*qr-.qr12qr56qr9:qr=>qrABqrE&ur *ur%.ur)2ur-6ur1:ur5>ur9Bur=FurAJurE**t .*t%2*t)6*t-:*t1>*t5B*t9F*t=J*tAN*tEN,t R,t%V,t)Z,t-_,t1c,t5g,t9k,t=o,tAs,tE_"
    + "4t c4t%g4t)k4t-o4t1s4t5w4t9{4t=!6tA&6tEgXt kXt%oXt)sXt-wXt1{Xt5!Zt9&Zt=*ZtA.ZtE{c@# !e@#%&e@#)*e@#-.e@#12e@#56e@#9:e@#=>e@#ABe@#Ece@#Ige@#Mke@#Qoe@#Use@#Ywe@#^{e@#b!g@#f&g@#j*g@#n.g@#r2g@#v6g@#z:g@#!#>g@#&#Bg@#*#Fg@#.#Jg@#2#Ng@#6#Rg@#:#Vg@#>#Zg@#B#_g@#F#cg@#J#gg@#N#kg@#R#*i@#I.i@#M2i@#Q6i@#U:i@#Y>i@#^Bi@#bFi@#fJi@#jNi@#nRi@#rVi@#vZi@#z_i@#!#ci@#&#gi@#*#ki@#.#oi@#2#si@#6#wi@#:#{i@#>#!k@#B#&k@#F#*k@#J#.k@#N#2k@#R#s&D# w&D#%{&D#)!(D#-&(D#1*(D#5.(D#92(D#=6(D#A:(D#E2.H# 6.H#%:.H#)>.H#-B.H#1F.H#5J.H#9N.H#=R.H#AV."
    + "H#EwuH# {uH#%!wH#)&wH#-*wH#1.wH#52wH#96wH#=:wH#A>wH#Ew$J# {$J#%!&J#)&&J#-*&J#1.&J#52&J#96&J#=:&J#A>&J#E{*J# !,J#%&,J#)*,J#-.,J#12,J#56,J#9:,J#=>,J#AB,J#E_8J# c8J#%g8J#)k8J#-o8J#1s8J#5w8J#9{8J#=!:J#A&:J#E2RJ# 6RJ#%:RJ#)>RJ#-BRJ#1FRJ#5JRJ#9NRJ#=RRJ#AVRJ#ENqJ# RqJ#%VqJ#)ZqJ#-_qJ#1cqJ#5gqJ#9kqJ#=oqJ#AsqJ#E&}J# *}J#%.}J#)2}J#-6}J#1:}J#5>}J#9B}J#=F}J#AJ}J#Eg@L# k@L#%o@L#)s@L#-w@L#1{@L#5!BL#9&BL#=*BL#A.BL#EZJL# _JL#%cJL#)gJL#-kJL#1oJL#5sJL#9wJL#={JL#A!LL#ENTL# RTL#%VTL#)ZTL#-_TL#1cTL#5gTL#9kTL#=oTL#AsTL#E:{L# >{L#"
    + "%B{L#)F{L#-J{L#1N{L#5R{L#9V{L#=Z{L#A_{L#ERkN# VkN#%ZkN#)_kN#-ckN#1gkN#5kkN#9okN#=skN#AwkN#E_$P# c$P#%g$P#)k$P#-o$P#1s$P#5w$P#9{$P#=!&P#A&&P#E.,P# 2,P#%6,P#):,P#->,P#1B,P#5F,P#9J,P#=N,P#AR,P#EFau# Jau#%Nau#)Rau#-Vau#1Zau#5_au#9cau#=gau#Akau#Eouu# suu#%wuu#){uu#-!wu#1&wu#5*wu#9.wu#=2wu#A6wu#EF0N% J0N%%N0N%)R0N%-V0N%1Z0N%5_0N%9c0N%=g0N%Ak0N%Eo0N% s0N%%w0N%){0N%-!2N%1&2N%5*2N%9.2N%=22N%A62N%E:2N% >2N%%B2N%)F2N%-J2N%1N2N%5R2N%9V2N%=Z2N%A_2N%Ec2N% g2N%%k2N%)o2N%-s2N%1w2N%5{2N%9!4N%=&4N%A*4N%E.4N% 24N%%64N%):4N%->"
    + "4N%1B4N%5F4N%9J4N%=N4N%AR4N%ERJR% VJR%%ZJR%)_JR%-cJR%1gJR%5kJR%9oJR%=sJR%AwJR%E>qR% BqR%%FqR%)JqR%-NqR%1RqR%5VqR%9ZqR%=_qR%AcqR%E:FV% >FV%%BFV%)FFV%-JFV%1NFV%5RFV%9VFV%=ZFV%A_FV%E"};
}
function jl_Character_obtainClasses$$create() {
    return {"value" : "PA-Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:PB-9[%=9<=&>:1=<=:L#<#Y#<,&?L$9B8:B(C9:C)!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!C$B##!#B##B$C#B%#B##B$C$B##B##!#!#B##!C#!#B##B$#!#B#C#&!C$F%!$#!$#!$#!#!#!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!C#!$#!#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C(B##B#C#!#B%#!#!#!#!Cg&C<E3]%E-]/E&](%<%]2b\'Q! !#!#%<!#A#%C$9!A%]#!9B$ ! B##B2 B*CD!C#B$C$!#!#!#!#!#!#!#!#!#!#!#!C&!#:!#B#C#BTCQ!#!#!#!#"
    + "!#!#!#!#!#!#!#!#!#!#!#!#!#=G&H#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#B##!#!#!#!#!#!C#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!# BGA#%Y\'CJ95A#^#; GN5\'9G#9G#9\'A)F<A%F%Y#A,Q\'Z$Y#;Y#^#G,91 Y#FA%F+G6J+Y%F#\'b&D! 9&G(1=G\'E#G#=G%F#J+F$^#&Y/ 1&\'F?G<A#b&:! G,&A/J+FBG*E#=Y$%A#\'[#F7G%%G*%G$%G&A#Y0 F:G$A#9 F,AVF6 F)A6G01GA)FW\')\'&I$G)I%\'I#&G(F+G#Y#J+9%F0\'I# F)A#F#A#F7 F( &A$F%A#\'&I$G%A#I#A#I#\'&A))A%F# F$G#A#J+F#[#L\'=;&9\'A#G#) F\'A%F#A#F7 F( F# F# F#A#\' "

    + "I#F) FEA%G/)G&9G#F&G, GE ^)\'^\' ^#Y&^%Y#AFFLI#G%)G\')G#I#G#&J+Y\'F\'I#G#F%G$&I$F#I(F$G%F.\'I#G#I\'\'&)J+I$\'^#BG !A&!A#CL9%C$b&*&  F%A#F( & F%A#FJ F%A#FB F%A#F( & F%A#F0 FZ F%A#FeA#G$Y*L5A$F1^+A\'b!7! A#C\'A#5b&M* =9F2-F;67A$FmY$K$F)A(F. F%G$A,F3G$Y#A*F3G#A-F. F$ G#A-FUG#)G(I)\'I#G,Y$%Y$;&\'A#J+A\'L+A\'Y\'5Y%G$1 J+A\'FD%FVA(F&G#FC\'&A&FhA+F@ G$I%G#I$A%I#\'I\'G$A%=A$Y#J+F?A#F&A,FMA%F;A\'J+,A$^CF8G#I#\'A#Y#FV)\')G( \')\'I#G)I\'G+A#\'J+A\'J+A\'Y(%Y\'A#G/(AcG%)FP\')G&)\'I&\'I#F(A%J+Y(^+G*^*A$G#)F?)G%I#G#)G$F#J+FM\')G#I$\')G$I#A)Y%FEI)G)I#G#A$Y&"
    + "J+A$F$J+F?E\'Y#C*A(BLA#B$Y)A)G$9G.)G(F%\'F\'\'F#)G#&A&CMEaC.%CCEFG[ G&!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C*B)C\'A#B\'A#C)B)C)B)C\'A#B\'A#C) ! ! ! !C)B)C/A#C)D)C)D)C)D)C& C#B%$<#]$C$ C#B%$]$C%A#C#B% ]$C)B&]$A#C$ C#B%$]# M,Q&U\'Y#>?6_#?6>Y)./Q&-Y*>?Y%X#Y$:67Y,:98Y+-Q& Q+,%A#L\'Z$67%L+Z$67 E.A$[AA1G.H%\'H$G-A0^#"
    + "!^%!^##B$C#B$#=!^#:B&^\'!=!=!=B%=#B%#F%#^#C#B#Z&!C%=:^##=L1KD!#K%,^#A%Z&^&Z#^%:^#:^#:^(:^@Z#^#:=:^@b:-% ^)6767^5Z#^(67b=2! :^?Z:^IZ\'^gA:^,A6L^^pL7b=X# :^*:^WZ)b=P! :b=Y$ 67676767676767L?^MZ&67Z@6767676767Z1b= % b:$# 6767676767676767676767Za6767ZA67b:#% ^QZ6^#Z\'^HA#^AA#b=I! BP CP !#B$C#!#!#!#B%#!C#!C\'E#B$#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!C#^\'!#!#G$!#A&Y%,Y#CG #A&#A#FYA(%9A/\'F8A*F( F( F( F( F( F( F( F( GAY#>?>?Y$>?9>?Y*5Y#59>?Y#>?67676767Y&%Y+U#Y%"
    + "596Y.AQ^; b=:! A-b=7$ A;^-A%-Y$=%&+6767676767^#6767676756W#=K*G%I#5E&^#K$%&9^# b&7! A#G#]#E#&5b&;! 9E$&A&FL b&?!  ^#L%^+F<A&^EA-F1^@ L+^?L)=L0^AL+^HL0b= & &b UG!&A+^b&b   %b O(!&A1F6%b&X2 A$^XA*FIE\'Y#b&-% %Y$F1J+F#A5!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#&\'H$9G+9%!#!#!#!#!#!#!#!#!#!#!#!#!#!#E#G#FhK+G#Y\'A)]8E*]#!#!#!#!#!#!#!C$!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#!#%C)!#!#B##!#!#!#!#%]#!#!#&!#!C$!#!#!#!#!#!#!#!#!#!#B&#B&#!#!#!#!#!#A#!#B$AQ&E##F(\'F$\'F%\'F8I#G#)^%A%L\'^#;=A\'FUY%A)I#F"
    + "SI1G#A)Y#J+A\'G3F\'Y$&9F#\'J+F=G)Y#F8G,I#A,9F>A$G$)FP\'I#G%I#G#I$Y. %J+A%Y#F&\'%F*J+F& FJG\'I#G#I#G#A*F$\'F)\')A#J+A#Y%F1%F\'^$&)\')FS\'&G$F#G#F&G#&\'&A9F#%Y#F,)G#I#Y#&E#)\'A+F\'A#F\'A#F\'A*F( F( CL<E%C)A)b#1! FDI#\'I#\'I#9)\'A#J+A\'&b CO#&A-F8A%FRA%4b `. T#b `! T#b `0 43b `D!3b&O& A#b&K! AGC(A-C&A&&\'F+:F. F& & F# F# b&M! ]1A2b&L& 76A1FbA#FWAIF-;=A#G1Y(679A\'G19U#X#6767676767676767Y#67Y%X$Y$ Y%5676767Y$:5Z$ 9;Y#A%F& b&(# A#1 Y$;Y$679:95Y#J+Y#Z$Y#B;697<8<C;6:7:67967Y#F+%FNE#F@A$F\'A#F\'A#F\'A#F$A$[#:<=[# =Z%^#A+Q$^#A#F- F; F4 F# F0"
    + "A#F/ACb&]! A&Y$A%LNA$^*KVL%^2L#^$ ^-A%=AP^N\'b ## F>A$FRA0\'L<A%FAL%A*F5+F)+A&FGG&A&F? 9FEA%F)9K&AKBICIFpA#J+A\'BEA%CEA%FIA)FUA,9b 1# b&X% A*F7A+F)b 9# F\'A#& FM F#A$&A#F8 9L)F8^#L(F@A)L*AQF4 F#A&L&F7L\'A$9F;A&9AbFYA%L#F#L1A#LO&G$ G#A&G%F% F$ F>A#G$A%\'L*A(Y*A(F>L#9F>L$AAF)=F=G#A%L&Y(A*FWA$Y(F7A#L)F4A&L)F3A(Y%A-L(b 1! FkAXBTA.CTA(L\'FEG%A)J+b G% L@b !# F>L+&A)F7G,L%Y&b \'# F8A*)\')FVG0Y(A%L5J+A0G$)FNI$G%I#G#Y#1Y%A,1A#F:A(J+A\'G$FEG&)G) J+Y%&I#A*FD\'Y#&A*G#)FQI$G*I#F%Y%G%9A#J+&9&Y$ L5A,F3 F:I$G$I#\')G#Y\'\'AcF( & F% F0 F+"
    + "9A\'FP\'I$G)A&J+A\'G#I# F)A#F#A#F7 F( F# F& G#&I#\'I%A#I#A#I$A#&A\')A&F&I#A#G(A$G&b ,# FVI$G)I#G$)\'F%Y&J+ 9 9\'&AAFQI$G\')\'I%G#)G#F#9&A)J+b G# FPI$G%A#I%G#)G#Y8F%G#ACFQI$G)I#\')G#Y$&A,J+A\'Y.A4FL\')\'I#G\')\'&A(J+AWF<A#G$I#G%)G&A%J+L#Y$=b  $ FMI$G*)G#9b E! BACAJ+L*A-&b A# F)A#FHI$G%A#G#I%\'&9&)A<&G+FIG\')&G%Y)\'A)&G\'I#G$FOG.)G#Y$&Y&A>FZb (% F* FF)G( G\')\'&Y&A+J+L4A$Y#F?A#G7 )G()G#)G#AkF( F# FGG\'A$\' G# G(&\'A)J+A\'F\' F# FAI& G# I#\')\'&A(J+b W% F4G#I#Y#b ($ L6^)[%^2A.9b&;/ b G! b+P!  Y&A,b&%$ b ^K b&P1  Q*b (a b&(* b Z\'#b&Z) A(F"
    + "@ J+A%Y#b A! F?A#G&9A+FQG(Y&^%E%9=A+J+ L( F6A&F4b Q+ BACAL8Y%b F! FmA%\'&IXA(G%E.AbE#9%A=&b W@!&A)b&T, b .5#b&@% ARF$A2F%A)b&-\' b %E b&L! A&F.A$F*A(F+A#=G#9Q%b =.!b=W$ A+^HA#^^I#G$^$I\'Q)G)^#G(^?G%^]A8^dG$=b ;# L5A-b=8! A*L:b (# B;C;B;C( C3B;C;! B#A#!A#B#A#B% B)C% # C( C,B;C;B# B%A#B) B( C;B# B% B& !A$B( C;B;C;B;C;B;C;B;C;B;C;B;C=A#B::C::C\'B::C::C\'B::C::C\'B::C::C\'B::C::C\'!#A#JSb= ) GX^%GS^)\'^/\'^#Y&A0G& G0b 16 G( G2A#G( G# G&b 6$ FNA$G(E(A#J+A%&=b Q& FMG%J+A&;b  5 b&&$ A#L*G(AJBCCCG(%A%J+A%Y#b 2- L]=L$;L%AnLN="
    + "L0b #$ F% F< F# &A#& F+ F% & &A\'&A%& & & F$ F# &A#& & & & & F# &A#F% F( F% F% & F+ F2A&F$ F& F2AUZ#b /% ^MA%b=E! A-^0A#^0 ^0 ^FA+L.A$b=>! A$^_AZ^>A.^MA%^*A(^#A/^\'b ;# b=]$ ]&b=7, A+^.A$^,A&b=U! A-b=:! A(^-A5^-A%^YA)^+A\'^IA)^?b 3! ^- b=F!  ^%A$^JA#^\'A$^>A#b=(# A-^/A#^%A%^$A&^$A.^\'b K6 &b   %b   %b 6<#&AJ&b T !&A,&b =$ &A#&b  ;!&A/&b PU!&b @Q b&?) b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   "
    + "%b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b   %b D8 1A?b1A! b  # b\'Q$ b   %b   %b   %b 1Y$3b   %b   %b   %b ^a$3A#3b   %b   %b   %b ^a$3"};
}
function cjag_Path2D() {
    var a = this; jl_Object.call(a);
    a.$pointTypes = null;
    a.$numTypes = 0;
    a.$numCoords = 0;
    a.$windingRule = 0;
}
var cjag_Path2D_$assertionsDisabled = 0;
function cjag_Path2D_closePath($this) {
    var var$1, var$2;
    jl_Object_monitorEnterSync($this);
    try {
        if (!($this.$numTypes && $this.$pointTypes.data[$this.$numTypes - 1 | 0] == 4)) {
            $this.$needRoom(1, 0);
            var$1 = $this.$pointTypes.data;
            var$2 = $this.$numTypes;
            $this.$numTypes = var$2 + 1 | 0;
            var$1[var$2] = 4;
        }
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function cjag_Path2D_setWindingRule($this, $rule) {
    var var$2;
    if ($rule && $rule != 1) {
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2, $rt_s(96));
        $rt_throw(var$2);
    }
    $this.$windingRule = $rule;
}
function cjag_Path2D_reset($this) {
    jl_Object_monitorEnterSync($this);
    try {
        $this.$numCoords = 0;
        $this.$numTypes = 0;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function cjag_Path2D__clinit_() {
    cjag_Path2D_$assertionsDisabled = 0;
}
function cjag_Path2D$Float() {
    cjag_Path2D.call(this);
    this.$floatCoords = null;
}
function cjag_Path2D$Float_needRoom($this, $needMove, $newCoords) {
    var var$3, $size, var$5, var$6, var$7, var$8;
    if ($needMove && !$this.$numTypes) {
        var$3 = new cjag_IllegalPathStateException;
        jl_Throwable__init_(var$3, $rt_s(97));
        $rt_throw(var$3);
    }
    $size = $this.$pointTypes.data.length;
    if ($this.$numTypes >= $size) {
        $needMove = $size > 500 ? 500 : $size;
        $this.$pointTypes = cgh_Arrays_copyOf($this.$pointTypes, $size + $needMove | 0);
    }
    $needMove = $this.$floatCoords.data.length;
    if (($this.$numCoords + $newCoords | 0) > $needMove) {
        $size = $needMove > 1000 ? 1000 : $needMove;
        if ($size >= $newCoords)
            $newCoords = $size;
        var$5 = $this.$floatCoords;
        $needMove = $needMove + $newCoords | 0;
        var$6 = $rt_createFloatArray($needMove);
        var$7 = var$6.data;
        $newCoords = 0;
        while (true) {
            var$8 = var$5.data;
            if ($newCoords >= jl_Math_min($needMove, var$8.length))
                break;
            var$7[$newCoords] = var$8[$newCoords];
            $newCoords = $newCoords + 1 | 0;
        }
        $this.$floatCoords = var$6;
    }
}
function cjag_Path2D$Float_moveTo($this, $x, $y) {
    var var$3, var$4, var$5;
    jl_Object_monitorEnterSync($this);
    try {
        if ($this.$numTypes > 0 && !$this.$pointTypes.data[$this.$numTypes - 1 | 0]) {
            $this.$floatCoords.data[$this.$numCoords - 2 | 0] = $x;
            $this.$floatCoords.data[$this.$numCoords - 1 | 0] = $y;
        } else {
            cjag_Path2D$Float_needRoom($this, 0, 2);
            var$3 = $this.$pointTypes.data;
            var$4 = $this.$numTypes;
            $this.$numTypes = var$4 + 1 | 0;
            var$3[var$4] = 0;
            var$3 = $this.$floatCoords.data;
            var$5 = $this.$numCoords;
            $this.$numCoords = var$5 + 1 | 0;
            var$3[var$5] = $x;
            var$3 = $this.$floatCoords.data;
            var$5 = $this.$numCoords;
            $this.$numCoords = var$5 + 1 | 0;
            var$3[var$5] = $y;
        }
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function cjag_Path2D$Float_lineTo($this, $x, $y) {
    var var$3, var$4, var$5;
    jl_Object_monitorEnterSync($this);
    try {
        cjag_Path2D$Float_needRoom($this, 1, 2);
        var$3 = $this.$pointTypes.data;
        var$4 = $this.$numTypes;
        $this.$numTypes = var$4 + 1 | 0;
        var$3[var$4] = 1;
        var$3 = $this.$floatCoords.data;
        var$4 = $this.$numCoords;
        $this.$numCoords = var$4 + 1 | 0;
        var$3[var$4] = $x;
        var$3 = $this.$floatCoords.data;
        var$5 = $this.$numCoords;
        $this.$numCoords = var$5 + 1 | 0;
        var$3[var$5] = $y;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function cjag_Path2D$Float_curveTo($this, $x1, $y1, $x2, $y2, $x3, $y3) {
    var var$7, var$8, var$9;
    jl_Object_monitorEnterSync($this);
    try {
        cjag_Path2D$Float_needRoom($this, 1, 6);
        var$7 = $this.$pointTypes.data;
        var$8 = $this.$numTypes;
        $this.$numTypes = var$8 + 1 | 0;
        var$7[var$8] = 3;
        var$7 = $this.$floatCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $x1;
        var$7 = $this.$floatCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $y1;
        var$7 = $this.$floatCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $x2;
        var$7 = $this.$floatCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $y2;
        var$7 = $this.$floatCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $x3;
        var$7 = $this.$floatCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $y3;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function cjag_Path2D$Float_getPathIterator($this, $at) {
    var var$2;
    if ($at === null) {
        $at = new cjag_Path2D$Float$CopyIterator;
        cjag_Path2D$Iterator__init_($at, $this);
        $at.$floatCoords0 = $this.$floatCoords;
        return $at;
    }
    var$2 = new cjag_Path2D$Float$TxIterator;
    cjag_Path2D$Iterator__init_(var$2, $this);
    var$2.$floatCoords1 = $this.$floatCoords;
    var$2.$affine0 = $at;
    return var$2;
}
function cjag_GeneralPath() {
    cjag_Path2D$Float.call(this);
}
function cjag_AffineTransform() {
    var a = this; jl_Object.call(a);
    a.$m00 = 0.0;
    a.$m10 = 0.0;
    a.$m01 = 0.0;
    a.$m11 = 0.0;
    a.$m02 = 0.0;
    a.$m12 = 0.0;
    a.$state = 0;
    a.$type = 0;
}
var cjag_AffineTransform_rot90conversion = null;
function cjag_AffineTransform__init_() {
    var var_0 = new cjag_AffineTransform();
    cjag_AffineTransform__init_0(var_0);
    return var_0;
}
function cjag_AffineTransform__init_0($this) {
    $this.$m11 = 1.0;
    $this.$m00 = 1.0;
}
function cjag_AffineTransform_getScaleInstance($sx, $sy) {
    var $Tx;
    $Tx = cjag_AffineTransform__init_();
    cjag_AffineTransform_setToScale($Tx, $sx, $sy);
    return $Tx;
}
function cjag_AffineTransform_updateState($this) {
    if ($this.$m01 === 0.0 && $this.$m10 === 0.0) {
        if ($this.$m00 === 1.0 && $this.$m11 === 1.0) {
            if ($this.$m02 === 0.0 && $this.$m12 === 0.0) {
                $this.$state = 0;
                $this.$type = 0;
            } else {
                $this.$state = 1;
                $this.$type = 1;
            }
        } else if ($this.$m02 === 0.0 && $this.$m12 === 0.0) {
            $this.$state = 2;
            $this.$type = (-1);
        } else {
            $this.$state = 3;
            $this.$type = (-1);
        }
    } else if ($this.$m00 === 0.0 && $this.$m11 === 0.0) {
        if ($this.$m02 === 0.0 && $this.$m12 === 0.0) {
            $this.$state = 4;
            $this.$type = (-1);
        } else {
            $this.$state = 5;
            $this.$type = (-1);
        }
    } else if ($this.$m02 === 0.0 && $this.$m12 === 0.0) {
        $this.$state = 6;
        $this.$type = (-1);
    } else {
        $this.$state = 7;
        $this.$type = (-1);
    }
}
function cjag_AffineTransform_stateError($this) {
    var var$1;
    var$1 = new jl_RuntimeException;
    jl_Throwable__init_(var$1, $rt_s(98));
    $rt_throw(var$1);
}
function cjag_AffineTransform_translate($this, $tx, $ty) {
    a: {
        switch ($this.$state) {
            case 0:
                break;
            case 1:
                $this.$m02 = $tx + $this.$m02;
                $this.$m12 = $ty + $this.$m12;
                if ($this.$m02 === 0.0 && $this.$m12 === 0.0) {
                    $this.$state = 0;
                    $this.$type = 0;
                }
                return;
            case 2:
                $this.$m02 = $tx * $this.$m00;
                $this.$m12 = $ty * $this.$m11;
                if (!($this.$m02 === 0.0 && $this.$m12 === 0.0)) {
                    $this.$state = 3;
                    $this.$type = $this.$type | 1;
                }
                return;
            case 3:
                $this.$m02 = $tx * $this.$m00 + $this.$m02;
                $this.$m12 = $ty * $this.$m11 + $this.$m12;
                if ($this.$m02 === 0.0 && $this.$m12 === 0.0) {
                    $this.$state = 2;
                    if ($this.$type != (-1))
                        $this.$type = $this.$type - 1 | 0;
                }
                return;
            case 4:
                $this.$m02 = $ty * $this.$m01;
                $this.$m12 = $tx * $this.$m10;
                if (!($this.$m02 === 0.0 && $this.$m12 === 0.0)) {
                    $this.$state = 5;
                    $this.$type = $this.$type | 1;
                }
                return;
            case 5:
                $this.$m02 = $ty * $this.$m01 + $this.$m02;
                $this.$m12 = $tx * $this.$m10 + $this.$m12;
                if ($this.$m02 === 0.0 && $this.$m12 === 0.0) {
                    $this.$state = 4;
                    if ($this.$type != (-1))
                        $this.$type = $this.$type - 1 | 0;
                }
                return;
            case 6:
                $this.$m02 = $tx * $this.$m00 + $ty * $this.$m01;
                $this.$m12 = $tx * $this.$m10 + $ty * $this.$m11;
                if (!($this.$m02 === 0.0 && $this.$m12 === 0.0)) {
                    $this.$state = 7;
                    $this.$type = $this.$type | 1;
                }
                return;
            case 7:
                break a;
            default:
                cjag_AffineTransform_stateError($this);
                break a;
        }
        $this.$m02 = $tx;
        $this.$m12 = $ty;
        if (!($tx === 0.0 && $ty === 0.0)) {
            $this.$state = 1;
            $this.$type = 1;
        }
        return;
    }
    $this.$m02 = $tx * $this.$m00 + $ty * $this.$m01 + $this.$m02;
    $this.$m12 = $tx * $this.$m10 + $ty * $this.$m11 + $this.$m12;
    if ($this.$m02 === 0.0 && $this.$m12 === 0.0) {
        $this.$state = 6;
        if ($this.$type != (-1))
            $this.$type = $this.$type - 1 | 0;
    }
}
function cjag_AffineTransform_scale($this, $sx, $sy) {
    var $state;
    a: {
        b: {
            $state = $this.$state;
            switch ($state) {
                case 0:
                case 1:
                    break;
                case 2:
                case 3:
                    $this.$m00 = $this.$m00 * $sx;
                    $this.$m11 = $this.$m11 * $sy;
                    if ($this.$m00 === 1.0 && $this.$m11 === 1.0) {
                        $state = $state & 1;
                        $this.$state = $state;
                        $this.$type = $state ? 1 : 0;
                    } else
                        $this.$type = (-1);
                    return;
                case 4:
                case 5:
                    break a;
                case 6:
                case 7:
                    break b;
                default:
                    cjag_AffineTransform_stateError($this);
                    break b;
            }
            $this.$m00 = $sx;
            $this.$m11 = $sy;
            if (!($sx === 1.0 && $sy === 1.0)) {
                $this.$state = $state | 2;
                $this.$type = (-1);
            }
            return;
        }
        $this.$m00 = $this.$m00 * $sx;
        $this.$m11 = $this.$m11 * $sy;
    }
    $this.$m01 = $this.$m01 * $sy;
    $this.$m10 = $this.$m10 * $sx;
    if ($this.$m01 === 0.0 && $this.$m10 === 0.0) {
        $state = $state & 1;
        if ($this.$m00 === 1.0 && $this.$m11 === 1.0)
            $this.$type = $state ? 1 : 0;
        else {
            $state = $state | 2;
            $this.$type = (-1);
        }
        $this.$state = $state;
    }
}
function cjag_AffineTransform_setToTranslation($this, $tx, $ty) {
    $this.$m00 = 1.0;
    $this.$m10 = 0.0;
    $this.$m01 = 0.0;
    $this.$m11 = 1.0;
    $this.$m02 = $tx;
    $this.$m12 = $ty;
    if ($tx === 0.0 && $ty === 0.0) {
        $this.$state = 0;
        $this.$type = 0;
    } else {
        $this.$state = 1;
        $this.$type = 1;
    }
}
function cjag_AffineTransform_setToRotation0($this, $theta) {
    var $sin, $cos;
    $sin = jl_Math_sin($theta);
    if ($sin !== 1.0 && $sin !== (-1.0)) {
        $cos = jl_Math_cos($theta);
        if ($cos === (-1.0)) {
            $sin = 0.0;
            $this.$state = 2;
            $this.$type = 8;
        } else if ($cos !== 1.0) {
            $this.$state = 6;
            $this.$type = 16;
        } else {
            $sin = 0.0;
            $this.$state = 0;
            $this.$type = 0;
        }
    } else {
        $cos = 0.0;
        $this.$state = 4;
        $this.$type = 8;
    }
    $this.$m00 = $cos;
    $this.$m10 = $sin;
    $this.$m01 =  -$sin;
    $this.$m11 = $cos;
    $this.$m02 = 0.0;
    $this.$m12 = 0.0;
}
function cjag_AffineTransform_setToRotation($this, $theta, $anchorx, $anchory) {
    var $sin, $oneMinusCos;
    cjag_AffineTransform_setToRotation0($this, $theta);
    $sin = $this.$m10;
    $oneMinusCos = 1.0 - $this.$m00;
    $this.$m02 = $anchorx * $oneMinusCos + $anchory * $sin;
    $this.$m12 = $anchory * $oneMinusCos - $anchorx * $sin;
    if (!($this.$m02 === 0.0 && $this.$m12 === 0.0)) {
        $this.$state = $this.$state | 1;
        $this.$type = $this.$type | 1;
    }
}
function cjag_AffineTransform_setToScale($this, $sx, $sy) {
    $this.$m00 = $sx;
    $this.$m10 = 0.0;
    $this.$m01 = 0.0;
    $this.$m11 = $sy;
    $this.$m02 = 0.0;
    $this.$m12 = 0.0;
    if ($sx === 1.0 && $sy === 1.0) {
        $this.$state = 0;
        $this.$type = 0;
    } else {
        $this.$state = 2;
        $this.$type = (-1);
    }
}
function cjag_AffineTransform_concatenate($this, $Tx) {
    var $mystate, $txstate, $T01, $T10, $M0, $T00, $T02, $T11, $T12, $M1;
    a: {
        b: {
            c: {
                d: {
                    e: {
                        $mystate = $this.$state;
                        $txstate = $Tx.$state;
                        switch ($txstate << 3 | $mystate) {
                            case 0:
                            case 1:
                            case 2:
                            case 3:
                            case 4:
                            case 5:
                            case 6:
                            case 7:
                                break;
                            case 8:
                                break b;
                            case 9:
                            case 10:
                            case 11:
                            case 12:
                            case 13:
                            case 14:
                            case 15:
                                cjag_AffineTransform_translate($this, $Tx.$m02, $Tx.$m12);
                                return;
                            case 16:
                                break e;
                            case 17:
                            case 18:
                            case 19:
                            case 20:
                            case 21:
                            case 22:
                            case 23:
                                cjag_AffineTransform_scale($this, $Tx.$m00, $Tx.$m11);
                                return;
                            case 24:
                                break c;
                            case 25:
                            case 26:
                            case 27:
                            case 28:
                            case 29:
                            case 30:
                            case 31:
                            case 41:
                            case 42:
                            case 43:
                            case 44:
                            case 45:
                            case 46:
                            case 47:
                            case 49:
                            case 50:
                            case 51:
                            case 52:
                            case 53:
                            case 54:
                            case 55:
                                break a;
                            case 32:
                                break d;
                            case 33:
                                $this.$m00 = 0.0;
                                $this.$m01 = $Tx.$m01;
                                $this.$m10 = $Tx.$m10;
                                $this.$m11 = 0.0;
                                $this.$state = 5;
                                $this.$type = (-1);
                                return;
                            case 34:
                            case 35:
                                $this.$m01 = $this.$m00 * $Tx.$m01;
                                $this.$m00 = 0.0;
                                $this.$m10 = $this.$m11 * $Tx.$m10;
                                $this.$m11 = 0.0;
                                $this.$state = $mystate ^ 6;
                                $this.$type = (-1);
                                return;
                            case 36:
                            case 37:
                                $this.$m00 = $this.$m01 * $Tx.$m10;
                                $this.$m01 = 0.0;
                                $this.$m11 = $this.$m10 * $Tx.$m01;
                                $this.$m10 = 0.0;
                                $this.$state = $mystate ^ 6;
                                $this.$type = (-1);
                                return;
                            case 38:
                            case 39:
                                $T01 = $Tx.$m01;
                                $T10 = $Tx.$m10;
                                $M0 = $this.$m00;
                                $this.$m00 = $this.$m01 * $T10;
                                $this.$m01 = $M0 * $T01;
                                $T00 = $this.$m10;
                                $this.$m10 = $this.$m11 * $T10;
                                $this.$m11 = $T00 * $T01;
                                $this.$type = (-1);
                                return;
                            case 40:
                                $this.$m02 = $Tx.$m02;
                                $this.$m12 = $Tx.$m12;
                                break d;
                            case 48:
                                $this.$m01 = $Tx.$m01;
                                $this.$m10 = $Tx.$m10;
                                break e;
                            case 56:
                                $this.$m01 = $Tx.$m01;
                                $this.$m10 = $Tx.$m10;
                                break c;
                            default:
                                break a;
                        }
                        return;
                    }
                    $this.$m00 = $Tx.$m00;
                    $this.$m11 = $Tx.$m11;
                    $this.$state = $txstate;
                    $this.$type = $Tx.$type;
                    return;
                }
                $this.$m01 = $Tx.$m01;
                $this.$m10 = $Tx.$m10;
                $this.$m11 = 0.0;
                $this.$m00 = 0.0;
                $this.$state = $txstate;
                $this.$type = $Tx.$type;
                return;
            }
            $this.$m00 = $Tx.$m00;
            $this.$m11 = $Tx.$m11;
        }
        $this.$m02 = $Tx.$m02;
        $this.$m12 = $Tx.$m12;
        $this.$state = $txstate;
        $this.$type = $Tx.$type;
        return;
    }
    f: {
        g: {
            h: {
                $T00 = $Tx.$m00;
                $T01 = $Tx.$m01;
                $T02 = $Tx.$m02;
                $T10 = $Tx.$m10;
                $T11 = $Tx.$m11;
                $T12 = $Tx.$m12;
                switch ($mystate) {
                    case 1:
                        break;
                    case 2:
                    case 3:
                        $M0 = $this.$m00;
                        $this.$m00 = $T00 * $M0;
                        $this.$m01 = $T01 * $M0;
                        $this.$m02 = $this.$m02 + $T02 * $M0;
                        $T00 = $this.$m11;
                        $this.$m10 = $T10 * $T00;
                        $this.$m11 = $T11 * $T00;
                        $this.$m12 = $this.$m12 + $T12 * $T00;
                        break h;
                    case 4:
                    case 5:
                        $M0 = $this.$m01;
                        $this.$m00 = $T10 * $M0;
                        $this.$m01 = $T11 * $M0;
                        $this.$m02 = $this.$m02 + $T12 * $M0;
                        $M0 = $this.$m10;
                        $this.$m10 = $T00 * $M0;
                        $this.$m11 = $T01 * $M0;
                        $this.$m12 = $this.$m12 + $T02 * $M0;
                        break h;
                    case 6:
                        break g;
                    case 7:
                        break f;
                    default:
                        cjag_AffineTransform_stateError($this);
                        break g;
                }
                $this.$m00 = $T00;
                $this.$m01 = $T01;
                $this.$m02 = $this.$m02 + $T02;
                $this.$m10 = $T10;
                $this.$m11 = $T11;
                $this.$m12 = $this.$m12 + $T12;
                $this.$state = $txstate | 1;
                $this.$type = (-1);
                return;
            }
            cjag_AffineTransform_updateState($this);
            return;
        }
        $this.$state = $mystate | $txstate;
    }
    $M0 = $this.$m00;
    $M1 = $this.$m01;
    $this.$m00 = $T00 * $M0 + $T10 * $M1;
    $this.$m01 = $T01 * $M0 + $T11 * $M1;
    $this.$m02 = $this.$m02 + $T02 * $M0 + $T12 * $M1;
    $M0 = $this.$m10;
    $M1 = $this.$m11;
    $this.$m10 = $T00 * $M0 + $T10 * $M1;
    $this.$m11 = $T01 * $M0 + $T11 * $M1;
    $this.$m12 = $this.$m12 + $T02 * $M0 + $T12 * $M1;
    $this.$type = (-1);
}
function cjag_AffineTransform_transform($this, $srcPts, $srcOff, $dstPts, $dstOff, $numPts) {
    var var$6, $M02, $M12, var$9, var$10, var$11, $M00, $M11, $M01, $M10, $x, $y;
    if ($dstPts === $srcPts && $dstOff > $srcOff) {
        var$6 = $numPts * 2 | 0;
        if ($dstOff < ($srcOff + var$6 | 0)) {
            jl_System_arraycopy($srcPts, $srcOff, $dstPts, $dstOff, var$6);
            $srcOff = $dstOff;
        }
    }
    a: {
        switch ($this.$state) {
            case 0:
                break;
            case 1:
                $M02 = $this.$m02;
                $M12 = $this.$m12;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$6 = $dstOff + 1 | 0;
                    var$11 = $srcOff + 1 | 0;
                    var$9[$dstOff] = var$10[$srcOff] + $M02;
                    $dstOff = var$6 + 1 | 0;
                    $srcOff = var$11 + 1 | 0;
                    var$9[var$6] = var$10[var$11] + $M12;
                }
                return;
            case 2:
                $M00 = $this.$m00;
                $M11 = $this.$m11;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$6 = $dstOff + 1 | 0;
                    var$11 = $srcOff + 1 | 0;
                    var$9[$dstOff] = $M00 * var$10[$srcOff];
                    $dstOff = var$6 + 1 | 0;
                    $srcOff = var$11 + 1 | 0;
                    var$9[var$6] = $M11 * var$10[var$11];
                }
                return;
            case 3:
                $M00 = $this.$m00;
                $M02 = $this.$m02;
                $M11 = $this.$m11;
                $M12 = $this.$m12;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$6 = $dstOff + 1 | 0;
                    var$11 = $srcOff + 1 | 0;
                    var$9[$dstOff] = $M00 * var$10[$srcOff] + $M02;
                    $dstOff = var$6 + 1 | 0;
                    $srcOff = var$11 + 1 | 0;
                    var$9[var$6] = $M11 * var$10[var$11] + $M12;
                }
                return;
            case 4:
                $M01 = $this.$m01;
                $M10 = $this.$m10;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$6 = $srcOff + 1 | 0;
                    $x = var$10[$srcOff];
                    var$11 = $dstOff + 1 | 0;
                    $srcOff = var$6 + 1 | 0;
                    var$9[$dstOff] = $M01 * var$10[var$6];
                    $dstOff = var$11 + 1 | 0;
                    var$9[var$11] = $M10 * $x;
                }
                return;
            case 5:
                $M01 = $this.$m01;
                $M02 = $this.$m02;
                $M10 = $this.$m10;
                $M12 = $this.$m12;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$6 = $srcOff + 1 | 0;
                    $x = var$10[$srcOff];
                    var$11 = $dstOff + 1 | 0;
                    $srcOff = var$6 + 1 | 0;
                    var$9[$dstOff] = $M01 * var$10[var$6] + $M02;
                    $dstOff = var$11 + 1 | 0;
                    var$9[var$11] = $M10 * $x + $M12;
                }
                return;
            case 6:
                $M00 = $this.$m00;
                $M01 = $this.$m01;
                $M10 = $this.$m10;
                $M11 = $this.$m11;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$6 = $srcOff + 1 | 0;
                    $x = var$10[$srcOff];
                    $srcOff = var$6 + 1 | 0;
                    $y = var$10[var$6];
                    var$6 = $dstOff + 1 | 0;
                    var$9[$dstOff] = $M00 * $x + $M01 * $y;
                    $dstOff = var$6 + 1 | 0;
                    var$9[var$6] = $M10 * $x + $M11 * $y;
                }
                return;
            case 7:
                break a;
            default:
                cjag_AffineTransform_stateError($this);
                break a;
        }
        if (!($srcPts === $dstPts && $srcOff == $dstOff))
            jl_System_arraycopy($srcPts, $srcOff, $dstPts, $dstOff, $numPts * 2 | 0);
        return;
    }
    $M00 = $this.$m00;
    $M01 = $this.$m01;
    $M02 = $this.$m02;
    $M10 = $this.$m10;
    $M11 = $this.$m11;
    $M12 = $this.$m12;
    while (true) {
        $numPts = $numPts + (-1) | 0;
        if ($numPts < 0)
            break;
        var$9 = $dstPts.data;
        var$10 = $srcPts.data;
        var$6 = $srcOff + 1 | 0;
        $x = var$10[$srcOff];
        $srcOff = var$6 + 1 | 0;
        $y = var$10[var$6];
        var$6 = $dstOff + 1 | 0;
        var$9[$dstOff] = $M00 * $x + $M01 * $y + $M02;
        $dstOff = var$6 + 1 | 0;
        var$9[var$6] = $M10 * $x + $M11 * $y + $M12;
    }
}
function cjag_AffineTransform_transform0($this, $srcPts, $srcOff, $dstPts, $dstOff, $numPts) {
    var var$6, $M02, $M12, var$9, var$10, var$11, $M00, $M11, $M01, $M10, $x, $y;
    if ($dstPts === $srcPts && $dstOff > $srcOff) {
        var$6 = $numPts * 2 | 0;
        if ($dstOff < ($srcOff + var$6 | 0)) {
            jl_System_arraycopy($srcPts, $srcOff, $dstPts, $dstOff, var$6);
            $srcOff = $dstOff;
        }
    }
    a: {
        switch ($this.$state) {
            case 0:
                break;
            case 1:
                $M02 = $this.$m02;
                $M12 = $this.$m12;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$11 = $dstOff + 1 | 0;
                    var$6 = $srcOff + 1 | 0;
                    var$9[$dstOff] = var$10[$srcOff] + $M02;
                    $dstOff = var$11 + 1 | 0;
                    $srcOff = var$6 + 1 | 0;
                    var$9[var$11] = var$10[var$6] + $M12;
                }
                return;
            case 2:
                $M00 = $this.$m00;
                $M11 = $this.$m11;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$11 = $dstOff + 1 | 0;
                    var$6 = $srcOff + 1 | 0;
                    var$9[$dstOff] = $M00 * var$10[$srcOff];
                    $dstOff = var$11 + 1 | 0;
                    $srcOff = var$6 + 1 | 0;
                    var$9[var$11] = $M11 * var$10[var$6];
                }
                return;
            case 3:
                $M00 = $this.$m00;
                $M02 = $this.$m02;
                $M11 = $this.$m11;
                $M12 = $this.$m12;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$11 = $dstOff + 1 | 0;
                    var$6 = $srcOff + 1 | 0;
                    var$9[$dstOff] = $M00 * var$10[$srcOff] + $M02;
                    $dstOff = var$11 + 1 | 0;
                    $srcOff = var$6 + 1 | 0;
                    var$9[var$11] = $M11 * var$10[var$6] + $M12;
                }
                return;
            case 4:
                $M01 = $this.$m01;
                $M10 = $this.$m10;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$11 = $srcOff + 1 | 0;
                    $x = var$10[$srcOff];
                    var$6 = $dstOff + 1 | 0;
                    $srcOff = var$11 + 1 | 0;
                    var$9[$dstOff] = $M01 * var$10[var$11];
                    $dstOff = var$6 + 1 | 0;
                    var$9[var$6] = $M10 * $x;
                }
                return;
            case 5:
                $M01 = $this.$m01;
                $M02 = $this.$m02;
                $M10 = $this.$m10;
                $M12 = $this.$m12;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$11 = $srcOff + 1 | 0;
                    $x = var$10[$srcOff];
                    var$6 = $dstOff + 1 | 0;
                    $srcOff = var$11 + 1 | 0;
                    var$9[$dstOff] = $M01 * var$10[var$11] + $M02;
                    $dstOff = var$6 + 1 | 0;
                    var$9[var$6] = $M10 * $x + $M12;
                }
                return;
            case 6:
                $M00 = $this.$m00;
                $M01 = $this.$m01;
                $M10 = $this.$m10;
                $M11 = $this.$m11;
                while (true) {
                    $numPts = $numPts + (-1) | 0;
                    if ($numPts < 0)
                        break;
                    var$9 = $dstPts.data;
                    var$10 = $srcPts.data;
                    var$11 = $srcOff + 1 | 0;
                    $x = var$10[$srcOff];
                    $srcOff = var$11 + 1 | 0;
                    $y = var$10[var$11];
                    var$11 = $dstOff + 1 | 0;
                    var$9[$dstOff] = $M00 * $x + $M01 * $y;
                    $dstOff = var$11 + 1 | 0;
                    var$9[var$11] = $M10 * $x + $M11 * $y;
                }
                return;
            case 7:
                break a;
            default:
                cjag_AffineTransform_stateError($this);
                break a;
        }
        if (!($srcPts === $dstPts && $srcOff == $dstOff))
            jl_System_arraycopy($srcPts, $srcOff, $dstPts, $dstOff, $numPts * 2 | 0);
        return;
    }
    $M00 = $this.$m00;
    $M01 = $this.$m01;
    $M02 = $this.$m02;
    $M10 = $this.$m10;
    $M11 = $this.$m11;
    $M12 = $this.$m12;
    while (true) {
        $numPts = $numPts + (-1) | 0;
        if ($numPts < 0)
            break;
        var$9 = $dstPts.data;
        var$10 = $srcPts.data;
        var$11 = $srcOff + 1 | 0;
        $x = var$10[$srcOff];
        $srcOff = var$11 + 1 | 0;
        $y = var$10[var$11];
        var$11 = $dstOff + 1 | 0;
        var$9[$dstOff] = $M00 * $x + $M01 * $y + $M02;
        $dstOff = var$11 + 1 | 0;
        var$9[var$11] = $M10 * $x + $M11 * $y + $M12;
    }
}
function cjag_AffineTransform_createTransformedShape($this, $pSrc) {
    var var$2;
    if ($pSrc === null)
        return null;
    var$2 = new cjag_Path2D$Double;
    if (!($pSrc instanceof cjag_Path2D)) {
        $pSrc = cjag_Area_getPathIterator($pSrc, $this);
        cjag_Path2D_setWindingRule(var$2, 1);
        var$2.$pointTypes = $rt_createByteArray(20);
        var$2.$doubleCoords = $rt_createDoubleArray(40);
        cjag_Path2D$Double_append(var$2, $pSrc, 0);
    } else {
        $pSrc = $pSrc;
        cjag_Path2D_setWindingRule(var$2, $pSrc.$windingRule);
        var$2.$numTypes = $pSrc.$numTypes;
        var$2.$pointTypes = cgh_Arrays_copyOf($pSrc.$pointTypes, $pSrc.$pointTypes.data.length);
        var$2.$numCoords = $pSrc.$numCoords;
        var$2.$doubleCoords = $pSrc.$cloneCoordsDouble($this);
    }
    return var$2;
}
function cjag_AffineTransform__clinit_() {
    var var$1, var$2;
    var$1 = $rt_createIntArray(8);
    var$2 = var$1.data;
    var$2[0] = 4;
    var$2[1] = 5;
    var$2[2] = 4;
    var$2[3] = 5;
    var$2[4] = 2;
    var$2[5] = 3;
    var$2[6] = 6;
    var$2[7] = 7;
    cjag_AffineTransform_rot90conversion = var$1;
}
function jl_Math() {
    jl_Object.call(this);
}
function jl_Math_sin(var$1) {
    return Math.sin(var$1);
}
function jl_Math_cos(var$1) {
    return Math.cos(var$1);
}
function jl_Math_acos(var$1) {
    return Math.acos(var$1);
}
function jl_Math_sqrt(var$1) {
    return Math.sqrt(var$1);
}
function jl_Math_ceil(var$1) {
    return Math.ceil(var$1);
}
function jl_Math_pow(var$1, var$2) {
    return Math.pow(var$1, var$2);
}
function jl_Math_atan2(var$1, var$2) {
    return Math.atan2(var$1, var$2);
}
function jl_Math_min($a, $b) {
    if ($a < $b)
        $b = $a;
    return $b;
}
function jl_Math_max($a, $b) {
    if ($a > $b)
        $b = $a;
    return $b;
}
function jl_Math_min0($a, $b) {
    if ($a < $b)
        $b = $a;
    return $b;
}
function jl_Math_max0($a, $b) {
    if ($a > $b)
        $b = $a;
    return $b;
}
function jl_Math_min1($a, $b) {
    if ($a < $b)
        $b = $a;
    return $b;
}
function jl_Math_max1($a, $b) {
    if ($a > $b)
        $b = $a;
    return $b;
}
function jl_Math_abs0($n) {
    if ($n <= 0)
        $n =  -$n;
    return $n;
}
function jl_Math_abs1($n) {
    if (Long_le($n, Long_ZERO))
        $n = Long_neg($n);
    return $n;
}
function jl_Math_abs($n) {
    if ($n <= 0.0)
        $n =  -$n;
    return $n;
}
function cjag_Line2D() {
    jl_Object.call(this);
}
function cjag_Line2D_setLine($this, $p1, $p2) {
    cjag_Line2D$Float_setLine($this, $p1.$getX(), $p1.$getY(), $p2.$getX(), $p2.$getY());
}
function cjag_Line2D_relativeCCW($x1, $y1, $x2, $y2, $px, $py) {
    var $ccw, var$8;
    $x2 = $x2 - $x1;
    $y2 = $y2 - $y1;
    $x1 = $px - $x1;
    $y1 = $py - $y1;
    $ccw = $x1 * $y2 - $y1 * $x2;
    if ($ccw === 0.0) {
        $ccw = $x1 * $x2 + $y1 * $y2;
        if ($ccw > 0.0) {
            $ccw = ($x1 - $x2) * $x2 + ($y1 - $y2) * $y2;
            if ($ccw < 0.0)
                $ccw = 0.0;
        }
    }
    var$8 = $rt_compare($ccw, 0.0);
    return var$8 < 0 ? (-1) : var$8 <= 0 ? 0 : 1;
}
function cjag_Line2D_intersectsLine($this, $l) {
    var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$2 = cjag_Line2D$Float_getX1($l);
    var$3 = cjag_Line2D$Float_getY1($l);
    var$4 = cjag_Line2D$Float_getX2($l);
    var$5 = cjag_Line2D$Float_getY2($l);
    var$6 = cjag_Line2D$Float_getX1($this);
    var$7 = cjag_Line2D$Float_getY1($this);
    var$8 = cjag_Line2D$Float_getX2($this);
    var$9 = cjag_Line2D$Float_getY2($this);
    return $rt_imul(cjag_Line2D_relativeCCW(var$2, var$3, var$4, var$5, var$6, var$7), cjag_Line2D_relativeCCW(var$2, var$3, var$4, var$5, var$8, var$9)) <= 0 && $rt_imul(cjag_Line2D_relativeCCW(var$6, var$7, var$8, var$9, var$2, var$3), cjag_Line2D_relativeCCW(var$6, var$7, var$8, var$9, var$4, var$5)) <= 0 ? 1 : 0;
}
function cjag_Line2D_intersects($this, $r) {
    return cjag_Rectangle2D_intersectsLine($r, cjag_Line2D$Float_getX1($this), cjag_Line2D$Float_getY1($this), cjag_Line2D$Float_getX2($this), cjag_Line2D$Float_getY2($this));
}
function cjag_Line2D$Float() {
    var a = this; cjag_Line2D.call(a);
    a.$x10 = 0.0;
    a.$y10 = 0.0;
    a.$x2 = 0.0;
    a.$y2 = 0.0;
}
function cjag_Line2D$Float__init_(var_0, var_1) {
    var var_2 = new cjag_Line2D$Float();
    cjag_Line2D$Float__init_0(var_2, var_0, var_1);
    return var_2;
}
function cjag_Line2D$Float__init_0($this, $p1, $p2) {
    cjag_Line2D_setLine($this, $p1, $p2);
}
function cjag_Line2D$Float_getX1($this) {
    return $this.$x10;
}
function cjag_Line2D$Float_getY1($this) {
    return $this.$y10;
}
function cjag_Line2D$Float_getP1($this) {
    return cjag_Point2D$Float__init_($this.$x10, $this.$y10);
}
function cjag_Line2D$Float_getX2($this) {
    return $this.$x2;
}
function cjag_Line2D$Float_getY2($this) {
    return $this.$y2;
}
function cjag_Line2D$Float_getP2($this) {
    return cjag_Point2D$Float__init_($this.$x2, $this.$y2);
}
function cjag_Line2D$Float_setLine($this, $x1, $y1, $x2, $y2) {
    $this.$x10 = $x1;
    $this.$y10 = $y1;
    $this.$x2 = $x2;
    $this.$y2 = $y2;
}
function cjag_Line2D$Float_setLine0($this, $x1, $y1, $x2, $y2) {
    $this.$x10 = $x1;
    $this.$y10 = $y1;
    $this.$x2 = $x2;
    $this.$y2 = $y2;
}
function tt_HasText() {
}
function tt_TextElement() {
    var a = this; tt_Rectangle.call(a);
    a.$text = null;
    a.$font = null;
    a.$fontSize = 0.0;
    a.$widthOfSpace = 0.0;
    a.$dir = 0.0;
}
function tt_TextElement__init_0(var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7) {
    var var_8 = new tt_TextElement();
    tt_TextElement__init_1(var_8, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7);
    return var_8;
}
function tt_TextElement__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8) {
    var var_9 = new tt_TextElement();
    tt_TextElement__init_2(var_9, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8);
    return var_9;
}
function tt_TextElement__init_1($this, $y, $x, $width, $height, $font, $fontSize, $c, $widthOfSpace) {
    tt_TextElement__init_2($this, $y, $x, $width, $height, $font, $fontSize, $c, $widthOfSpace, 0.0);
}
function tt_TextElement__init_2($this, $y, $x, $width, $height, $font, $fontSize, $c, $widthOfSpace, $dir) {
    cjag_Rectangle2D__init_0($this);
    cjag_Rectangle2D$Float_setRect($this, $x, $y, $width, $height);
    $this.$text = $c;
    $this.$widthOfSpace = $widthOfSpace;
    $this.$fontSize = $fontSize;
    $this.$font = $font;
    $this.$dir = $dir;
}
function tt_TextElement_getText($this) {
    return $this.$text;
}
function tt_TextElement_getDirection($this) {
    return $this.$dir;
}
function tt_TextElement_getWidthOfSpace($this) {
    return $this.$widthOfSpace;
}
function tt_TextElement_getFont($this) {
    return $this.$font;
}
function tt_TextElement_getFontSize($this) {
    return $this.$fontSize;
}
function tt_TextElement_toString($this) {
    var $sb, $s, var$3;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    $s = tt_Rectangle_toString($this);
    jl_AbstractStringBuilder_append($sb, jl_String_substring($s, 0, jl_String_length($s) - 1 | 0));
    var$3 = $rt_createArray(jl_Object, 1);
    var$3.data[0] = $this.$text;
    jl_AbstractStringBuilder_append($sb, jl_String_format($rt_s(99), var$3));
    return jl_AbstractStringBuilder_toString($sb);
}
function tt_TextElement_hashCode($this) {
    var $result, var$2;
    $result = 31 * ((31 * cjag_Rectangle2D_hashCode($this) | 0) + $rt_floatToIntBits($this.$dir) | 0) | 0;
    var$2 = $this.$font === null ? 0 : $this.$font.hashCode();
    return (31 * ((31 * ((31 * ($result + var$2 | 0) | 0) + $rt_floatToIntBits($this.$fontSize) | 0) | 0) + ($this.$text === null ? 0 : jl_String_hashCode($this.$text)) | 0) | 0) + $rt_floatToIntBits($this.$widthOfSpace) | 0;
}
function tt_TextElement_equals($this, $obj) {
    var $other, var$3;
    if ($this === $obj)
        return 1;
    if (!cjag_Rectangle2D_equals($this, $obj))
        return 0;
    if (jl_Object_getClass($this) !== jl_Object_getClass($obj))
        return 0;
    $other = $obj;
    if ($rt_floatToIntBits($this.$dir) != $rt_floatToIntBits($other.$dir))
        return 0;
    a: {
        if ($this.$font === null) {
            if ($other.$font === null)
                break a;
            return 0;
        }
        $obj = $this.$font;
        var$3 = $other.$font;
        if (!($obj.equals(var$3) ? 1 : 0))
            return 0;
    }
    if ($rt_floatToIntBits($this.$fontSize) != $rt_floatToIntBits($other.$fontSize))
        return 0;
    b: {
        if ($this.$text === null) {
            if ($other.$text === null)
                break b;
            return 0;
        }
        if (!jl_String_equals($this.$text, $other.$text))
            return 0;
    }
    return $rt_floatToIntBits($this.$widthOfSpace) != $rt_floatToIntBits($other.$widthOfSpace) ? 0 : 1;
}
function tt_TextElement_mergeWords($textElements) {
    return tt_TextElement_mergeWords0($textElements, ju_ArrayList__init_());
}
function tt_TextElement_mergeWords0($textElements, $verticalRulings) {
    var $textChunks, $copyOfTextElements, $firstTC, $previousAveCharWidth, $endOfLastTextX, $maxYForLine, $maxHeightForLine, $minYTopForLine, $lastWordSpacing, $chr, $currentChunk, $prevChar, $acrossVerticalRuling, $r, $wordSpacing, $dist, $averageCharWidth, $deltaCharWidth, $expectedStartOfNextWordX, $sameLine, $sp, $textChunksSeparatedByDirectionality, $chunk;
    $textChunks = ju_ArrayList__init_();
    if (ju_AbstractCollection_isEmpty($textElements))
        return $textChunks;
    $copyOfTextElements = ju_ArrayList__init_3($textElements);
    ju_ArrayList_add($textChunks, tt_TextChunk__init_(ju_ArrayList_remove($copyOfTextElements, 0)));
    $firstTC = ju_ArrayList_get($textChunks, 0);
    $previousAveCharWidth = cjag_Rectangle2D$Float_getWidth($firstTC);
    $endOfLastTextX = tt_Rectangle_getRight($firstTC);
    $maxYForLine = tt_Rectangle_getBottom($firstTC);
    $maxHeightForLine = cjag_Rectangle2D$Float_getHeight($firstTC);
    $minYTopForLine = tt_Rectangle_getTop($firstTC);
    $lastWordSpacing = (-1.0);
    $firstTC = ju_AbstractList_iterator($copyOfTextElements);
    while (ju_AbstractList$1_hasNext($firstTC)) {
        $chr = ju_AbstractList$1_next($firstTC);
        $currentChunk = ju_ArrayList_get($textChunks, ju_ArrayList_size($textChunks) - 1 | 0);
        $prevChar = ju_ArrayList_get($currentChunk.$textElements1, ju_ArrayList_size($currentChunk.$textElements1) - 1 | 0);
        if (jl_String_equals(tt_TextElement_getText($chr), tt_TextElement_getText($prevChar)) && tt_Rectangle_overlapRatio($prevChar, $chr) > 0.5)
            continue;
        if (jl_String_equals(tt_TextElement_getText($chr), $rt_s(12)) && tt_Utils_feq(tt_Rectangle_getLeft($prevChar), tt_Rectangle_getLeft($chr)) && tt_Utils_feq(tt_Rectangle_getTop($prevChar), tt_Rectangle_getTop($chr)))
            continue;
        if (!(tt_TextElement_getFont($chr) === tt_TextElement_getFont($prevChar) && tt_Utils_feq(tt_TextElement_getFontSize($chr), tt_TextElement_getFontSize($prevChar))))
            $previousAveCharWidth = (-1.0);
        $acrossVerticalRuling = 0;
        $textElements = ju_AbstractList_iterator($verticalRulings);
        a: {
            b: {
                while (ju_AbstractList$1_hasNext($textElements)) {
                    $r = ju_AbstractList$1_next($textElements);
                    if (tt_TextElement_verticallyOverlapsRuling($prevChar, $r) && tt_TextElement_verticallyOverlapsRuling($chr, $r) && $prevChar.$x1 < tt_Ruling_getPosition($r) && $chr.$x1 > tt_Ruling_getPosition($r))
                        break b;
                    if ($prevChar.$x1 > tt_Ruling_getPosition($r) && $chr.$x1 < tt_Ruling_getPosition($r))
                        break b;
                }
                break a;
            }
            $acrossVerticalRuling = 1;
        }
        $wordSpacing = tt_TextElement_getWidthOfSpace($chr);
        $dist = !(isNaN($wordSpacing) ? 1 : 0) && $wordSpacing !== 0.0 ? ($lastWordSpacing < 0.0 ? $wordSpacing * 0.5 : ($wordSpacing + $lastWordSpacing) / 2.0 * 0.5) : 3.4028234663852886E38;
        $averageCharWidth = $previousAveCharWidth < 0.0 ? cjag_Rectangle2D$Float_getWidth($chr) / jl_String_length(tt_TextElement_getText($chr)) : ($previousAveCharWidth + cjag_Rectangle2D$Float_getWidth($chr) / jl_String_length(tt_TextElement_getText($chr))) / 2.0;
        $deltaCharWidth = $averageCharWidth * 0.30000001192092896;
        $expectedStartOfNextWordX = (-3.4028234663852886E38);
        if ($endOfLastTextX !== (-1.0))
            $expectedStartOfNextWordX = $endOfLastTextX + jl_Math_min1($deltaCharWidth, $dist);
        $sameLine = 1;
        if (!tt_Utils_overlap(tt_Rectangle_getBottom($chr), $chr.$height0, $maxYForLine, $maxHeightForLine)) {
            $expectedStartOfNextWordX = (-3.4028234663852886E38);
            $maxYForLine = (-3.4028234663852886E38);
            $maxHeightForLine = (-1.0);
            $minYTopForLine = 3.4028234663852886E38;
            $sameLine = 0;
        }
        $endOfLastTextX = tt_Rectangle_getRight($chr);
        if (!$acrossVerticalRuling && $sameLine && $expectedStartOfNextWordX < tt_Rectangle_getLeft($chr) && !jl_String_endsWith(tt_TextElement_getText($prevChar), $rt_s(12))) {
            $sp = tt_TextElement__init_0(tt_Rectangle_getTop($prevChar), tt_Rectangle_getLeft($prevChar), $expectedStartOfNextWordX - tt_Rectangle_getLeft($prevChar), cjag_Rectangle2D$Float_getHeight($prevChar), tt_TextElement_getFont($prevChar), tt_TextElement_getFontSize($prevChar), $rt_s(12), tt_TextElement_getWidthOfSpace($prevChar));
            tt_TextChunk_add($currentChunk, $sp);
        } else
            $sp = null;
        $maxYForLine = jl_Math_max1(tt_Rectangle_getBottom($chr), $maxYForLine);
        $maxHeightForLine = jl_Math_max0($maxHeightForLine, cjag_Rectangle2D$Float_getHeight($chr));
        $minYTopForLine = jl_Math_min1($minYTopForLine, tt_Rectangle_getTop($chr));
        $deltaCharWidth = tt_Rectangle_getLeft($chr);
        $previousAveCharWidth = $sp === null ? tt_Rectangle_getRight($prevChar) : tt_Rectangle_getRight($sp);
        c: {
            d: {
                $dist = $deltaCharWidth - $previousAveCharWidth;
                if (!$acrossVerticalRuling && $sameLine) {
                    e: {
                        if ($dist >= 0.0) {
                            if ($dist >= $wordSpacing)
                                break d;
                            else
                                break e;
                        }
                        if (!tt_Rectangle_verticallyOverlaps($currentChunk, $chr))
                            break d;
                    }
                    tt_TextChunk_add($currentChunk, $chr);
                    break c;
                }
            }
            ju_ArrayList_add($textChunks, tt_TextChunk__init_($chr));
        }
        $previousAveCharWidth = $sp === null ? $averageCharWidth : ($averageCharWidth + cjag_Rectangle2D$Float_getWidth($sp)) / 2.0;
        $lastWordSpacing = $wordSpacing;
    }
    $textChunksSeparatedByDirectionality = ju_ArrayList__init_();
    $textElements = ju_AbstractList_iterator($textChunks);
    while (ju_AbstractList$1_hasNext($textElements)) {
        $chunk = ju_AbstractList$1_next($textElements);
        ju_ArrayList_add($textChunksSeparatedByDirectionality, tt_TextChunk_groupByDirectionality($chunk, jl_Boolean_valueOf(tt_TextChunk_isLtrDominant($chunk) == (-1) ? 0 : 1)));
    }
    return $textChunksSeparatedByDirectionality;
}
function tt_TextElement_verticallyOverlapsRuling($te, $r) {
    return jl_Math_max0(0.0, jl_Math_min0(tt_Rectangle_getBottom($te), cjag_Line2D$Float_getY2($r)) - jl_Math_max0(tt_Rectangle_getTop($te), cjag_Line2D$Float_getY1($r))) <= 0.0 ? 0 : 1;
}
function tt_RectangleSpatialIndex() {
    var a = this; jl_Object.call(a);
    a.$si0 = null;
    a.$rectangles = null;
}
function tt_RectangleSpatialIndex__init_() {
    var var_0 = new tt_RectangleSpatialIndex();
    tt_RectangleSpatialIndex__init_0(var_0);
    return var_0;
}
function tt_RectangleSpatialIndex__init_0($this) {
    var var$1;
    var$1 = new oljis_STRtree;
    var$1.$built = 0;
    var$1.$itemBoundables = ju_ArrayList__init_();
    olju_Assert_isTrue(1, $rt_s(100));
    var$1.$nodeCapacity = 10;
    $this.$si0 = var$1;
    $this.$rectangles = ju_ArrayList__init_();
}
function tt_RectangleSpatialIndex_add($this, $te) {
    ju_ArrayList_add($this.$rectangles, $te);
    oljis_STRtree_insert($this.$si0, oljg_Envelope__init_(tt_Rectangle_getLeft($te), tt_Rectangle_getRight($te), tt_Rectangle_getBottom($te), tt_Rectangle_getTop($te)), $te);
}
function tt_RectangleSpatialIndex_contains($this, $r) {
    var $intersection, $rv, $ir;
    $intersection = oljis_STRtree_query($this.$si0, oljg_Envelope__init_(tt_Rectangle_getLeft($r), tt_Rectangle_getRight($r), tt_Rectangle_getTop($r), tt_Rectangle_getBottom($r)));
    $rv = ju_ArrayList__init_();
    $intersection = ju_AbstractList_iterator($intersection);
    while (ju_AbstractList$1_hasNext($intersection)) {
        $ir = ju_AbstractList$1_next($intersection);
        if (cjag_RectangularShape_contains($r, $ir))
            ju_ArrayList_add($rv, $ir);
    }
    tt_Utils_sort($rv, tt_Rectangle_ILL_DEFINED_ORDER);
    return $rv;
}
function tt_RectangleSpatialIndex_getBounds($this) {
    return tt_Rectangle_boundingBoxOf($this.$rectangles);
}
function ji_OutputStream() {
    jl_Object.call(this);
}
function ji_OutputStream_write($this, $b, $off, $len) {
    var $i, var$5, var$6;
    $i = 0;
    while ($i < $len) {
        var$5 = $b.data;
        var$6 = $off + 1 | 0;
        $this.$write0(var$5[$off]);
        $i = $i + 1 | 0;
        $off = var$6;
    }
}
function ji_FilterOutputStream() {
    ji_OutputStream.call(this);
    this.$out1 = null;
}
function ji_PrintStream() {
    var a = this; ji_FilterOutputStream.call(a);
    a.$autoFlush = 0;
    a.$errorState = 0;
    a.$sb = null;
    a.$buffer0 = null;
    a.$charset = null;
}
function ji_PrintStream__init_(var_0, var_1) {
    var var_2 = new ji_PrintStream();
    ji_PrintStream__init_0(var_2, var_0, var_1);
    return var_2;
}
function ji_PrintStream__init_0($this, $out, $autoFlush) {
    var var$3, var$4, var$5;
    $this.$out1 = $out;
    $out = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($out);
    $this.$sb = $out;
    $this.$buffer0 = $rt_createCharArray(32);
    $this.$autoFlush = $autoFlush;
    $out = new jnci_UTF8Charset;
    var$3 = $rt_createArray(jl_String, 0);
    var$4 = var$3.data;
    jnc_Charset_checkCanonicalName($rt_s(101));
    $autoFlush = var$4.length;
    var$5 = 0;
    while (var$5 < $autoFlush) {
        jnc_Charset_checkCanonicalName(var$4[var$5]);
        var$5 = var$5 + 1 | 0;
    }
    $out.$canonicalName = $rt_s(101);
    $out.$aliases = var$3.$clone();
    $this.$charset = $out;
}
function ji_PrintStream_write($this, $b, $off, $len) {
    var $$je;
    if ($this.$out1 === null)
        $this.$errorState = 1;
    if (!($this.$errorState ? 0 : 1))
        return;
    a: {
        try {
            ji_OutputStream_write($this.$out1, $b, $off, $len);
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof ji_IOException) {
            } else {
                throw $$e;
            }
        }
        $this.$errorState = 1;
    }
}
function ji_PrintStream_print0($this, $s, $begin, $end) {
    var $destBytes, $src, var$6, var$7, var$8, $encoder, $overflow;
    $destBytes = $s.data;
    $end = $end - $begin | 0;
    $src = new jn_CharBufferOverArray;
    var$6 = $destBytes.length;
    jn_CharBufferOverArray__init_($src, 0, var$6, $s, $begin, $begin + $end | 0, 0);
    $destBytes = $rt_createByteArray(jl_Math_max(16, jl_Math_min(var$6, 1024)));
    var$7 = $destBytes.data.length;
    var$8 = new jn_ByteBufferImpl;
    $end = 0 + var$7 | 0;
    jn_Buffer__init_(var$8, var$7);
    var$8.$order = jn_ByteOrder_BIG_ENDIAN;
    var$8.$start1 = 0;
    var$8.$array0 = $destBytes;
    var$8.$position = 0;
    var$8.$limit = $end;
    var$8.$direct = 0;
    var$8.$readOnly = 0;
    $encoder = jnc_CharsetEncoder_onUnmappableCharacter(jnc_CharsetEncoder_onMalformedInput(jnci_UTF8Charset_newEncoder($this.$charset), jnc_CodingErrorAction_REPLACE), jnc_CodingErrorAction_REPLACE);
    while (true) {
        $overflow = jnc_CoderResult_isOverflow(jnc_CharsetEncoder_encode($encoder, $src, var$8, 1));
        ji_PrintStream_write($this, $destBytes, 0, var$8.$position);
        jn_ByteBuffer_clear(var$8);
        if (!$overflow)
            break;
    }
    while (true) {
        $overflow = jnc_CoderResult_isOverflow(jnc_CharsetEncoder_flush($encoder, var$8));
        ji_PrintStream_write($this, $destBytes, 0, var$8.$position);
        jn_ByteBuffer_clear(var$8);
        if (!$overflow)
            break;
    }
}
function ji_PrintStream_print1($this, $c) {
    $this.$buffer0.data[0] = $c;
    ji_PrintStream_print0($this, $this.$buffer0, 0, 1);
}
function ji_PrintStream_print($this, $s) {
    jl_AbstractStringBuilder_append($this.$sb, $s);
    ji_PrintStream_printSB($this);
}
function ji_PrintStream_println($this, $s) {
    var var$2;
    var$2 = $this.$sb;
    jl_AbstractStringBuilder_append(var$2, $s);
    jl_AbstractStringBuilder_append1(var$2, 10);
    ji_PrintStream_printSB($this);
}
function ji_PrintStream_println1($this, $s) {
    jl_AbstractStringBuilder_append1(jl_StringBuilder_append3($this.$sb, $s), 10);
    ji_PrintStream_printSB($this);
}
function ji_PrintStream_println0($this) {
    ji_PrintStream_print1($this, 10);
}
function ji_PrintStream_printSB($this) {
    var $buffer;
    $buffer = $this.$sb.$length0 <= $this.$buffer0.data.length ? $this.$buffer0 : $rt_createCharArray($this.$sb.$length0);
    jl_StringBuilder_getChars($this.$sb, 0, $this.$sb.$length0, $buffer, 0);
    ji_PrintStream_print0($this, $buffer, 0, $this.$sb.$length0);
    jl_StringBuilder_setLength($this.$sb, 0);
}
function jl_ConsoleOutputStreamStdout() {
    ji_OutputStream.call(this);
}
function jl_ConsoleOutputStreamStdout_write($this, $b) {
    $rt_putStdout($b);
}
function jl_IllegalArgumentException() {
    jl_RuntimeException.call(this);
}
function jl_IllegalArgumentException__init_0() {
    var var_0 = new jl_IllegalArgumentException();
    jl_IllegalArgumentException__init_(var_0);
    return var_0;
}
function jl_IllegalArgumentException__init_($this) {
    jl_Throwable__init_0($this);
}
function jl_NumberFormatException() {
    jl_IllegalArgumentException.call(this);
}
function jl_NumberFormatException__init_() {
    var var_0 = new jl_NumberFormatException();
    jl_NumberFormatException__init_0(var_0);
    return var_0;
}
function jl_NumberFormatException__init_0($this) {
    jl_Throwable__init_0($this);
}
function jl_ConsoleOutputStreamStderr() {
    ji_OutputStream.call(this);
}
function jl_ConsoleOutputStreamStderr_write($this, $b) {
    $rt_putStderr($b);
}
function tt_Page() {
    var a = this; tt_Rectangle.call(a);
    a.$rotation = null;
    a.$pageNumber = 0;
    a.$texts = null;
    a.$rulings0 = null;
    a.$cleanRulings = null;
    a.$verticalRulingLines = null;
    a.$horizontalRulingLines = null;
    a.$minCharWidth0 = 0.0;
    a.$minCharHeight0 = 0.0;
    a.$spatial_index = null;
    a.$pdPage = null;
    a.$pdDoc = null;
}
function tt_Page__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12) {
    var var_13 = new tt_Page();
    tt_Page__init_0(var_13, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12);
    return var_13;
}
function tt_Page__init_0($this, $top, $left, $width, $height, $rotation, $page_number, $pdPage, $doc, $characters, $rulings, $minCharWidth, $minCharHeight, $index) {
    tt_Rectangle__init_0($this, $top, $left, $width, $height);
    $this.$cleanRulings = null;
    $this.$verticalRulingLines = null;
    $this.$horizontalRulingLines = null;
    $this.$rotation = jl_Integer_valueOf($rotation);
    $this.$pageNumber = $page_number;
    $this.$pdPage = $pdPage;
    $this.$pdDoc = $doc;
    $this.$texts = $characters;
    $this.$rulings0 = $rulings;
    $this.$minCharHeight0 = $minCharHeight;
    $this.$minCharWidth0 = $minCharWidth;
    $this.$spatial_index = $index;
}
function tt_Page_getArea($this, $area) {
    var $t, $min_char_width, $min_char_height, $rv, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, var$16;
    $t = tt_Page_getText($this, $area);
    $min_char_width = 7.0;
    $min_char_height = 7.0;
    if ($t.$size0 > 0) {
        $rv = new tt_Page$1;
        $rv.$this$04 = $this;
        $min_char_width = ju_Collections_min($t, $rv).$width0;
        $rv = new tt_Page$2;
        $rv.$this$05 = $this;
        $min_char_height = ju_Collections_min($t, $rv).$height0;
    }
    $rv = new tt_Page;
    var$6 = tt_Rectangle_getTop($area);
    var$7 = tt_Rectangle_getLeft($area);
    var$8 = cjag_Rectangle2D$Float_getWidth($area);
    var$9 = cjag_Rectangle2D$Float_getHeight($area);
    var$10 = $this.$rotation.$value;
    var$11 = $this.$pageNumber;
    var$12 = $this.$pdPage;
    var$13 = $this.$pdDoc;
    var$14 = tt_Page_getRulings($this);
    var$15 = ju_ArrayList__init_();
    var$14 = ju_AbstractList_iterator(var$14);
    while (ju_AbstractList$1_hasNext(var$14)) {
        var$16 = ju_AbstractList$1_next(var$14);
        if (cjag_Line2D_intersects(var$16, $area))
            ju_ArrayList_add(var$15, tt_Ruling_intersect(var$16, $area));
    }
    tt_Page__init_0($rv, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, $t, var$15, $min_char_width, $min_char_height, $this.$spatial_index);
    tt_Page_addRuling($rv, tt_Ruling__init_(cjag_Point2D$Double__init_(tt_Rectangle_getLeft($rv), tt_Rectangle_getTop($rv)), cjag_Point2D$Double__init_(tt_Rectangle_getRight($rv), tt_Rectangle_getTop($rv))));
    tt_Page_addRuling($rv, tt_Ruling__init_(cjag_Point2D$Double__init_(tt_Rectangle_getRight($rv), tt_Rectangle_getTop($rv)), cjag_Point2D$Double__init_(tt_Rectangle_getRight($rv), tt_Rectangle_getBottom($rv))));
    tt_Page_addRuling($rv, tt_Ruling__init_(cjag_Point2D$Double__init_(tt_Rectangle_getRight($rv), tt_Rectangle_getBottom($rv)), cjag_Point2D$Double__init_(tt_Rectangle_getLeft($rv), tt_Rectangle_getBottom($rv))));
    tt_Page_addRuling($rv, tt_Ruling__init_(cjag_Point2D$Double__init_(tt_Rectangle_getLeft($rv), tt_Rectangle_getBottom($rv)), cjag_Point2D$Double__init_(tt_Rectangle_getLeft($rv), tt_Rectangle_getTop($rv))));
    return $rv;
}
function tt_Page_getText0($this) {
    return $this.$texts;
}
function tt_Page_getText($this, $area) {
    return tt_RectangleSpatialIndex_contains($this.$spatial_index, $area);
}
function tt_Page_getRulings($this) {
    var $vrs, $hrs, $vr, $hr;
    if ($this.$cleanRulings !== null)
        return $this.$cleanRulings;
    if ($this.$rulings0 !== null && !ju_AbstractCollection_isEmpty($this.$rulings0)) {
        tt_Utils_snapPoints($this.$rulings0, $this.$minCharWidth0, $this.$minCharHeight0);
        $vrs = ju_ArrayList__init_();
        $hrs = ju_AbstractList_iterator($this.$rulings0);
        while (ju_AbstractList$1_hasNext($hrs)) {
            $vr = ju_AbstractList$1_next($hrs);
            if (tt_Ruling_vertical($vr))
                ju_ArrayList_add($vrs, $vr);
        }
        $this.$verticalRulingLines = tt_Ruling_collapseOrientedRulings($vrs);
        $hrs = ju_ArrayList__init_();
        $vrs = ju_AbstractList_iterator($this.$rulings0);
        while (ju_AbstractList$1_hasNext($vrs)) {
            $hr = ju_AbstractList$1_next($vrs);
            if (tt_Ruling_horizontal($hr))
                ju_ArrayList_add($hrs, $hr);
        }
        $this.$horizontalRulingLines = tt_Ruling_collapseOrientedRulings($hrs);
        $this.$cleanRulings = ju_ArrayList__init_3($this.$verticalRulingLines);
        ju_AbstractCollection_addAll($this.$cleanRulings, $this.$horizontalRulingLines);
        return $this.$cleanRulings;
    }
    $this.$verticalRulingLines = ju_ArrayList__init_();
    $this.$horizontalRulingLines = ju_ArrayList__init_();
    return ju_ArrayList__init_();
}
function tt_Page_addRuling($this, $r) {
    var var$2;
    if (tt_Ruling_oblique($r)) {
        var$2 = new jl_UnsupportedOperationException;
        jl_Throwable__init_(var$2, $rt_s(102));
        $rt_throw(var$2);
    }
    ju_ArrayList_add($this.$rulings0, $r);
    $this.$verticalRulingLines = null;
    $this.$horizontalRulingLines = null;
    $this.$cleanRulings = null;
}
function jl_StringBuffer() {
    jl_AbstractStringBuilder.call(this);
}
function jl_StringBuffer_append($this, $string) {
    jl_AbstractStringBuilder_append($this, $string);
    return $this;
}
function jl_StringBuffer_append0($this, $c) {
    jl_AbstractStringBuilder_append1($this, $c);
    return $this;
}
function jl_StringBuffer_append1($this, $chars, $offset, $len) {
    jl_AbstractStringBuilder_append2($this, $chars, $offset, $len);
    return $this;
}
function jl_StringBuffer_append2($this, $chars) {
    jl_AbstractStringBuilder_append3($this, $chars);
    return $this;
}
function jl_StringBuffer_insert($this, $index, $chars, $offset, $len) {
    jl_AbstractStringBuilder_insert5($this, $index, $chars, $offset, $len);
    return $this;
}
function jl_StringBuffer_insert0($this, $index, $c) {
    jl_AbstractStringBuilder_insert4($this, $index, $c);
    return $this;
}
function jl_StringBuffer_insert1($this, $index, $string) {
    jl_AbstractStringBuilder_insert($this, $index, $string);
    return $this;
}
function jl_StringBuffer_insert2($this, var$1, var$2, var$3, var$4) {
    jl_AbstractStringBuilder_insert5($this, var$1, var$2, var$3, var$4);
    return $this;
}
function jl_StringBuffer_append3($this, var$1, var$2, var$3) {
    jl_AbstractStringBuilder_append2($this, var$1, var$2, var$3);
    return $this;
}
function jl_StringBuffer_charAt($this, var$1) {
    return jl_AbstractStringBuilder_charAt($this, var$1);
}
function jl_StringBuffer_length($this) {
    return $this.$length0;
}
function jl_StringBuffer_toString($this) {
    return jl_AbstractStringBuilder_toString($this);
}
function jl_StringBuffer_ensureCapacity($this, var$1) {
    jl_AbstractStringBuilder_ensureCapacity($this, var$1);
}
function jl_StringBuffer_insert3($this, var$1, var$2) {
    jl_AbstractStringBuilder_insert4($this, var$1, var$2);
    return $this;
}
function jl_StringBuffer_insert4($this, var$1, var$2) {
    jl_AbstractStringBuilder_insert($this, var$1, var$2);
    return $this;
}
function oacc_CSVFormat() {
    var a = this; jl_Object.call(a);
    a.$allowDuplicateHeaderNames = 0;
    a.$allowMissingColumnNames = 0;
    a.$autoFlush0 = 0;
    a.$commentMarker = null;
    a.$delimiter = 0;
    a.$escapeCharacter = null;
    a.$header = null;
    a.$headerComments = null;
    a.$ignoreEmptyLines = 0;
    a.$ignoreHeaderCase = 0;
    a.$ignoreSurroundingSpaces = 0;
    a.$nullString = null;
    a.$quoteCharacter = null;
    a.$quotedNullString = null;
    a.$quoteMode = null;
    a.$recordSeparator = null;
    a.$skipHeaderRecord = 0;
    a.$trailingDelimiter = 0;
    a.$trim0 = 0;
}
var oacc_CSVFormat_DEFAULT = null;
var oacc_CSVFormat_EXCEL = null;
var oacc_CSVFormat_INFORMIX_UNLOAD = null;
var oacc_CSVFormat_INFORMIX_UNLOAD_CSV = null;
var oacc_CSVFormat_MONGODB_CSV = null;
var oacc_CSVFormat_MONGODB_TSV = null;
var oacc_CSVFormat_MYSQL = null;
var oacc_CSVFormat_ORACLE = null;
var oacc_CSVFormat_POSTGRESQL_CSV = null;
var oacc_CSVFormat_POSTGRESQL_TEXT = null;
var oacc_CSVFormat_RFC4180 = null;
var oacc_CSVFormat_TDF = null;
function oacc_CSVFormat_$callClinit() {
    oacc_CSVFormat_$callClinit = $rt_eraseClinit(oacc_CSVFormat);
    oacc_CSVFormat__clinit_();
}
function oacc_CSVFormat__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16, var_17) {
    var var_18 = new oacc_CSVFormat();
    oacc_CSVFormat__init_0(var_18, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8, var_9, var_10, var_11, var_12, var_13, var_14, var_15, var_16, var_17);
    return var_18;
}
function oacc_CSVFormat_isLineBreak($c) {
    oacc_CSVFormat_$callClinit();
    return $c != 10 && $c != 13 ? 0 : 1;
}
function oacc_CSVFormat_isLineBreak0($c) {
    oacc_CSVFormat_$callClinit();
    return $c !== null && oacc_CSVFormat_isLineBreak($c.$value1) ? 1 : 0;
}
function oacc_CSVFormat__init_0($this, $delimiter, $quoteChar, $quoteMode, $commentStart, $escape, $ignoreSurroundingSpaces, $ignoreEmptyLines, $recordSeparator, $nullString, $headerComments, $header, $skipHeaderRecord, $allowMissingColumnNames, $ignoreHeaderCase, $trim, $trailingDelimiter, $autoFlush, $allowDuplicateHeaderNames) {
    var var$19, var$20;
    oacc_CSVFormat_$callClinit();
    $this.$delimiter = $delimiter;
    $this.$quoteCharacter = $quoteChar;
    $this.$quoteMode = $quoteMode;
    $this.$commentMarker = $commentStart;
    $this.$escapeCharacter = $escape;
    $this.$ignoreSurroundingSpaces = $ignoreSurroundingSpaces;
    $this.$allowMissingColumnNames = $allowMissingColumnNames;
    $this.$ignoreEmptyLines = $ignoreEmptyLines;
    $this.$recordSeparator = $recordSeparator;
    $this.$nullString = $nullString;
    if ($headerComments === null)
        $headerComments = null;
    else {
        var$19 = $headerComments.data;
        $delimiter = var$19.length;
        $headerComments = $rt_createArray(jl_String, $delimiter);
        var$20 = $headerComments.data;
        $ignoreSurroundingSpaces = 0;
        while ($ignoreSurroundingSpaces < $delimiter) {
            $quoteChar = var$19[$ignoreSurroundingSpaces];
            var$20[$ignoreSurroundingSpaces] = $quoteChar !== null ? $quoteChar.$toString() : null;
            $ignoreSurroundingSpaces = $ignoreSurroundingSpaces + 1 | 0;
        }
    }
    $this.$headerComments = $headerComments;
    $this.$header = $header === null ? null : $header.$clone();
    $this.$skipHeaderRecord = $skipHeaderRecord;
    $this.$ignoreHeaderCase = $ignoreHeaderCase;
    $this.$trailingDelimiter = $trailingDelimiter;
    $this.$trim0 = $trim;
    $this.$autoFlush0 = $autoFlush;
    $quoteChar = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($quoteChar);
    $quoteChar = jl_StringBuilder_append3($quoteChar, $this.$quoteCharacter);
    jl_AbstractStringBuilder_append($quoteChar, $nullString);
    $this.$quotedNullString = jl_AbstractStringBuilder_toString(jl_StringBuilder_append3($quoteChar, $this.$quoteCharacter));
    $this.$allowDuplicateHeaderNames = $allowDuplicateHeaderNames;
    oacc_CSVFormat_validate($this);
}
function oacc_CSVFormat_getAutoFlush($this) {
    return $this.$autoFlush0;
}
function oacc_CSVFormat_getCommentMarker($this) {
    return $this.$commentMarker;
}
function oacc_CSVFormat_getDelimiter($this) {
    return $this.$delimiter;
}
function oacc_CSVFormat_getEscapeCharacter($this) {
    return $this.$escapeCharacter;
}
function oacc_CSVFormat_getHeader($this) {
    return $this.$header === null ? null : $this.$header.$clone();
}
function oacc_CSVFormat_getHeaderComments($this) {
    return $this.$headerComments === null ? null : $this.$headerComments.$clone();
}
function oacc_CSVFormat_getQuoteCharacter($this) {
    return $this.$quoteCharacter;
}
function oacc_CSVFormat_getQuoteMode($this) {
    return $this.$quoteMode;
}
function oacc_CSVFormat_getSkipHeaderRecord($this) {
    return $this.$skipHeaderRecord;
}
function oacc_CSVFormat_getTrailingDelimiter($this) {
    return $this.$trailingDelimiter;
}
function oacc_CSVFormat_getTrim($this) {
    return $this.$trim0;
}
function oacc_CSVFormat_isCommentMarkerSet($this) {
    return $this.$commentMarker === null ? 0 : 1;
}
function oacc_CSVFormat_isEscapeCharacterSet($this) {
    return $this.$escapeCharacter === null ? 0 : 1;
}
function oacc_CSVFormat_isQuoteCharacterSet($this) {
    return $this.$quoteCharacter === null ? 0 : 1;
}
function oacc_CSVFormat_print($this, $value, $out, $newRecord) {
    var $charSequence, var$5, var$6, var$7, var$8, var$9, var$10;
    if ($value !== null) {
        if ($rt_isInstance($value, jl_CharSequence))
            $charSequence = $value;
        else {
            if ($value instanceof ji_Reader) {
                $value = $value;
                if (!$newRecord)
                    ji_StringWriter_write0($out, $this.$delimiter);
                if (!oacc_CSVFormat_isQuoteCharacterSet($this)) {
                    if (oacc_CSVFormat_isEscapeCharacterSet($this))
                        oacc_CSVFormat_printWithEscapes($this, $value, $out);
                    else if ($out instanceof ji_Writer) {
                        $out = $out;
                        var$5 = $rt_createCharArray(4096);
                        while (true) {
                            var$6 = $value.$read(var$5);
                            if ((-1) == var$6)
                                break;
                            ji_StringWriter_write($out, var$5, 0, var$6);
                        }
                    } else {
                        $charSequence = jn_CharBufferOverArray__init_0(0, 4096, $rt_createCharArray(4096), 0, 4096, 0);
                        while (true) {
                            var$6 = $value.$read0($charSequence);
                            if ((-1) == var$6)
                                break;
                            jn_CharBuffer_flip($charSequence);
                            ji_StringWriter_append1($out, $charSequence, 0, var$6);
                        }
                    }
                } else if ($this.$quoteMode === oacc_QuoteMode_NONE)
                    oacc_CSVFormat_printWithEscapes($this, $value, $out);
                else {
                    var$6 = 0;
                    var$7 = $this.$quoteCharacter.$value1;
                    $charSequence = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_2($charSequence, 4096);
                    ji_StringWriter_write0($out, var$7);
                    while (true) {
                        var$8 = $value.$read1();
                        if ((-1) == var$8)
                            break;
                        $newRecord = var$8 & 65535;
                        jl_AbstractStringBuilder_append1($charSequence, $newRecord);
                        if (var$8 == var$7) {
                            if (var$6 > 0) {
                                ji_StringWriter_append0($out, jl_StringBuilder_substring($charSequence, 0, var$6));
                                jl_StringBuilder_setLength($charSequence, 0);
                                var$6 = (-1);
                            }
                            ji_StringWriter_write0($out, var$7);
                            ji_StringWriter_write0($out, $newRecord);
                        }
                        var$6 = var$6 + 1 | 0;
                    }
                    if (var$6 > 0)
                        ji_StringWriter_append0($out, jl_StringBuilder_substring($charSequence, 0, var$6));
                    ji_StringWriter_write0($out, var$7);
                }
                return;
            }
            $charSequence = $value.$toString();
        }
    } else
        $charSequence = null === $this.$nullString ? $rt_s(44) : oacc_QuoteMode_ALL !== $this.$quoteMode ? $this.$nullString : $this.$quotedNullString;
    if ($this.$trim0) {
        if ($charSequence instanceof jl_String)
            $charSequence = jl_String_trim($charSequence);
        else {
            var$9 = jl_String_length($charSequence);
            var$7 = 0;
            a: {
                while (var$7 < var$9) {
                    if (jl_String_charAt($charSequence, var$7) > 32) {
                        var$10 = var$9;
                        break a;
                    }
                    var$7 = var$7 + 1 | 0;
                }
                var$10 = var$9;
            }
            while (var$7 < var$10 && jl_String_charAt($charSequence, var$10 - 1 | 0) <= 32) {
                var$10 = var$10 + (-1) | 0;
            }
            if (!(var$7 <= 0 && var$10 >= var$9))
                $charSequence = jl_String_substring($charSequence, var$7, var$10);
        }
    }
    var$6 = jl_String_length($charSequence);
    if (!$newRecord)
        ji_StringWriter_write0($out, $this.$delimiter);
    if ($value === null)
        ji_StringWriter_append0($out, $charSequence);
    else if (oacc_CSVFormat_isQuoteCharacterSet($this))
        oacc_CSVFormat_printWithQuotes($this, $value, $charSequence, $out, $newRecord);
    else if (oacc_CSVFormat_isEscapeCharacterSet($this))
        oacc_CSVFormat_printWithEscapes0($this, $charSequence, $out);
    else
        ji_StringWriter_append1($out, $charSequence, 0, var$6);
}
function oacc_CSVFormat_println($this, $out) {
    if ($this.$trailingDelimiter)
        ji_StringWriter_write0($out, $this.$delimiter);
    if ($this.$recordSeparator !== null)
        ji_StringWriter_append0($out, $this.$recordSeparator);
}
function oacc_CSVFormat_printRecord($this, $out, $values) {
    var $i, var$4;
    $i = 0;
    while (true) {
        var$4 = $values.data;
        if ($i >= var$4.length)
            break;
        oacc_CSVFormat_print($this, var$4[$i], $out, $i ? 0 : 1);
        $i = $i + 1 | 0;
    }
    oacc_CSVFormat_println($this, $out);
}
function oacc_CSVFormat_printWithEscapes0($this, $value, $out) {
    var $start, $pos, $len, $delim, $escape, $c, var$9;
    $start = 0;
    $pos = 0;
    $len = jl_String_length($value);
    $delim = $this.$delimiter;
    $escape = $this.$escapeCharacter.$value1;
    while ($pos < $len) {
        $c = jl_String_charAt($value, $pos);
        var$9 = $rt_compare($c, 13);
        if (!(var$9 && $c != 10 && $c != $delim && $c != $escape)) {
            if ($pos > $start)
                ji_StringWriter_append1($out, $value, $start, $pos);
            if ($c == 10)
                $c = 110;
            else if (!var$9)
                $c = 114;
            ji_StringWriter_write0($out, $escape);
            ji_StringWriter_write0($out, $c);
            $start = $pos + 1 | 0;
        }
        $pos = $pos + 1 | 0;
    }
    if ($pos > $start)
        ji_StringWriter_append1($out, $value, $start, $pos);
}
function oacc_CSVFormat_printWithEscapes($this, $reader, $out) {
    var $start, $pos, $delim, $escape, $builder, var$8, var$9;
    $start = 0;
    $pos = 0;
    $delim = $this.$delimiter;
    $escape = $this.$escapeCharacter.$value1;
    $builder = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_2($builder, 4096);
    while (true) {
        var$8 = $reader.$read1();
        if ((-1) == var$8)
            break;
        jl_AbstractStringBuilder_append1($builder, var$8 & 65535);
        var$9 = $rt_compare(var$8, 13);
        if (!(var$9 && var$8 != 10 && var$8 != $delim && var$8 != $escape)) {
            if ($pos > $start) {
                ji_StringWriter_append0($out, jl_StringBuilder_substring($builder, $start, $pos));
                jl_StringBuilder_setLength($builder, 0);
            }
            if (var$8 == 10)
                var$8 = 110;
            else if (!var$9)
                var$8 = 114;
            ji_StringWriter_write0($out, $escape);
            ji_StringWriter_write0($out, var$8 & 65535);
            $start = $pos + 1 | 0;
        }
        $pos = $pos + 1 | 0;
    }
    if ($pos > $start)
        ji_StringWriter_append0($out, jl_StringBuilder_substring($builder, $start, $pos));
}
function oacc_CSVFormat_printWithQuotes($this, $object, $value, $out, $newRecord) {
    var $quote, $start, $pos, $len, $delimChar, $quoteChar, $escapeChar, $quoteModePolicy, $c;
    $quote = 0;
    $start = 0;
    $pos = 0;
    $len = jl_String_length($value);
    $delimChar = $this.$delimiter;
    $quoteChar = $this.$quoteCharacter.$value1;
    $escapeChar = !oacc_CSVFormat_isEscapeCharacterSet($this) ? $quoteChar : $this.$escapeCharacter.$value1;
    $quoteModePolicy = $this.$quoteMode;
    if ($quoteModePolicy === null)
        $quoteModePolicy = oacc_QuoteMode_MINIMAL;
    a: {
        oacc_CSVFormat$1_$callClinit();
        switch (oacc_CSVFormat$1_$SwitchMap$org$apache$commons$csv$QuoteMode.data[$quoteModePolicy.$ordinal]) {
            case 1:
            case 2:
                $quote = 1;
                break a;
            case 3:
                $quote = $object instanceof jl_Number ? 0 : 1;
                break a;
            case 4:
                break;
            case 5:
                if ($len <= 0) {
                    if ($newRecord)
                        $quote = 1;
                } else if (jl_String_charAt($value, $pos) <= 35)
                    $quote = 1;
                else {
                    b: {
                        c: {
                            while ($pos < $len) {
                                $c = jl_String_charAt($value, $pos);
                                if ($c == 10)
                                    break c;
                                if ($c == 13)
                                    break c;
                                if ($c == $quoteChar)
                                    break c;
                                if ($c == $delimChar)
                                    break c;
                                if ($c == $escapeChar)
                                    break c;
                                $pos = $pos + 1 | 0;
                            }
                            break b;
                        }
                        $quote = 1;
                    }
                    if (!$quote) {
                        $pos = $len - 1 | 0;
                        if (jl_String_charAt($value, $pos) <= 32)
                            $quote = 1;
                    }
                }
                if (!$quote) {
                    ji_StringWriter_append1($out, $value, $start, $len);
                    return;
                }
                break a;
            default:
                $object = new jl_IllegalStateException;
                $value = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_($value);
                jl_AbstractStringBuilder_append($value, $rt_s(103));
                jl_Throwable__init_($object, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3($value, $quoteModePolicy)));
                $rt_throw($object);
        }
        oacc_CSVFormat_printWithEscapes0($this, $value, $out);
        return;
    }
    if (!$quote) {
        ji_StringWriter_append1($out, $value, $start, $len);
        return;
    }
    ji_StringWriter_write0($out, $quoteChar);
    while ($pos < $len) {
        $c = jl_String_charAt($value, $pos);
        if (!($c != $quoteChar && $c != $escapeChar)) {
            ji_StringWriter_append1($out, $value, $start, $pos);
            ji_StringWriter_write0($out, $escapeChar);
            $start = $pos;
        }
        $pos = $pos + 1 | 0;
    }
    ji_StringWriter_append1($out, $value, $start, $pos);
    ji_StringWriter_write0($out, $quoteChar);
}
function oacc_CSVFormat_validate($this) {
    var $dupCheck, $hdr, var$3, var$4, var$5, var$6, var$7;
    if (oacc_CSVFormat_isLineBreak($this.$delimiter)) {
        $dupCheck = new jl_IllegalArgumentException;
        jl_Throwable__init_($dupCheck, $rt_s(104));
        $rt_throw($dupCheck);
    }
    if ($this.$quoteCharacter !== null && $this.$delimiter == $this.$quoteCharacter.$value1) {
        $dupCheck = new jl_IllegalArgumentException;
        $hdr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($hdr);
        jl_AbstractStringBuilder_append($hdr, $rt_s(105));
        $hdr = jl_StringBuilder_append3($hdr, $this.$quoteCharacter);
        jl_AbstractStringBuilder_append($hdr, $rt_s(106));
        jl_Throwable__init_($dupCheck, jl_AbstractStringBuilder_toString($hdr));
        $rt_throw($dupCheck);
    }
    if ($this.$escapeCharacter !== null && $this.$delimiter == $this.$escapeCharacter.$value1) {
        $dupCheck = new jl_IllegalArgumentException;
        $hdr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($hdr);
        jl_AbstractStringBuilder_append($hdr, $rt_s(107));
        $hdr = jl_StringBuilder_append3($hdr, $this.$escapeCharacter);
        jl_AbstractStringBuilder_append($hdr, $rt_s(106));
        jl_Throwable__init_($dupCheck, jl_AbstractStringBuilder_toString($hdr));
        $rt_throw($dupCheck);
    }
    if ($this.$commentMarker !== null && $this.$delimiter == $this.$commentMarker.$charValue()) {
        $dupCheck = new jl_IllegalArgumentException;
        $hdr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($hdr);
        jl_AbstractStringBuilder_append($hdr, $rt_s(108));
        $hdr = jl_StringBuilder_append3($hdr, $this.$commentMarker);
        jl_AbstractStringBuilder_append($hdr, $rt_s(106));
        jl_Throwable__init_($dupCheck, jl_AbstractStringBuilder_toString($hdr));
        $rt_throw($dupCheck);
    }
    if ($this.$quoteCharacter !== null && jl_Character_equals($this.$quoteCharacter, $this.$commentMarker)) {
        $dupCheck = new jl_IllegalArgumentException;
        $hdr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($hdr);
        jl_AbstractStringBuilder_append($hdr, $rt_s(109));
        $hdr = jl_StringBuilder_append3($hdr, $this.$commentMarker);
        jl_AbstractStringBuilder_append($hdr, $rt_s(106));
        jl_Throwable__init_($dupCheck, jl_AbstractStringBuilder_toString($hdr));
        $rt_throw($dupCheck);
    }
    if ($this.$escapeCharacter !== null && jl_Character_equals($this.$escapeCharacter, $this.$commentMarker)) {
        $dupCheck = new jl_IllegalArgumentException;
        $hdr = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($hdr);
        jl_AbstractStringBuilder_append($hdr, $rt_s(110));
        $hdr = jl_StringBuilder_append3($hdr, $this.$commentMarker);
        jl_AbstractStringBuilder_append($hdr, $rt_s(106));
        jl_Throwable__init_($dupCheck, jl_AbstractStringBuilder_toString($hdr));
        $rt_throw($dupCheck);
    }
    if ($this.$escapeCharacter === null && $this.$quoteMode === oacc_QuoteMode_NONE) {
        $dupCheck = new jl_IllegalArgumentException;
        jl_Throwable__init_($dupCheck, $rt_s(111));
        $rt_throw($dupCheck);
    }
    a: {
        if ($this.$header !== null && !$this.$allowDuplicateHeaderNames) {
            $dupCheck = ju_HashSet__init_();
            var$3 = $this.$header.data;
            var$4 = var$3.length;
            var$5 = 0;
            while (true) {
                if (var$5 >= var$4)
                    break a;
                $hdr = var$3[var$5];
                if (!ju_HashSet_add($dupCheck, $hdr)) {
                    var$6 = new jl_IllegalArgumentException;
                    $dupCheck = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($dupCheck);
                    jl_AbstractStringBuilder_append($dupCheck, $rt_s(112));
                    jl_AbstractStringBuilder_append($dupCheck, $hdr);
                    jl_AbstractStringBuilder_append($dupCheck, $rt_s(113));
                    var$3 = $this.$header;
                    $hdr = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($hdr);
                    jl_AbstractStringBuilder_append($hdr, $rt_s(50));
                    var$4 = 0;
                    while (true) {
                        var$7 = var$3.data;
                        if (var$4 >= var$7.length)
                            break;
                        if (var$4 > 0)
                            jl_AbstractStringBuilder_append($hdr, $rt_s(91));
                        jl_StringBuilder_append3($hdr, var$7[var$4]);
                        var$4 = var$4 + 1 | 0;
                    }
                    jl_AbstractStringBuilder_append($hdr, $rt_s(56));
                    jl_AbstractStringBuilder_append($dupCheck, jl_AbstractStringBuilder_toString($hdr));
                    jl_Throwable__init_(var$6, jl_AbstractStringBuilder_toString($dupCheck));
                    $rt_throw(var$6);
                }
                var$5 = var$5 + 1 | 0;
            }
        }
    }
}
function oacc_CSVFormat_withAllowMissingColumnNames($this) {
    return oacc_CSVFormat_withAllowMissingColumnNames0($this, 1);
}
function oacc_CSVFormat_withAllowMissingColumnNames0($this, $allowMissingColumnNames) {
    return oacc_CSVFormat__init_($this.$delimiter, $this.$quoteCharacter, $this.$quoteMode, $this.$commentMarker, $this.$escapeCharacter, $this.$ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $this.$recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withDelimiter($this, $delimiter) {
    var var$2;
    if (oacc_CSVFormat_isLineBreak($delimiter)) {
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_(var$2, $rt_s(104));
        $rt_throw(var$2);
    }
    return oacc_CSVFormat__init_($delimiter, $this.$quoteCharacter, $this.$quoteMode, $this.$commentMarker, $this.$escapeCharacter, $this.$ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $this.$recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withEscape($this, $escape) {
    return oacc_CSVFormat_withEscape0($this, jl_Character_valueOf($escape));
}
function oacc_CSVFormat_withEscape0($this, $escape) {
    if (oacc_CSVFormat_isLineBreak0($escape)) {
        $escape = new jl_IllegalArgumentException;
        jl_Throwable__init_($escape, $rt_s(114));
        $rt_throw($escape);
    }
    return oacc_CSVFormat__init_($this.$delimiter, $this.$quoteCharacter, $this.$quoteMode, $this.$commentMarker, $escape, $this.$ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $this.$recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withIgnoreEmptyLines($this, $ignoreEmptyLines) {
    return oacc_CSVFormat__init_($this.$delimiter, $this.$quoteCharacter, $this.$quoteMode, $this.$commentMarker, $this.$escapeCharacter, $this.$ignoreSurroundingSpaces, $ignoreEmptyLines, $this.$recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withIgnoreSurroundingSpaces($this) {
    return oacc_CSVFormat_withIgnoreSurroundingSpaces0($this, 1);
}
function oacc_CSVFormat_withIgnoreSurroundingSpaces0($this, $ignoreSurroundingSpaces) {
    return oacc_CSVFormat__init_($this.$delimiter, $this.$quoteCharacter, $this.$quoteMode, $this.$commentMarker, $this.$escapeCharacter, $ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $this.$recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withNullString($this, $nullString) {
    return oacc_CSVFormat__init_($this.$delimiter, $this.$quoteCharacter, $this.$quoteMode, $this.$commentMarker, $this.$escapeCharacter, $this.$ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $this.$recordSeparator, $nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withQuote($this, $quoteChar) {
    if (oacc_CSVFormat_isLineBreak0($quoteChar)) {
        $quoteChar = new jl_IllegalArgumentException;
        jl_Throwable__init_($quoteChar, $rt_s(115));
        $rt_throw($quoteChar);
    }
    return oacc_CSVFormat__init_($this.$delimiter, $quoteChar, $this.$quoteMode, $this.$commentMarker, $this.$escapeCharacter, $this.$ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $this.$recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withQuoteMode($this, $quoteModePolicy) {
    return oacc_CSVFormat__init_($this.$delimiter, $this.$quoteCharacter, $quoteModePolicy, $this.$commentMarker, $this.$escapeCharacter, $this.$ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $this.$recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withRecordSeparator($this, $recordSeparator) {
    return oacc_CSVFormat_withRecordSeparator0($this, jl_String_valueOf0($recordSeparator));
}
function oacc_CSVFormat_withRecordSeparator0($this, $recordSeparator) {
    return oacc_CSVFormat__init_($this.$delimiter, $this.$quoteCharacter, $this.$quoteMode, $this.$commentMarker, $this.$escapeCharacter, $this.$ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withSkipHeaderRecord($this, $skipHeaderRecord) {
    return oacc_CSVFormat__init_($this.$delimiter, $this.$quoteCharacter, $this.$quoteMode, $this.$commentMarker, $this.$escapeCharacter, $this.$ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $this.$recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $this.$trim0, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat_withSystemRecordSeparator($this) {
    return oacc_CSVFormat_withRecordSeparator0($this, jl_System_getProperty($rt_s(79)));
}
function oacc_CSVFormat_withTrim($this) {
    return oacc_CSVFormat_withTrim0($this, 1);
}
function oacc_CSVFormat_withTrim0($this, $trim) {
    return oacc_CSVFormat__init_($this.$delimiter, $this.$quoteCharacter, $this.$quoteMode, $this.$commentMarker, $this.$escapeCharacter, $this.$ignoreSurroundingSpaces, $this.$ignoreEmptyLines, $this.$recordSeparator, $this.$nullString, $this.$headerComments, $this.$header, $this.$skipHeaderRecord, $this.$allowMissingColumnNames, $this.$ignoreHeaderCase, $trim, $this.$trailingDelimiter, $this.$autoFlush0, $this.$allowDuplicateHeaderNames);
}
function oacc_CSVFormat__clinit_() {
    oacc_CSVFormat_DEFAULT = oacc_CSVFormat__init_(44, oacc_Constants_DOUBLE_QUOTE_CHAR, null, null, null, 0, 1, $rt_s(116), null, null, null, 0, 0, 0, 0, 0, 0, 1);
    oacc_CSVFormat_EXCEL = oacc_CSVFormat_withAllowMissingColumnNames(oacc_CSVFormat_withIgnoreEmptyLines(oacc_CSVFormat_DEFAULT, 0));
    oacc_CSVFormat_INFORMIX_UNLOAD = oacc_CSVFormat_withRecordSeparator(oacc_CSVFormat_withQuote(oacc_CSVFormat_withEscape(oacc_CSVFormat_withDelimiter(oacc_CSVFormat_DEFAULT, 124), 92), oacc_Constants_DOUBLE_QUOTE_CHAR), 10);
    oacc_CSVFormat_INFORMIX_UNLOAD_CSV = oacc_CSVFormat_withRecordSeparator(oacc_CSVFormat_withQuote(oacc_CSVFormat_withDelimiter(oacc_CSVFormat_DEFAULT, 44), oacc_Constants_DOUBLE_QUOTE_CHAR), 10);
    oacc_CSVFormat_MONGODB_CSV = oacc_CSVFormat_withSkipHeaderRecord(oacc_CSVFormat_withQuoteMode(oacc_CSVFormat_withQuote(oacc_CSVFormat_withEscape0(oacc_CSVFormat_withDelimiter(oacc_CSVFormat_DEFAULT, 44), oacc_Constants_DOUBLE_QUOTE_CHAR), oacc_Constants_DOUBLE_QUOTE_CHAR), oacc_QuoteMode_MINIMAL), 0);
    oacc_CSVFormat_MONGODB_TSV = oacc_CSVFormat_withSkipHeaderRecord(oacc_CSVFormat_withQuoteMode(oacc_CSVFormat_withQuote(oacc_CSVFormat_withEscape0(oacc_CSVFormat_withDelimiter(oacc_CSVFormat_DEFAULT, 9), oacc_Constants_DOUBLE_QUOTE_CHAR), oacc_Constants_DOUBLE_QUOTE_CHAR), oacc_QuoteMode_MINIMAL), 0);
    oacc_CSVFormat_MYSQL = oacc_CSVFormat_withQuoteMode(oacc_CSVFormat_withNullString(oacc_CSVFormat_withRecordSeparator(oacc_CSVFormat_withQuote(oacc_CSVFormat_withIgnoreEmptyLines(oacc_CSVFormat_withEscape(oacc_CSVFormat_withDelimiter(oacc_CSVFormat_DEFAULT, 9), 92), 0), null), 10), $rt_s(117)), oacc_QuoteMode_ALL_NON_NULL);
    oacc_CSVFormat_ORACLE = oacc_CSVFormat_withQuoteMode(oacc_CSVFormat_withSystemRecordSeparator(oacc_CSVFormat_withTrim(oacc_CSVFormat_withNullString(oacc_CSVFormat_withQuote(oacc_CSVFormat_withIgnoreEmptyLines(oacc_CSVFormat_withEscape(oacc_CSVFormat_withDelimiter(oacc_CSVFormat_DEFAULT, 44), 92), 0), oacc_Constants_DOUBLE_QUOTE_CHAR), $rt_s(117)))), oacc_QuoteMode_MINIMAL);
    oacc_CSVFormat_POSTGRESQL_CSV = oacc_CSVFormat_withQuoteMode(oacc_CSVFormat_withNullString(oacc_CSVFormat_withRecordSeparator(oacc_CSVFormat_withQuote(oacc_CSVFormat_withIgnoreEmptyLines(oacc_CSVFormat_withEscape0(oacc_CSVFormat_withDelimiter(oacc_CSVFormat_DEFAULT, 44), oacc_Constants_DOUBLE_QUOTE_CHAR), 0), oacc_Constants_DOUBLE_QUOTE_CHAR), 10), $rt_s(44)), oacc_QuoteMode_ALL_NON_NULL);
    oacc_CSVFormat_POSTGRESQL_TEXT = oacc_CSVFormat_withQuoteMode(oacc_CSVFormat_withNullString(oacc_CSVFormat_withRecordSeparator(oacc_CSVFormat_withQuote(oacc_CSVFormat_withIgnoreEmptyLines(oacc_CSVFormat_withEscape(oacc_CSVFormat_withDelimiter(oacc_CSVFormat_DEFAULT, 9), 92), 0), oacc_Constants_DOUBLE_QUOTE_CHAR), 10), $rt_s(117)), oacc_QuoteMode_ALL_NON_NULL);
    oacc_CSVFormat_RFC4180 = oacc_CSVFormat_withIgnoreEmptyLines(oacc_CSVFormat_DEFAULT, 0);
    oacc_CSVFormat_TDF = oacc_CSVFormat_withIgnoreSurroundingSpaces(oacc_CSVFormat_withDelimiter(oacc_CSVFormat_DEFAULT, 9));
}
function oti_AsyncCallback() {
}
function otpp_AsyncCallbackWrapper() {
    jl_Object.call(this);
    this.$realAsyncCallback = null;
}
function otpp_AsyncCallbackWrapper_create($realAsyncCallback) {
    var var$2;
    var$2 = new otpp_AsyncCallbackWrapper;
    var$2.$realAsyncCallback = $realAsyncCallback;
    return var$2;
}
function otpp_AsyncCallbackWrapper_complete($this, $result) {
    $this.$realAsyncCallback.$complete($result);
}
function otpp_AsyncCallbackWrapper_error($this, $e) {
    $this.$realAsyncCallback.$error($e);
}
function p_PDDocument$PDPageConsumer() {
}
function p_PDDocument$getPage$lambda$_5_0() {
    jl_Object.call(this);
    this.$_01 = null;
}
function p_PDDocument$getPage$lambda$_5_0_complete(var$0, var$1) {
    otpp_AsyncCallbackWrapper_complete(var$0.$_01, var$1);
}
function p_PDDocument$getPage$lambda$_5_0_complete$exported$0(var$0, var$1) {
    p_PDDocument$getPage$lambda$_5_0_complete(var$0, var$1);
}
function p_TextPosition() {
}
function oljis_AbstractSTRtree() {
    var a = this; jl_Object.call(a);
    a.$root = null;
    a.$built = 0;
    a.$itemBoundables = null;
    a.$nodeCapacity = 0;
}
function oljis_AbstractSTRtree_build($this) {
    jl_Object_monitorEnterSync($this);
    try {
        if ($this.$built)
            return;
        $this.$root = ju_AbstractCollection_isEmpty($this.$itemBoundables) ? oljis_STRtree_createNode($this, 0) : oljis_AbstractSTRtree_createHigherLevels($this, $this.$itemBoundables, (-1));
        $this.$itemBoundables = null;
        $this.$built = 1;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function oljis_AbstractSTRtree_lastNode($this, $nodes) {
    return ju_ArrayList_get($nodes, $nodes.$size0 - 1 | 0);
}
function oljis_AbstractSTRtree_compareDoubles($a, $b) {
    var var$3;
    var$3 = $rt_compare($a, $b);
    return var$3 > 0 ? 1 : var$3 >= 0 ? 0 : (-1);
}
function oljis_AbstractSTRtree_createHigherLevels($this, $boundablesOfALevel, $level) {
    var $parentBoundables;
    olju_Assert_isTrue0(ju_AbstractCollection_isEmpty($boundablesOfALevel) ? 0 : 1);
    $level = $level + 1 | 0;
    $parentBoundables = oljis_STRtree_createParentBoundables($this, $boundablesOfALevel, $level);
    if ($parentBoundables.$size0 != 1)
        return oljis_AbstractSTRtree_createHigherLevels($this, $parentBoundables, $level);
    return ju_ArrayList_get($parentBoundables, 0);
}
function oljis_AbstractSTRtree_getNodeCapacity($this) {
    return $this.$nodeCapacity;
}
function oljis_AbstractSTRtree_isEmpty($this) {
    if ($this.$built)
        return oljis_AbstractNode_isEmpty($this.$root);
    return ju_AbstractCollection_isEmpty($this.$itemBoundables);
}
function oljis_AbstractSTRtree_queryInternal($this, $searchBounds, $node, $matches) {
    var $childBoundables, $i, $childBoundable;
    $childBoundables = $node.$childBoundables;
    $i = 0;
    while ($i < $childBoundables.$size0) {
        $childBoundable = ju_ArrayList_get($childBoundables, $i);
        if (oljis_STRtree$3_intersects(oljis_STRtree_intersectsOp, $childBoundable.$getBounds0(), $searchBounds)) {
            if ($childBoundable instanceof oljis_AbstractNode)
                oljis_AbstractSTRtree_queryInternal($this, $searchBounds, $childBoundable, $matches);
            else {
                if (!($childBoundable instanceof oljis_ItemBoundable)) {
                    $searchBounds = new olju_AssertionFailedException;
                    $node = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_($node);
                    jl_AbstractStringBuilder_append($node, $rt_s(118));
                    jl_AbstractStringBuilder_append($node, $rt_s(44));
                    jl_Throwable__init_($searchBounds, jl_AbstractStringBuilder_toString($node));
                    $rt_throw($searchBounds);
                }
                ju_ArrayList_add($matches, $childBoundable.$item);
            }
        }
        $i = $i + 1 | 0;
    }
}
function olji_SpatialIndex() {
}
function oljis_STRtree() {
    oljis_AbstractSTRtree.call(this);
}
var oljis_STRtree_xComparator = null;
var oljis_STRtree_yComparator = null;
var oljis_STRtree_intersectsOp = null;
function oljis_STRtree_avg($a, $b) {
    return ($a + $b) / 2.0;
}
function oljis_STRtree_createParentBoundables($this, $childBoundables, $newLevel) {
    var $minLeafCount, $sortedChildBoundables, $verticalSlices, var$6, var$7;
    olju_Assert_isTrue0(ju_AbstractCollection_isEmpty($childBoundables) ? 0 : 1);
    $minLeafCount = jl_Math_ceil($childBoundables.$size0 / $this.$nodeCapacity) | 0;
    $sortedChildBoundables = ju_ArrayList__init_3($childBoundables);
    ju_Collections_sort($sortedChildBoundables, oljis_STRtree_xComparator);
    $verticalSlices = oljis_STRtree_verticalSlices($this, $sortedChildBoundables, jl_Math_ceil(jl_Math_sqrt($minLeafCount)) | 0).data;
    var$6 = $verticalSlices.length;
    olju_Assert_isTrue0(var$6 <= 0 ? 0 : 1);
    $sortedChildBoundables = ju_ArrayList__init_();
    var$7 = 0;
    while (var$7 < var$6) {
        ju_AbstractCollection_addAll($sortedChildBoundables, oljis_STRtree_createParentBoundablesFromVerticalSlice($this, $verticalSlices[var$7], $newLevel));
        var$7 = var$7 + 1 | 0;
    }
    return $sortedChildBoundables;
}
function oljis_STRtree_createParentBoundablesFromVerticalSlice($this, $childBoundables, $newLevel) {
    var var$3, var$4, var$5;
    olju_Assert_isTrue0(ju_AbstractCollection_isEmpty($childBoundables) ? 0 : 1);
    var$3 = ju_ArrayList__init_();
    ju_ArrayList_add(var$3, oljis_STRtree_createNode($this, $newLevel));
    var$4 = ju_ArrayList__init_3($childBoundables);
    ju_Collections_sort(var$4, oljis_STRtree_yComparator);
    var$5 = ju_AbstractList_iterator(var$4);
    while (ju_AbstractList$1_hasNext(var$5)) {
        $childBoundables = ju_AbstractList$1_next(var$5);
        if (oljis_AbstractSTRtree_lastNode($this, var$3).$childBoundables.$size0 == $this.$nodeCapacity)
            ju_ArrayList_add(var$3, oljis_STRtree_createNode($this, $newLevel));
        oljis_AbstractNode_addChildBoundable(oljis_AbstractSTRtree_lastNode($this, var$3), $childBoundables);
    }
    return var$3;
}
function oljis_STRtree_verticalSlices($this, $childBoundables, $sliceCount) {
    var $sliceCapacity, $slices, var$5, $i, $j, $boundablesAddedToSlice, $childBoundable;
    $sliceCapacity = jl_Math_ceil($childBoundables.$size0 / $sliceCount) | 0;
    $slices = $rt_createArray(ju_List, $sliceCount);
    var$5 = $slices.data;
    $i = ju_AbstractList_iterator($childBoundables);
    $j = 0;
    while ($j < $sliceCount) {
        var$5[$j] = ju_ArrayList__init_();
        $boundablesAddedToSlice = 0;
        while (ju_AbstractList$1_hasNext($i) && $boundablesAddedToSlice < $sliceCapacity) {
            $childBoundable = ju_AbstractList$1_next($i);
            ju_ArrayList_add(var$5[$j], $childBoundable);
            $boundablesAddedToSlice = $boundablesAddedToSlice + 1 | 0;
        }
        $j = $j + 1 | 0;
    }
    return $slices;
}
function oljis_STRtree_createNode($this, $level) {
    var var$2;
    var$2 = new oljis_STRtree$STRtreeNode;
    var$2.$childBoundables = ju_ArrayList__init_();
    var$2.$bounds = null;
    var$2.$level = $level;
    return var$2;
}
function oljis_STRtree_getIntersectsOp($this) {
    return oljis_STRtree_intersectsOp;
}
function oljis_STRtree_insert($this, $itemEnv, $item) {
    var var$3, var$4;
    if (oljg_Envelope_isNull($itemEnv))
        return;
    olju_Assert_isTrue($this.$built ? 0 : 1, $rt_s(119));
    var$3 = $this.$itemBoundables;
    var$4 = new oljis_ItemBoundable;
    var$4.$bounds0 = $itemEnv;
    var$4.$item = $item;
    ju_ArrayList_add(var$3, var$4);
}
function oljis_STRtree_query($this, $searchEnv) {
    var var$2;
    oljis_AbstractSTRtree_build($this);
    var$2 = ju_ArrayList__init_();
    if (!oljis_AbstractSTRtree_isEmpty($this) && oljis_STRtree$3_intersects(oljis_STRtree_intersectsOp, oljis_AbstractNode_getBounds($this.$root), $searchEnv))
        oljis_AbstractSTRtree_queryInternal($this, $searchEnv, $this.$root, var$2);
    return var$2;
}
function oljis_STRtree_getComparator($this) {
    return oljis_STRtree_yComparator;
}
function oljis_STRtree_access$000($x0) {
    return oljis_STRtree_avg($x0.$minx, $x0.$maxx);
}
function oljis_STRtree_access$100($x0) {
    return oljis_STRtree_avg($x0.$miny, $x0.$maxy);
}
function oljis_STRtree__clinit_() {
    oljis_STRtree_xComparator = new oljis_STRtree$1;
    oljis_STRtree_yComparator = new oljis_STRtree$2;
    oljis_STRtree_intersectsOp = new oljis_STRtree$3;
}
function jnc_Charset() {
    var a = this; jl_Object.call(a);
    a.$canonicalName = null;
    a.$aliases = null;
}
function jnc_Charset_checkCanonicalName($name) {
    var $i, $c;
    if (jl_String_isEmpty($name))
        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
    if (!jnc_Charset_isValidCharsetStart(jl_String_charAt($name, 0)))
        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
    $i = 1;
    while ($i < jl_String_length($name)) {
        a: {
            $c = jl_String_charAt($name, $i);
            switch ($c) {
                case 43:
                case 45:
                case 46:
                case 58:
                case 95:
                    break;
                default:
                    if (jnc_Charset_isValidCharsetStart($c))
                        break a;
                    else
                        $rt_throw(jnc_IllegalCharsetNameException__init_($name));
            }
        }
        $i = $i + 1 | 0;
    }
}
function jnc_Charset_isValidCharsetStart($c) {
    return !($c >= 48 && $c <= 57) && !($c >= 97 && $c <= 122) && $c < 65 && $c > 90 ? 0 : 1;
}
function jnci_UTF8Charset() {
    jnc_Charset.call(this);
}
function jnci_UTF8Charset_newEncoder($this) {
    var var$1, var$2, var$3, var$4, var$5;
    var$1 = new jnci_UTF8Encoder;
    var$2 = $rt_createByteArray(1);
    var$3 = var$2.data;
    var$3[0] = 63;
    var$1.$malformedAction = jnc_CodingErrorAction_REPORT;
    var$1.$unmappableAction = jnc_CodingErrorAction_REPORT;
    var$4 = var$3.length;
    if (var$4 && var$4 >= var$1.$maxBytesPerChar) {
        var$1.$charset0 = $this;
        var$1.$replacement = var$2.$clone();
        var$1.$averageBytesPerChar = 2.0;
        var$1.$maxBytesPerChar = 4.0;
        return var$1;
    }
    var$5 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$5, $rt_s(120));
    $rt_throw(var$5);
}
function tt_Rectangle$1() {
    jl_Object.call(this);
}
function tt_Rectangle$1_compare0($this, $o1, $o2) {
    if ($o1.$equals($o2))
        return 0;
    if (tt_Rectangle_verticalOverlap($o1, $o2) <= 0.4000000059604645)
        return $rt_compare(tt_Rectangle_getBottom($o1), tt_Rectangle_getBottom($o2));
    return $o1.$isLtrDominant() == (-1) && $o2.$isLtrDominant() == (-1) ?  -$rt_compare(cjag_Rectangle2D$Float_getX($o1), cjag_Rectangle2D$Float_getX($o2)) : $rt_compare(cjag_Rectangle2D$Float_getX($o1), cjag_Rectangle2D$Float_getX($o2));
}
function tt_Rectangle$1_compare($this, var$1, var$2) {
    return tt_Rectangle$1_compare0($this, var$1, var$2);
}
function tte_SpreadsheetExtractionAlgorithm$1() {
    jl_Object.call(this);
}
function tte_SpreadsheetExtractionAlgorithm$1_compare($this, $arg0, $arg1) {
    var $rv, $arg0X, $arg0Y, $arg1X, var$7;
    $rv = 0;
    $arg0X = tt_Utils_round(cjag_Point2D$Float_getX($arg0), 2);
    $arg0Y = tt_Utils_round(cjag_Point2D$Float_getY($arg0), 2);
    $arg1X = tt_Utils_round(cjag_Point2D$Float_getX($arg1), 2);
    var$7 = $rt_compare($arg0Y, tt_Utils_round(cjag_Point2D$Float_getY($arg1), 2));
    if (var$7 > 0)
        $rv = 1;
    else if (var$7 < 0)
        $rv = (-1);
    else {
        var$7 = $rt_compare($arg0X, $arg1X);
        if (var$7 > 0)
            $rv = 1;
        else if (var$7 < 0)
            $rv = (-1);
    }
    return $rv;
}
function tte_SpreadsheetExtractionAlgorithm$1_compare0($this, var$1, var$2) {
    return tte_SpreadsheetExtractionAlgorithm$1_compare($this, var$1, var$2);
}
function tte_SpreadsheetExtractionAlgorithm$2() {
    jl_Object.call(this);
}
function tte_SpreadsheetExtractionAlgorithm$2_compare($this, $arg0, $arg1) {
    var $rv, $arg0X, $arg0Y, $arg1X, $arg1Y, var$8;
    $rv = 0;
    $arg0X = tt_Utils_round(cjag_Point2D$Float_getX($arg0), 2);
    $arg0Y = tt_Utils_round(cjag_Point2D$Float_getY($arg0), 2);
    $arg1X = tt_Utils_round(cjag_Point2D$Float_getX($arg1), 2);
    $arg1Y = tt_Utils_round(cjag_Point2D$Float_getY($arg1), 2);
    var$8 = $rt_compare($arg0X, $arg1X);
    if (var$8 > 0)
        $rv = 1;
    else if (var$8 < 0)
        $rv = (-1);
    else {
        var$8 = $rt_compare($arg0Y, $arg1Y);
        if (var$8 > 0)
            $rv = 1;
        else if (var$8 < 0)
            $rv = (-1);
    }
    return $rv;
}
function tte_SpreadsheetExtractionAlgorithm$2_compare0($this, var$1, var$2) {
    return tte_SpreadsheetExtractionAlgorithm$2_compare($this, var$1, var$2);
}
function jlr_Array() {
    jl_Object.call(this);
}
function jlr_Array_getLength(var$1) {
    if (var$1 === null || var$1.constructor.$meta.item === undefined) {
        $rt_throw(jl_IllegalArgumentException__init_0());
    }
    return var$1.data.length;
}
function jlr_Array_newInstance($componentType, $length) {
    if ($componentType === null) {
        $componentType = new jl_NullPointerException;
        jl_Throwable__init_0($componentType);
        $rt_throw($componentType);
    }
    if ($componentType === $rt_cls($rt_voidcls())) {
        $componentType = new jl_IllegalArgumentException;
        jl_Throwable__init_0($componentType);
        $rt_throw($componentType);
    }
    if ($length >= 0)
        return jlr_Array_newInstanceImpl($componentType.$platformClass, $length);
    $componentType = new jl_NegativeArraySizeException;
    jl_Throwable__init_0($componentType);
    $rt_throw($componentType);
}
function jlr_Array_newInstanceImpl(var$1, var$2) {
    if (var$1.$meta.primitive) {
        if (var$1 == $rt_bytecls()) {
            return $rt_createByteArray(var$2);
        }
        if (var$1 == $rt_shortcls()) {
            return $rt_createShortArray(var$2);
        }
        if (var$1 == $rt_charcls()) {
            return $rt_createCharArray(var$2);
        }
        if (var$1 == $rt_intcls()) {
            return $rt_createIntArray(var$2);
        }
        if (var$1 == $rt_longcls()) {
            return $rt_createLongArray(var$2);
        }
        if (var$1 == $rt_floatcls()) {
            return $rt_createFloatArray(var$2);
        }
        if (var$1 == $rt_doublecls()) {
            return $rt_createDoubleArray(var$2);
        }
        if (var$1 == $rt_booleancls()) {
            return $rt_createBooleanArray(var$2);
        }
    } else {
        return $rt_createArray(var$1, var$2)
    }
}
function oacc_Constants() {
    jl_Object.call(this);
}
var oacc_Constants_DOUBLE_QUOTE_CHAR = null;
function oacc_Constants__clinit_() {
    oacc_Constants_DOUBLE_QUOTE_CHAR = jl_Character_valueOf(34);
}
function jl_Enum() {
    var a = this; jl_Object.call(a);
    a.$name0 = null;
    a.$ordinal = 0;
}
function jl_Enum__init_(var_0, var_1) {
    var var_2 = new jl_Enum();
    jl_Enum__init_0(var_2, var_0, var_1);
    return var_2;
}
function jl_Enum__init_0($this, $name, $ordinal) {
    $this.$name0 = $name;
    $this.$ordinal = $ordinal;
}
function jl_Enum_ordinal($this) {
    return $this.$ordinal;
}
function jl_Enum_toString($this) {
    return $this.$name0;
}
function oacc_QuoteMode() {
    jl_Enum.call(this);
}
var oacc_QuoteMode_ALL = null;
var oacc_QuoteMode_ALL_NON_NULL = null;
var oacc_QuoteMode_MINIMAL = null;
var oacc_QuoteMode_NON_NUMERIC = null;
var oacc_QuoteMode_NONE = null;
var oacc_QuoteMode_$VALUES = null;
function oacc_QuoteMode__clinit_() {
    var var$1, var$2, var$3;
    var$1 = new oacc_QuoteMode;
    jl_Enum__init_0(var$1, $rt_s(121), 0);
    oacc_QuoteMode_ALL = var$1;
    var$1 = new oacc_QuoteMode;
    jl_Enum__init_0(var$1, $rt_s(122), 1);
    oacc_QuoteMode_ALL_NON_NULL = var$1;
    var$1 = new oacc_QuoteMode;
    jl_Enum__init_0(var$1, $rt_s(123), 2);
    oacc_QuoteMode_MINIMAL = var$1;
    var$1 = new oacc_QuoteMode;
    jl_Enum__init_0(var$1, $rt_s(124), 3);
    oacc_QuoteMode_NON_NUMERIC = var$1;
    var$1 = new oacc_QuoteMode;
    jl_Enum__init_0(var$1, $rt_s(125), 4);
    oacc_QuoteMode_NONE = var$1;
    var$2 = $rt_createArray(oacc_QuoteMode, 5);
    var$3 = var$2.data;
    var$3[0] = oacc_QuoteMode_ALL;
    var$3[1] = oacc_QuoteMode_ALL_NON_NULL;
    var$3[2] = oacc_QuoteMode_MINIMAL;
    var$3[3] = oacc_QuoteMode_NON_NUMERIC;
    var$3[4] = oacc_QuoteMode_NONE;
    oacc_QuoteMode_$VALUES = var$2;
}
function jl_NullPointerException() {
    jl_RuntimeException.call(this);
}
function jl_NullPointerException__init_() {
    var var_0 = new jl_NullPointerException();
    jl_NullPointerException__init_0(var_0);
    return var_0;
}
function jl_NullPointerException__init_0($this) {
    jl_Throwable__init_0($this);
}
function jl_NegativeArraySizeException() {
    jl_RuntimeException.call(this);
}
function oljis_STRtree$1() {
    jl_Object.call(this);
}
function oljis_STRtree$1_compare($this, $o1, $o2) {
    return oljis_AbstractSTRtree_compareDoubles(oljis_STRtree_access$000($o1.$getBounds0()), oljis_STRtree_access$000($o2.$getBounds0()));
}
function oljis_STRtree$2() {
    jl_Object.call(this);
}
function oljis_STRtree$2_compare($this, $o1, $o2) {
    return oljis_AbstractSTRtree_compareDoubles(oljis_STRtree_access$100($o1.$getBounds0()), oljis_STRtree_access$100($o2.$getBounds0()));
}
function oljis_AbstractSTRtree$IntersectsOp() {
}
function oljis_STRtree$3() {
    jl_Object.call(this);
}
function oljis_STRtree$3_intersects($this, $aBounds, $bBounds) {
    return oljg_Envelope_intersects($aBounds, $bBounds);
}
function olju_Assert() {
    jl_Object.call(this);
}
function olju_Assert_isTrue0($assertion) {
    olju_Assert_isTrue($assertion, null);
}
function olju_Assert_isTrue($assertion, $message) {
    var var$3;
    if ($assertion)
        return;
    if ($message !== null) {
        var$3 = new olju_AssertionFailedException;
        jl_Throwable__init_(var$3, $message);
        $rt_throw(var$3);
    }
    $message = new olju_AssertionFailedException;
    jl_Throwable__init_0($message);
    $rt_throw($message);
}
function otpp_ResourceAccessor() {
    jl_Object.call(this);
}
function otciu_UnicodeHelper() {
    jl_Object.call(this);
}
function otciu_UnicodeHelper_decodeByte($c) {
    if ($c > 92)
        return (($c - 32 | 0) - 2 | 0) << 24 >> 24;
    if ($c <= 34)
        return ($c - 32 | 0) << 24 >> 24;
    return (($c - 32 | 0) - 1 | 0) << 24 >> 24;
}
function otciu_UnicodeHelper_extractRle($encoded) {
    var $ranges, var$3, $buffer, var$5, $index, $rangeIndex, $codePoint, $i, $b, $count, $pos, $j, $digit;
    $ranges = $rt_createArray(otciu_UnicodeHelper$Range, 16384);
    var$3 = $ranges.data;
    $buffer = $rt_createByteArray(16384);
    var$5 = $buffer.data;
    $index = 0;
    $rangeIndex = 0;
    $codePoint = 0;
    $i = 0;
    while ($i < jl_String_length($encoded)) {
        $b = otciu_UnicodeHelper_decodeByte(jl_String_charAt($encoded, $i));
        if ($b == 64) {
            $i = $i + 1 | 0;
            $b = otciu_UnicodeHelper_decodeByte(jl_String_charAt($encoded, $i));
            $count = 0;
            $pos = 1;
            $j = 0;
            while ($j < 3) {
                $i = $i + 1 | 0;
                $count = $count | $rt_imul($pos, otciu_UnicodeHelper_decodeByte(jl_String_charAt($encoded, $i)));
                $pos = $pos * 64 | 0;
                $j = $j + 1 | 0;
            }
        } else if ($b < 32)
            $count = 1;
        else {
            $b = ($b - 32 | 0) << 24 >> 24;
            $i = $i + 1 | 0;
            $count = otciu_UnicodeHelper_decodeByte(jl_String_charAt($encoded, $i));
        }
        if (!$b && $count >= 128) {
            if ($index > 0) {
                $pos = $rangeIndex + 1 | 0;
                var$3[$rangeIndex] = otciu_UnicodeHelper$Range__init_($codePoint, $codePoint + $index | 0, ju_Arrays_copyOf1($buffer, $index));
                $rangeIndex = $pos;
            }
            $codePoint = $codePoint + ($index + $count | 0) | 0;
            $index = 0;
        } else {
            $digit = $index + $count | 0;
            if ($digit < var$5.length)
                $j = $rangeIndex;
            else {
                $j = $rangeIndex + 1 | 0;
                var$3[$rangeIndex] = otciu_UnicodeHelper$Range__init_($codePoint, $codePoint + $index | 0, ju_Arrays_copyOf1($buffer, $index));
                $codePoint = $codePoint + $digit | 0;
                $index = 0;
            }
            while (true) {
                $pos = $count + (-1) | 0;
                if ($count <= 0)
                    break;
                $digit = $index + 1 | 0;
                var$5[$index] = $b;
                $index = $digit;
                $count = $pos;
            }
            $rangeIndex = $j;
        }
        $i = $i + 1 | 0;
    }
    return ju_Arrays_copyOf0($ranges, $rangeIndex);
}
function jnc_IllegalCharsetNameException() {
    jl_IllegalArgumentException.call(this);
    this.$charsetName = null;
}
function jnc_IllegalCharsetNameException__init_(var_0) {
    var var_1 = new jnc_IllegalCharsetNameException();
    jnc_IllegalCharsetNameException__init_0(var_1, var_0);
    return var_1;
}
function jnc_IllegalCharsetNameException__init_0($this, $charsetName) {
    jl_Throwable__init_0($this);
    $this.$charsetName = $charsetName;
}
function jl_CloneNotSupportedException() {
    jl_Exception.call(this);
}
function ju_Set() {
}
function ju_AbstractSet() {
    ju_AbstractCollection.call(this);
}
function ju_HashSet() {
    ju_AbstractSet.call(this);
    this.$backingMap = null;
}
function ju_HashSet__init_() {
    var var_0 = new ju_HashSet();
    ju_HashSet__init_1(var_0);
    return var_0;
}
function ju_HashSet__init_0(var_0) {
    var var_1 = new ju_HashSet();
    ju_HashSet__init_2(var_1, var_0);
    return var_1;
}
function ju_HashSet__init_1($this) {
    ju_HashSet__init_2($this, ju_HashMap__init_());
}
function ju_HashSet__init_2($this, $backingMap) {
    $this.$backingMap = $backingMap;
}
function ju_HashSet_add($this, $object) {
    return ju_HashMap_putImpl($this.$backingMap, $object, $this) !== null ? 0 : 1;
}
function ju_HashSet_contains($this, $object) {
    return ju_HashMap_containsKey($this.$backingMap, $object);
}
function ju_HashSet_iterator($this) {
    return ju_HashMap_keySet($this.$backingMap).$iterator();
}
function ju_HashSet_remove($this, $object) {
    return ju_HashMap_remove($this.$backingMap, $object) === null ? 0 : 1;
}
function ju_HashSet_size($this) {
    return $this.$backingMap.$elementCount;
}
function ju_Arrays() {
    jl_Object.call(this);
}
function ju_Arrays_copyOf($array, $length) {
    var $result, var$4, $sz, $i;
    $array = $array.data;
    $result = $rt_createCharArray($length);
    var$4 = $result.data;
    $sz = jl_Math_min($length, $array.length);
    $i = 0;
    while ($i < $sz) {
        var$4[$i] = $array[$i];
        $i = $i + 1 | 0;
    }
    return $result;
}
function ju_Arrays_copyOf1($array, $length) {
    var $result, var$4, $sz, $i;
    $array = $array.data;
    $result = $rt_createByteArray($length);
    var$4 = $result.data;
    $sz = jl_Math_min($length, $array.length);
    $i = 0;
    while ($i < $sz) {
        var$4[$i] = $array[$i];
        $i = $i + 1 | 0;
    }
    return $result;
}
function ju_Arrays_copyOf0($original, $newLength) {
    var var$3, $result, $sz, $i;
    var$3 = $original.data;
    $result = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($original)), $newLength);
    $sz = jl_Math_min($newLength, var$3.length);
    $i = 0;
    while ($i < $sz) {
        $result.data[$i] = var$3[$i];
        $i = $i + 1 | 0;
    }
    return $result;
}
function ju_Arrays_fill($a, $val) {
    var var$3, var$4, var$5, var$6;
    $a = $a.data;
    var$3 = 0;
    var$4 = $a.length;
    if (var$3 > var$4) {
        var$5 = new jl_IllegalArgumentException;
        jl_Throwable__init_0(var$5);
        $rt_throw(var$5);
    }
    while (var$3 < var$4) {
        var$6 = var$3 + 1 | 0;
        $a[var$3] = $val;
        var$3 = var$6;
    }
}
function ju_Arrays_sort($a, $c) {
    var var$3, $second, $chunkSize, var$6, $i, var$8, var$9, var$10, $i_0, var$12, $i_1, var$14, var$15, var$16, var$17;
    var$3 = $a.data.length;
    if (!var$3)
        return;
    $second = $rt_createArray(jl_Object, var$3);
    $chunkSize = 1;
    var$6 = $a;
    while ($chunkSize < var$3) {
        $i = 0;
        while (true) {
            var$8 = var$6.data;
            var$9 = var$8.length;
            if ($i >= var$9)
                break;
            var$10 = jl_Math_min(var$9, $i + $chunkSize | 0);
            $i_0 = $i + (2 * $chunkSize | 0) | 0;
            var$12 = jl_Math_min(var$9, $i_0);
            $i_1 = $i;
            var$9 = var$10;
            a: {
                b: {
                    while ($i != var$10) {
                        if (var$9 == var$12)
                            break b;
                        var$14 = var$8[$i];
                        var$15 = var$8[var$9];
                        if ($c.$compare0(var$14, var$15) > 0) {
                            var$16 = $second.data;
                            var$17 = $i_1 + 1 | 0;
                            var$16[$i_1] = var$15;
                            var$9 = var$9 + 1 | 0;
                        } else {
                            var$16 = $second.data;
                            var$17 = $i_1 + 1 | 0;
                            var$16[$i_1] = var$14;
                            $i = $i + 1 | 0;
                        }
                        $i_1 = var$17;
                    }
                    while (true) {
                        if (var$9 >= var$12)
                            break a;
                        var$16 = $second.data;
                        $i = $i_1 + 1 | 0;
                        var$17 = var$9 + 1 | 0;
                        var$16[$i_1] = var$8[var$9];
                        $i_1 = $i;
                        var$9 = var$17;
                    }
                }
                while (true) {
                    if ($i >= var$10)
                        break a;
                    var$16 = $second.data;
                    var$9 = $i_1 + 1 | 0;
                    var$17 = $i + 1 | 0;
                    var$16[$i_1] = var$8[$i];
                    $i_1 = var$9;
                    $i = var$17;
                }
            }
            $i = $i_0;
        }
        $chunkSize = $chunkSize * 2 | 0;
        var$8 = var$6;
        var$6 = $second;
        $second = var$8;
    }
    c: {
        if (var$6 !== $a) {
            $i_1 = 0;
            while (true) {
                $a = var$6.data;
                if ($i_1 >= $a.length)
                    break c;
                $second.data[$i_1] = $a[$i_1];
                $i_1 = $i_1 + 1 | 0;
            }
        }
    }
}
function ju_Arrays_binarySearch($a, $key) {
    var var$3, var$4, var$5, var$6, var$7;
    $a = $a.data;
    var$3 = 0;
    var$4 = $a.length;
    if (var$3 > var$4) {
        var$5 = new jl_IllegalArgumentException;
        jl_Throwable__init_0(var$5);
        $rt_throw(var$5);
    }
    var$6 = var$4 - 1 | 0;
    a: {
        while (true) {
            var$4 = (var$3 + var$6 | 0) / 2 | 0;
            var$7 = $a[var$4];
            if (var$7 == $key)
                break;
            if ($key >= var$7) {
                var$3 = var$4 + 1 | 0;
                if (var$3 > var$6) {
                    var$4 =  -var$4 - 2 | 0;
                    break a;
                }
            } else {
                var$6 = var$4 - 1 | 0;
                if (var$6 < var$3) {
                    var$4 =  -var$4 - 1 | 0;
                    break a;
                }
            }
        }
    }
    return var$4;
}
function ju_Arrays_asList($a) {
    var var$2;
    var$2 = new ju_Arrays$ArrayAsList;
    var$2.$array1 = $a;
    return var$2;
}
function olju_AssertionFailedException() {
    jl_RuntimeException.call(this);
}
function otci_CharFlow() {
    var a = this; jl_Object.call(a);
    a.$characters0 = null;
    a.$pointer = 0;
}
function otci_Base46() {
    jl_Object.call(this);
}
function otci_Base46_decode($seq) {
    var $number, var$3, var$4, var$5, var$6, $result;
    $number = 0;
    var$3 = 1;
    while (true) {
        var$4 = $seq.$characters0.data;
        var$5 = $seq.$pointer;
        $seq.$pointer = var$5 + 1 | 0;
        var$5 = var$4[var$5];
        var$6 = var$5 < 34 ? var$5 - 32 | 0 : var$5 >= 92 ? (var$5 - 32 | 0) - 2 | 0 : (var$5 - 32 | 0) - 1 | 0;
        $result = (var$6 % 2 | 0) != 1 ? 0 : 1;
        $number = $number + $rt_imul(var$3, var$6 / 2 | 0) | 0;
        var$3 = var$3 * 46 | 0;
        if (!$result)
            break;
    }
    $result = $number / 2 | 0;
    if ($number % 2 | 0)
        $result =  -$result;
    return $result;
}
function ju_Map() {
}
function ju_AbstractMap() {
    jl_Object.call(this);
    this.$cachedKeySet = null;
}
function ju_AbstractMap_keySet($this) {
    var var$1;
    if ($this.$cachedKeySet === null) {
        var$1 = new ju_AbstractMap$KeySet;
        var$1.$this$06 = $this;
        $this.$cachedKeySet = var$1;
    }
    return $this.$cachedKeySet;
}
function ju_HashMap() {
    var a = this; ju_AbstractMap.call(a);
    a.$elementCount = 0;
    a.$elementData = null;
    a.$modCount1 = 0;
    a.$loadFactor = 0.0;
    a.$threshold = 0;
}
function ju_HashMap__init_() {
    var var_0 = new ju_HashMap();
    ju_HashMap__init_1(var_0);
    return var_0;
}
function ju_HashMap__init_0(var_0) {
    var var_1 = new ju_HashMap();
    ju_HashMap__init_2(var_1, var_0);
    return var_1;
}
function ju_HashMap_newElementArray($this, $s) {
    return $rt_createArray(ju_HashMap$HashEntry, $s);
}
function ju_HashMap__init_1($this) {
    ju_HashMap__init_2($this, 16);
}
function ju_HashMap__init_2($this, $capacity) {
    var var$2;
    if ($capacity < 0) {
        var$2 = new jl_IllegalArgumentException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    $capacity = ju_HashMap_calculateCapacity($capacity);
    $this.$elementCount = 0;
    $this.$elementData = $rt_createArray(ju_HashMap$HashEntry, $capacity);
    $this.$loadFactor = 0.75;
    ju_HashMap_computeThreshold($this);
}
function ju_HashMap_calculateCapacity($x) {
    var var$2;
    if ($x >= 1073741824)
        return 1073741824;
    if (!$x)
        return 16;
    var$2 = $x - 1 | 0;
    $x = var$2 | var$2 >> 1;
    $x = $x | $x >> 2;
    $x = $x | $x >> 4;
    $x = $x | $x >> 8;
    return ($x | $x >> 16) + 1 | 0;
}
function ju_HashMap_computeThreshold($this) {
    $this.$threshold = $this.$elementData.data.length * $this.$loadFactor | 0;
}
function ju_HashMap_containsKey($this, $key) {
    return ju_HashMap_getEntry($this, $key) === null ? 0 : 1;
}
function ju_HashMap_entrySet($this) {
    var var$1;
    var$1 = new ju_HashMap$HashMapEntrySet;
    var$1.$associatedMap = $this;
    return var$1;
}
function ju_HashMap_get($this, $key) {
    var $m;
    $m = ju_HashMap_getEntry($this, $key);
    if ($m === null)
        return null;
    return $m.$value2;
}
function ju_HashMap_getEntry($this, $key) {
    var $m, $hash;
    if ($key === null)
        $m = ju_HashMap_findNullKeyEntry($this);
    else {
        $hash = $key.$hashCode0();
        $m = ju_HashMap_findNonNullKeyEntry($this, $key, $hash & ($this.$elementData.data.length - 1 | 0), $hash);
    }
    return $m;
}
function ju_HashMap_findNonNullKeyEntry($this, $key, $index, $keyHash) {
    var $m;
    $m = $this.$elementData.data[$index];
    while ($m !== null && !($m.$origKeyHash == $keyHash && ju_HashMap_areEqualKeys($key, $m.$key))) {
        $m = $m.$next2;
    }
    return $m;
}
function ju_HashMap_findNullKeyEntry($this) {
    var $m;
    $m = $this.$elementData.data[0];
    while ($m !== null && $m.$key !== null) {
        $m = $m.$next2;
    }
    return $m;
}
function ju_HashMap_isEmpty($this) {
    return $this.$elementCount ? 0 : 1;
}
function ju_HashMap_keySet($this) {
    var var$1;
    if ($this.$cachedKeySet === null) {
        var$1 = new ju_HashMap$1;
        var$1.$this$07 = $this;
        $this.$cachedKeySet = var$1;
    }
    return $this.$cachedKeySet;
}
function ju_HashMap_put($this, $key, $value) {
    return ju_HashMap_putImpl($this, $key, $value);
}
function ju_HashMap_putImpl($this, $key, $value) {
    var $entry, $hash, $index, $result;
    if ($key === null) {
        $entry = ju_HashMap_findNullKeyEntry($this);
        if ($entry === null) {
            $this.$modCount1 = $this.$modCount1 + 1 | 0;
            $entry = ju_HashMap_createHashedEntry($this, null, 0, 0);
            $hash = $this.$elementCount + 1 | 0;
            $this.$elementCount = $hash;
            if ($hash > $this.$threshold)
                ju_HashMap_rehash($this);
        }
    } else {
        $hash = $key.$hashCode0();
        $index = $hash & ($this.$elementData.data.length - 1 | 0);
        $entry = ju_HashMap_findNonNullKeyEntry($this, $key, $index, $hash);
        if ($entry === null) {
            $this.$modCount1 = $this.$modCount1 + 1 | 0;
            $entry = ju_HashMap_createHashedEntry($this, $key, $index, $hash);
            $hash = $this.$elementCount + 1 | 0;
            $this.$elementCount = $hash;
            if ($hash > $this.$threshold)
                ju_HashMap_rehash($this);
        }
    }
    $result = $entry.$value2;
    $entry.$value2 = $value;
    return $result;
}
function ju_HashMap_createHashedEntry($this, $key, $index, $hash) {
    var $entry;
    $entry = new ju_HashMap$HashEntry;
    ju_MapEntry__init_($entry, $key, null);
    $entry.$origKeyHash = $hash;
    $entry.$next2 = $this.$elementData.data[$index];
    $this.$elementData.data[$index] = $entry;
    return $entry;
}
function ju_HashMap_rehash0($this, $capacity) {
    var $length, $newData, var$4, $i, $entry, $index, $next;
    $length = ju_HashMap_calculateCapacity(!$capacity ? 1 : $capacity << 1);
    $newData = $rt_createArray(ju_HashMap$HashEntry, $length);
    var$4 = $newData.data;
    $i = 0;
    $length = $length - 1 | 0;
    while ($i < $this.$elementData.data.length) {
        $entry = $this.$elementData.data[$i];
        $this.$elementData.data[$i] = null;
        while ($entry !== null) {
            $index = $entry.$origKeyHash & $length;
            $next = $entry.$next2;
            $entry.$next2 = var$4[$index];
            var$4[$index] = $entry;
            $entry = $next;
        }
        $i = $i + 1 | 0;
    }
    $this.$elementData = $newData;
    ju_HashMap_computeThreshold($this);
}
function ju_HashMap_rehash($this) {
    ju_HashMap_rehash0($this, $this.$elementData.data.length);
}
function ju_HashMap_remove($this, $key) {
    var $entry;
    $entry = ju_HashMap_removeEntry($this, $key);
    if ($entry === null)
        return null;
    return $entry.$value2;
}
function ju_HashMap_removeEntry($this, $key) {
    var $index, $last, $entry, $entry_0, $hash;
    a: {
        $index = 0;
        $last = null;
        if ($key === null) {
            $entry = $this.$elementData.data[0];
            while ($entry !== null) {
                if ($entry.$key === null)
                    break a;
                $entry_0 = $entry.$next2;
                $last = $entry;
                $entry = $entry_0;
            }
        } else {
            $hash = $key.$hashCode0();
            $index = $hash & ($this.$elementData.data.length - 1 | 0);
            $entry = $this.$elementData.data[$index];
            while ($entry !== null && !($entry.$origKeyHash == $hash && ju_HashMap_areEqualKeys($key, $entry.$key))) {
                $entry_0 = $entry.$next2;
                $last = $entry;
                $entry = $entry_0;
            }
        }
    }
    if ($entry === null)
        return null;
    if ($last !== null)
        $last.$next2 = $entry.$next2;
    else
        $this.$elementData.data[$index] = $entry.$next2;
    $this.$modCount1 = $this.$modCount1 + 1 | 0;
    $this.$elementCount = $this.$elementCount - 1 | 0;
    return $entry;
}
function ju_HashMap_size($this) {
    return $this.$elementCount;
}
function ju_HashMap_areEqualKeys($key1, $key2) {
    return $key1 !== $key2 && !$key1.$equals($key2) ? 0 : 1;
}
function jur_Pattern() {
    var a = this; jl_Object.call(a);
    a.$lexemes = null;
    a.$flags0 = 0;
    a.$backRefs = null;
    a.$needsBackRefReplacement = 0;
    a.$globalGroupIndex = 0;
    a.$compCount = 0;
    a.$consCount = 0;
    a.$start = null;
}
function jur_Pattern_matcher($this, $input) {
    var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9;
    var$2 = new jur_Matcher;
    var$2.$leftBound = (-1);
    var$2.$rightBound = (-1);
    var$2.$pat = $this;
    var$2.$start2 = $this.$start;
    var$2.$string = $input;
    var$2.$leftBound = 0;
    var$2.$rightBound = jl_String_length(var$2.$string);
    var$3 = new jur_MatchResultImpl;
    var$4 = var$2.$leftBound;
    var$5 = var$2.$rightBound;
    var$6 = $this.$globalGroupIndex;
    var$7 = jur_Pattern_compCount($this);
    var$8 = jur_Pattern_consCount($this);
    var$3.$previousMatch = (-1);
    var$9 = var$6 + 1 | 0;
    var$3.$groupCount = var$9;
    var$3.$groupBounds = $rt_createIntArray(var$9 * 2 | 0);
    var$3.$consumers = $rt_createIntArray(var$8);
    ju_Arrays_fill(var$3.$consumers, (-1));
    if (var$7 > 0)
        var$3.$compQuantCounters = $rt_createIntArray(var$7);
    ju_Arrays_fill(var$3.$groupBounds, (-1));
    jur_MatchResultImpl_reset(var$3, $input, var$4, var$5);
    var$2.$matchResult = var$3;
    return var$2;
}
function jur_Pattern_split0($this, $inputSeq, $limit) {
    var $res, $mat, $index, $curPos, var$7, var$8;
    $res = ju_ArrayList__init_();
    $mat = jur_Pattern_matcher($this, $inputSeq);
    $index = 0;
    $curPos = 0;
    if (!jl_String_length($inputSeq)) {
        var$7 = $rt_createArray(jl_String, 1);
        var$7.data[0] = $rt_s(44);
        return var$7;
    }
    while (jur_Matcher_find($mat)) {
        var$8 = $index + 1 | 0;
        if (var$8 >= $limit && $limit > 0)
            break;
        ju_ArrayList_add($res, jl_String_substring($inputSeq, $curPos, jur_Matcher_start($mat)));
        $curPos = jur_Matcher_end($mat);
        $index = var$8;
    }
    a: {
        ju_ArrayList_add($res, jl_String_substring($inputSeq, $curPos, jl_String_length($inputSeq)));
        $index = $index + 1 | 0;
        if (!$limit)
            while (true) {
                $index = $index + (-1) | 0;
                if ($index < 0)
                    break;
                if (jl_String_length(ju_ArrayList_get($res, $index)))
                    break a;
                ju_ArrayList_remove($res, $index);
            }
    }
    if ($index < 0)
        $index = 0;
    return ju_AbstractCollection_toArray($res, $rt_createArray(jl_String, $index));
}
function jur_Pattern_split($this, $input) {
    return jur_Pattern_split0($this, $input, 0);
}
function jur_Pattern_pattern($this) {
    return $this.$lexemes.$orig;
}
function jur_Pattern_processExpression($this, $ch, $newFlags, $last) {
    var $children, $saveFlags, $saveChangedFlags, $fSet, $child;
    $children = ju_ArrayList__init_();
    $saveFlags = $this.$flags0;
    $saveChangedFlags = 0;
    if ($newFlags != $this.$flags0)
        $this.$flags0 = $newFlags;
    a: {
        switch ($ch) {
            case -1073741784:
                $fSet = new jur_NonCapFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            case -536870872:
            case -268435416:
                break;
            case -134217688:
            case -67108824:
                $fSet = new jur_BehindFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            case -33554392:
                $fSet = new jur_AtomicFSet;
                $newFlags = $this.$consCount + 1 | 0;
                $this.$consCount = $newFlags;
                jur_FSet__init_($fSet, $newFlags);
                break a;
            default:
                $this.$globalGroupIndex = $this.$globalGroupIndex + 1 | 0;
                if ($last !== null)
                    $fSet = jur_FSet__init_0($this.$globalGroupIndex);
                else {
                    $fSet = new jur_FinalSet;
                    jur_FSet__init_($fSet, 0);
                    $saveChangedFlags = 1;
                }
                if ($this.$globalGroupIndex <= (-1))
                    break a;
                if ($this.$globalGroupIndex >= 10)
                    break a;
                $this.$backRefs.data[$this.$globalGroupIndex] = $fSet;
                break a;
        }
        $fSet = new jur_AheadFSet;
        jur_FSet__init_($fSet, (-1));
    }
    while (true) {
        if (jur_Lexer_isLetter($this.$lexemes) && $this.$lexemes.$lookAhead == (-536870788)) {
            $last = jur_CharClass__init_(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
            while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes) && !($this.$lexemes.$lookAhead && $this.$lexemes.$lookAhead != (-536870788) && $this.$lexemes.$lookAhead != (-536870871))) {
                jur_CharClass_add($last, jur_Lexer_next($this.$lexemes));
                if ($this.$lexemes.$ch != (-536870788))
                    continue;
                jur_Lexer_next($this.$lexemes);
            }
            $child = jur_Pattern_processRangeSet($this, $last);
            $child.$setNext($fSet);
        } else if ($this.$lexemes.$ch == (-536870788)) {
            $child = jur_EmptySet__init_($fSet);
            jur_Lexer_next($this.$lexemes);
        } else {
            $child = jur_Pattern_processSubExpression($this, $fSet);
            if ($this.$lexemes.$ch == (-536870788))
                jur_Lexer_next($this.$lexemes);
        }
        if ($child !== null)
            ju_ArrayList_add($children, $child);
        if (jur_Lexer_isEmpty($this.$lexemes))
            break;
        if ($this.$lexemes.$ch == (-536870871))
            break;
    }
    if ($this.$lexemes.$lookBack == (-536870788))
        ju_ArrayList_add($children, jur_EmptySet__init_($fSet));
    if ($this.$flags0 != $saveFlags && !$saveChangedFlags) {
        $this.$flags0 = $saveFlags;
        jur_Lexer_restoreFlags($this.$lexemes, $this.$flags0);
    }
    switch ($ch) {
        case -1073741784:
            break;
        case -536870872:
            $last = new jur_PositiveLookAhead;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -268435416:
            $last = new jur_NegativeLookAhead;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -134217688:
            $last = new jur_PositiveLookBehind;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -67108824:
            $last = new jur_NegativeLookBehind;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        case -33554392:
            $last = new jur_AtomicJointSet;
            jur_JointSet__init_($last, $children, $fSet);
            return $last;
        default:
            switch ($children.$size0) {
                case 0:
                    break;
                case 1:
                    return jur_SingleSet__init_(ju_ArrayList_get($children, 0), $fSet);
                default:
                    return jur_JointSet__init_0($children, $fSet);
            }
            return jur_EmptySet__init_($fSet);
    }
    $last = new jur_NonCapJointSet;
    jur_JointSet__init_($last, $children, $fSet);
    return $last;
}
function jur_Pattern_processDecomposedChar($this) {
    var $codePoints, $curSymb, $curSymbIndex, $codePointsHangul, $readCodePoints, var$6;
    $codePoints = $rt_createIntArray(4);
    $curSymb = (-1);
    $curSymbIndex = (-1);
    if (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
        $codePointsHangul = $codePoints.data;
        $curSymb = jur_Lexer_next($this.$lexemes);
        $codePointsHangul[0] = $curSymb;
        $curSymbIndex = $curSymb - 4352 | 0;
    }
    if ($curSymbIndex >= 0 && $curSymbIndex < 19) {
        $codePointsHangul = $rt_createCharArray(3);
        $codePoints = $codePointsHangul.data;
        $codePoints[0] = $curSymb & 65535;
        $readCodePoints = $this.$lexemes.$ch;
        $curSymb = $readCodePoints - 4449 | 0;
        if ($curSymb >= 0 && $curSymb < 21) {
            $codePoints[1] = $readCodePoints & 65535;
            jur_Lexer_next($this.$lexemes);
            $readCodePoints = $this.$lexemes.$ch;
            $curSymbIndex = $readCodePoints - 4519 | 0;
            if ($curSymbIndex >= 0 && $curSymbIndex < 28) {
                $codePoints[2] = $readCodePoints & 65535;
                jur_Lexer_next($this.$lexemes);
                return jur_HangulDecomposedCharSet__init_($codePointsHangul, 3);
            }
            return jur_HangulDecomposedCharSet__init_($codePointsHangul, 2);
        }
        if (!jur_Pattern_hasFlag($this, 2))
            return jur_CharSet__init_($codePoints[0]);
        if (jur_Pattern_hasFlag($this, 64))
            return jur_UCICharSet__init_($codePoints[0]);
        return jur_CICharSet__init_($codePoints[0]);
    }
    $codePointsHangul = $codePoints.data;
    $curSymb = 1;
    while ($curSymb < 4 && !jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes)) {
        $readCodePoints = $curSymb + 1 | 0;
        $codePointsHangul[$curSymb] = jur_Lexer_next($this.$lexemes);
        $curSymb = $readCodePoints;
    }
    if ($curSymb == 1) {
        $readCodePoints = $codePointsHangul[0];
        if (!(jur_Lexer_singleDecompTable.$get1($readCodePoints) == jur_Lexer_singleDecompTableSize ? 0 : 1))
            return jur_Pattern_processCharSet($this, $codePointsHangul[0]);
    }
    if (!jur_Pattern_hasFlag($this, 2))
        return jur_DecomposedCharSet__init_($codePoints, $curSymb);
    if (jur_Pattern_hasFlag($this, 64)) {
        var$6 = new jur_UCIDecomposedCharSet;
        jur_DecomposedCharSet__init_0(var$6, $codePoints, $curSymb);
        return var$6;
    }
    var$6 = new jur_CIDecomposedCharSet;
    jur_DecomposedCharSet__init_0(var$6, $codePoints, $curSymb);
    return var$6;
}
function jur_Pattern_processSubExpression($this, $last) {
    var $cur, $term, var$4, $next;
    if (jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead)) {
        if (jur_Pattern_hasFlag($this, 128)) {
            $cur = jur_Pattern_processDecomposedChar($this);
            if (!jur_Lexer_isEmpty($this.$lexemes) && !($this.$lexemes.$ch == (-536870871) && !($last instanceof jur_FinalSet)) && $this.$lexemes.$ch != (-536870788) && !jur_Lexer_isLetter($this.$lexemes))
                $cur = jur_Pattern_processQuantifier($this, $last, $cur);
        } else if (!jur_Lexer_isHighSurrogate($this.$lexemes) && !jur_Lexer_isLowSurrogate($this.$lexemes)) {
            $term = new jl_StringBuffer;
            jl_AbstractStringBuilder__init_($term);
            while (!jur_Lexer_isEmpty($this.$lexemes) && jur_Lexer_isLetter($this.$lexemes) && !jur_Lexer_isHighSurrogate($this.$lexemes) && !jur_Lexer_isLowSurrogate($this.$lexemes) && !(!(!jur_Lexer_isNextSpecial($this.$lexemes) && !$this.$lexemes.$lookAhead) && !(!jur_Lexer_isNextSpecial($this.$lexemes) && jur_Lexer_isLetter0($this.$lexemes.$lookAhead)) && $this.$lexemes.$lookAhead != (-536870871) && ($this.$lexemes.$lookAhead & (-2147418113)) != (-2147483608) && $this.$lexemes.$lookAhead != (-536870788)
            && $this.$lexemes.$lookAhead != (-536870876))) {
                var$4 = jur_Lexer_next($this.$lexemes);
                if (!jl_Character_isSupplementaryCodePoint(var$4))
                    jl_AbstractStringBuilder_append1($term, var$4 & 65535);
                else
                    jl_AbstractStringBuilder_append3($term, jl_Character_toChars(var$4));
            }
            if (!jur_Pattern_hasFlag($this, 2))
                $cur = jur_SequenceSet__init_($term);
            else if (jur_Pattern_hasFlag($this, 64))
                $cur = jur_UCISequenceSet__init_($term);
            else {
                $cur = new jur_CISequenceSet;
                jur_LeafSet__init_($cur);
                $cur.$string0 = jl_AbstractStringBuilder_toString($term);
                $cur.$charCount = jl_StringBuffer_length($term);
            }
        } else
            $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
    } else if ($this.$lexemes.$ch != (-536870871))
        $cur = jur_Pattern_processQuantifier($this, $last, jur_Pattern_processTerminal($this, $last));
    else {
        if ($last instanceof jur_FinalSet)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$lexemes.$orig, $this.$lexemes.$curToc));
        $cur = jur_EmptySet__init_($last);
    }
    if (!jur_Lexer_isEmpty($this.$lexemes) && !($this.$lexemes.$ch == (-536870871) && !($last instanceof jur_FinalSet)) && $this.$lexemes.$ch != (-536870788)) {
        $next = jur_Pattern_processSubExpression($this, $last);
        if ($cur instanceof jur_LeafQuantifierSet && !($cur instanceof jur_CompositeQuantifierSet) && !($cur instanceof jur_GroupQuantifierSet) && !($cur instanceof jur_AltQuantifierSet)) {
            $last = $cur;
            if (!$next.$first($last.$innerSet)) {
                $cur = new jur_UnifiedQuantifierSet;
                jur_LeafQuantifierSet__init_($cur, $last.$innerSet, $last.$next4, $last.$type0);
                $cur.$innerSet.$setNext($cur);
            }
        }
        if (($next.$getType0() & 65535) != 43)
            $cur.$setNext($next);
        else
            $cur.$setNext($next.$innerSet);
    } else {
        if ($cur === null)
            return null;
        $cur.$setNext($last);
    }
    if (($cur.$getType0() & 65535) != 43)
        return $cur;
    return $cur.$innerSet;
}
function jur_Pattern_processQuantifier($this, $last, $term) {
    var $quant, $leaf, $q, var$6;
    $quant = $this.$lexemes.$ch;
    if ($term !== null && !($term instanceof jur_LeafSet)) {
        switch ($quant) {
            case -2147483606:
                jur_Lexer_next($this.$lexemes);
                $leaf = new jur_PossessiveGroupQuantifierSet;
                jur_QuantifierSet__init_($leaf, $term, $last, $quant);
                $term.$setNext(jur_FSet_posFSet);
                return $leaf;
            case -2147483605:
                jur_Lexer_next($this.$lexemes);
                $leaf = new jur_PosPlusGroupQuantifierSet;
                jur_QuantifierSet__init_($leaf, $term, $last, (-2147483606));
                $term.$setNext(jur_FSet_posFSet);
                return $leaf;
            case -2147483585:
                jur_Lexer_next($this.$lexemes);
                $leaf = new jur_PosAltGroupQuantifierSet;
                jur_QuantifierSet__init_($leaf, $term, $last, (-536870849));
                $term.$setNext(jur_FSet_posFSet);
                return $leaf;
            case -2147483525:
                $leaf = new jur_PosCompositeGroupQuantifierSet;
                $q = jur_Lexer_nextSpecial($this.$lexemes);
                $quant = $this.$compCount + 1 | 0;
                $this.$compCount = $quant;
                jur_CompositeGroupQuantifierSet__init_($leaf, $q, $term, $last, (-536870849), $quant);
                $term.$setNext(jur_FSet_posFSet);
                return $leaf;
            case -1073741782:
            case -1073741781:
                jur_Lexer_next($this.$lexemes);
                $q = new jur_ReluctantGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, $quant);
                $term.$setNext($q);
                return $q;
            case -1073741761:
                jur_Lexer_next($this.$lexemes);
                $q = new jur_RelAltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -1073741701:
                $q = new jur_RelCompositeGroupQuantifierSet;
                $leaf = jur_Lexer_nextSpecial($this.$lexemes);
                var$6 = $this.$compCount + 1 | 0;
                $this.$compCount = var$6;
                jur_CompositeGroupQuantifierSet__init_($q, $leaf, $term, $last, (-536870849), var$6);
                $term.$setNext($q);
                return $q;
            case -536870870:
            case -536870869:
                jur_Lexer_next($this.$lexemes);
                if ($term.$getType0() != (-2147483602)) {
                    $q = new jur_GroupQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                } else if (jur_Pattern_hasFlag($this, 32)) {
                    $q = new jur_DotAllQuantifierSet;
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                } else {
                    $q = new jur_DotQuantifierSet;
                    $leaf = jur_AbstractLineTerminator_getInstance($this.$flags0);
                    jur_QuantifierSet__init_($q, $term, $last, $quant);
                    $q.$lt = $leaf;
                }
                $term.$setNext($q);
                return $q;
            case -536870849:
                jur_Lexer_next($this.$lexemes);
                $q = new jur_AltGroupQuantifierSet;
                jur_QuantifierSet__init_($q, $term, $last, (-536870849));
                $term.$setNext($last);
                return $q;
            case -536870789:
                $q = new jur_CompositeGroupQuantifierSet;
                $leaf = jur_Lexer_nextSpecial($this.$lexemes);
                var$6 = $this.$compCount + 1 | 0;
                $this.$compCount = var$6;
                jur_CompositeGroupQuantifierSet__init_($q, $leaf, $term, $last, (-536870849), var$6);
                $term.$setNext($q);
                return $q;
            default:
        }
        return $term;
    }
    $leaf = null;
    if ($term !== null)
        $leaf = $term;
    switch ($quant) {
        case -2147483606:
        case -2147483605:
            jur_Lexer_next($this.$lexemes);
            $q = new jur_PossessiveQuantifierSet;
            jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
            $leaf.$next4 = $q;
            return $q;
        case -2147483585:
            jur_Lexer_next($this.$lexemes);
            $term = new jur_PossessiveAltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-2147483585));
            return $term;
        case -2147483525:
            $term = new jur_PossessiveCompositeQuantifierSet;
            jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($this.$lexemes), $leaf, $last, (-2147483525));
            return $term;
        case -1073741782:
        case -1073741781:
            jur_Lexer_next($this.$lexemes);
            $q = new jur_ReluctantQuantifierSet;
            jur_LeafQuantifierSet__init_($q, $leaf, $last, $quant);
            $leaf.$next4 = $q;
            return $q;
        case -1073741761:
            jur_Lexer_next($this.$lexemes);
            $term = new jur_ReluctantAltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-1073741761));
            return $term;
        case -1073741701:
            $term = new jur_ReluctantCompositeQuantifierSet;
            jur_CompositeQuantifierSet__init_($term, jur_Lexer_nextSpecial($this.$lexemes), $leaf, $last, (-1073741701));
            return $term;
        case -536870870:
        case -536870869:
            jur_Lexer_next($this.$lexemes);
            $q = jur_LeafQuantifierSet__init_0($leaf, $last, $quant);
            $leaf.$next4 = $q;
            return $q;
        case -536870849:
            jur_Lexer_next($this.$lexemes);
            $term = new jur_AltQuantifierSet;
            jur_LeafQuantifierSet__init_($term, $leaf, $last, (-536870849));
            return $term;
        case -536870789:
            return jur_CompositeQuantifierSet__init_0(jur_Lexer_nextSpecial($this.$lexemes), $leaf, $last, (-536870789));
        default:
    }
    return $term;
}
function jur_Pattern_processTerminal($this, $last) {
    var $term, var$3, $ch, $newFlags, $number, $negative, $cc;
    $term = null;
    var$3 = $last instanceof jur_FinalSet;
    while (true) {
        a: {
            $ch = jur_Lexer_peek($this.$lexemes);
            if (($ch & (-2147418113)) == (-2147483608)) {
                jur_Lexer_next($this.$lexemes);
                $newFlags = ($ch & 16711680) >> 16;
                $ch = $ch & (-16711681);
                if ($ch == (-16777176))
                    $this.$flags0 = $newFlags;
                else {
                    if ($ch != (-1073741784))
                        $newFlags = $this.$flags0;
                    $term = jur_Pattern_processExpression($this, $ch, $newFlags, $last);
                    if (jur_Lexer_peek($this.$lexemes) != (-536870871))
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Lexer_toString($this.$lexemes), jur_Lexer_getIndex($this.$lexemes)));
                    jur_Lexer_next($this.$lexemes);
                }
            } else {
                b: {
                    c: {
                        switch ($ch) {
                            case -2147483599:
                            case -2147483598:
                            case -2147483597:
                            case -2147483596:
                            case -2147483595:
                            case -2147483594:
                            case -2147483593:
                            case -2147483592:
                            case -2147483591:
                                $number = ($ch & 2147483647) - 48 | 0;
                                if ($this.$globalGroupIndex < $number)
                                    $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Lexer_toString($this.$lexemes), jur_Lexer_getIndex($this.$lexemes)));
                                jur_Lexer_next($this.$lexemes);
                                $this.$consCount = $this.$consCount + 1 | 0;
                                $term = !jur_Pattern_hasFlag($this, 2) ? jur_BackReferenceSet__init_($number, $this.$consCount) : jur_Pattern_hasFlag($this, 64) ? jur_UCIBackReferenceSet__init_($number, $this.$consCount) : jur_CIBackReferenceSet__init_($number, $this.$consCount);
                                $this.$backRefs.data[$number].$isBackReferenced = 1;
                                $this.$needsBackRefReplacement = 1;
                                break a;
                            case -2147483583:
                                break;
                            case -2147483582:
                                jur_Lexer_next($this.$lexemes);
                                $term = jur_WordBoundary__init_(0);
                                break a;
                            case -2147483577:
                                jur_Lexer_next($this.$lexemes);
                                $term = jur_PreviousMatch__init_();
                                break a;
                            case -2147483558:
                                jur_Lexer_next($this.$lexemes);
                                $term = new jur_EOLSet;
                                $number = $this.$consCount + 1 | 0;
                                $this.$consCount = $number;
                                jur_EOLSet__init_($term, $number);
                                break a;
                            case -2147483550:
                                jur_Lexer_next($this.$lexemes);
                                $term = jur_WordBoundary__init_(1);
                                break a;
                            case -2147483526:
                                jur_Lexer_next($this.$lexemes);
                                $term = jur_EOISet__init_();
                                break a;
                            case -536870876:
                                break c;
                            case -536870866:
                                jur_Lexer_next($this.$lexemes);
                                if (jur_Pattern_hasFlag($this, 32)) {
                                    $term = jur_DotAllSet__init_();
                                    break a;
                                }
                                $term = jur_DotSet__init_(jur_AbstractLineTerminator_getInstance($this.$flags0));
                                break a;
                            case -536870821:
                                jur_Lexer_next($this.$lexemes);
                                $negative = 0;
                                if (jur_Lexer_peek($this.$lexemes) == (-536870818)) {
                                    $negative = 1;
                                    jur_Lexer_next($this.$lexemes);
                                }
                                $term = jur_Pattern_processRange($this, $negative, $last);
                                if (jur_Lexer_peek($this.$lexemes) != (-536870819))
                                    $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Lexer_toString($this.$lexemes), jur_Lexer_getIndex($this.$lexemes)));
                                jur_Lexer_setMode($this.$lexemes, 1);
                                jur_Lexer_next($this.$lexemes);
                                break a;
                            case -536870818:
                                jur_Lexer_next($this.$lexemes);
                                $this.$consCount = $this.$consCount + 1 | 0;
                                if (!jur_Pattern_hasFlag($this, 8)) {
                                    $term = jur_SOLSet__init_();
                                    break a;
                                }
                                $term = jur_MultiLineSOLSet__init_(jur_AbstractLineTerminator_getInstance($this.$flags0));
                                break a;
                            case 0:
                                $cc = jur_Lexer_peekSpecial($this.$lexemes);
                                if ($cc !== null)
                                    $term = jur_Pattern_processRangeSet($this, $cc);
                                else {
                                    if (jur_Lexer_isEmpty($this.$lexemes)) {
                                        $term = jur_EmptySet__init_($last);
                                        break a;
                                    }
                                    $term = jur_CharSet__init_($ch & 65535);
                                }
                                jur_Lexer_next($this.$lexemes);
                                break a;
                            default:
                                break b;
                        }
                        jur_Lexer_next($this.$lexemes);
                        $term = jur_SOLSet__init_();
                        break a;
                    }
                    jur_Lexer_next($this.$lexemes);
                    $this.$consCount = $this.$consCount + 1 | 0;
                    if (jur_Pattern_hasFlag($this, 8)) {
                        if (jur_Pattern_hasFlag($this, 1)) {
                            $term = jur_UMultiLineEOLSet__init_($this.$consCount);
                            break a;
                        }
                        $term = jur_MultiLineEOLSet__init_($this.$consCount);
                        break a;
                    }
                    if (jur_Pattern_hasFlag($this, 1)) {
                        $term = jur_UEOLSet__init_($this.$consCount);
                        break a;
                    }
                    $term = jur_EOLSet__init_0($this.$consCount);
                    break a;
                }
                if ($ch >= 0 && !jur_Lexer_isSpecial($this.$lexemes)) {
                    $term = jur_Pattern_processCharSet($this, $ch);
                    jur_Lexer_next($this.$lexemes);
                } else if ($ch == (-536870788))
                    $term = jur_EmptySet__init_($last);
                else {
                    if ($ch != (-536870871))
                        $rt_throw(jur_PatternSyntaxException__init_(!jur_Lexer_isSpecial($this.$lexemes) ? jl_Character_toString0($ch & 65535) : jur_Lexer_peekSpecial($this.$lexemes).$toString(), jur_Lexer_toString($this.$lexemes), jur_Lexer_getIndex($this.$lexemes)));
                    if (var$3)
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Lexer_toString($this.$lexemes), jur_Lexer_getIndex($this.$lexemes)));
                    $term = jur_EmptySet__init_($last);
                }
            }
        }
        if ($ch != (-16777176))
            break;
    }
    return $term;
}
function jur_Pattern_processRange($this, $negative, $last) {
    var $rangeSet;
    $rangeSet = jur_Pattern_processRangeSet($this, jur_Pattern_processRangeExpression($this, $negative));
    $rangeSet.$setNext($last);
    return $rangeSet;
}
function jur_Pattern_processRangeExpression($this, $alt) {
    var $res, $buffer, $intersection, $notClosed, $firstInClass, $cur, $negative, $cs, $$je;
    $res = jur_CharClass__init_(jur_Pattern_hasFlag($this, 2), jur_Pattern_hasFlag($this, 64));
    jur_AbstractCharClass_setNegative($res, $alt);
    $buffer = (-1);
    $intersection = 0;
    $notClosed = 0;
    $firstInClass = 1;
    a: {
        b: {
            c: while (true) {
                if (jur_Lexer_isEmpty($this.$lexemes))
                    break a;
                $notClosed = $this.$lexemes.$ch == (-536870819) && !$firstInClass ? 0 : 1;
                if (!$notClosed)
                    break a;
                d: {
                    switch ($this.$lexemes.$ch) {
                        case -536870874:
                            if ($buffer >= 0)
                                jur_CharClass_add($res, $buffer);
                            $buffer = jur_Lexer_next($this.$lexemes);
                            if ($this.$lexemes.$ch != (-536870874)) {
                                $buffer = 38;
                                break d;
                            }
                            if ($this.$lexemes.$lookAhead == (-536870821)) {
                                jur_Lexer_next($this.$lexemes);
                                $intersection = 1;
                                $buffer = (-1);
                                break d;
                            }
                            jur_Lexer_next($this.$lexemes);
                            if ($firstInClass) {
                                $res = jur_Pattern_processRangeExpression($this, 0);
                                break d;
                            }
                            if ($this.$lexemes.$ch == (-536870819))
                                break d;
                            jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, 0));
                            break d;
                        case -536870867:
                            if (!$firstInClass && $this.$lexemes.$lookAhead != (-536870819) && $this.$lexemes.$lookAhead != (-536870821) && $buffer >= 0) {
                                jur_Lexer_next($this.$lexemes);
                                $cur = $this.$lexemes.$ch;
                                if (jur_Lexer_isSpecial($this.$lexemes))
                                    break c;
                                if ($cur < 0 && $this.$lexemes.$lookAhead != (-536870819) && $this.$lexemes.$lookAhead != (-536870821) && $buffer >= 0)
                                    break c;
                                e: {
                                    try {
                                        if (jur_Lexer_isLetter0($cur))
                                            break e;
                                        $cur = $cur & 65535;
                                        break e;
                                    } catch ($$e) {
                                        $$je = $rt_wrapException($$e);
                                        if ($$je instanceof jl_Exception) {
                                            break b;
                                        } else {
                                            throw $$e;
                                        }
                                    }
                                }
                                try {
                                    jur_CharClass_add0($res, $buffer, $cur);
                                } catch ($$e) {
                                    $$je = $rt_wrapException($$e);
                                    if ($$je instanceof jl_Exception) {
                                        break b;
                                    } else {
                                        throw $$e;
                                    }
                                }
                                jur_Lexer_next($this.$lexemes);
                                $buffer = (-1);
                                break d;
                            }
                            if ($buffer >= 0)
                                jur_CharClass_add($res, $buffer);
                            $buffer = 45;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870821:
                            if ($buffer >= 0) {
                                jur_CharClass_add($res, $buffer);
                                $buffer = (-1);
                            }
                            jur_Lexer_next($this.$lexemes);
                            $negative = 0;
                            if ($this.$lexemes.$ch == (-536870818)) {
                                jur_Lexer_next($this.$lexemes);
                                $negative = 1;
                            }
                            if (!$intersection)
                                jur_CharClass_union($res, jur_Pattern_processRangeExpression($this, $negative));
                            else
                                jur_CharClass_intersection($res, jur_Pattern_processRangeExpression($this, $negative));
                            $intersection = 0;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870819:
                            if ($buffer >= 0)
                                jur_CharClass_add($res, $buffer);
                            $buffer = 93;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case -536870818:
                            if ($buffer >= 0)
                                jur_CharClass_add($res, $buffer);
                            $buffer = 94;
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        case 0:
                            if ($buffer >= 0)
                                jur_CharClass_add($res, $buffer);
                            $cs = $this.$lexemes.$curST;
                            if ($cs === null)
                                $buffer = 0;
                            else {
                                jur_CharClass_add1($res, $cs);
                                $buffer = (-1);
                            }
                            jur_Lexer_next($this.$lexemes);
                            break d;
                        default:
                    }
                    if ($buffer >= 0)
                        jur_CharClass_add($res, $buffer);
                    $buffer = jur_Lexer_next($this.$lexemes);
                }
                $firstInClass = 0;
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Pattern_pattern($this), $this.$lexemes.$curToc));
    }
    if (!$notClosed) {
        if ($buffer >= 0)
            jur_CharClass_add($res, $buffer);
        return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Pattern_pattern($this), $this.$lexemes.$curToc - 1 | 0));
}
function jur_Pattern_processCharSet($this, $ch) {
    var $isSupplCodePoint, var$3, var$4;
    $isSupplCodePoint = jl_Character_isSupplementaryCodePoint($ch);
    if (jur_Pattern_hasFlag($this, 2)) {
        a: {
            if (!($ch >= 97 && $ch <= 122)) {
                if ($ch < 65)
                    break a;
                if ($ch > 90)
                    break a;
            }
            return jur_CICharSet__init_($ch & 65535);
        }
        if (jur_Pattern_hasFlag($this, 64) && $ch > 128) {
            if ($isSupplCodePoint) {
                var$3 = new jur_UCISupplCharSet;
                jur_LeafSet__init_(var$3);
                var$3.$charCount = 2;
                var$3.$ch0 = jl_Character_toLowerCase0(jl_Character_toUpperCase($ch));
                return var$3;
            }
            if (jur_Lexer_isLowSurrogate0($ch))
                return jur_LowSurrogateCharSet__init_($ch & 65535);
            if (!jur_Lexer_isHighSurrogate0($ch))
                return jur_UCICharSet__init_($ch & 65535);
            return jur_HighSurrogateCharSet__init_($ch & 65535);
        }
    }
    if (!$isSupplCodePoint) {
        if (jur_Lexer_isLowSurrogate0($ch))
            return jur_LowSurrogateCharSet__init_($ch & 65535);
        if (!jur_Lexer_isHighSurrogate0($ch))
            return jur_CharSet__init_($ch & 65535);
        return jur_HighSurrogateCharSet__init_($ch & 65535);
    }
    var$3 = new jur_SupplCharSet;
    jur_LeafSet__init_(var$3);
    var$3.$charCount = 2;
    var$3.$ch1 = $ch;
    var$4 = jl_Character_toChars($ch).data;
    var$3.$high = var$4[0];
    var$3.$low = var$4[1];
    return var$3;
}
function jur_Pattern_processRangeSet($this, $charClass) {
    var $surrogates, $lowHighSurrRangeSet, var$4;
    if (!jur_AbstractCharClass_hasLowHighSurrogates($charClass)) {
        if (!$charClass.$mayContainSupplCodepoints) {
            if ($charClass.$hasUCI())
                return jur_UCIRangeSet__init_($charClass);
            return jur_RangeSet__init_($charClass);
        }
        if (!$charClass.$hasUCI())
            return jur_SupplRangeSet__init_($charClass);
        $surrogates = new jur_UCISupplRangeSet;
        jur_SupplRangeSet__init_0($surrogates, $charClass);
        return $surrogates;
    }
    $surrogates = jur_AbstractCharClass_getSurrogates($charClass);
    $lowHighSurrRangeSet = new jur_LowHighSurrogateRangeSet;
    jur_AbstractSet__init_($lowHighSurrRangeSet);
    $lowHighSurrRangeSet.$surrChars = $surrogates;
    $lowHighSurrRangeSet.$alt = $surrogates.$alt0;
    if (!$charClass.$mayContainSupplCodepoints) {
        if ($charClass.$hasUCI())
            return jur_CompositeRangeSet__init_(jur_UCIRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
        return jur_CompositeRangeSet__init_(jur_RangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
    }
    if (!$charClass.$hasUCI())
        return jur_CompositeRangeSet__init_(jur_SupplRangeSet__init_(jur_AbstractCharClass_getWithoutSurrogates($charClass)), $lowHighSurrRangeSet);
    $surrogates = new jur_CompositeRangeSet;
    var$4 = new jur_UCISupplRangeSet;
    jur_SupplRangeSet__init_0(var$4, jur_AbstractCharClass_getWithoutSurrogates($charClass));
    jur_CompositeRangeSet__init_0($surrogates, var$4, $lowHighSurrRangeSet);
    return $surrogates;
}
function jur_Pattern_groupCount($this) {
    return $this.$globalGroupIndex;
}
function jur_Pattern_compCount($this) {
    return $this.$compCount + 1 | 0;
}
function jur_Pattern_consCount($this) {
    return $this.$consCount + 1 | 0;
}
function jur_Pattern_getSupplement($ch) {
    if ($ch >= 97 && $ch <= 122)
        $ch = ($ch - 32 | 0) & 65535;
    else if ($ch >= 65 && $ch <= 90)
        $ch = ($ch + 32 | 0) & 65535;
    return $ch;
}
function jur_Pattern_hasFlag($this, $flag) {
    return ($this.$flags0 & $flag) != $flag ? 0 : 1;
}
function ju_Iterator() {
}
function ju_AbstractList$1() {
    var a = this; jl_Object.call(a);
    a.$index0 = 0;
    a.$modCount0 = 0;
    a.$size1 = 0;
    a.$removeIndex = 0;
    a.$this$00 = null;
}
function ju_AbstractList$1_hasNext($this) {
    return $this.$index0 >= $this.$size1 ? 0 : 1;
}
function ju_AbstractList$1_next($this) {
    var var$1, var$2;
    ju_AbstractList$1_checkConcurrentModification($this);
    $this.$removeIndex = $this.$index0;
    var$1 = $this.$this$00;
    var$2 = $this.$index0;
    $this.$index0 = var$2 + 1 | 0;
    return var$1.$get(var$2);
}
function ju_AbstractList$1_remove($this) {
    var var$1;
    if ($this.$removeIndex < 0) {
        var$1 = new jl_IllegalStateException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    ju_AbstractList$1_checkConcurrentModification($this);
    $this.$this$00.$remove0($this.$removeIndex);
    $this.$modCount0 = $this.$this$00.$modCount;
    if ($this.$removeIndex < $this.$index0)
        $this.$index0 = $this.$index0 - 1 | 0;
    $this.$size1 = $this.$size1 - 1 | 0;
    $this.$removeIndex = (-1);
}
function ju_AbstractList$1_checkConcurrentModification($this) {
    var var$1;
    if ($this.$modCount0 >= $this.$this$00.$modCount)
        return;
    var$1 = new ju_ConcurrentModificationException;
    jl_Throwable__init_0(var$1);
    $rt_throw(var$1);
}
function jl_IndexOutOfBoundsException() {
    jl_RuntimeException.call(this);
}
function jl_StringIndexOutOfBoundsException() {
    jl_IndexOutOfBoundsException.call(this);
}
function tt_Utils() {
    jl_Object.call(this);
}
var tt_Utils_useQuickSort = 0;
function tt_Utils_within($first, $second, $variance) {
    return $second < $first + $variance && $second > $first - $variance ? 1 : 0;
}
function tt_Utils_overlap($y1, $height1, $y2, $height2) {
    var var$5;
    a: {
        b: {
            if (!tt_Utils_within($y1, $y2, 0.10000000149011612) && !($y2 <= $y1 && $y2 >= $y1 - $height1)) {
                if ($y1 > $y2)
                    break b;
                if ($y1 < $y2 - $height2)
                    break b;
            }
            var$5 = 1;
            break a;
        }
        var$5 = 0;
    }
    return var$5;
}
function tt_Utils_feq($f1, $f2) {
    return jl_Math_abs($f1 - $f2) >= 0.009999999776482582 ? 0 : 1;
}
function tt_Utils_round($d, $decimalPlace) {
    var $bd, var$4;
    $bd = new jm_BigDecimal;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    var$4 = jl_AbstractStringBuilder_toString(jl_StringBuilder_append(var$4, $d));
    jm_BigDecimal_$callClinit();
    jm_BigDecimal__init_($bd, jl_String_toCharArray(var$4), 0, jl_String_length(var$4));
    return jm_BigDecimal_floatValue(jm_BigDecimal_setScale($bd, $decimalPlace, 4));
}
function tt_Utils_sort($list, $comparator) {
    var var$3;
    if (!tt_Utils_useQuickSort)
        ju_Collections_sort($list, $comparator);
    else if ($rt_isInstance($list, ju_RandomAccess))
        tt_QuickSort_quicksort($list, $comparator);
    else {
        var$3 = ju_ArrayList__init_3($list);
        tt_QuickSort_quicksort(var$3, $comparator);
        ju_ArrayList_clear($list);
        ju_AbstractCollection_addAll($list, var$3);
    }
}
function tt_Utils_snapPoints($rulings, $xThreshold, $yThreshold) {
    var $linesToPoints, $points, $last, $r, $p1, $p2, $p, var$11, $groupedPoints, var$13, $p_0, $group, $avgLoc, var$17, var$18, $ltp;
    $linesToPoints = ju_HashMap__init_();
    $points = ju_ArrayList__init_();
    $last = ju_AbstractList_iterator($rulings);
    while (ju_AbstractList$1_hasNext($last)) {
        $r = ju_AbstractList$1_next($last);
        $p1 = cjag_Line2D$Float_getP1($r);
        $p2 = cjag_Line2D$Float_getP2($r);
        $p = $rt_createArray(cjag_Point2D, 2);
        var$11 = $p.data;
        var$11[0] = $p1;
        var$11[1] = $p2;
        ju_HashMap_putImpl($linesToPoints, $r, $p);
        ju_ArrayList_add($points, $p1);
        ju_ArrayList_add($points, $p2);
    }
    ju_Collections_sort($points, new tt_Utils$2);
    $groupedPoints = ju_ArrayList__init_();
    $rulings = new ju_ArrayList;
    $p = $rt_createArray(cjag_Point2D, 1);
    $p.data[0] = ju_ArrayList_get($points, 0);
    ju_ArrayList__init_4($rulings, ju_Arrays_asList($p));
    ju_ArrayList_add($groupedPoints, $rulings);
    $r = ju_AbstractList$SubAbstractList_iterator(ju_AbstractList_subList($points, 1, $points.$size0 - 1 | 0));
    var$13 = $xThreshold;
    while (ju_AbstractList$SubAbstractList$SubAbstractListIterator_hasNext($r)) {
        $p_0 = ju_AbstractList$SubAbstractList$SubAbstractListIterator_next($r);
        $last = ju_ArrayList_get($groupedPoints, $groupedPoints.$size0 - 1 | 0);
        if (jl_Math_abs(cjag_Point2D$Float_getX($p_0) - cjag_Point2D$Float_getX(ju_ArrayList_get($last, 0))) < var$13)
            ju_ArrayList_add(ju_ArrayList_get($groupedPoints, $groupedPoints.$size0 - 1 | 0), $p_0);
        else {
            $rulings = new ju_ArrayList;
            $p = $rt_createArray(cjag_Point2D, 1);
            $p.data[0] = $p_0;
            ju_ArrayList__init_4($rulings, ju_Arrays_asList($p));
            ju_ArrayList_add($groupedPoints, $rulings);
        }
    }
    $rulings = ju_AbstractList_iterator($groupedPoints);
    while (ju_AbstractList$1_hasNext($rulings)) {
        $group = ju_AbstractList$1_next($rulings);
        $avgLoc = 0.0;
        $last = ju_AbstractList_iterator($group);
        while (ju_AbstractList$1_hasNext($last)) {
            $p_0 = ju_AbstractList$1_next($last);
            $avgLoc = $avgLoc + cjag_Point2D$Float_getX($p_0);
        }
        $xThreshold = $avgLoc / $group.$size0;
        $last = ju_AbstractList_iterator($group);
        var$17 = $xThreshold;
        while (ju_AbstractList$1_hasNext($last)) {
            $p_0 = ju_AbstractList$1_next($last);
            cjag_Point2D$Float_setLocation($p_0, var$17, cjag_Point2D$Float_getY($p_0));
        }
    }
    ju_Collections_sort($points, new tt_Utils$3);
    $rulings = ju_ArrayList__init_();
    $last = new ju_ArrayList;
    $p = $rt_createArray(cjag_Point2D, 1);
    $p.data[0] = ju_ArrayList_get($points, 0);
    ju_ArrayList__init_4($last, ju_Arrays_asList($p));
    ju_ArrayList_add($rulings, $last);
    $points = ju_AbstractList$SubAbstractList_iterator(ju_AbstractList_subList($points, 1, $points.$size0 - 1 | 0));
    var$13 = $yThreshold;
    while (ju_AbstractList$SubAbstractList$SubAbstractListIterator_hasNext($points)) {
        $p_0 = ju_AbstractList$SubAbstractList$SubAbstractListIterator_next($points);
        $last = ju_ArrayList_get($rulings, $rulings.$size0 - 1 | 0);
        if (jl_Math_abs(cjag_Point2D$Float_getY($p_0) - cjag_Point2D$Float_getY(ju_ArrayList_get($last, 0))) < var$13)
            ju_ArrayList_add(ju_ArrayList_get($rulings, $rulings.$size0 - 1 | 0), $p_0);
        else {
            $last = new ju_ArrayList;
            $p = $rt_createArray(cjag_Point2D, 1);
            $p.data[0] = $p_0;
            ju_ArrayList__init_4($last, ju_Arrays_asList($p));
            ju_ArrayList_add($rulings, $last);
        }
    }
    $rulings = ju_AbstractList_iterator($rulings);
    while (ju_AbstractList$1_hasNext($rulings)) {
        $group = ju_AbstractList$1_next($rulings);
        $avgLoc = 0.0;
        $points = ju_AbstractList_iterator($group);
        while (ju_AbstractList$1_hasNext($points)) {
            $p_0 = ju_AbstractList$1_next($points);
            $avgLoc = $avgLoc + cjag_Point2D$Float_getY($p_0);
        }
        $xThreshold = $avgLoc / $group.$size0;
        $points = ju_AbstractList_iterator($group);
        var$18 = $xThreshold;
        while (ju_AbstractList$1_hasNext($points)) {
            $p_0 = ju_AbstractList$1_next($points);
            cjag_Point2D$Float_setLocation($p_0, cjag_Point2D$Float_getX($p_0), var$18);
        }
    }
    $rulings = ju_HashMap$HashMapEntrySet_iterator(ju_HashMap_entrySet($linesToPoints));
    while (ju_HashMap$AbstractMapIterator_hasNext($rulings)) {
        $ltp = ju_HashMap$EntryIterator_next($rulings);
        $p = $ltp.$value2.data;
        cjag_Line2D_setLine($ltp.$key, $p[0], $p[1]);
    }
}
function tt_Utils__clinit_() {
    var var$1, var$2, var$3, var$4;
    var$1 = jl_String_split(jl_String_split(jl_System_getProperty($rt_s(71)), $rt_s(126)).data[0], $rt_s(127)).data;
    if (var$1.length < 2) {
        var$2 = 1;
        var$3 = jl_Integer_parseInt(var$1[0]);
    } else {
        var$2 = jl_Integer_parseInt(var$1[0]);
        var$3 = jl_Integer_parseInt(var$1[1]);
    }
    var$2 = var$2 == 1 && var$3 <= 6 ? 1 : 0;
    a: {
        b: {
            var$4 = jl_System_getProperty($rt_s(128));
            if (var$2) {
                if (var$4 === null)
                    break b;
                if (!jl_String_equals(var$4, $rt_s(129)))
                    break b;
            }
            var$2 = 1;
            break a;
        }
        var$2 = 0;
    }
    tt_Utils_useQuickSort = var$2;
}
function tt_Table() {
    var a = this; tt_Rectangle.call(a);
    a.$extractionMethod = null;
    a.$rowCount = 0;
    a.$colCount = 0;
    a.$cells = null;
    a.$memoizedRows = null;
}
function tt_Table__init_(var_0) {
    var var_1 = new tt_Table();
    tt_Table__init_2(var_1, var_0);
    return var_1;
}
function tt_Table__init_0(var_0) {
    var var_1 = new tt_Table();
    tt_Table__init_1(var_1, var_0);
    return var_1;
}
function tt_Table__init_2($this, $extractionMethod) {
    cjag_Rectangle2D__init_0($this);
    $this.$rowCount = 0;
    $this.$colCount = 0;
    $this.$cells = ju_TreeMap__init_(null);
    $this.$memoizedRows = null;
    $this.$extractionMethod = $extractionMethod;
}
function tt_Table__init_1($this, $extractionAlgorithm) {
    tt_Table__init_2($this, $extractionAlgorithm.$toString());
}
function tt_Table_add($this, $chunk, $row, $col) {
    var $cp, $old;
    tt_Rectangle_merge($this, $chunk);
    $this.$rowCount = jl_Math_max($this.$rowCount, $row + 1 | 0);
    $this.$colCount = jl_Math_max($this.$colCount, $col + 1 | 0);
    $cp = tt_CellPosition__init_($row, $col);
    $old = ju_TreeMap_get($this.$cells, $cp);
    if ($old !== null)
        tt_RectangularTextContainer_merge($chunk, $old);
    ju_TreeMap_put($this.$cells, $cp, $chunk);
    $this.$memoizedRows = null;
}
function tt_Table_getRows($this) {
    var var$1, var$2, var$3, var$4, var$5;
    if ($this.$memoizedRows === null) {
        var$1 = ju_ArrayList__init_();
        var$2 = 0;
        while (var$2 < $this.$rowCount) {
            var$3 = ju_ArrayList__init_();
            ju_ArrayList_add(var$1, var$3);
            var$4 = 0;
            while (var$4 < $this.$colCount) {
                var$5 = ju_TreeMap_get($this.$cells, tt_CellPosition__init_(var$2, var$4));
                if (var$5 === null) {
                    tt_TextChunk_$callClinit();
                    var$5 = tt_TextChunk_EMPTY;
                }
                ju_ArrayList_add(var$3, var$5);
                var$4 = var$4 + 1 | 0;
            }
            var$2 = var$2 + 1 | 0;
        }
        $this.$memoizedRows = var$1;
    }
    return $this.$memoizedRows;
}
function tt_RectangularTextContainer() {
    tt_Rectangle.call(this);
}
function tt_RectangularTextContainer_merge($this, $other) {
    if (tt_Rectangle_compareTo($this, $other) < 0)
        ju_AbstractCollection_addAll($this.$getTextElements(), $other.$getTextElements());
    else
        ju_ArrayList_addAll($this.$getTextElements(), 0, $other.$getTextElements());
    tt_Rectangle_merge($this, $other);
    return $this;
}
function tt_RectangularTextContainer_toString($this) {
    var $sb, $s, var$3, var$4;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    $s = tt_Rectangle_toString($this);
    jl_AbstractStringBuilder_append($sb, jl_String_substring($s, 0, jl_String_length($s) - 1 | 0));
    var$3 = $rt_createArray(jl_Object, 1);
    if ($this.$getText1() === null)
        var$4 = $rt_s(57);
    else {
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(130));
        jl_AbstractStringBuilder_append(var$4, $this.$getText1());
        jl_AbstractStringBuilder_append(var$4, $rt_s(130));
        var$4 = jl_AbstractStringBuilder_toString(var$4);
    }
    var$3.data[0] = var$4;
    jl_AbstractStringBuilder_append($sb, jl_String_format($rt_s(131), var$3));
    return jl_AbstractStringBuilder_toString($sb);
}
function tt_TextChunk() {
    tt_RectangularTextContainer.call(this);
    this.$textElements1 = null;
}
var tt_TextChunk_EMPTY = null;
var tt_TextChunk_directionalities = null;
function tt_TextChunk_$callClinit() {
    tt_TextChunk_$callClinit = $rt_eraseClinit(tt_TextChunk);
    tt_TextChunk__clinit_();
}
function tt_TextChunk__init_(var_0) {
    var var_1 = new tt_TextChunk();
    tt_TextChunk__init_0(var_1, var_0);
    return var_1;
}
function tt_TextChunk__init_1(var_0) {
    var var_1 = new tt_TextChunk();
    tt_TextChunk__init_2(var_1, var_0);
    return var_1;
}
function tt_TextChunk__init_0($this, $textElement) {
    tt_TextChunk_$callClinit();
    tt_Rectangle__init_0($this, $textElement.$y1, $textElement.$x1, $textElement.$width0, $textElement.$height0);
    $this.$textElements1 = ju_ArrayList__init_();
    tt_TextChunk_add($this, $textElement);
}
function tt_TextChunk__init_2($this, $textElements) {
    var $i;
    tt_TextChunk_$callClinit();
    tt_TextChunk__init_0($this, $textElements.$get(0));
    $i = 1;
    while ($i < $textElements.$size()) {
        tt_TextChunk_add($this, $textElements.$get($i));
        $i = $i + 1 | 0;
    }
}
function tt_TextChunk_groupByDirectionality($this, $isLtrDominant) {
    if ($this.$textElements1.$size0 > 0)
        return tt_TextChunk__init_1($this.$textElements1);
    $isLtrDominant = new jl_IllegalArgumentException;
    jl_Throwable__init_0($isLtrDominant);
    $rt_throw($isLtrDominant);
}
function tt_TextChunk_isLtrDominant($this) {
    var $ltrCnt, $rtlCnt, $i, $elementText, $j, $dir, var$7, var$8, var$9, var$10, var$11, var$12;
    $ltrCnt = 0;
    $rtlCnt = 0;
    $i = 0;
    while ($i < $this.$textElements1.$size0) {
        $elementText = ju_ArrayList_get($this.$textElements1, $i).$text;
        $j = 0;
        while ($j < jl_String_length($elementText)) {
            $dir = jl_String_charAt($elementText, $j);
            var$7 = 0;
            var$8 = 0;
            var$9 = (-1);
            var$10 = jl_String_length($rt_s(132)) - 1 | 0;
            a: {
                while (true) {
                    if (var$8 > var$10) {
                        var$9 = var$9 - ($dir >= var$7 ? 0 : 1) | 0;
                        break a;
                    }
                    var$9 = (var$8 + var$10 | 0) >> 1;
                    var$7 = jl_String_charAt($rt_s(132), var$9);
                    var$11 = $rt_compare($dir, var$7);
                    if (var$11 > 0) {
                        var$8 = var$9 + 1 | 0;
                        continue;
                    }
                    if (!var$11)
                        break;
                    var$10 = var$9 - 1 | 0;
                }
            }
            var$12 = cjl_Character_bidiValues.data;
            var$11 = var$9 * 2 | 0;
            if ($dir > var$12[var$11])
                $dir = (-1);
            else {
                var$11 = cjl_Character_bidiValues.data[var$11 + 1 | 0];
                $dir = var$11 < 256 ? (var$11 - 1 | 0) << 24 >> 24 : ((($dir & 1) != 1 ? var$11 & 255 : var$11 >> 8) - 1 | 0) << 24 >> 24;
            }
            if (!($dir && $dir != 14 && $dir != 15))
                $ltrCnt = $ltrCnt + 1 | 0;
            else if (!($dir != 1 && $dir != 2 && $dir != 16 && $dir != 17))
                $rtlCnt = $rtlCnt + 1 | 0;
            $j = $j + 1 | 0;
        }
        $i = $i + 1 | 0;
    }
    return $rt_compare($ltrCnt, $rtlCnt);
}
function tt_TextChunk_add($this, $textElement) {
    ju_ArrayList_add($this.$textElements1, $textElement);
    tt_Rectangle_merge($this, $textElement);
}
function tt_TextChunk_getTextElements($this) {
    return $this.$textElements1;
}
function tt_TextChunk_getText($this) {
    var $sb, var$2;
    if (!$this.$textElements1.$size0)
        return $rt_s(44);
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    var$2 = ju_AbstractList_iterator($this.$textElements1);
    while (ju_AbstractList$1_hasNext(var$2)) {
        jl_AbstractStringBuilder_append($sb, ju_AbstractList$1_next(var$2).$text);
    }
    var$2 = jl_AbstractStringBuilder_toString($sb);
    $sb = cjt_Normalizer$Form_NFKC;
    if (var$2 !== null && $sb !== null) {
        a: {
            cjt_Normalizer$1_$callClinit();
            switch (cjt_Normalizer$1_$SwitchMap$compat$java$text$Normalizer$Form.data[$sb.$ordinal]) {
                case 1:
                    $sb = $rt_str($rt_ustr(var$2).normalize("NFC"));
                    break a;
                case 2:
                    $sb = $rt_str($rt_ustr(var$2).normalize("NFD"));
                    break a;
                case 3:
                    $sb = $rt_str($rt_ustr(var$2).normalize("NFKC"));
                    break a;
                case 4:
                    $sb = $rt_str($rt_ustr(var$2).normalize("NFKD"));
                    break a;
                default:
            }
            $sb = null;
        }
        return jl_String_trim($sb);
    }
    $sb = new jl_NullPointerException;
    jl_Throwable__init_0($sb);
    $rt_throw($sb);
}
function tt_TextChunk_isSameChar0($this, $c) {
    var var$2;
    var$2 = $rt_createArray(jl_Character, 1);
    var$2.data[0] = $c;
    return tt_TextChunk_isSameChar($this, var$2);
}
function tt_TextChunk_isSameChar($this, $c) {
    var $s, $chars, $i;
    $s = tt_TextChunk_getText($this);
    $chars = ju_Arrays_asList($c);
    $i = 0;
    while ($i < jl_String_length($s)) {
        if (!ju_AbstractCollection_contains($chars, jl_Character_valueOf(jl_String_charAt($s, $i))))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
}
function tt_TextChunk_splitAt($this, $i) {
    var $rv, var$3, var$4;
    if ($i >= 1 && $i < $this.$textElements1.$size0) {
        $rv = $rt_createArray(tt_TextChunk, 2);
        var$3 = $rv.data;
        var$3[0] = tt_TextChunk__init_1(ju_AbstractList_subList($this.$textElements1, 0, $i));
        var$3[1] = tt_TextChunk__init_1(ju_AbstractList_subList($this.$textElements1, $i, $this.$textElements1.$size0));
        return $rv;
    }
    var$4 = new jl_IllegalArgumentException;
    jl_Throwable__init_0(var$4);
    $rt_throw(var$4);
}
function tt_TextChunk_squeeze($this, $c, $minRunLength) {
    var $lastChar, $subSequenceLength, $subSequenceStart, $rv, $i, $text, $currentChar, $t;
    $lastChar = null;
    $subSequenceLength = 0;
    $subSequenceStart = 0;
    $rv = ju_ArrayList__init_();
    $i = 0;
    a: {
        while (true) {
            if ($i >= $this.$textElements1.$size0)
                break a;
            $text = ju_ArrayList_get($this.$textElements1, $i).$text;
            $currentChar = jl_String_length($text) <= 1 ? jl_Character_valueOf(jl_String_charAt($text, 0)) : jl_Character_valueOf(jl_String_charAt(jl_String_trim($text), 0));
            if ($lastChar !== null && jl_Character_equals($currentChar, $c) && jl_Character_equals($lastChar, $currentChar))
                $subSequenceLength = $subSequenceLength + 1 | 0;
            else {
                if (!(!($lastChar !== null && !jl_Character_equals($lastChar, $currentChar)) && ($i + 1 | 0) != $this.$textElements1.$size0) && $subSequenceLength >= $minRunLength)
                    break;
                $subSequenceLength = 1;
                $subSequenceStart = $i;
            }
            $i = $i + 1 | 0;
            $lastChar = $currentChar;
        }
        if (!$subSequenceStart && $subSequenceLength <= ($this.$textElements1.$size0 - 1 | 0))
            $t = tt_TextChunk_splitAt($this, $subSequenceLength);
        else {
            $t = tt_TextChunk_splitAt($this, $subSequenceStart);
            ju_ArrayList_add($rv, $t.data[0]);
        }
        ju_AbstractCollection_addAll($rv, tt_TextChunk_squeeze($t.data[1], $c, $minRunLength));
    }
    if (ju_AbstractCollection_isEmpty($rv)) {
        if ($subSequenceLength >= $minRunLength && $subSequenceLength < $this.$textElements1.$size0)
            ju_ArrayList_add($rv, tt_TextChunk_splitAt($this, $subSequenceStart).data[0]);
        else
            ju_ArrayList_add($rv, $this);
    }
    return $rv;
}
function tt_TextChunk_hashCode($this) {
    return (31 * cjag_Rectangle2D_hashCode($this) | 0) + ($this.$textElements1 === null ? 0 : ju_AbstractList_hashCode($this.$textElements1)) | 0;
}
function tt_TextChunk_equals($this, $obj) {
    var $other;
    if ($this === $obj)
        return 1;
    if (!cjag_Rectangle2D_equals($this, $obj))
        return 0;
    if (jl_Object_getClass($this) !== jl_Object_getClass($obj))
        return 0;
    a: {
        $other = $obj;
        if ($this.$textElements1 === null) {
            if ($other.$textElements1 === null)
                break a;
            return 0;
        }
        if (!ju_AbstractList_equals($this.$textElements1, $other.$textElements1))
            return 0;
    }
    return 1;
}
function tt_TextChunk_allSameChar($textChunks) {
    var $hasHadAtLeastOneNonEmptyTextChunk, $first, $tc;
    tt_TextChunk_$callClinit();
    if ($textChunks.$size0 == 1)
        return 0;
    $hasHadAtLeastOneNonEmptyTextChunk = 0;
    $first = 0;
    $textChunks = ju_AbstractList_iterator($textChunks);
    while (ju_AbstractList$1_hasNext($textChunks)) {
        $tc = ju_AbstractList$1_next($textChunks);
        if (!jl_String_length(tt_TextChunk_getText($tc)))
            continue;
        if (!$first)
            $first = jl_String_charAt(tt_TextChunk_getText($tc), 0);
        else {
            $hasHadAtLeastOneNonEmptyTextChunk = 1;
            if (!tt_TextChunk_isSameChar0($tc, jl_Character_valueOf($first)))
                return 0;
        }
    }
    return $hasHadAtLeastOneNonEmptyTextChunk;
}
function tt_TextChunk__clinit_() {
    var var$1;
    var$1 = new tt_TextChunk;
    tt_TextChunk_$callClinit();
    tt_Rectangle__init_0(var$1, 0.0, 0.0, 0.0, 0.0);
    var$1.$textElements1 = ju_ArrayList__init_();
    tt_TextChunk_EMPTY = var$1;
    tt_TextChunk_directionalities = ju_HashMap__init_();
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(6), tt_TextChunk$DirectionalityOptions_LTR);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(9), tt_TextChunk$DirectionalityOptions_NONE);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(7), tt_TextChunk$DirectionalityOptions_LTR);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(3), tt_TextChunk$DirectionalityOptions_LTR);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(4), tt_TextChunk$DirectionalityOptions_LTR);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(5), tt_TextChunk$DirectionalityOptions_LTR);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(0), tt_TextChunk$DirectionalityOptions_LTR);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(14), tt_TextChunk$DirectionalityOptions_LTR);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(15), tt_TextChunk$DirectionalityOptions_LTR);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(8), tt_TextChunk$DirectionalityOptions_NONE);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(13), tt_TextChunk$DirectionalityOptions_NONE);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(10), tt_TextChunk$DirectionalityOptions_NONE);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(18), tt_TextChunk$DirectionalityOptions_NONE);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(1), tt_TextChunk$DirectionalityOptions_RTL);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(2), tt_TextChunk$DirectionalityOptions_RTL);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(16), tt_TextChunk$DirectionalityOptions_RTL);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(17), tt_TextChunk$DirectionalityOptions_RTL);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(11), tt_TextChunk$DirectionalityOptions_RTL);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf((-1)), tt_TextChunk$DirectionalityOptions_NONE);
    ju_HashMap_putImpl(tt_TextChunk_directionalities, jl_Byte_valueOf(12), tt_TextChunk$DirectionalityOptions_NONE);
}
function tte_BasicExtractionAlgorithm$1() {
    jl_Object.call(this);
    this.$this$02 = null;
}
function tte_BasicExtractionAlgorithm$1_compare($this, $arg0, $arg1) {
    return $rt_compare($arg0.$x10, $arg1.$x10);
}
function tte_BasicExtractionAlgorithm$1_compare0($this, var$1, var$2) {
    return tte_BasicExtractionAlgorithm$1_compare($this, var$1, var$2);
}
function ju_Collections() {
    jl_Object.call(this);
}
var ju_Collections_EMPTY_SET = null;
var ju_Collections_EMPTY_MAP = null;
var ju_Collections_EMPTY_LIST = null;
var ju_Collections_naturalOrder = null;
var ju_Collections_reverseOrder = null;
function ju_Collections_sort($list, $c) {
    var $array, $i, var$5;
    if ($c === null)
        $c = ju_Collections_naturalOrder;
    $array = $rt_createArray(jl_Object, $list.$size0);
    ju_AbstractCollection_toArray($list, $array);
    ju_Arrays_sort($array, $c);
    $i = 0;
    while (true) {
        var$5 = $array.data;
        if ($i >= var$5.length)
            break;
        ju_ArrayList_set($list, $i, var$5[$i]);
        $i = $i + 1 | 0;
    }
}
function ju_Collections_min($coll, $comp) {
    var $iter, $min, $elem;
    if ($comp === null)
        $comp = ju_Collections_naturalOrder;
    $iter = ju_AbstractList_iterator($coll);
    $min = ju_AbstractList$1_next($iter);
    while (ju_AbstractList$1_hasNext($iter)) {
        $elem = ju_AbstractList$1_next($iter);
        if ($comp.$compare0($elem, $min) < 0)
            $min = $elem;
    }
    return $min;
}
function ju_Collections__clinit_() {
    ju_Collections_EMPTY_SET = new ju_Collections$5;
    ju_Collections_EMPTY_MAP = new ju_Collections$6;
    ju_Collections_EMPTY_LIST = new ju_Collections$3;
    ju_Collections_naturalOrder = new ju_Collections$_clinit_$lambda$_61_0;
    ju_Collections_reverseOrder = new ju_Collections$_clinit_$lambda$_61_1;
}
function tte_BasicExtractionAlgorithm$2() {
    jl_Object.call(this);
    this.$this$03 = null;
}
function tte_BasicExtractionAlgorithm$2_compare($this, $o1, $o2) {
    return jl_Float_compareTo(jl_Float__init_(tt_Rectangle_getLeft($o1)), jl_Float_valueOf(tt_Rectangle_getLeft($o2)));
}
function tte_BasicExtractionAlgorithm$2_compare0($this, var$1, var$2) {
    return tte_BasicExtractionAlgorithm$2_compare($this, var$1, var$2);
}
function tt_Line() {
    tt_Rectangle.call(this);
    this.$textChunks = null;
}
var tt_Line_WHITE_SPACE_CHARS = null;
function tt_Line__init_() {
    var var_0 = new tt_Line();
    tt_Line__init_0(var_0);
    return var_0;
}
function tt_Line__init_0($this) {
    cjag_Rectangle2D__init_0($this);
    $this.$textChunks = ju_ArrayList__init_();
}
function tt_Line_getTextElements($this) {
    return $this.$textChunks;
}
function tt_Line_addTextChunk($this, $textChunk) {
    if (!ju_AbstractCollection_isEmpty($this.$textChunks))
        tt_Rectangle_merge($this, $textChunk);
    else
        cjag_Rectangle2D$Float_setRect1($this, $textChunk);
    ju_ArrayList_add($this.$textChunks, $textChunk);
}
function tt_Line_toString($this) {
    var $sb, $s, $te, var$4;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    $s = tt_Rectangle_toString($this);
    jl_StringBuilder_append8($sb, $s, 0, jl_String_length($s) - 1 | 0);
    jl_AbstractStringBuilder_append($sb, $rt_s(133));
    $s = ju_AbstractList_iterator($this.$textChunks);
    while (ju_AbstractList$1_hasNext($s)) {
        $te = ju_AbstractList$1_next($s);
        var$4 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$4);
        jl_AbstractStringBuilder_append(var$4, $rt_s(134));
        jl_AbstractStringBuilder_append(var$4, tt_TextChunk_getText($te));
        jl_AbstractStringBuilder_append(var$4, $rt_s(135));
        jl_AbstractStringBuilder_append($sb, jl_AbstractStringBuilder_toString(var$4));
    }
    jl_AbstractStringBuilder_append1($sb, 93);
    return jl_AbstractStringBuilder_toString($sb);
}
function tt_Line__clinit_() {
    var var$1, var$2;
    var$1 = $rt_createArray(jl_Character, 5);
    var$2 = var$1.data;
    var$2[0] = jl_Character_valueOf(32);
    var$2[1] = jl_Character_valueOf(9);
    var$2[2] = jl_Character_valueOf(13);
    var$2[3] = jl_Character_valueOf(10);
    var$2[4] = jl_Character_valueOf(12);
    tt_Line_WHITE_SPACE_CHARS = var$1;
}
function oacc_CSVPrinter() {
    var a = this; jl_Object.call(a);
    a.$out0 = null;
    a.$format1 = null;
    a.$newRecord = 0;
}
function oacc_CSVPrinter_close($this) {
    oacc_CSVPrinter_close0($this, 0);
}
function oacc_CSVPrinter_close0($this, $flush) {
    if (!(!$flush && !$this.$format1.$autoFlush0))
        oacc_CSVPrinter_flush($this);
}
function oacc_CSVPrinter_flush($this) {
    return;
}
function oacc_CSVPrinter_print($this, $value) {
    oacc_CSVFormat_print($this.$format1, $value, $this.$out0, $this.$newRecord);
    $this.$newRecord = 0;
}
function oacc_CSVPrinter_printComment($this, $comment) {
    var $i, $c;
    if (!oacc_CSVFormat_isCommentMarkerSet($this.$format1))
        return;
    if (!$this.$newRecord)
        oacc_CSVPrinter_println($this);
    ji_StringWriter_write0($this.$out0, $this.$format1.$commentMarker.$charValue());
    ji_StringWriter_write0($this.$out0, 32);
    $i = 0;
    while ($i < $comment.$length()) {
        a: {
            b: {
                $c = $comment.$charAt($i);
                switch ($c) {
                    case 13:
                        $c = $i + 1 | 0;
                        if ($c >= $comment.$length())
                            break b;
                        if ($comment.$charAt($c) != 10)
                            break b;
                        $i = $c;
                        break b;
                    case 10:
                        break b;
                    default:
                }
                ji_StringWriter_write0($this.$out0, $c);
                break a;
            }
            oacc_CSVPrinter_println($this);
            ji_StringWriter_write0($this.$out0, $this.$format1.$commentMarker.$charValue());
            ji_StringWriter_write0($this.$out0, 32);
        }
        $i = $i + 1 | 0;
    }
    oacc_CSVPrinter_println($this);
}
function oacc_CSVPrinter_println($this) {
    oacc_CSVFormat_println($this.$format1, $this.$out0);
    $this.$newRecord = 1;
}
function oacc_CSVPrinter_printRecord0($this, $values) {
    $values = ju_AbstractList_iterator($values);
    while (ju_AbstractList$1_hasNext($values)) {
        oacc_CSVPrinter_print($this, ju_AbstractList$1_next($values));
    }
    oacc_CSVPrinter_println($this);
}
function oacc_CSVPrinter_printRecord($this, $values) {
    oacc_CSVFormat_printRecord($this.$format1, $this.$out0, $values);
    $this.$newRecord = 1;
}
function p_PDGraphicsState() {
    jl_Object.call(this);
}
function cjag_Point2D() {
    jl_Object.call(this);
}
function cjag_Point2D_hashCode($this) {
    var var$1;
    var$1 = Long_xor($rt_doubleToLongBits(cjag_Point2D$Float_getX($this)), Long_mul($rt_doubleToLongBits(cjag_Point2D$Float_getY($this)), Long_fromInt(31)));
    return var$1.lo ^ var$1.hi;
}
function cjag_Point2D_equals($this, $obj) {
    var $p2d;
    if (!($obj instanceof cjag_Point2D))
        return jl_Object_equals($this, $obj);
    $p2d = $obj;
    return cjag_Point2D$Float_getX($this) === cjag_Point2D$Float_getX($p2d) && cjag_Point2D$Float_getY($this) === cjag_Point2D$Float_getY($p2d) ? 1 : 0;
}
function cjag_Point2D$Float() {
    var a = this; cjag_Point2D.call(a);
    a.$x3 = 0.0;
    a.$y3 = 0.0;
}
function cjag_Point2D$Float__init_(var_0, var_1) {
    var var_2 = new cjag_Point2D$Float();
    cjag_Point2D$Float__init_0(var_2, var_0, var_1);
    return var_2;
}
function cjag_Point2D$Float__init_0($this, $x, $y) {
    $this.$x3 = $x;
    $this.$y3 = $y;
}
function cjag_Point2D$Float_getX($this) {
    return $this.$x3;
}
function cjag_Point2D$Float_getY($this) {
    return $this.$y3;
}
function cjag_Point2D$Float_setLocation($this, $x, $y) {
    $this.$x3 = $x;
    $this.$y3 = $y;
}
function cjag_Point2D$Float_toString($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(136));
    var$1 = jl_StringBuilder_append0(var$1, $this.$x3);
    jl_AbstractStringBuilder_append(var$1, $rt_s(91));
    var$1 = jl_StringBuilder_append0(var$1, $this.$y3);
    jl_AbstractStringBuilder_append(var$1, $rt_s(56));
    return jl_AbstractStringBuilder_toString(var$1);
}
function ju_Map$Entry() {
}
function ju_MapEntry() {
    var a = this; jl_Object.call(a);
    a.$key = null;
    a.$value2 = null;
}
function ju_MapEntry__init_0(var_0, var_1) {
    var var_2 = new ju_MapEntry();
    ju_MapEntry__init_(var_2, var_0, var_1);
    return var_2;
}
function ju_MapEntry__init_($this, $theKey, $theValue) {
    $this.$key = $theKey;
    $this.$value2 = $theValue;
}
function ju_MapEntry_getKey($this) {
    return $this.$key;
}
function ju_MapEntry_getValue($this) {
    return $this.$value2;
}
function ju_HashMap$HashEntry() {
    var a = this; ju_MapEntry.call(a);
    a.$origKeyHash = 0;
    a.$next2 = null;
}
function p_PDFGraphicsStreamEngine$FinishConsumer() {
}
function p_PDFGraphicsStreamEngine$getObjectsAsync$lambda$_19_0() {
    jl_Object.call(this);
    this.$_02 = null;
}
function p_PDFGraphicsStreamEngine$getObjectsAsync$lambda$_19_0_complete(var$0, var$1) {
    otpp_AsyncCallbackWrapper_complete(var$0.$_02, var$1);
}
function p_PDFGraphicsStreamEngine$getObjectsAsync$lambda$_19_0_complete$exported$0(var$0, var$1) {
    p_PDFGraphicsStreamEngine$getObjectsAsync$lambda$_19_0_complete(var$0, $rt_str(var$1));
}
function tt_Utils$1() {
    var a = this; ju_AbstractList.call(a);
    a.$val$begin = 0;
    a.$val$end = 0;
}
function tt_Utils$1_get($this, $index) {
    return jl_Integer_valueOf($this.$val$begin + $index | 0);
}
function tt_Utils$1_size($this) {
    return $this.$val$end - $this.$val$begin | 0;
}
function tt_Utils$1_get0($this, var$1) {
    return tt_Utils$1_get($this, var$1);
}
function tt_PageIterator() {
    var a = this; jl_Object.call(a);
    a.$oe = null;
    a.$pageIndexIterator = null;
}
function tt_PageIterator_hasNext($this) {
    return ju_AbstractList$1_hasNext($this.$pageIndexIterator);
}
function tt_PageIterator_next($this) {
    var $page, $e, var$3, $$je, $ptr, $tmp;
    $ptr = 0;
    if ($rt_resuming()) {
        var $thread = $rt_nativeThread();
        $ptr = $thread.pop();var$3 = $thread.pop();$e = $thread.pop();$page = $thread.pop();$this = $thread.pop();
    }
    main: while (true) { switch ($ptr) {
    case 0:
        $page = null;
        if (!tt_PageIterator_hasNext($this)) {
            $page = new jl_IllegalStateException;
            jl_Throwable__init_0($page);
            $rt_throw($page);
        }
        try {
            $e = $this.$oe;
            var$3 = ju_AbstractList$1_next($this.$pageIndexIterator);
            $ptr = 1;
            continue main;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof ji_IOException) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $e.$printStackTrace();
        return $page;
    case 1:
        a: {
            try {
                $tmp = tt_ObjectExtractor_extractPage($e, var$3);
                if ($rt_suspending()) {
                    break main;
                }
                $e = $tmp;
                $page = $e;
                break a;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof ji_IOException) {
                    $e = $$je;
                } else {
                    throw $$e;
                }
            }
            $e.$printStackTrace();
            $e = $page;
        }
        return $e;
    default: $rt_invalidPointer();
    }}
    $rt_nativeThread().push($this, $page, $e, var$3, $ptr);
}
function ju_Arrays$ArrayAsList() {
    ju_AbstractList.call(this);
    this.$array1 = null;
}
function ju_Arrays$ArrayAsList_get($this, $index) {
    return $this.$array1.data[$index];
}
function ju_Arrays$ArrayAsList_size($this) {
    return $this.$array1.data.length;
}
function jl_Boolean() {
    jl_Object.call(this);
    this.$value3 = 0;
}
var jl_Boolean_TRUE = null;
var jl_Boolean_FALSE = null;
var jl_Boolean_TYPE = null;
function jl_Boolean__init_(var_0) {
    var var_1 = new jl_Boolean();
    jl_Boolean__init_0(var_1, var_0);
    return var_1;
}
function jl_Boolean__init_0($this, $value) {
    $this.$value3 = $value;
}
function jl_Boolean_valueOf($value) {
    return !$value ? jl_Boolean_FALSE : jl_Boolean_TRUE;
}
function jl_Boolean_toString($value) {
    return !$value ? $rt_s(137) : $rt_s(129);
}
function jl_Boolean_toString0($this) {
    return jl_Boolean_toString($this.$value3);
}
function jl_Boolean_hashCode($this) {
    return !$this.$value3 ? 1237 : 1231;
}
function jl_Boolean_equals($this, $obj) {
    if ($this === $obj)
        return 1;
    return $obj instanceof jl_Boolean && $obj.$value3 == $this.$value3 ? 1 : 0;
}
function jl_Boolean__clinit_() {
    jl_Boolean_TRUE = jl_Boolean__init_(1);
    jl_Boolean_FALSE = jl_Boolean__init_(0);
    jl_Boolean_TYPE = $rt_cls($rt_booleancls());
}
function tt_Ruling() {
    cjag_Line2D$Float.call(this);
}
var tt_Ruling_PERPENDICULAR_PIXEL_EXPAND_AMOUNT = 0;
var tt_Ruling_COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT = 0;
var tt_Ruling_$assertionsDisabled = 0;
function tt_Ruling__init_(var_0, var_1) {
    var var_2 = new tt_Ruling();
    tt_Ruling__init_0(var_2, var_0, var_1);
    return var_2;
}
function tt_Ruling__init_0($this, $p1, $p2) {
    cjag_Line2D$Float__init_0($this, $p1, $p2);
    tt_Ruling_normalize($this);
}
function tt_Ruling_normalize($this) {
    var $angle;
    $angle = tt_Ruling_getAngle($this);
    if (!(!tt_Utils_within($angle, 0.0, 1.0) && !tt_Utils_within($angle, 180.0, 1.0)))
        cjag_Line2D$Float_setLine0($this, $this.$x10, $this.$y10, $this.$x2, $this.$y10);
    else if (!(!tt_Utils_within($angle, 90.0, 1.0) && !tt_Utils_within($angle, 270.0, 1.0)))
        cjag_Line2D$Float_setLine0($this, $this.$x10, $this.$y10, $this.$x10, $this.$y2);
}
function tt_Ruling_vertical($this) {
    return tt_Ruling_length($this) > 0.0 && tt_Utils_feq($this.$x10, $this.$x2) ? 1 : 0;
}
function tt_Ruling_horizontal($this) {
    return tt_Ruling_length($this) > 0.0 && tt_Utils_feq($this.$y10, $this.$y2) ? 1 : 0;
}
function tt_Ruling_oblique($this) {
    return !tt_Ruling_vertical($this) && !tt_Ruling_horizontal($this) ? 1 : 0;
}
function tt_Ruling_getPosition($this) {
    var var$1;
    if (tt_Ruling_oblique($this)) {
        var$1 = new jl_UnsupportedOperationException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    return !tt_Ruling_vertical($this) ? $this.$y10 : $this.$x10;
}
function tt_Ruling_getStart($this) {
    var var$1;
    if (tt_Ruling_oblique($this)) {
        var$1 = new jl_UnsupportedOperationException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    return !tt_Ruling_vertical($this) ? $this.$x10 : $this.$y10;
}
function tt_Ruling_setStart($this, $v) {
    var var$2;
    if (tt_Ruling_oblique($this)) {
        var$2 = new jl_UnsupportedOperationException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    if (!tt_Ruling_vertical($this))
        tt_Ruling_setLeft($this, $v);
    else
        tt_Ruling_setTop($this, $v);
}
function tt_Ruling_getEnd($this) {
    var var$1;
    if (tt_Ruling_oblique($this)) {
        var$1 = new jl_UnsupportedOperationException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    return !tt_Ruling_vertical($this) ? $this.$x2 : $this.$y2;
}
function tt_Ruling_setEnd($this, $v) {
    var var$2;
    if (tt_Ruling_oblique($this)) {
        var$2 = new jl_UnsupportedOperationException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    if (!tt_Ruling_vertical($this))
        tt_Ruling_setRight($this, $v);
    else
        tt_Ruling_setBottom($this, $v);
}
function tt_Ruling_perpendicularTo($this, $other) {
    return tt_Ruling_vertical($this) != tt_Ruling_horizontal($other) ? 0 : 1;
}
function tt_Ruling_nearlyIntersects($this, $another, $colinearOrParallelExpandAmount) {
    var var$3;
    if (cjag_Line2D_intersectsLine($this, $another))
        return 1;
    if (!tt_Ruling_perpendicularTo($this, $another)) {
        var$3 = $colinearOrParallelExpandAmount;
        $colinearOrParallelExpandAmount = cjag_Line2D_intersectsLine(tt_Ruling_expand($this, var$3), tt_Ruling_expand($another, var$3));
    } else
        $colinearOrParallelExpandAmount = cjag_Line2D_intersectsLine(tt_Ruling_expand($this, tt_Ruling_PERPENDICULAR_PIXEL_EXPAND_AMOUNT), $another);
    return $colinearOrParallelExpandAmount;
}
function tt_Ruling_length($this) {
    return jl_Math_sqrt(jl_Math_pow($this.$x10 - $this.$x2, 2.0) + jl_Math_pow($this.$y10 - $this.$y2, 2.0));
}
function tt_Ruling_intersect($this, $clip) {
    var $clipee, $e, $$je;
    $clipee = null;
    a: {
        try {
            $e = jl_Object_clone($this);
            $clipee = $e;
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_CloneNotSupportedException) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        jl_Throwable_printStackTrace($e);
        $e = $clipee;
    }
    $clipee = new tt_CohenSutherlandClipping;
    tt_CohenSutherlandClipping_setClip($clipee, $clip);
    if (!tt_CohenSutherlandClipping_clip($clipee, $e))
        return $this;
    return tt_Ruling__init_(cjag_Line2D$Float_getP1($e), cjag_Line2D$Float_getP2($e));
}
function tt_Ruling_expand($this, $amount) {
    var $r, $e, $$je;
    $r = null;
    a: {
        try {
            $e = jl_Object_clone($this);
            $r = $e;
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_CloneNotSupportedException) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        jl_Throwable_printStackTrace($e);
        $e = $r;
    }
    tt_Ruling_setStart($e, tt_Ruling_getStart($this) - $amount);
    tt_Ruling_setEnd($e, tt_Ruling_getEnd($this) + $amount);
    return $e;
}
function tt_Ruling_intersectionPoint($this, $other) {
    var $horizontal, $vertical, $vertical_0;
    $horizontal = tt_Ruling_expand($this, tt_Ruling_PERPENDICULAR_PIXEL_EXPAND_AMOUNT);
    $vertical = tt_Ruling_expand($other, tt_Ruling_PERPENDICULAR_PIXEL_EXPAND_AMOUNT);
    if (!cjag_Line2D_intersectsLine($horizontal, $vertical))
        return null;
    if (!(tt_Ruling_horizontal($horizontal) && tt_Ruling_vertical($vertical))) {
        if (tt_Ruling_vertical($horizontal) && tt_Ruling_horizontal($vertical)) {
            $vertical_0 = $horizontal;
            $horizontal = $vertical;
            $vertical = $vertical_0;
        } else {
            $horizontal = new jl_IllegalArgumentException;
            jl_Throwable__init_($horizontal, $rt_s(138));
            $rt_throw($horizontal);
        }
    }
    return cjag_Point2D$Float__init_($vertical.$x10, $horizontal.$y10);
}
function tt_Ruling_equals($this, $other) {
    var $o;
    if ($this === $other)
        return 1;
    if (!($other instanceof tt_Ruling))
        return 0;
    $o = $other;
    return cjag_Point2D_equals(cjag_Line2D$Float_getP1($this), cjag_Line2D$Float_getP1($o)) && cjag_Point2D_equals(cjag_Line2D$Float_getP2($this), cjag_Line2D$Float_getP2($o)) ? 1 : 0;
}
function tt_Ruling_hashCode($this) {
    return jl_Object_identity($this);
}
function tt_Ruling_getTop($this) {
    return $this.$y10;
}
function tt_Ruling_setTop($this, $v) {
    cjag_Line2D$Float_setLine0($this, $this.$x10, $v, $this.$x2, $this.$y2);
}
function tt_Ruling_getLeft($this) {
    return $this.$x10;
}
function tt_Ruling_setLeft($this, $v) {
    cjag_Line2D$Float_setLine0($this, $v, $this.$y10, $this.$x2, $this.$y2);
}
function tt_Ruling_getBottom($this) {
    return $this.$y2;
}
function tt_Ruling_setBottom($this, $v) {
    cjag_Line2D$Float_setLine0($this, $this.$x10, $this.$y10, $this.$x2, $v);
}
function tt_Ruling_getRight($this) {
    return $this.$x2;
}
function tt_Ruling_setRight($this, $v) {
    cjag_Line2D$Float_setLine0($this, $this.$x10, $this.$y10, $v, $this.$y2);
}
function tt_Ruling_getAngle($this) {
    var $angle;
    $angle = jl_Math_atan2(cjag_Point2D$Float_getY(cjag_Line2D$Float_getP2($this)) - cjag_Point2D$Float_getY(cjag_Line2D$Float_getP1($this)), cjag_Point2D$Float_getX(cjag_Line2D$Float_getP2($this)) - cjag_Point2D$Float_getX(cjag_Line2D$Float_getP1($this))) * 180.0 / 3.141592653589793;
    if ($angle < 0.0)
        $angle = $angle + 360.0;
    return $angle;
}
function tt_Ruling_toString($this) {
    var $sb, $formatter, var$3, var$4, $rv;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    $formatter = ju_Formatter__init_0($sb, ju_Locale_defaultLocale);
    $sb = ju_Locale_US;
    var$3 = $rt_createArray(jl_Object, 5);
    var$4 = var$3.data;
    var$4[0] = jl_Object_toString(jl_Object_getClass($this));
    var$4[1] = jl_Float_valueOf($this.$x10);
    var$4[2] = jl_Float_valueOf($this.$y10);
    var$4[3] = jl_Float_valueOf($this.$x2);
    var$4[4] = jl_Float_valueOf($this.$y2);
    $rv = ju_Formatter_toString(ju_Formatter_format0($formatter, $sb, $rt_s(139), var$3));
    ju_Formatter_close($formatter);
    return $rv;
}
function tt_Ruling_findIntersections($horizontals, $verticals) {
    var $sos, $tree, $rv, $so, $h, $v, $i, var$10, var$11;
    $sos = ju_ArrayList__init_();
    $tree = ju_TreeMap__init_(new tt_Ruling$1);
    $rv = ju_TreeMap__init_(new tt_Ruling$2);
    $so = ju_AbstractList_iterator($horizontals);
    while (ju_AbstractList$1_hasNext($so)) {
        $h = ju_AbstractList$1_next($so);
        ju_ArrayList_add($sos, tt_Ruling$1SortObject__init_(tt_Ruling$SOType_HLEFT, $h.$x10 - tt_Ruling_PERPENDICULAR_PIXEL_EXPAND_AMOUNT, $h));
        ju_ArrayList_add($sos, tt_Ruling$1SortObject__init_(tt_Ruling$SOType_HRIGHT, $h.$x2 + tt_Ruling_PERPENDICULAR_PIXEL_EXPAND_AMOUNT, $h));
    }
    $h = ju_AbstractList_iterator($verticals);
    while (ju_AbstractList$1_hasNext($h)) {
        $v = ju_AbstractList$1_next($h);
        ju_ArrayList_add($sos, tt_Ruling$1SortObject__init_(tt_Ruling$SOType_VERTICAL, $v.$x10, $v));
    }
    ju_Collections_sort($sos, new tt_Ruling$3);
    $sos = ju_AbstractList_iterator($sos);
    while (ju_AbstractList$1_hasNext($sos)) {
        a: {
            $so = ju_AbstractList$1_next($sos);
            tt_Ruling$5_$callClinit();
            switch (tt_Ruling$5_$SwitchMap$technology$tabula$Ruling$SOType.data[$so.$type1.$ordinal]) {
                case 1:
                    $verticals = ju_TreeMap$EntrySet_iterator(ju_TreeMap_entrySet($tree));
                    while (ju_TreeMap$EntryIterator_hasNext($verticals)) {
                        $h = ju_TreeMap$EntryIterator_next($verticals);
                        $i = tt_Ruling_intersectionPoint($h.$key0, $so.$ruling);
                        if ($i === null)
                            continue;
                        var$10 = $rt_createArray(tt_Ruling, 2);
                        var$11 = var$10.data;
                        var$11[0] = tt_Ruling_expand($h.$key0, tt_Ruling_PERPENDICULAR_PIXEL_EXPAND_AMOUNT);
                        var$11[1] = tt_Ruling_expand($so.$ruling, tt_Ruling_PERPENDICULAR_PIXEL_EXPAND_AMOUNT);
                        ju_TreeMap_put($rv, $i, var$10);
                    }
                    break a;
                case 2:
                    break;
                case 3:
                    ju_TreeMap_put($tree, $so.$ruling, jl_Boolean_valueOf(1));
                    break a;
                default:
                    break a;
            }
            ju_TreeMap_remove($tree, $so.$ruling);
        }
    }
    return $rv;
}
function tt_Ruling_collapseOrientedRulings($lines) {
    var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11;
    var$2 = tt_Ruling_COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT;
    var$3 = ju_ArrayList__init_();
    ju_Collections_sort($lines, new tt_Ruling$4);
    $lines = ju_AbstractList_iterator($lines);
    while (ju_AbstractList$1_hasNext($lines)) {
        var$4 = ju_AbstractList$1_next($lines);
        var$5 = ju_AbstractCollection_isEmpty(var$3) ? null : ju_ArrayList_get(var$3, var$3.$size0 - 1 | 0);
        if (var$5 !== null && tt_Utils_feq(tt_Ruling_getPosition(var$4), tt_Ruling_getPosition(var$5)) && tt_Ruling_nearlyIntersects(var$5, var$4, var$2)) {
            var$6 = tt_Ruling_getStart(var$5);
            var$7 = tt_Ruling_getEnd(var$5);
            var$8 = var$6 <= var$7 ? 0 : 1;
            var$9 = (tt_Ruling_getStart(var$4) <= tt_Ruling_getEnd(var$4) ? 0 : 1) == var$8 ? 0 : 1;
            var$10 = !var$9 ? tt_Ruling_getStart(var$4) : tt_Ruling_getEnd(var$4);
            var$11 = !var$9 ? tt_Ruling_getEnd(var$4) : tt_Ruling_getStart(var$4);
            var$6 = !var$8 ? jl_Math_min1(var$10, var$6) : jl_Math_max1(var$10, var$6);
            var$7 = !var$8 ? jl_Math_max1(var$11, var$7) : jl_Math_min1(var$11, var$7);
            if (tt_Ruling_oblique(var$5)) {
                $lines = new jl_UnsupportedOperationException;
                jl_Throwable__init_0($lines);
                $rt_throw($lines);
            }
            if (!tt_Ruling_vertical(var$5)) {
                tt_Ruling_setLeft(var$5, var$6);
                tt_Ruling_setRight(var$5, var$7);
            } else {
                tt_Ruling_setTop(var$5, var$6);
                tt_Ruling_setBottom(var$5, var$7);
            }
            if (!tt_Ruling_$assertionsDisabled && tt_Ruling_oblique(var$5)) {
                $lines = new jl_AssertionError;
                jl_Throwable__init_0($lines);
                $rt_throw($lines);
            }
        } else {
            if (tt_Ruling_length(var$4) === 0.0)
                continue;
            ju_ArrayList_add(var$3, var$4);
        }
    }
    return var$3;
}
function tt_Ruling__clinit_() {
    tt_Ruling_$assertionsDisabled = 0;
    tt_Ruling_PERPENDICULAR_PIXEL_EXPAND_AMOUNT = 2;
    tt_Ruling_COLINEAR_OR_PARALLEL_PIXEL_EXPAND_AMOUNT = 1;
}
function oacc_Assertions() {
    jl_Object.call(this);
}
function oacc_Assertions_notNull($parameter, $parameterName) {
    var var$3;
    if ($parameter !== null)
        return;
    var$3 = new jl_IllegalArgumentException;
    $parameter = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($parameter);
    jl_AbstractStringBuilder_append($parameter, $rt_s(140));
    jl_AbstractStringBuilder_append($parameter, $parameterName);
    jl_AbstractStringBuilder_append($parameter, $rt_s(141));
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString($parameter));
    $rt_throw(var$3);
}
function tt_ObjectExtractorStreamEngine$PointComparator() {
    jl_Object.call(this);
    this.$this$0 = null;
}
function tt_ObjectExtractorStreamEngine$PointComparator_compare($this, $o1, $o2) {
    var $o1X, $o1Y, $o2X, var$6;
    $o1X = tt_Utils_round(cjag_Point2D$Float_getX($o1), 2);
    $o1Y = tt_Utils_round(cjag_Point2D$Float_getY($o1), 2);
    $o2X = tt_Utils_round(cjag_Point2D$Float_getX($o2), 2);
    var$6 = $rt_compare($o1Y, tt_Utils_round(cjag_Point2D$Float_getY($o2), 2));
    if (var$6 > 0)
        return 1;
    if (var$6 < 0)
        return (-1);
    var$6 = $rt_compare($o1X, $o2X);
    if (var$6 > 0)
        return 1;
    if (var$6 >= 0)
        return 0;
    return (-1);
}
function jur_AbstractSet() {
    var a = this; jl_Object.call(a);
    a.$next4 = null;
    a.$isSecondPassVisited = 0;
    a.$index1 = null;
    a.$type0 = 0;
}
var jur_AbstractSet_counter = 0;
function jur_AbstractSet__init_0() {
    var var_0 = new jur_AbstractSet();
    jur_AbstractSet__init_(var_0);
    return var_0;
}
function jur_AbstractSet__init_1(var_0) {
    var var_1 = new jur_AbstractSet();
    jur_AbstractSet__init_2(var_1, var_0);
    return var_1;
}
function jur_AbstractSet__init_($this) {
    var var$1, var$2;
    var$1 = new jl_Integer;
    var$2 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$2 + 1 | 0;
    jl_Integer__init_0(var$1, var$2);
    $this.$index1 = jl_Integer_toString0(var$1);
}
function jur_AbstractSet__init_2($this, $n) {
    var var$2, var$3;
    var$2 = new jl_Integer;
    var$3 = jur_AbstractSet_counter;
    jur_AbstractSet_counter = var$3 + 1 | 0;
    jl_Integer__init_0(var$2, var$3);
    $this.$index1 = jl_Integer_toString0(var$2);
    $this.$next4 = $n;
}
function jur_AbstractSet_find($this, $stringIndex, $testString, $matchResult) {
    var $length;
    $length = $matchResult.$rightBound0;
    while (true) {
        if ($stringIndex > $length)
            return (-1);
        if ($this.$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
}
function jur_AbstractSet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($this.$matches($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
}
function jur_AbstractSet_setType($this, $type) {
    $this.$type0 = $type;
}
function jur_AbstractSet_getType($this) {
    return $this.$type0;
}
function jur_AbstractSet_getQualifiedName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(142));
    jl_AbstractStringBuilder_append(var$1, $this.$index1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(78));
    jl_AbstractStringBuilder_append(var$1, $this.$getName());
    jl_AbstractStringBuilder_append(var$1, $rt_s(143));
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_AbstractSet_toString($this) {
    return jur_AbstractSet_getQualifiedName($this);
}
function jur_AbstractSet_getNext($this) {
    return $this.$next4;
}
function jur_AbstractSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_AbstractSet_first($this, $set) {
    return 1;
}
function jur_AbstractSet_processBackRefReplacement($this) {
    return null;
}
function jur_AbstractSet_processSecondPass($this) {
    var $set;
    $this.$isSecondPassVisited = 1;
    if ($this.$next4 !== null) {
        if (!$this.$next4.$isSecondPassVisited) {
            $set = $this.$next4.$processBackRefReplacement();
            if ($set !== null) {
                $this.$next4.$isSecondPassVisited = 1;
                $this.$next4 = $set;
            }
            $this.$next4.$processSecondPass();
        } else if ($this.$next4 instanceof jur_SingleSet && $this.$next4.$fSet.$isBackReferenced)
            $this.$next4 = $this.$next4.$next4;
    }
}
function jur_AbstractSet__clinit_() {
    jur_AbstractSet_counter = 1;
}
function jn_Buffer() {
    var a = this; jl_Object.call(a);
    a.$capacity = 0;
    a.$position = 0;
    a.$limit = 0;
    a.$mark = 0;
}
function jn_Buffer__init_0(var_0) {
    var var_1 = new jn_Buffer();
    jn_Buffer__init_(var_1, var_0);
    return var_1;
}
function jn_Buffer__init_($this, $capacity) {
    $this.$mark = (-1);
    $this.$capacity = $capacity;
    $this.$limit = $capacity;
}
function jn_Buffer_position($this) {
    return $this.$position;
}
function jn_Buffer_remaining($this) {
    return $this.$limit - $this.$position | 0;
}
function jn_Buffer_hasRemaining($this) {
    return $this.$position >= $this.$limit ? 0 : 1;
}
function jl_Readable() {
}
function jn_CharBuffer() {
    jn_Buffer.call(this);
}
function jn_CharBuffer_get($this, $dst, $offset, $length) {
    var var$4, var$5, $pos, var$7, var$8, var$9, $i, var$11, var$12;
    if ($offset >= 0) {
        var$4 = $dst.data;
        var$5 = var$4.length;
        if ($offset < var$5) {
            $pos = $offset + $length | 0;
            if ($pos > var$5) {
                var$7 = new jl_IndexOutOfBoundsException;
                var$8 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$8);
                jl_AbstractStringBuilder_append(var$8, $rt_s(144));
                var$9 = jl_StringBuilder_append2(var$8, $pos);
                jl_AbstractStringBuilder_append(var$9, $rt_s(145));
                jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(jl_StringBuilder_append2(var$9, var$5)));
                $rt_throw(var$7);
            }
            if (jn_Buffer_remaining($this) < $length) {
                var$8 = new jn_BufferUnderflowException;
                jl_Throwable__init_0(var$8);
                $rt_throw(var$8);
            }
            if ($length < 0) {
                var$8 = new jl_IndexOutOfBoundsException;
                var$7 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$7);
                jl_AbstractStringBuilder_append(var$7, $rt_s(146));
                var$7 = jl_StringBuilder_append2(var$7, $length);
                jl_AbstractStringBuilder_append(var$7, $rt_s(147));
                jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$7));
                $rt_throw(var$8);
            }
            $pos = $this.$position;
            $i = 0;
            while ($i < $length) {
                var$11 = $offset + 1 | 0;
                var$12 = $pos + 1 | 0;
                var$4[$offset] = jn_CharBufferOverArray_getChar($this, $pos);
                $i = $i + 1 | 0;
                $offset = var$11;
                $pos = var$12;
            }
            $this.$position = $this.$position + $length | 0;
            return $this;
        }
    }
    $dst = $dst.data;
    var$7 = new jl_IndexOutOfBoundsException;
    var$8 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$8);
    jl_AbstractStringBuilder_append(var$8, $rt_s(148));
    var$8 = jl_StringBuilder_append2(var$8, $offset);
    jl_AbstractStringBuilder_append(var$8, $rt_s(149));
    var$8 = jl_StringBuilder_append2(var$8, $dst.length);
    jl_AbstractStringBuilder_append(var$8, $rt_s(150));
    jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(var$8));
    $rt_throw(var$7);
}
function jn_CharBuffer_toString($this) {
    var $chars, var$2, $pos, $i, var$5, var$6;
    $chars = $rt_createCharArray($this.$limit - $this.$position | 0);
    var$2 = $chars.data;
    $pos = $this.$position;
    $i = 0;
    var$5 = var$2.length;
    while ($i < var$5) {
        var$6 = $pos + 1 | 0;
        var$2[$i] = jn_CharBufferOverArray_getChar($this, $pos);
        $i = $i + 1 | 0;
        $pos = var$6;
    }
    return jl_String__init_($chars);
}
function jn_CharBuffer_flip($this) {
    $this.$limit = $this.$position;
    $this.$position = 0;
    $this.$mark = (-1);
    return $this;
}
function jn_CharBuffer_position($this, $newPosition) {
    var var$2, var$3;
    if ($newPosition >= 0 && $newPosition <= $this.$limit) {
        $this.$position = $newPosition;
        if ($newPosition < $this.$mark)
            $this.$mark = 0;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(151));
    var$3 = jl_StringBuilder_append2(var$3, $newPosition);
    jl_AbstractStringBuilder_append(var$3, $rt_s(149));
    var$3 = jl_StringBuilder_append2(var$3, $this.$limit);
    jl_AbstractStringBuilder_append(var$3, $rt_s(56));
    jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
    $rt_throw(var$2);
}
function jn_CharBuffer_flip0($this) {
    return jn_CharBuffer_flip($this);
}
function jn_ByteBuffer() {
    var a = this; jn_Buffer.call(a);
    a.$start1 = 0;
    a.$array0 = null;
    a.$order = null;
}
function jn_ByteBuffer_put($this, $src, $offset, $length) {
    var var$4, var$5, var$6, $pos, var$8, $i, var$10;
    if (!$length)
        return $this;
    if ($this.$readOnly) {
        var$4 = new jn_ReadOnlyBufferException;
        jl_Throwable__init_0(var$4);
        $rt_throw(var$4);
    }
    if (jn_Buffer_remaining($this) < $length) {
        var$4 = new jn_BufferOverflowException;
        jl_Throwable__init_0(var$4);
        $rt_throw(var$4);
    }
    if ($offset >= 0) {
        var$5 = $src.data;
        var$6 = var$5.length;
        if ($offset < var$6) {
            $pos = $offset + $length | 0;
            if ($pos > var$6) {
                var$4 = new jl_IndexOutOfBoundsException;
                var$8 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$8);
                jl_AbstractStringBuilder_append(var$8, $rt_s(152));
                var$8 = jl_StringBuilder_append2(var$8, $pos);
                jl_AbstractStringBuilder_append(var$8, $rt_s(145));
                jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(jl_StringBuilder_append2(var$8, var$6)));
                $rt_throw(var$4);
            }
            if ($length < 0) {
                var$4 = new jl_IndexOutOfBoundsException;
                var$8 = new jl_StringBuilder;
                jl_AbstractStringBuilder__init_(var$8);
                jl_AbstractStringBuilder_append(var$8, $rt_s(146));
                var$8 = jl_StringBuilder_append2(var$8, $length);
                jl_AbstractStringBuilder_append(var$8, $rt_s(147));
                jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString(var$8));
                $rt_throw(var$4);
            }
            $pos = $this.$position + $this.$start1 | 0;
            $i = 0;
            while ($i < $length) {
                $src = $this.$array0.data;
                var$10 = $pos + 1 | 0;
                var$6 = $offset + 1 | 0;
                $src[$pos] = var$5[$offset];
                $i = $i + 1 | 0;
                $pos = var$10;
                $offset = var$6;
            }
            $this.$position = $this.$position + $length | 0;
            return $this;
        }
    }
    $src = $src.data;
    var$8 = new jl_IndexOutOfBoundsException;
    var$4 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$4);
    jl_AbstractStringBuilder_append(var$4, $rt_s(148));
    var$4 = jl_StringBuilder_append2(var$4, $offset);
    jl_AbstractStringBuilder_append(var$4, $rt_s(149));
    var$4 = jl_StringBuilder_append2(var$4, $src.length);
    jl_AbstractStringBuilder_append(var$4, $rt_s(150));
    jl_Throwable__init_(var$8, jl_AbstractStringBuilder_toString(var$4));
    $rt_throw(var$8);
}
function jn_ByteBuffer_put0($this, $src) {
    return jn_ByteBuffer_put($this, $src, 0, $src.data.length);
}
function jn_ByteBuffer_clear($this) {
    $this.$position = 0;
    $this.$limit = $this.$capacity;
    $this.$mark = (-1);
    return $this;
}
function jnc_CodingErrorAction() {
    jl_Object.call(this);
    this.$name1 = null;
}
var jnc_CodingErrorAction_IGNORE = null;
var jnc_CodingErrorAction_REPLACE = null;
var jnc_CodingErrorAction_REPORT = null;
function jnc_CodingErrorAction__init_(var_0) {
    var var_1 = new jnc_CodingErrorAction();
    jnc_CodingErrorAction__init_0(var_1, var_0);
    return var_1;
}
function jnc_CodingErrorAction__init_0($this, $name) {
    $this.$name1 = $name;
}
function jnc_CodingErrorAction__clinit_() {
    jnc_CodingErrorAction_IGNORE = jnc_CodingErrorAction__init_($rt_s(153));
    jnc_CodingErrorAction_REPLACE = jnc_CodingErrorAction__init_($rt_s(154));
    jnc_CodingErrorAction_REPORT = jnc_CodingErrorAction__init_($rt_s(155));
}
function ju_SortedMap() {
}
function ju_NavigableMap() {
}
function ju_TreeMap() {
    var a = this; ju_AbstractMap.call(a);
    a.$root0 = null;
    a.$comparator = null;
    a.$originalComparator = null;
    a.$modCount2 = 0;
    a.$cachedEntrySet = null;
}
function ju_TreeMap__init_(var_0) {
    var var_1 = new ju_TreeMap();
    ju_TreeMap__init_0(var_1, var_0);
    return var_1;
}
function ju_TreeMap__init_0($this, $comparator) {
    $this.$originalComparator = $comparator;
    if ($comparator === null) {
        $comparator = new ju_TreeMap$1;
        $comparator.$this$08 = $this;
    }
    $this.$comparator = $comparator;
}
function ju_TreeMap_get($this, $key) {
    var $node;
    $node = ju_TreeMap_findExact($this, $key);
    return $node === null ? null : $node.$value4;
}
function ju_TreeMap_put($this, $key, $value) {
    var $node, $old;
    $this.$root0 = ju_TreeMap_getOrCreateNode($this, $this.$root0, $key);
    $node = ju_TreeMap_findExact($this, $key);
    $old = ju_AbstractMap$SimpleEntry_setValue($node, $value);
    ju_AbstractMap$SimpleEntry_setValue($node, $value);
    $this.$modCount2 = $this.$modCount2 + 1 | 0;
    return $old;
}
function ju_TreeMap_remove($this, $key) {
    var $node;
    $node = ju_TreeMap_findExact($this, $key);
    if ($node === null)
        return null;
    $this.$root0 = ju_TreeMap_deleteNode($this, $this.$root0, $key);
    $this.$modCount2 = $this.$modCount2 + 1 | 0;
    return $node.$value4;
}
function ju_TreeMap_containsKey($this, $key) {
    return ju_TreeMap_findExact($this, $key) === null ? 0 : 1;
}
function ju_TreeMap_findExact($this, $key) {
    var $node, $cmp;
    $node = $this.$root0;
    while (true) {
        if ($node === null)
            return null;
        $cmp = $this.$comparator.$compare0($key, $node.$key0);
        if (!$cmp)
            break;
        $node = $cmp >= 0 ? $node.$right : $node.$left;
    }
    return $node;
}
function ju_TreeMap_findExactOrNext($this, $key, $reverse) {
    var $node, $lastForward, $cmp, var$6;
    $node = $this.$root0;
    $lastForward = null;
    while ($node !== null) {
        $cmp = $this.$comparator.$compare0($key, $node.$key0);
        if ($reverse)
            $cmp =  -$cmp;
        if (!$cmp)
            return $node;
        if ($cmp >= 0)
            var$6 = ju_TreeMap$TreeNode_down($node, $reverse);
        else {
            var$6 = ju_TreeMap$TreeNode_forward($node, $reverse);
            $lastForward = $node;
        }
        $node = var$6;
    }
    return $lastForward;
}
function ju_TreeMap_pathToExactOrNext($this, $key, $reverse) {
    var $path, $depth, $node, $cmp, var$7;
    $path = $rt_createArray(ju_TreeMap$TreeNode, ju_TreeMap_height($this));
    $depth = 0;
    $node = $this.$root0;
    a: {
        while ($node !== null) {
            $cmp = $this.$comparator.$compare0($key, $node.$key0);
            if ($reverse)
                $cmp =  -$cmp;
            if (!$cmp) {
                var$7 = $path.data;
                $reverse = $depth + 1 | 0;
                var$7[$depth] = $node;
                break a;
            }
            if ($cmp >= 0)
                $node = ju_TreeMap$TreeNode_down($node, $reverse);
            else {
                var$7 = $path.data;
                $cmp = $depth + 1 | 0;
                var$7[$depth] = $node;
                $node = ju_TreeMap$TreeNode_forward($node, $reverse);
                $depth = $cmp;
            }
        }
        $reverse = $depth;
    }
    return ju_Arrays_copyOf0($path, $reverse);
}
function ju_TreeMap_findNext($this, $key, $reverse) {
    var $node, $lastForward, $cmp, var$6;
    $node = $this.$root0;
    $lastForward = null;
    while ($node !== null) {
        $cmp = $this.$comparator.$compare0($key, $node.$key0);
        if ($reverse)
            $cmp =  -$cmp;
        if ($cmp >= 0)
            var$6 = ju_TreeMap$TreeNode_down($node, $reverse);
        else {
            var$6 = ju_TreeMap$TreeNode_forward($node, $reverse);
            $lastForward = $node;
        }
        $node = var$6;
    }
    return $lastForward;
}
function ju_TreeMap_pathToNext($this, $key, $reverse) {
    var $path, $depth, $node, $cmp, var$7;
    $path = $rt_createArray(ju_TreeMap$TreeNode, ju_TreeMap_height($this));
    $depth = 0;
    $node = $this.$root0;
    while ($node !== null) {
        $cmp = $this.$comparator.$compare0($key, $node.$key0);
        if ($reverse)
            $cmp =  -$cmp;
        if ($cmp >= 0)
            $node = ju_TreeMap$TreeNode_down($node, $reverse);
        else {
            var$7 = $path.data;
            $cmp = $depth + 1 | 0;
            var$7[$depth] = $node;
            $node = ju_TreeMap$TreeNode_forward($node, $reverse);
            $depth = $cmp;
        }
    }
    return ju_Arrays_copyOf0($path, $depth);
}
function ju_TreeMap_pathToFirst($this, $reverse) {
    var $path, $depth, $node, var$5, var$6;
    $path = $rt_createArray(ju_TreeMap$TreeNode, ju_TreeMap_height($this));
    $depth = 0;
    $node = $this.$root0;
    while ($node !== null) {
        var$5 = $path.data;
        var$6 = $depth + 1 | 0;
        var$5[$depth] = $node;
        $node = ju_TreeMap$TreeNode_forward($node, $reverse);
        $depth = var$6;
    }
    return ju_Arrays_copyOf0($path, $depth);
}
function ju_TreeMap_getOrCreateNode($this, $root, $key) {
    var var$3, $cmp;
    if ($root === null) {
        $root = new ju_TreeMap$TreeNode;
        var$3 = null;
        $root.$key0 = $key;
        $root.$value4 = var$3;
        $root.$height2 = 1;
        $root.$size2 = 1;
        return $root;
    }
    $cmp = $this.$comparator.$compare0($key, $root.$key0);
    if (!$cmp)
        return $root;
    if ($cmp >= 0)
        $root.$right = ju_TreeMap_getOrCreateNode($this, $root.$right, $key);
    else
        $root.$left = ju_TreeMap_getOrCreateNode($this, $root.$left, $key);
    ju_TreeMap$TreeNode_fix($root);
    return ju_TreeMap$TreeNode_balance($root);
}
function ju_TreeMap_deleteNode($this, $right, $key) {
    var $cmp, $left, $pathToMin, $minDepth, var$7, $minDepth_0, $node;
    if ($right === null)
        return null;
    $cmp = $this.$comparator.$compare0($key, $right.$key0);
    if ($cmp < 0)
        $right.$left = ju_TreeMap_deleteNode($this, $right.$left, $key);
    else if ($cmp > 0)
        $right.$right = ju_TreeMap_deleteNode($this, $right.$right, $key);
    else {
        if ($right.$right === null)
            return $right.$left;
        $left = $right.$left;
        $right = $right.$right;
        $pathToMin = $rt_createArray(ju_TreeMap$TreeNode, $right.$height2);
        $minDepth = 0;
        while ($right.$left !== null) {
            var$7 = $pathToMin.data;
            $minDepth_0 = $minDepth + 1 | 0;
            var$7[$minDepth] = $right;
            $right = $right.$left;
            $minDepth = $minDepth_0;
        }
        $key = $right.$right;
        while ($minDepth > 0) {
            var$7 = $pathToMin.data;
            $minDepth = $minDepth + (-1) | 0;
            $node = var$7[$minDepth];
            $node.$left = $key;
            ju_TreeMap$TreeNode_fix($node);
            $key = ju_TreeMap$TreeNode_balance($node);
        }
        $right.$right = $key;
        $right.$left = $left;
        ju_TreeMap$TreeNode_fix($right);
    }
    ju_TreeMap$TreeNode_fix($right);
    return ju_TreeMap$TreeNode_balance($right);
}
function ju_TreeMap_entrySet($this) {
    var var$1, var$2, var$3;
    if ($this.$cachedEntrySet === null) {
        var$1 = new ju_TreeMap$EntrySet;
        var$2 = null;
        var$3 = null;
        var$1.$modCount3 = (-1);
        var$1.$owner0 = $this;
        var$1.$from = var$2;
        var$1.$fromIncluded = 1;
        var$1.$fromChecked = 0;
        var$1.$to = var$3;
        var$1.$toIncluded = 1;
        var$1.$toChecked = 0;
        var$1.$reverse = 0;
        $this.$cachedEntrySet = var$1;
    }
    return $this.$cachedEntrySet;
}
function ju_TreeMap_size($this) {
    return $this.$root0 === null ? 0 : $this.$root0.$size2;
}
function ju_TreeMap_height($this) {
    return $this.$root0 === null ? 0 : $this.$root0.$height2;
}
function ju_TreeMap_access$100($x0, $x1) {
    var var$3, var$4;
    $x0 = $x0.$root0;
    var$3 = null;
    while ($x0 !== null) {
        var$4 = ju_TreeMap$TreeNode_forward($x0, $x1);
        var$3 = $x0;
        $x0 = var$4;
    }
    return var$3;
}
function jl_Byte() {
    jl_Number.call(this);
    this.$value5 = 0;
}
var jl_Byte_TYPE = null;
function jl_Byte_valueOf($value) {
    var var$2;
    var$2 = new jl_Byte;
    var$2.$value5 = $value;
    return var$2;
}
function jl_Byte_toString($this) {
    var var$1, var$2;
    var$1 = $this.$value5;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append2(var$2, var$1));
}
function jl_Byte_equals($this, $other) {
    return $other instanceof jl_Byte && $other.$value5 == $this.$value5 ? 1 : 0;
}
function jl_Byte_hashCode($this) {
    return $this.$value5;
}
function jl_Byte_compareTo($this, $other) {
    return $this.$value5 - $other.$value5 | 0;
}
function jl_Byte_compareTo0($this, var$1) {
    return jl_Byte_compareTo($this, var$1);
}
function jl_Byte__clinit_() {
    jl_Byte_TYPE = $rt_cls($rt_bytecls());
}
function tt_TextChunk$DirectionalityOptions() {
    jl_Enum.call(this);
}
var tt_TextChunk$DirectionalityOptions_LTR = null;
var tt_TextChunk$DirectionalityOptions_NONE = null;
var tt_TextChunk$DirectionalityOptions_RTL = null;
var tt_TextChunk$DirectionalityOptions_$VALUES = null;
function tt_TextChunk$DirectionalityOptions__clinit_() {
    var var$1, var$2, var$3;
    var$1 = new tt_TextChunk$DirectionalityOptions;
    jl_Enum__init_0(var$1, $rt_s(156), 0);
    tt_TextChunk$DirectionalityOptions_LTR = var$1;
    var$1 = new tt_TextChunk$DirectionalityOptions;
    jl_Enum__init_0(var$1, $rt_s(125), 1);
    tt_TextChunk$DirectionalityOptions_NONE = var$1;
    var$1 = new tt_TextChunk$DirectionalityOptions;
    jl_Enum__init_0(var$1, $rt_s(157), 2);
    tt_TextChunk$DirectionalityOptions_RTL = var$1;
    var$2 = $rt_createArray(tt_TextChunk$DirectionalityOptions, 3);
    var$3 = var$2.data;
    var$3[0] = tt_TextChunk$DirectionalityOptions_LTR;
    var$3[1] = tt_TextChunk$DirectionalityOptions_NONE;
    var$3[2] = tt_TextChunk$DirectionalityOptions_RTL;
    tt_TextChunk$DirectionalityOptions_$VALUES = var$2;
}
function ju_Collections$_clinit_$lambda$_61_0() {
    jl_Object.call(this);
}
function ju_Collections$_clinit_$lambda$_61_0_compare(var$0, var$1, var$2) {
    return var$1 !== null ? var$1.$compareTo5(var$2) :  -var$2.$compareTo5(var$1);
}
function ju_Collections$_clinit_$lambda$_61_1() {
    jl_Object.call(this);
}
function jm_BigDecimal() {
    var a = this; jl_Number.call(a);
    a.$intVal = null;
    a.$bitLength = 0;
    a.$smallValue = Long_ZERO;
    a.$scale0 = 0;
    a.$precision = 0;
}
var jm_BigDecimal_ZERO = null;
var jm_BigDecimal_ONE = null;
var jm_BigDecimal_TEN = null;
var jm_BigDecimal_FIVE_POW = null;
var jm_BigDecimal_TEN_POW = null;
var jm_BigDecimal_LONG_TEN_POW = null;
var jm_BigDecimal_LONG_FIVE_POW = null;
var jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH = null;
var jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH = null;
var jm_BigDecimal_BI_SCALED_BY_ZERO = null;
var jm_BigDecimal_ZERO_SCALED_BY = null;
var jm_BigDecimal_CH_ZEROS = null;
function jm_BigDecimal_$callClinit() {
    jm_BigDecimal_$callClinit = $rt_eraseClinit(jm_BigDecimal);
    jm_BigDecimal__clinit_();
}
function jm_BigDecimal__init_0(var_0, var_1) {
    var var_2 = new jm_BigDecimal();
    jm_BigDecimal__init_1(var_2, var_0, var_1);
    return var_2;
}
function jm_BigDecimal__init_2(var_0, var_1) {
    var var_2 = new jm_BigDecimal();
    jm_BigDecimal__init_3(var_2, var_0, var_1);
    return var_2;
}
function jm_BigDecimal__init_4(var_0, var_1, var_2) {
    var var_3 = new jm_BigDecimal();
    jm_BigDecimal__init_(var_3, var_0, var_1, var_2);
    return var_3;
}
function jm_BigDecimal__init_5(var_0, var_1) {
    var var_2 = new jm_BigDecimal();
    jm_BigDecimal__init_6(var_2, var_0, var_1);
    return var_2;
}
function jm_BigDecimal__init_1($this, $smallValue, $scale) {
    jm_BigDecimal_$callClinit();
    $this.$smallValue = $smallValue;
    $this.$scale0 = $scale;
    $this.$bitLength = jm_BigDecimal_bitLength($smallValue);
}
function jm_BigDecimal__init_3($this, $smallValue, $scale) {
    jm_BigDecimal_$callClinit();
    $this.$smallValue = Long_fromInt($smallValue);
    $this.$scale0 = $scale;
    if ($smallValue < 0)
        $smallValue = $smallValue ^ (-1);
    $this.$bitLength = 32 - jl_Integer_numberOfLeadingZeros($smallValue) | 0;
}
function jm_BigDecimal__init_($this, $in, $offset, $len) {
    var $last, var$5, var$6, $unscaledBuffer, var$8, $counter, $wasNonZero, var$11, $bufLength, $newScale, var$14;
    jm_BigDecimal_$callClinit();
    $last = $offset + ($len - 1 | 0) | 0;
    if ($in === null) {
        var$5 = new jl_NullPointerException;
        jl_Throwable__init_0(var$5);
        $rt_throw(var$5);
    }
    var$6 = $in.data;
    if ($last < var$6.length && $offset >= 0 && $len > 0 && $last >= 0) {
        $unscaledBuffer = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($unscaledBuffer, $len);
        if ($offset > $last)
            var$8 = $offset;
        else if (var$6[$offset] != 43)
            var$8 = $offset;
        else {
            $offset = $offset + 1 | 0;
            var$8 = $offset;
        }
        $counter = 0;
        $wasNonZero = 0;
        while (true) {
            $len = $rt_compare(var$8, $last);
            if ($len > 0)
                break;
            if (var$6[var$8] == 46)
                break;
            if (var$6[var$8] == 101)
                break;
            if (var$6[var$8] == 69)
                break;
            if (!$wasNonZero) {
                if (var$6[var$8] != 48)
                    $wasNonZero = 1;
                else
                    $counter = $counter + 1 | 0;
            }
            var$8 = var$8 + 1 | 0;
        }
        var$11 = var$8 - $offset | 0;
        jl_AbstractStringBuilder_append2($unscaledBuffer, $in, $offset, var$11);
        $offset = 0 + var$11 | 0;
        if ($len <= 0 && var$6[var$8] == 46) {
            $bufLength = var$8 + 1 | 0;
            var$8 = $bufLength;
            while (var$8 <= $last && var$6[var$8] != 101 && var$6[var$8] != 69) {
                if (!$wasNonZero) {
                    if (var$6[var$8] != 48)
                        $wasNonZero = 1;
                    else
                        $counter = $counter + 1 | 0;
                }
                var$8 = var$8 + 1 | 0;
            }
            $this.$scale0 = var$8 - $bufLength | 0;
            $offset = $offset + $this.$scale0 | 0;
            jl_AbstractStringBuilder_append2($unscaledBuffer, $in, $bufLength, $this.$scale0);
        } else
            $this.$scale0 = 0;
        if (var$8 <= $last && !(var$6[var$8] != 101 && var$6[var$8] != 69)) {
            $len = var$8 + 1 | 0;
            if ($len > $last)
                $wasNonZero = $len;
            else if (var$6[$len] != 43)
                $wasNonZero = $len;
            else {
                $wasNonZero = $len + 1 | 0;
                if ($wasNonZero > $last)
                    $wasNonZero = $len;
                else if (var$6[$wasNonZero] == 45)
                    $wasNonZero = $len;
            }
            var$5 = jl_String__init_1($in, $wasNonZero, ($last + 1 | 0) - $wasNonZero | 0);
            $newScale = Long_sub(Long_fromInt($this.$scale0), Long_fromInt(jl_Integer_parseInt(var$5)));
            $this.$scale0 = $newScale.lo;
            if (Long_ne($newScale, Long_fromInt($this.$scale0))) {
                var$5 = new jl_NumberFormatException;
                jl_Throwable__init_(var$5, $rt_s(158));
                $rt_throw(var$5);
            }
        }
        if ($offset < 19) {
            $this.$smallValue = jl_Long_parseLong(jl_StringBuilder_toString($unscaledBuffer));
            $this.$bitLength = jm_BigDecimal_bitLength($this.$smallValue);
        } else {
            var$5 = new jm_BigInteger;
            var$14 = jl_AbstractStringBuilder_toString($unscaledBuffer);
            var$5.$firstNonzeroDigit = (-2);
            if (var$14 === null) {
                var$5 = new jl_NullPointerException;
                jl_Throwable__init_0(var$5);
                $rt_throw(var$5);
            }
            if (!jl_String_length(var$14)) {
                var$5 = new jl_NumberFormatException;
                jl_Exception__init_0(var$5, $rt_s(159));
                $rt_throw(var$5);
            }
            jm_BigInteger_setFromString(var$5, var$14, 10);
            jm_BigDecimal_setUnscaledValue($this, var$5);
        }
        $this.$precision = jl_StringBuilder_length($unscaledBuffer) - $counter | 0;
        if (jl_StringBuilder_charAt($unscaledBuffer, 0) == 45)
            $this.$precision = $this.$precision - 1 | 0;
        return;
    }
    var$5 = new jl_NumberFormatException;
    jl_Throwable__init_0(var$5);
    $rt_throw(var$5);
}
function jm_BigDecimal__init_6($this, $unscaledVal, $scale) {
    jm_BigDecimal_$callClinit();
    if ($unscaledVal !== null) {
        $this.$scale0 = $scale;
        jm_BigDecimal_setUnscaledValue($this, $unscaledVal);
        return;
    }
    $unscaledVal = new jl_NullPointerException;
    jl_Throwable__init_0($unscaledVal);
    $rt_throw($unscaledVal);
}
function jm_BigDecimal_valueOf($unscaledVal, $scale) {
    jm_BigDecimal_$callClinit();
    if ($scale) {
        if (Long_eq($unscaledVal, Long_ZERO) && $scale >= 0 && $scale < jm_BigDecimal_ZERO_SCALED_BY.data.length)
            return jm_BigDecimal_ZERO_SCALED_BY.data[$scale];
        return jm_BigDecimal__init_0($unscaledVal, $scale);
    }
    return Long_ge($unscaledVal, Long_ZERO) && Long_lt($unscaledVal, Long_fromInt(11)) ? jm_BigDecimal_BI_SCALED_BY_ZERO.data[$unscaledVal.lo] : jm_BigDecimal__init_0($unscaledVal, 0);
}
function jm_BigDecimal_signum($this) {
    if ($this.$bitLength < 64)
        return jl_Long_signum($this.$smallValue);
    return jm_BigDecimal_getUnscaledValue($this).$sign1;
}
function jm_BigDecimal_setScale0($this, $newScale, $roundingMode) {
    var $diffScale, var$4, var$5, var$6, var$7, var$8, var$9, var$10, var$11, var$12, var$13, var$14, var$15, var$16;
    if ($roundingMode === null) {
        $roundingMode = new jl_NullPointerException;
        jl_Throwable__init_0($roundingMode);
        $rt_throw($roundingMode);
    }
    $diffScale = Long_sub(Long_fromInt($newScale), Long_fromInt($this.$scale0));
    var$4 = Long_compare($diffScale, Long_ZERO);
    if (!var$4)
        return $this;
    if (var$4 > 0) {
        if (Long_lt($diffScale, Long_fromInt(jm_BigDecimal_LONG_TEN_POW.data.length))) {
            var$4 = $this.$bitLength;
            var$5 = jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH.data;
            var$6 = $diffScale.lo;
            if ((var$4 + var$5[var$6] | 0) < 64)
                return jm_BigDecimal_valueOf(Long_mul($this.$smallValue, jm_BigDecimal_LONG_TEN_POW.data[var$6]), $newScale);
        }
        $roundingMode = new jm_BigDecimal;
        var$7 = jm_BigDecimal_getUnscaledValue($this);
        $diffScale = Long_fromInt($diffScale.lo);
        jm_Multiplication_$callClinit();
        if (Long_ge($diffScale, Long_fromInt(jm_Multiplication_tenPows.data.length)))
            var$7 = jm_BigInteger_multiply(var$7, jm_Multiplication_powerOf10($diffScale));
        else {
            var$8 = jm_Multiplication_tenPows.data[$diffScale.lo];
            var$6 = var$7.$sign1;
            if (!var$6)
                var$7 = jm_BigInteger_ZERO;
            else {
                var$9 = var$7.$numberLength;
                var$10 = var$7.$digits;
                if (var$9 != 1) {
                    var$4 = var$9 + 1 | 0;
                    var$5 = $rt_createIntArray(var$4);
                    var$5.data[var$9] = jm_Multiplication_multiplyByInt(var$5, var$10, var$9, var$8);
                    var$7 = jm_BigInteger__init_(var$6, var$4, var$5);
                    jm_BigInteger_cutOffLeadingZeroes(var$7);
                } else {
                    $diffScale = jm_Multiplication_unsignedMultAddAdd(var$10.data[0], var$8, 0, 0);
                    var$8 = $diffScale.lo;
                    var$9 = $diffScale.hi;
                    if (!var$9)
                        var$7 = jm_BigInteger__init_0(var$6, var$8);
                    else {
                        var$7 = new jm_BigInteger;
                        var$5 = $rt_createIntArray(2);
                        var$10 = var$5.data;
                        var$10[0] = var$8;
                        var$10[1] = var$9;
                        jm_BigInteger__init_1(var$7, var$6, 2, var$5);
                    }
                }
            }
        }
        jm_BigDecimal__init_6($roundingMode, var$7, $newScale);
        return $roundingMode;
    }
    if ($this.$bitLength < 64) {
        var$11 = Long_neg($diffScale);
        if (Long_lt(var$11, Long_fromInt(jm_BigDecimal_LONG_TEN_POW.data.length))) {
            $diffScale = $this.$smallValue;
            var$11 = jm_BigDecimal_LONG_TEN_POW.data[var$11.lo];
            jm_BigDecimal_$callClinit();
            var$12 = Long_div($diffScale, var$11);
            var$13 = Long_rem($diffScale, var$11);
            var$4 = $rt_imul(jl_Long_signum($diffScale), jl_Long_signum(var$11));
            if (Long_ne(var$13, Long_ZERO))
                var$12 = Long_add(var$12, Long_fromInt(jm_BigDecimal_roundingBehavior(var$12.lo & 1, $rt_imul(var$4, 5 + jm_BigDecimal_longCompareTo(Long_shl(jl_Math_abs1(var$13), 1), jl_Math_abs1(var$11)) | 0), $roundingMode)));
            return jm_BigDecimal_valueOf(var$12, $newScale);
        }
    }
    var$7 = jm_BigDecimal_getUnscaledValue($this);
    var$14 = jm_Multiplication_powerOf10(Long_neg($diffScale));
    var$5 = jm_BigInteger_divideAndRemainder(var$7, var$14).data;
    var$15 = var$5[0];
    var$16 = var$5[1];
    if (!var$16.$sign1)
        $roundingMode = jm_BigDecimal__init_5(var$15, $newScale);
    else {
        var$4 = $rt_imul(var$7.$sign1, var$14.$sign1);
        if (jm_BigInteger_bitLength(var$14) >= 63) {
            var$8 = jm_BigInteger_compareTo(jm_BigInteger_shiftLeftOneBit(jm_BigInteger_abs(var$16)), jm_BigInteger_abs(var$14));
            var$4 = jm_BigDecimal_roundingBehavior(!jm_BigInteger_testBit(var$15, 0) ? 0 : 1, $rt_imul(var$4, 5 + var$8 | 0), $roundingMode);
        } else {
            $diffScale = jm_BigInteger_longValue(var$16);
            var$11 = jm_BigInteger_longValue(var$14);
            var$6 = jm_BigDecimal_longCompareTo(Long_shl(jl_Math_abs1($diffScale), 1), jl_Math_abs1(var$11));
            var$4 = jm_BigDecimal_roundingBehavior(!jm_BigInteger_testBit(var$15, 0) ? 0 : 1, $rt_imul(var$4, 5 + var$6 | 0), $roundingMode);
        }
        $roundingMode = !var$4 ? jm_BigDecimal__init_5(var$15, $newScale) : jm_BigInteger_bitLength(var$15) < 63 ? jm_BigDecimal_valueOf(Long_add(jm_BigInteger_longValue(var$15), Long_fromInt(var$4)), $newScale) : jm_BigDecimal__init_5(jm_BigInteger_add(var$15, jm_BigInteger_valueOf(Long_fromInt(var$4))), $newScale);
    }
    return $roundingMode;
}
function jm_BigDecimal_setScale($this, $newScale, $roundingMode) {
    var var$3, var$4;
    a: {
        switch ($roundingMode) {
            case 0:
                break;
            case 1:
                var$3 = jm_RoundingMode_DOWN;
                break a;
            case 2:
                var$3 = jm_RoundingMode_CEILING;
                break a;
            case 3:
                var$3 = jm_RoundingMode_FLOOR;
                break a;
            case 4:
                var$3 = jm_RoundingMode_HALF_UP;
                break a;
            case 5:
                var$3 = jm_RoundingMode_HALF_DOWN;
                break a;
            case 6:
                var$3 = jm_RoundingMode_HALF_EVEN;
                break a;
            case 7:
                var$3 = jm_RoundingMode_UNNECESSARY;
                break a;
            default:
                var$4 = new jl_IllegalArgumentException;
                jl_Throwable__init_(var$4, $rt_s(160));
                $rt_throw(var$4);
        }
        var$3 = jm_RoundingMode_UP;
    }
    return jm_BigDecimal_setScale0($this, $newScale, var$3);
}
function jm_BigDecimal_floatValue($this) {
    var $floatResult, $powerOfTwo;
    $floatResult = jm_BigDecimal_signum($this);
    $powerOfTwo = Long_sub(Long_fromInt($this.$bitLength), Long_fromNumber($this.$scale0 / 0.3010299956639812));
    return Long_ge($powerOfTwo, Long_fromInt(-149)) && $floatResult !== 0.0 ? (Long_le($powerOfTwo, Long_fromInt(129)) ? jm_BigDecimal_doubleValue($this) : $floatResult * Infinity) : $floatResult * 0.0;
}
function jm_BigDecimal_doubleValue($this) {
    var $sign, $exponent, $powerOfTwo, $mantisa, $powerOfTen, $k, $quotAndRem, $compRem, $lowestSetBit, $discardedSize, $bits, var$12, var$13;
    $sign = jm_BigDecimal_signum($this);
    $exponent = 1076;
    $powerOfTwo = Long_sub(Long_fromInt($this.$bitLength), Long_fromNumber($this.$scale0 / 0.3010299956639812));
    if (Long_ge($powerOfTwo, Long_fromInt(-1074)) && $sign) {
        if (Long_gt($powerOfTwo, Long_fromInt(1025)))
            return $sign * Infinity;
        $mantisa = jm_BigInteger_abs(jm_BigDecimal_getUnscaledValue($this));
        if ($this.$scale0 <= 0)
            $mantisa = jm_BigInteger_multiply($mantisa, jm_Multiplication_powerOf10(Long_fromInt( -$this.$scale0)));
        else {
            $powerOfTen = jm_Multiplication_powerOf10(Long_fromInt($this.$scale0));
            $k = 100 - $powerOfTwo.lo | 0;
            if ($k > 0) {
                $mantisa = jm_BigInteger_shiftLeft($mantisa, $k);
                $exponent = $exponent - $k | 0;
            }
            $quotAndRem = jm_BigInteger_divideAndRemainder($mantisa, $powerOfTen).data;
            $compRem = jm_BigInteger_compareTo(jm_BigInteger_shiftLeftOneBit($quotAndRem[1]), $powerOfTen);
            $mantisa = jm_BigInteger_add(jm_BigInteger_shiftLeft($quotAndRem[0], 2), jm_BigInteger_valueOf(Long_fromInt(($rt_imul($compRem, $compRem + 3 | 0) / 2 | 0) + 1 | 0)));
            $exponent = $exponent + (-2) | 0;
        }
        $lowestSetBit = jm_BigInteger_getLowestSetBit($mantisa);
        $discardedSize = jm_BigInteger_bitLength($mantisa) - 54 | 0;
        if ($discardedSize <= 0) {
            $bits = Long_shl(jm_BigInteger_longValue($mantisa),  -$discardedSize);
            var$12 = Long_ne(Long_and($bits, Long_fromInt(3)), Long_fromInt(3)) ? $bits : Long_add($bits, Long_fromInt(2));
        } else {
            $bits = jm_BigInteger_longValue(jm_BigInteger_shiftRight($mantisa, $discardedSize));
            var$12 = !(Long_eq(Long_and($bits, Long_fromInt(1)), Long_fromInt(1)) && $lowestSetBit < $discardedSize) && Long_ne(Long_and($bits, Long_fromInt(3)), Long_fromInt(3)) ? $bits : Long_add($bits, Long_fromInt(2));
        }
        if (Long_eq(Long_and(var$12, new Long(0, 4194304)), Long_ZERO)) {
            $powerOfTwo = Long_shr(var$12, 1);
            $exponent = $exponent + $discardedSize | 0;
        } else {
            $powerOfTwo = Long_shr(var$12, 2);
            $exponent = $exponent + ($discardedSize + 1 | 0) | 0;
        }
        if ($exponent > 2046)
            return $sign * Infinity;
        if ($exponent <= 0) {
            if ($exponent < (-53))
                return $sign * 0.0;
            a: {
                $powerOfTwo = Long_shr($bits, 1);
                var$13 = Long_and($powerOfTwo, Long_shru(Long_fromInt(-1), 63 + $exponent | 0));
                $powerOfTwo = Long_shr($powerOfTwo,  -$exponent);
                if (Long_ne(Long_and($powerOfTwo, Long_fromInt(3)), Long_fromInt(3))) {
                    if (Long_ne(Long_and($powerOfTwo, Long_fromInt(1)), Long_fromInt(1)))
                        break a;
                    if (Long_eq(var$13, Long_ZERO))
                        break a;
                    if ($lowestSetBit >= $discardedSize)
                        break a;
                }
                $powerOfTwo = Long_add($powerOfTwo, Long_fromInt(1));
            }
            $exponent = 0;
            $powerOfTwo = Long_shr($powerOfTwo, 1);
        }
        return $rt_longBitsToDouble(Long_or(Long_or(Long_and(Long_fromInt($sign), new Long(0, 2147483648)), Long_shl(Long_fromInt($exponent), 52)), Long_and($powerOfTwo, new Long(4294967295, 1048575))));
    }
    return $sign * 0.0;
}
function jm_BigDecimal_longCompareTo($value1, $value2) {
    var var$3;
    jm_BigDecimal_$callClinit();
    var$3 = Long_compare($value1, $value2);
    return var$3 > 0 ? 1 : var$3 >= 0 ? 0 : (-1);
}
function jm_BigDecimal_roundingBehavior($parityBit, $fraction, $roundingMode) {
    var $increment, var$5;
    jm_BigDecimal_$callClinit();
    a: {
        $increment = 0;
        jm_BigDecimal$1_$callClinit();
        switch (jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode.data[$roundingMode.$ordinal]) {
            case 1:
                if (!$fraction)
                    break a;
                var$5 = new jl_ArithmeticException;
                jl_Throwable__init_(var$5, $rt_s(161));
                $rt_throw(var$5);
            case 2:
                $increment = jl_Integer_signum($fraction);
                break a;
            case 3:
                break;
            case 4:
                $increment = jl_Math_max(jl_Integer_signum($fraction), 0);
                break a;
            case 5:
                $increment = jl_Math_min(jl_Integer_signum($fraction), 0);
                break a;
            case 6:
                if (jl_Math_abs0($fraction) < 5)
                    break a;
                $increment = jl_Integer_signum($fraction);
                break a;
            case 7:
                if (jl_Math_abs0($fraction) <= 5)
                    break a;
                $increment = jl_Integer_signum($fraction);
                break a;
            case 8:
                if ((jl_Math_abs0($fraction) + $parityBit | 0) <= 5)
                    break a;
                $increment = jl_Integer_signum($fraction);
                break a;
            default:
                break a;
        }
    }
    return $increment;
}
function jm_BigDecimal_getUnscaledValue($this) {
    if ($this.$intVal === null)
        $this.$intVal = jm_BigInteger_valueOf($this.$smallValue);
    return $this.$intVal;
}
function jm_BigDecimal_setUnscaledValue($this, $unscaledValue) {
    $this.$intVal = $unscaledValue;
    $this.$bitLength = jm_BigInteger_bitLength($unscaledValue);
    if ($this.$bitLength < 64)
        $this.$smallValue = jm_BigInteger_longValue($unscaledValue);
}
function jm_BigDecimal_bitLength($smallValue) {
    jm_BigDecimal_$callClinit();
    if (Long_lt($smallValue, Long_ZERO))
        $smallValue = Long_xor($smallValue, Long_fromInt(-1));
    return 64 - jl_Long_numberOfLeadingZeros($smallValue) | 0;
}
function jm_BigDecimal__clinit_() {
    var var$1, var$2, $i, $j;
    jm_BigDecimal_ZERO = jm_BigDecimal__init_2(0, 0);
    jm_BigDecimal_ONE = jm_BigDecimal__init_2(1, 0);
    jm_BigDecimal_TEN = jm_BigDecimal__init_2(10, 0);
    var$1 = $rt_createLongArray(19);
    var$2 = var$1.data;
    var$2[0] = Long_fromInt(1);
    var$2[1] = Long_fromInt(10);
    var$2[2] = Long_fromInt(100);
    var$2[3] = Long_fromInt(1000);
    var$2[4] = Long_fromInt(10000);
    var$2[5] = Long_fromInt(100000);
    var$2[6] = Long_fromInt(1000000);
    var$2[7] = Long_fromInt(10000000);
    var$2[8] = Long_fromInt(100000000);
    var$2[9] = Long_fromInt(1000000000);
    var$2[10] = new Long(1410065408, 2);
    var$2[11] = new Long(1215752192, 23);
    var$2[12] = new Long(3567587328, 232);
    var$2[13] = new Long(1316134912, 2328);
    var$2[14] = new Long(276447232, 23283);
    var$2[15] = new Long(2764472320, 232830);
    var$2[16] = new Long(1874919424, 2328306);
    var$2[17] = new Long(1569325056, 23283064);
    var$2[18] = new Long(2808348672, 232830643);
    jm_BigDecimal_LONG_TEN_POW = var$1;
    var$1 = $rt_createLongArray(28);
    var$2 = var$1.data;
    var$2[0] = Long_fromInt(1);
    var$2[1] = Long_fromInt(5);
    var$2[2] = Long_fromInt(25);
    var$2[3] = Long_fromInt(125);
    var$2[4] = Long_fromInt(625);
    var$2[5] = Long_fromInt(3125);
    var$2[6] = Long_fromInt(15625);
    var$2[7] = Long_fromInt(78125);
    var$2[8] = Long_fromInt(390625);
    var$2[9] = Long_fromInt(1953125);
    var$2[10] = Long_fromInt(9765625);
    var$2[11] = Long_fromInt(48828125);
    var$2[12] = Long_fromInt(244140625);
    var$2[13] = Long_fromInt(1220703125);
    var$2[14] = new Long(1808548329, 1);
    var$2[15] = new Long(452807053, 7);
    var$2[16] = new Long(2264035265, 35);
    var$2[17] = new Long(2730241733, 177);
    var$2[18] = new Long(766306777, 888);
    var$2[19] = new Long(3831533885, 4440);
    var$2[20] = new Long(1977800241, 22204);
    var$2[21] = new Long(1299066613, 111022);
    var$2[22] = new Long(2200365769, 555111);
    var$2[23] = new Long(2411894253, 2775557);
    var$2[24] = new Long(3469536673, 13877787);
    var$2[25] = new Long(167814181, 69388939);
    var$2[26] = new Long(839070905, 346944695);
    var$2[27] = new Long(4195354525, 1734723475);
    jm_BigDecimal_LONG_FIVE_POW = var$1;
    jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH = $rt_createIntArray(jm_BigDecimal_LONG_FIVE_POW.data.length);
    jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH = $rt_createIntArray(jm_BigDecimal_LONG_TEN_POW.data.length);
    jm_BigDecimal_BI_SCALED_BY_ZERO = $rt_createArray(jm_BigDecimal, 11);
    jm_BigDecimal_ZERO_SCALED_BY = $rt_createArray(jm_BigDecimal, 11);
    jm_BigDecimal_CH_ZEROS = $rt_createCharArray(100);
    $i = 0;
    while ($i < jm_BigDecimal_ZERO_SCALED_BY.data.length) {
        jm_BigDecimal_BI_SCALED_BY_ZERO.data[$i] = jm_BigDecimal__init_2($i, 0);
        jm_BigDecimal_ZERO_SCALED_BY.data[$i] = jm_BigDecimal__init_2(0, $i);
        jm_BigDecimal_CH_ZEROS.data[$i] = 48;
        $i = $i + 1 | 0;
    }
    while ($i < jm_BigDecimal_CH_ZEROS.data.length) {
        jm_BigDecimal_CH_ZEROS.data[$i] = 48;
        $i = $i + 1 | 0;
    }
    $j = 0;
    while ($j < jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH.data.length) {
        jm_BigDecimal_LONG_FIVE_POW_BIT_LENGTH.data[$j] = jm_BigDecimal_bitLength(jm_BigDecimal_LONG_FIVE_POW.data[$j]);
        $j = $j + 1 | 0;
    }
    $j = 0;
    while ($j < jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH.data.length) {
        jm_BigDecimal_LONG_TEN_POW_BIT_LENGTH.data[$j] = jm_BigDecimal_bitLength(jm_BigDecimal_LONG_TEN_POW.data[$j]);
        $j = $j + 1 | 0;
    }
    jm_Multiplication_$callClinit();
    jm_BigDecimal_TEN_POW = jm_Multiplication_bigTenPows;
    jm_BigDecimal_FIVE_POW = jm_Multiplication_bigFivePows;
}
function jl_Double() {
    jl_Number.call(this);
}
var jl_Double_NaN = 0.0;
var jl_Double_TYPE = null;
function jl_Double__clinit_() {
    jl_Double_NaN = NaN;
    jl_Double_TYPE = $rt_cls($rt_doublecls());
}
function jur_FSet() {
    var a = this; jur_AbstractSet.call(a);
    a.$isBackReferenced = 0;
    a.$groupIndex = 0;
}
var jur_FSet_posFSet = null;
function jur_FSet__init_0(var_0) {
    var var_1 = new jur_FSet();
    jur_FSet__init_(var_1, var_0);
    return var_1;
}
function jur_FSet__init_($this, $groupIndex) {
    jur_AbstractSet__init_($this);
    $this.$groupIndex = $groupIndex;
}
function jur_FSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $end, $shift;
    $end = jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex);
    jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex, $stringIndex);
    $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        jur_MatchResultImpl_setEnd($matchResult, $this.$groupIndex, $end);
    return $shift;
}
function jur_FSet_getGroupIndex($this) {
    return $this.$groupIndex;
}
function jur_FSet_getName($this) {
    return $rt_s(162);
}
function jur_FSet_hasConsumed($this, $mr) {
    return 0;
}
function jur_FSet__clinit_() {
    var var$1;
    var$1 = new jur_FSet$PossessiveFSet;
    jur_AbstractSet__init_(var$1);
    jur_FSet_posFSet = var$1;
}
function jur_Lexer() {
    var a = this; jl_Object.call(a);
    a.$pattern = null;
    a.$flags = 0;
    a.$mode = 0;
    a.$savedMode = 0;
    a.$lookBack = 0;
    a.$ch = 0;
    a.$lookAhead = 0;
    a.$patternFullLength = 0;
    a.$curST = null;
    a.$lookAheadST = null;
    a.$index2 = 0;
    a.$prevNW = 0;
    a.$curToc = 0;
    a.$lookAheadToc = 0;
    a.$orig = null;
}
var jur_Lexer_decompTable = null;
var jur_Lexer_singleDecompTable = null;
var jur_Lexer_singleDecompTableSize = 0;
function jur_Lexer_peek($this) {
    return $this.$ch;
}
function jur_Lexer_setMode($this, $mode) {
    if ($mode > 0 && $mode < 3)
        $this.$mode = $mode;
    if ($mode == 1) {
        $this.$lookAhead = $this.$ch;
        $this.$lookAheadST = $this.$curST;
        $this.$index2 = $this.$lookAheadToc;
        $this.$lookAheadToc = $this.$curToc;
        jur_Lexer_movePointer($this);
    }
}
function jur_Lexer_restoreFlags($this, $flags) {
    $this.$flags = $flags;
    $this.$lookAhead = $this.$ch;
    $this.$lookAheadST = $this.$curST;
    $this.$index2 = $this.$curToc + 1 | 0;
    $this.$lookAheadToc = $this.$curToc;
    jur_Lexer_movePointer($this);
}
function jur_Lexer_peekSpecial($this) {
    return $this.$curST;
}
function jur_Lexer_isSpecial($this) {
    return $this.$curST === null ? 0 : 1;
}
function jur_Lexer_isNextSpecial($this) {
    return $this.$lookAheadST === null ? 0 : 1;
}
function jur_Lexer_next($this) {
    jur_Lexer_movePointer($this);
    return $this.$lookBack;
}
function jur_Lexer_nextSpecial($this) {
    var $res;
    $res = $this.$curST;
    jur_Lexer_movePointer($this);
    return $res;
}
function jur_Lexer_lookAhead($this) {
    return $this.$lookAhead;
}
function jur_Lexer_back($this) {
    return $this.$lookBack;
}
function jur_Lexer_movePointer($this) {
    var $reread, $nonCap, $behind, $cs, $negative, $$je;
    $this.$lookBack = $this.$ch;
    $this.$ch = $this.$lookAhead;
    $this.$curST = $this.$lookAheadST;
    $this.$curToc = $this.$lookAheadToc;
    $this.$lookAheadToc = $this.$index2;
    while (true) {
        $reread = 0;
        $this.$lookAhead = $this.$index2 >= $this.$pattern.data.length ? 0 : jur_Lexer_nextCodePoint($this);
        $this.$lookAheadST = null;
        if ($this.$mode == 4) {
            if ($this.$lookAhead != 92)
                return;
            $this.$lookAhead = $this.$index2 >= $this.$pattern.data.length ? 0 : $this.$pattern.data[jur_Lexer_nextIndex($this)];
            switch ($this.$lookAhead) {
                case 69:
                    break;
                default:
                    $this.$lookAhead = 92;
                    $this.$index2 = $this.$prevNW;
                    return;
            }
            $this.$mode = $this.$savedMode;
            $this.$lookAhead = $this.$index2 > ($this.$pattern.data.length - 2 | 0) ? 0 : jur_Lexer_nextCodePoint($this);
        }
        a: {
            if ($this.$lookAhead != 92) {
                if ($this.$mode == 1)
                    switch ($this.$lookAhead) {
                        case 36:
                            $this.$lookAhead = (-536870876);
                            break a;
                        case 40:
                            if ($this.$pattern.data[$this.$index2] != 63) {
                                $this.$lookAhead = (-2147483608);
                                break a;
                            }
                            jur_Lexer_nextIndex($this);
                            $nonCap = $this.$pattern.data[$this.$index2];
                            $behind = 0;
                            while (true) {
                                b: {
                                    if ($behind) {
                                        $behind = 0;
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 61:
                                                $this.$lookAhead = (-134217688);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Lexer_toString($this), $this.$index2));
                                        }
                                        $this.$lookAhead = (-67108824);
                                        jur_Lexer_nextIndex($this);
                                    } else {
                                        switch ($nonCap) {
                                            case 33:
                                                break;
                                            case 60:
                                                jur_Lexer_nextIndex($this);
                                                $nonCap = $this.$pattern.data[$this.$index2];
                                                $behind = 1;
                                                break b;
                                            case 61:
                                                $this.$lookAhead = (-536870872);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            case 62:
                                                $this.$lookAhead = (-33554392);
                                                jur_Lexer_nextIndex($this);
                                                break b;
                                            default:
                                                $this.$lookAhead = jur_Lexer_readFlags($this);
                                                if ($this.$lookAhead < 256) {
                                                    $this.$flags = $this.$lookAhead;
                                                    $this.$lookAhead = $this.$lookAhead << 16;
                                                    $this.$lookAhead = (-1073741784) | $this.$lookAhead;
                                                    break b;
                                                }
                                                $this.$lookAhead = $this.$lookAhead & 255;
                                                $this.$flags = $this.$lookAhead;
                                                $this.$lookAhead = $this.$lookAhead << 16;
                                                $this.$lookAhead = (-16777176) | $this.$lookAhead;
                                                break b;
                                        }
                                        $this.$lookAhead = (-268435416);
                                        jur_Lexer_nextIndex($this);
                                    }
                                }
                                if (!$behind)
                                    break;
                            }
                            break a;
                        case 41:
                            $this.$lookAhead = (-536870871);
                            break a;
                        case 42:
                        case 43:
                        case 63:
                            switch ($this.$index2 >= $this.$pattern.data.length ? 42 : $this.$pattern.data[$this.$index2]) {
                                case 43:
                                    $this.$lookAhead = $this.$lookAhead | (-2147483648);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                case 63:
                                    $this.$lookAhead = $this.$lookAhead | (-1073741824);
                                    jur_Lexer_nextIndex($this);
                                    break a;
                                default:
                            }
                            $this.$lookAhead = $this.$lookAhead | (-536870912);
                            break a;
                        case 46:
                            $this.$lookAhead = (-536870866);
                            break a;
                        case 91:
                            $this.$lookAhead = (-536870821);
                            jur_Lexer_setMode($this, 2);
                            break a;
                        case 93:
                            if ($this.$mode != 2)
                                break a;
                            $this.$lookAhead = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead = (-536870818);
                            break a;
                        case 123:
                            $this.$lookAheadST = jur_Lexer_processQuantifier($this, $this.$lookAhead);
                            break a;
                        case 124:
                            $this.$lookAhead = (-536870788);
                            break a;
                        default:
                    }
                else if ($this.$mode == 2)
                    switch ($this.$lookAhead) {
                        case 38:
                            $this.$lookAhead = (-536870874);
                            break a;
                        case 45:
                            $this.$lookAhead = (-536870867);
                            break a;
                        case 91:
                            $this.$lookAhead = (-536870821);
                            break a;
                        case 93:
                            $this.$lookAhead = (-536870819);
                            break a;
                        case 94:
                            $this.$lookAhead = (-536870818);
                            break a;
                        default:
                    }
            } else {
                $nonCap = $this.$index2 >= ($this.$pattern.data.length - 2 | 0) ? (-1) : jur_Lexer_nextCodePoint($this);
                c: {
                    $this.$lookAhead = $nonCap;
                    switch ($this.$lookAhead) {
                        case -1:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Lexer_toString($this), $this.$index2));
                        case 0:
                        case 1:
                        case 2:
                        case 3:
                        case 4:
                        case 5:
                        case 6:
                        case 7:
                        case 8:
                        case 9:
                        case 10:
                        case 11:
                        case 12:
                        case 13:
                        case 14:
                        case 15:
                        case 16:
                        case 17:
                        case 18:
                        case 19:
                        case 20:
                        case 21:
                        case 22:
                        case 23:
                        case 24:
                        case 25:
                        case 26:
                        case 27:
                        case 28:
                        case 29:
                        case 30:
                        case 31:
                        case 32:
                        case 33:
                        case 34:
                        case 35:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 40:
                        case 41:
                        case 42:
                        case 43:
                        case 44:
                        case 45:
                        case 46:
                        case 47:
                        case 58:
                        case 59:
                        case 60:
                        case 61:
                        case 62:
                        case 63:
                        case 64:
                        case 91:
                        case 92:
                        case 93:
                        case 94:
                        case 95:
                        case 96:
                        case 118:
                            break;
                        case 48:
                            $this.$lookAhead = jur_Lexer_readOctals($this);
                            break a;
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                            if ($this.$mode != 1)
                                break a;
                            $this.$lookAhead = (-2147483648) | $this.$lookAhead;
                            break a;
                        case 65:
                            $this.$lookAhead = (-2147483583);
                            break a;
                        case 66:
                            $this.$lookAhead = (-2147483582);
                            break a;
                        case 67:
                        case 69:
                        case 70:
                        case 72:
                        case 73:
                        case 74:
                        case 75:
                        case 76:
                        case 77:
                        case 78:
                        case 79:
                        case 82:
                        case 84:
                        case 85:
                        case 86:
                        case 88:
                        case 89:
                        case 103:
                        case 104:
                        case 105:
                        case 106:
                        case 107:
                        case 108:
                        case 109:
                        case 111:
                        case 113:
                        case 121:
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Lexer_toString($this), $this.$index2));
                        case 68:
                        case 83:
                        case 87:
                        case 100:
                        case 115:
                        case 119:
                            $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass(jl_String__init_1($this.$pattern, $this.$prevNW, 1), 0);
                            $this.$lookAhead = 0;
                            break a;
                        case 71:
                            $this.$lookAhead = (-2147483577);
                            break a;
                        case 80:
                        case 112:
                            break c;
                        case 81:
                            $this.$savedMode = $this.$mode;
                            $this.$mode = 4;
                            $reread = 1;
                            break a;
                        case 90:
                            $this.$lookAhead = (-2147483558);
                            break a;
                        case 97:
                            $this.$lookAhead = 7;
                            break a;
                        case 98:
                            $this.$lookAhead = (-2147483550);
                            break a;
                        case 99:
                            if ($this.$index2 >= ($this.$pattern.data.length - 2 | 0))
                                $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Lexer_toString($this), $this.$index2));
                            $this.$lookAhead = $this.$pattern.data[jur_Lexer_nextIndex($this)] & 31;
                            break a;
                        case 101:
                            $this.$lookAhead = 27;
                            break a;
                        case 102:
                            $this.$lookAhead = 12;
                            break a;
                        case 110:
                            $this.$lookAhead = 10;
                            break a;
                        case 114:
                            $this.$lookAhead = 13;
                            break a;
                        case 116:
                            $this.$lookAhead = 9;
                            break a;
                        case 117:
                            $this.$lookAhead = jur_Lexer_readHex($this, 4);
                            break a;
                        case 120:
                            $this.$lookAhead = jur_Lexer_readHex($this, 2);
                            break a;
                        case 122:
                            $this.$lookAhead = (-2147483526);
                            break a;
                        default:
                    }
                    break a;
                }
                $cs = jur_Lexer_parseCharClassName($this);
                $negative = 0;
                if ($this.$lookAhead == 80)
                    $negative = 1;
                try {
                    $this.$lookAheadST = jur_AbstractCharClass_getPredefinedClass($cs, $negative);
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof ju_MissingResourceException) {
                        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), jur_Lexer_toString($this), $this.$index2));
                    } else {
                        throw $$e;
                    }
                }
                $this.$lookAhead = 0;
            }
        }
        if ($reread)
            continue;
        else
            break;
    }
}
function jur_Lexer_parseCharClassName($this) {
    var $sb, $ch, $res;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_2($sb, 10);
    if ($this.$index2 < ($this.$pattern.data.length - 2 | 0)) {
        if ($this.$pattern.data[$this.$index2] != 123) {
            $sb = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($sb);
            jl_AbstractStringBuilder_append($sb, $rt_s(163));
            jl_AbstractStringBuilder_append($sb, jl_String__init_1($this.$pattern, jur_Lexer_nextIndex($this), 1));
            return jl_AbstractStringBuilder_toString($sb);
        }
        jur_Lexer_nextIndex($this);
        $ch = 0;
        a: {
            while ($this.$index2 < ($this.$pattern.data.length - 2 | 0)) {
                $ch = $this.$pattern.data[jur_Lexer_nextIndex($this)];
                if ($ch == 125)
                    break a;
                jl_AbstractStringBuilder_append1($sb, $ch);
            }
        }
        if ($ch != 125)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
    }
    if (!jl_StringBuilder_length($sb))
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
    $res = jl_AbstractStringBuilder_toString($sb);
    if (jl_String_length($res) == 1) {
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($sb);
        jl_AbstractStringBuilder_append($sb, $rt_s(163));
        jl_AbstractStringBuilder_append($sb, $res);
        return jl_AbstractStringBuilder_toString($sb);
    }
    b: {
        c: {
            if (jl_String_length($res) > 3) {
                if (jl_String_startsWith($res, $rt_s(163)))
                    break c;
                if (jl_String_startsWith($res, $rt_s(164)))
                    break c;
            }
            break b;
        }
        $res = jl_String_substring0($res, 2);
    }
    return $res;
}
function jur_Lexer_processQuantifier($this, $ch) {
    var $sb, $min, $max, $mod, $$je;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_2($sb, 4);
    $min = (-1);
    $max = 2147483647;
    a: {
        while (true) {
            if ($this.$index2 >= $this.$pattern.data.length)
                break a;
            $ch = $this.$pattern.data[jur_Lexer_nextIndex($this)];
            if ($ch == 125)
                break a;
            if ($ch == 44 && $min < 0)
                try {
                    $min = jl_Integer_parseInt0(jl_StringBuilder_toString($sb), 10);
                    jl_StringBuilder_delete($sb, 0, jl_StringBuilder_length($sb));
                    continue;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_NumberFormatException) {
                        break;
                    } else {
                        throw $$e;
                    }
                }
            jl_AbstractStringBuilder_append1($sb, $ch & 65535);
        }
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
    }
    if ($ch != 125)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
    if (jl_StringBuilder_length($sb) > 0)
        b: {
            try {
                $max = jl_Integer_parseInt0(jl_StringBuilder_toString($sb), 10);
                if ($min >= 0)
                    break b;
                $min = $max;
                break b;
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                } else {
                    throw $$e;
                }
            }
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
        }
    else if ($min < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
    if (($min | $max | ($max - $min | 0)) < 0)
        $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
    $mod = $this.$index2 >= $this.$pattern.data.length ? 42 : $this.$pattern.data[$this.$index2];
    c: {
        switch ($mod) {
            case 43:
                $this.$lookAhead = (-2147483525);
                jur_Lexer_nextIndex($this);
                break c;
            case 63:
                $this.$lookAhead = (-1073741701);
                jur_Lexer_nextIndex($this);
                break c;
            default:
        }
        $this.$lookAhead = (-536870789);
    }
    $sb = new jur_Quantifier;
    $sb.$min3 = $min;
    $sb.$max2 = $max;
    return $sb;
}
function jur_Lexer_toString($this) {
    return $this.$orig;
}
function jur_Lexer_isEmpty($this) {
    return !$this.$ch && !$this.$lookAhead && $this.$index2 == $this.$patternFullLength && !jur_Lexer_isSpecial($this) ? 1 : 0;
}
function jur_Lexer_isLetter0($ch) {
    return $ch < 0 ? 0 : 1;
}
function jur_Lexer_isLetter($this) {
    return !jur_Lexer_isEmpty($this) && !jur_Lexer_isSpecial($this) && jur_Lexer_isLetter0($this.$ch) ? 1 : 0;
}
function jur_Lexer_isHighSurrogate($this) {
    return $this.$ch <= 56319 && $this.$ch >= 55296 ? 1 : 0;
}
function jur_Lexer_isLowSurrogate($this) {
    return $this.$ch <= 57343 && $this.$ch >= 56320 ? 1 : 0;
}
function jur_Lexer_isHighSurrogate0($ch) {
    return $ch <= 56319 && $ch >= 55296 ? 1 : 0;
}
function jur_Lexer_isLowSurrogate0($ch) {
    return $ch <= 57343 && $ch >= 56320 ? 1 : 0;
}
function jur_Lexer_readHex($this, $max) {
    var $st, $length, $i, var$5, $$je;
    $st = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_2($st, $max);
    $length = $this.$pattern.data.length - 2 | 0;
    $i = 0;
    while (true) {
        var$5 = $rt_compare($i, $max);
        if (var$5 >= 0)
            break;
        if ($this.$index2 >= $length)
            break;
        jl_AbstractStringBuilder_append1($st, $this.$pattern.data[jur_Lexer_nextIndex($this)]);
        $i = $i + 1 | 0;
    }
    if (!var$5)
        a: {
            try {
                $max = jl_Integer_parseInt0(jl_StringBuilder_toString($st), 16);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                if ($$je instanceof jl_NumberFormatException) {
                    break a;
                } else {
                    throw $$e;
                }
            }
            return $max;
        }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
}
function jur_Lexer_readOctals($this) {
    var $max, $i, $length, $res, var$5;
    $max = 3;
    $i = 1;
    $length = $this.$pattern.data.length - 2 | 0;
    $res = jl_Character_digit($this.$pattern.data[$this.$index2], 8);
    switch ($res) {
        case -1:
            break;
        default:
            if ($res > 3)
                $max = 2;
            jur_Lexer_nextIndex($this);
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    if ($this.$index2 >= $length)
                        break a;
                    var$5 = jl_Character_digit($this.$pattern.data[$this.$index2], 8);
                    if (var$5 < 0)
                        break;
                    $res = ($res * 8 | 0) + var$5 | 0;
                    jur_Lexer_nextIndex($this);
                    $i = $i + 1 | 0;
                }
            }
            return $res;
    }
    $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
}
function jur_Lexer_readFlags($this) {
    var $pos, $res;
    $pos = 1;
    $res = $this.$flags;
    a: while (true) {
        if ($this.$index2 >= $this.$pattern.data.length)
            $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
        b: {
            c: {
                switch ($this.$pattern.data[$this.$index2]) {
                    case 41:
                        jur_Lexer_nextIndex($this);
                        return $res | 256;
                    case 45:
                        if (!$pos)
                            $rt_throw(jur_PatternSyntaxException__init_($rt_s(44), $this.$orig, $this.$index2));
                        $pos = 0;
                        break b;
                    case 58:
                        break a;
                    case 100:
                        break c;
                    case 105:
                        $res = $pos ? $res | 2 : ($res ^ 2) & $res;
                        break b;
                    case 109:
                        $res = $pos ? $res | 8 : ($res ^ 8) & $res;
                        break b;
                    case 115:
                        $res = $pos ? $res | 32 : ($res ^ 32) & $res;
                        break b;
                    case 117:
                        $res = $pos ? $res | 64 : ($res ^ 64) & $res;
                        break b;
                    case 120:
                        $res = $pos ? $res | 4 : ($res ^ 4) & $res;
                        break b;
                    default:
                }
                break b;
            }
            $res = $pos ? $res | 1 : ($res ^ 1) & $res;
        }
        jur_Lexer_nextIndex($this);
    }
    jur_Lexer_nextIndex($this);
    return $res;
}
function jur_Lexer_nextIndex($this) {
    var var$1, var$2;
    $this.$prevNW = $this.$index2;
    if (!($this.$flags & 4))
        $this.$index2 = $this.$index2 + 1 | 0;
    else {
        var$1 = $this.$pattern.data.length - 2 | 0;
        $this.$index2 = $this.$index2 + 1 | 0;
        a: while (true) {
            if ($this.$index2 < var$1 && jl_Character_isWhitespace($this.$pattern.data[$this.$index2])) {
                $this.$index2 = $this.$index2 + 1 | 0;
                continue;
            }
            if ($this.$index2 >= var$1)
                break;
            if ($this.$pattern.data[$this.$index2] != 35)
                break;
            $this.$index2 = $this.$index2 + 1 | 0;
            while (true) {
                if ($this.$index2 >= var$1)
                    continue a;
                var$2 = $this.$pattern.data[$this.$index2];
                if (var$2 != 10 && var$2 != 13 && var$2 != 133 && (var$2 | 1) != 8233 ? 0 : 1)
                    continue a;
                $this.$index2 = $this.$index2 + 1 | 0;
            }
        }
    }
    return $this.$prevNW;
}
function jur_Lexer_getDecomposition($ch) {
    return jur_Lexer_decompTable.$get3($ch);
}
function jur_Lexer_nextCodePoint($this) {
    var $high, $lowExpectedIndex, $low;
    $high = $this.$pattern.data[jur_Lexer_nextIndex($this)];
    if (jl_Character_isHighSurrogate($high)) {
        $lowExpectedIndex = $this.$prevNW + 1 | 0;
        if ($lowExpectedIndex < $this.$pattern.data.length) {
            $low = $this.$pattern.data[$lowExpectedIndex];
            if (jl_Character_isLowSurrogate($low)) {
                jur_Lexer_nextIndex($this);
                return jl_Character_toCodePoint($high, $low);
            }
        }
    }
    return $high;
}
function jur_Lexer_getIndex($this) {
    return $this.$curToc;
}
function jur_PatternSyntaxException() {
    var a = this; jl_IllegalArgumentException.call(a);
    a.$desc = null;
    a.$pattern1 = null;
    a.$index3 = 0;
}
function jur_PatternSyntaxException__init_(var_0, var_1, var_2) {
    var var_3 = new jur_PatternSyntaxException();
    jur_PatternSyntaxException__init_0(var_3, var_0, var_1, var_2);
    return var_3;
}
function jur_PatternSyntaxException__init_0($this, $description, $pattern, $index) {
    jl_Throwable__init_0($this);
    $this.$index3 = (-1);
    $this.$desc = $description;
    $this.$pattern1 = $pattern;
    $this.$index3 = $index;
}
function jn_CharBufferImpl() {
    jn_CharBuffer.call(this);
}
function jn_CharBufferImpl_isReadOnly($this) {
    return $this.$readOnly0;
}
function jn_CharBufferImpl_subSequence($this, $start, $end) {
    return jn_CharBufferOverArray_duplicate($this, 0, $this.$capacity, $this.$position + $start | 0, $this.$position + $end | 0, $this.$readOnly0);
}
function jn_CharBufferImpl_subSequence0($this, var$1, var$2) {
    return jn_CharBufferImpl_subSequence($this, var$1, var$2);
}
function jn_CharBufferOverArray() {
    var a = this; jn_CharBufferImpl.call(a);
    a.$readOnly0 = 0;
    a.$start4 = 0;
    a.$array2 = null;
}
function jn_CharBufferOverArray__init_0(var_0, var_1, var_2, var_3, var_4, var_5) {
    var var_6 = new jn_CharBufferOverArray();
    jn_CharBufferOverArray__init_(var_6, var_0, var_1, var_2, var_3, var_4, var_5);
    return var_6;
}
function jn_CharBufferOverArray__init_($this, $start, $capacity, $array, $position, $limit, $readOnly) {
    jn_Buffer__init_($this, $capacity);
    $this.$position = $position;
    $this.$limit = $limit;
    $this.$start4 = $start;
    $this.$readOnly0 = $readOnly;
    $this.$array2 = $array;
}
function jn_CharBufferOverArray_duplicate($this, $start, $capacity, $position, $limit, $readOnly) {
    return jn_CharBufferOverArray__init_0($this.$start4 + $start | 0, $capacity, $this.$array2, $position, $limit, $readOnly);
}
function jn_CharBufferOverArray_getChar($this, $index) {
    return $this.$array2.data[$index + $this.$start4 | 0];
}
function jn_CharBufferOverArray_readOnly($this) {
    return $this.$readOnly0;
}
function jnc_CharsetEncoder() {
    var a = this; jl_Object.call(a);
    a.$charset0 = null;
    a.$replacement = null;
    a.$averageBytesPerChar = 0.0;
    a.$maxBytesPerChar = 0.0;
    a.$malformedAction = null;
    a.$unmappableAction = null;
    a.$status = 0;
}
function jnc_CharsetEncoder_onMalformedInput($this, $newAction) {
    var var$2;
    if ($newAction !== null) {
        $this.$malformedAction = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$2, $rt_s(165));
    $rt_throw(var$2);
}
function jnc_CharsetEncoder_implOnMalformedInput($this, $newAction) {
    return;
}
function jnc_CharsetEncoder_onUnmappableCharacter($this, $newAction) {
    var var$2;
    if ($newAction !== null) {
        $this.$unmappableAction = $newAction;
        return $this;
    }
    var$2 = new jl_IllegalArgumentException;
    jl_Throwable__init_(var$2, $rt_s(165));
    $rt_throw(var$2);
}
function jnc_CharsetEncoder_implOnUnmappableCharacter($this, $newAction) {
    return;
}
function jnc_CharsetEncoder_encode($this, $in, $out, $endOfInput) {
    var $result, $e, $remaining, $action, $$je;
    a: {
        if ($this.$status != 3) {
            if ($endOfInput)
                break a;
            if ($this.$status != 2)
                break a;
        }
        $in = new jl_IllegalStateException;
        jl_Throwable__init_0($in);
        $rt_throw($in);
    }
    $this.$status = !$endOfInput ? 1 : 2;
    while (true) {
        try {
            $result = jnci_BufferedEncoder_encodeLoop($this, $in, $out);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_RuntimeException) {
                $e = $$je;
                $in = new jnc_CoderMalfunctionError;
                $in.$suppressionEnabled = 1;
                $in.$writableStackTrace = 1;
                $in.$cause = $e;
                $rt_throw($in);
            } else {
                throw $$e;
            }
        }
        if (jnc_CoderResult_isUnderflow($result)) {
            if (!$endOfInput)
                return $result;
            $remaining = jn_Buffer_remaining($in);
            if ($remaining <= 0)
                return $result;
            $result = jnc_CoderResult_malformedForLength($remaining);
        } else if (jnc_CoderResult_isOverflow($result))
            break;
        $action = !jnc_CoderResult_isUnmappable($result) ? $this.$malformedAction : $this.$unmappableAction;
        b: {
            if ($action !== jnc_CodingErrorAction_REPLACE) {
                if ($action === jnc_CodingErrorAction_IGNORE)
                    break b;
                else
                    return $result;
            }
            if (jn_Buffer_remaining($out) < $this.$replacement.data.length)
                return jnc_CoderResult_OVERFLOW;
            jn_ByteBuffer_put0($out, $this.$replacement);
        }
        jn_CharBuffer_position($in, $in.$position + jnc_CoderResult_length($result) | 0);
    }
    return $result;
}
function jnc_CharsetEncoder_flush($this, $out) {
    var $result;
    if ($this.$status != 2 && $this.$status != 4) {
        $out = new jl_IllegalStateException;
        jl_Throwable__init_0($out);
        $rt_throw($out);
    }
    $result = jnc_CoderResult_UNDERFLOW;
    if ($result === jnc_CoderResult_UNDERFLOW)
        $this.$status = 3;
    return $result;
}
function jnc_CharsetEncoder_implFlush($this, $out) {
    return jnc_CoderResult_UNDERFLOW;
}
function jnc_CoderResult() {
    var a = this; jl_Object.call(a);
    a.$kind = 0;
    a.$length2 = 0;
}
var jnc_CoderResult_UNDERFLOW = null;
var jnc_CoderResult_OVERFLOW = null;
function jnc_CoderResult__init_(var_0, var_1) {
    var var_2 = new jnc_CoderResult();
    jnc_CoderResult__init_0(var_2, var_0, var_1);
    return var_2;
}
function jnc_CoderResult__init_0($this, $kind, $length) {
    $this.$kind = $kind;
    $this.$length2 = $length;
}
function jnc_CoderResult_isUnderflow($this) {
    return $this.$kind ? 0 : 1;
}
function jnc_CoderResult_isOverflow($this) {
    return $this.$kind != 1 ? 0 : 1;
}
function jnc_CoderResult_isError($this) {
    return !jnc_CoderResult_isMalformed($this) && !jnc_CoderResult_isUnmappable($this) ? 0 : 1;
}
function jnc_CoderResult_isMalformed($this) {
    return $this.$kind != 2 ? 0 : 1;
}
function jnc_CoderResult_isUnmappable($this) {
    return $this.$kind != 3 ? 0 : 1;
}
function jnc_CoderResult_length($this) {
    var var$1;
    if (jnc_CoderResult_isError($this))
        return $this.$length2;
    var$1 = new jl_UnsupportedOperationException;
    jl_Throwable__init_0(var$1);
    $rt_throw(var$1);
}
function jnc_CoderResult_malformedForLength($length) {
    return jnc_CoderResult__init_(2, $length);
}
function jnc_CoderResult__clinit_() {
    jnc_CoderResult_UNDERFLOW = jnc_CoderResult__init_(0, 0);
    jnc_CoderResult_OVERFLOW = jnc_CoderResult__init_(1, 0);
}
function ju_Collections$5() {
    ju_AbstractSet.call(this);
}
function ju_Collections$6() {
    ju_AbstractMap.call(this);
}
function ju_Collections$3() {
    ju_AbstractList.call(this);
}
function jur_NonCapFSet() {
    jur_FSet.call(this);
}
function jur_NonCapFSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $gr;
    $gr = $this.$groupIndex;
    jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_NonCapFSet_getName($this) {
    return $rt_s(166);
}
function jur_NonCapFSet_hasConsumed($this, $mr) {
    return 0;
}
function jur_AheadFSet() {
    jur_FSet.call(this);
}
function jur_AheadFSet_matches($this, $stringIndex, $testString, $matchResult) {
    return $stringIndex;
}
function jur_AheadFSet_getName($this) {
    return $rt_s(167);
}
function jur_BehindFSet() {
    jur_FSet.call(this);
}
function jur_BehindFSet_matches($this, $stringIndex, $testString, $matchResult) {
    if (jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex) != $stringIndex)
        $stringIndex = (-1);
    return $stringIndex;
}
function jur_BehindFSet_getName($this) {
    return $rt_s(168);
}
function jur_AtomicFSet() {
    jur_FSet.call(this);
    this.$index4 = 0;
}
function jur_AtomicFSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $gr;
    $gr = $this.$groupIndex;
    jur_MatchResultImpl_setConsumed($matchResult, $gr, $stringIndex - jur_MatchResultImpl_getConsumed($matchResult, $gr) | 0);
    $this.$index4 = $stringIndex;
    return $stringIndex;
}
function jur_AtomicFSet_getIndex($this) {
    return $this.$index4;
}
function jur_AtomicFSet_getName($this) {
    return $rt_s(169);
}
function jur_AtomicFSet_hasConsumed($this, $mr) {
    return 0;
}
function jur_FinalSet() {
    jur_FSet.call(this);
}
function jur_FinalSet_matches($this, $stringIndex, $testString, $matchResult) {
    if ($matchResult.$mode0 != 1 && $stringIndex != $matchResult.$rightBound0)
        return (-1);
    jur_MatchResultImpl_setValid($matchResult);
    jur_MatchResultImpl_setEnd($matchResult, 0, $stringIndex);
    return $stringIndex;
}
function jur_FinalSet_getName($this) {
    return $rt_s(170);
}
function jur_LeafSet() {
    jur_AbstractSet.call(this);
    this.$charCount = 0;
}
function jur_LeafSet__init_0() {
    var var_0 = new jur_LeafSet();
    jur_LeafSet__init_(var_0);
    return var_0;
}
function jur_LeafSet__init_($this) {
    jur_AbstractSet__init_($this);
    $this.$charCount = 1;
}
function jur_LeafSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $shift;
    if (($stringIndex + $this.$charCount0() | 0) > $matchResult.$rightBound0) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $shift = $this.$accepts($stringIndex, $testString);
    if ($shift < 0)
        return (-1);
    return $this.$next4.$matches($stringIndex + $shift | 0, $testString, $matchResult);
}
function jur_LeafSet_charCount($this) {
    return $this.$charCount;
}
function jur_LeafSet_hasConsumed($this, $mr) {
    return 1;
}
function jur_EmptySet() {
    jur_LeafSet.call(this);
}
function jur_EmptySet__init_(var_0) {
    var var_1 = new jur_EmptySet();
    jur_EmptySet__init_0(var_1, var_0);
    return var_1;
}
function jur_EmptySet__init_0($this, $next) {
    jur_AbstractSet__init_2($this, $next);
    $this.$charCount = 1;
    $this.$type0 = 1;
    $this.$charCount = 0;
}
function jur_EmptySet_accepts($this, $stringIndex, $testString) {
    return 0;
}
function jur_EmptySet_find($this, $stringIndex, $testString, $matchResult) {
    var $strLength, $startStr, $high;
    $strLength = $matchResult.$rightBound0;
    $startStr = $matchResult.$leftBound0;
    while (true) {
        $high = $rt_compare($stringIndex, $strLength);
        if ($high > 0)
            return (-1);
        if ($high < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, $stringIndex)) && $stringIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0))) {
            $stringIndex = $stringIndex + 1 | 0;
            continue;
        }
        if ($this.$next4.$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $stringIndex = $stringIndex + 1 | 0;
    }
    return $stringIndex;
}
function jur_EmptySet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
    var $strLength, $startStr;
    $strLength = $matchResult.$rightBound0;
    $startStr = $matchResult.$leftBound0;
    while (true) {
        if ($startSearch < $stringIndex)
            return (-1);
        if ($startSearch < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testString, $startSearch)) && $startSearch > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $startSearch - 1 | 0))) {
            $startSearch = $startSearch + (-1) | 0;
            continue;
        }
        if ($this.$next4.$matches($startSearch, $testString, $matchResult) >= 0)
            break;
        $startSearch = $startSearch + (-1) | 0;
    }
    return $startSearch;
}
function jur_EmptySet_getName($this) {
    return $rt_s(171);
}
function jur_EmptySet_hasConsumed($this, $mr) {
    return 0;
}
function jur_JointSet() {
    var a = this; jur_AbstractSet.call(a);
    a.$children = null;
    a.$fSet = null;
    a.$groupIndex0 = 0;
}
function jur_JointSet__init_0(var_0, var_1) {
    var var_2 = new jur_JointSet();
    jur_JointSet__init_(var_2, var_0, var_1);
    return var_2;
}
function jur_JointSet__init_($this, $children, $fSet) {
    jur_AbstractSet__init_($this);
    $this.$children = $children;
    $this.$fSet = $fSet;
    $this.$groupIndex0 = $fSet.$groupIndex;
}
function jur_JointSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $start, $size, $i, $shift;
    if ($this.$children === null)
        return (-1);
    $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $stringIndex);
    $size = $this.$children.$size0;
    $i = 0;
    while (true) {
        if ($i >= $size) {
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $start);
            return (-1);
        }
        $shift = ju_ArrayList_get($this.$children, $i).$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
}
function jur_JointSet_setNext($this, $next) {
    $this.$fSet.$next4 = $next;
}
function jur_JointSet_getName($this) {
    return $rt_s(172);
}
function jur_JointSet_first($this, $set) {
    var $i;
    a: {
        if ($this.$children !== null) {
            $i = ju_AbstractList_iterator($this.$children);
            while (true) {
                if (!ju_AbstractList$1_hasNext($i))
                    break a;
                if (!ju_AbstractList$1_next($i).$first($set))
                    continue;
                else
                    return 1;
            }
        }
    }
    return 0;
}
function jur_JointSet_hasConsumed($this, $matchResult) {
    return jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0) >= 0 && jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0) == jur_MatchResultImpl_getEnd($matchResult, $this.$groupIndex0) ? 0 : 1;
}
function jur_JointSet_processSecondPass($this) {
    var $childrenSize, $i, $child, $set;
    $this.$isSecondPassVisited = 1;
    if ($this.$fSet !== null && !$this.$fSet.$isSecondPassVisited)
        jur_AbstractSet_processSecondPass($this.$fSet);
    a: {
        if ($this.$children !== null) {
            $childrenSize = $this.$children.$size0;
            $i = 0;
            while (true) {
                if ($i >= $childrenSize)
                    break a;
                $child = ju_ArrayList_get($this.$children, $i);
                $set = $child.$processBackRefReplacement();
                if ($set === null)
                    $set = $child;
                else {
                    $child.$isSecondPassVisited = 1;
                    ju_ArrayList_remove($this.$children, $i);
                    ju_ArrayList_add0($this.$children, $i, $set);
                }
                if (!$set.$isSecondPassVisited)
                    $set.$processSecondPass();
                $i = $i + 1 | 0;
            }
        }
    }
    if ($this.$next4 !== null)
        jur_AbstractSet_processSecondPass($this);
}
function jur_NonCapJointSet() {
    jur_JointSet.call(this);
}
function jur_NonCapJointSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $start, $size, $i, $shift;
    $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
    $size = $this.$children.$size0;
    $i = 0;
    while (true) {
        if ($i >= $size) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $start);
            return (-1);
        }
        $shift = ju_ArrayList_get($this.$children, $i).$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return $shift;
}
function jur_NonCapJointSet_getName($this) {
    return $rt_s(173);
}
function jur_NonCapJointSet_hasConsumed($this, $matchResult) {
    return !jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0) ? 0 : 1;
}
function jur_AtomicJointSet() {
    jur_NonCapJointSet.call(this);
}
function jur_AtomicJointSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $start, $size, $i;
    $start = jur_MatchResultImpl_getConsumed($matchResult, $this.$groupIndex0);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
    $size = $this.$children.$size0;
    $i = 0;
    while ($i < $size) {
        if (ju_ArrayList_get($this.$children, $i).$matches($stringIndex, $testString, $matchResult) >= 0)
            return $this.$next4.$matches($this.$fSet.$index4, $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $start);
    return (-1);
}
function jur_AtomicJointSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_AtomicJointSet_getName($this) {
    return $rt_s(173);
}
function jur_PositiveLookAhead() {
    jur_AtomicJointSet.call(this);
}
function jur_PositiveLookAhead_matches($this, $stringIndex, $testString, $matchResult) {
    var $size, $i;
    $size = $this.$children.$size0;
    $i = 0;
    while ($i < $size) {
        if (ju_ArrayList_get($this.$children, $i).$matches($stringIndex, $testString, $matchResult) >= 0)
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        $i = $i + 1 | 0;
    }
    return (-1);
}
function jur_PositiveLookAhead_hasConsumed($this, $matchResult) {
    return 0;
}
function jur_PositiveLookAhead_getName($this) {
    return $rt_s(174);
}
function jur_NegativeLookAhead() {
    jur_AtomicJointSet.call(this);
}
function jur_NegativeLookAhead_matches($this, $stringIndex, $testString, $matchResult) {
    var $size, $i;
    $size = $this.$children.$size0;
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if (ju_ArrayList_get($this.$children, $i).$matches($stringIndex, $testString, $matchResult) >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
}
function jur_NegativeLookAhead_hasConsumed($this, $matchResult) {
    return 0;
}
function jur_NegativeLookAhead_getName($this) {
    return $rt_s(175);
}
function jur_PositiveLookBehind() {
    jur_AtomicJointSet.call(this);
}
function jur_PositiveLookBehind_matches($this, $stringIndex, $testString, $matchResult) {
    var $size, $leftBound, $shift, $i;
    $size = $this.$children.$size0;
    $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound0;
    a: {
        $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($shift >= 0) {
            jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
            $i = 0;
            while (true) {
                if ($i >= $size)
                    break a;
                if (ju_ArrayList_get($this.$children, $i).$findBack($leftBound, $stringIndex, $testString, $matchResult) >= 0) {
                    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, (-1));
                    return $shift;
                }
                $i = $i + 1 | 0;
            }
        }
    }
    return (-1);
}
function jur_PositiveLookBehind_hasConsumed($this, $matchResult) {
    return 0;
}
function jur_PositiveLookBehind_getName($this) {
    return $rt_s(176);
}
function jur_NegativeLookBehind() {
    jur_AtomicJointSet.call(this);
}
function jur_NegativeLookBehind_matches($this, $stringIndex, $testString, $matchResult) {
    var $size, $i;
    $size = $this.$children.$size0;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$groupIndex0, $stringIndex);
    $i = 0;
    while (true) {
        if ($i >= $size)
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if (ju_ArrayList_get($this.$children, $i).$findBack(0, $stringIndex, $testString, $matchResult) >= 0)
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
}
function jur_NegativeLookBehind_hasConsumed($this, $matchResult) {
    return 0;
}
function jur_NegativeLookBehind_getName($this) {
    return $rt_s(177);
}
function jur_SingleSet() {
    jur_JointSet.call(this);
    this.$kid = null;
}
function jur_SingleSet__init_(var_0, var_1) {
    var var_2 = new jur_SingleSet();
    jur_SingleSet__init_0(var_2, var_0, var_1);
    return var_2;
}
function jur_SingleSet__init_0($this, $child, $fSet) {
    jur_AbstractSet__init_($this);
    $this.$kid = $child;
    $this.$fSet = $fSet;
    $this.$groupIndex0 = $fSet.$groupIndex;
}
function jur_SingleSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $start, $shift;
    $start = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $stringIndex);
    $shift = $this.$kid.$matches($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $start);
    return (-1);
}
function jur_SingleSet_find($this, $stringIndex, $testString, $matchResult) {
    var $res;
    $res = $this.$kid.$find0($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $res);
    return $res;
}
function jur_SingleSet_findBack($this, $stringIndex, $lastIndex, $testString, $matchResult) {
    var $res;
    $res = $this.$kid.$findBack($stringIndex, $lastIndex, $testString, $matchResult);
    if ($res >= 0)
        jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $res);
    return $res;
}
function jur_SingleSet_first($this, $set) {
    return $this.$kid.$first($set);
}
function jur_SingleSet_processBackRefReplacement($this) {
    var $set;
    $set = new jur_BackReferencedSingleSet;
    jur_SingleSet__init_0($set, $this.$kid, $this.$fSet);
    $this.$next4 = $set;
    return $set;
}
function jur_SingleSet_processSecondPass($this) {
    var $set;
    $this.$isSecondPassVisited = 1;
    if ($this.$fSet !== null && !$this.$fSet.$isSecondPassVisited)
        jur_AbstractSet_processSecondPass($this.$fSet);
    if ($this.$kid !== null && !$this.$kid.$isSecondPassVisited) {
        $set = $this.$kid.$processBackRefReplacement();
        if ($set !== null) {
            $this.$kid.$isSecondPassVisited = 1;
            $this.$kid = $set;
        }
        $this.$kid.$processSecondPass();
    }
}
function jn_ByteBufferImpl() {
    var a = this; jn_ByteBuffer.call(a);
    a.$direct = 0;
    a.$readOnly = 0;
}
function jn_ByteBufferImpl_isReadOnly($this) {
    return $this.$readOnly;
}
function ju_TreeMap$1() {
    jl_Object.call(this);
    this.$this$08 = null;
}
function ju_TreeMap$1_compare($this, $o1, $o2) {
    return $o1 === null ? tt_CellPosition_compareTo($o2, $o1) : tt_CellPosition_compareTo($o1, $o2);
}
function jm_BigInteger() {
    var a = this; jl_Number.call(a);
    a.$digits = null;
    a.$numberLength = 0;
    a.$sign1 = 0;
    a.$firstNonzeroDigit = 0;
}
var jm_BigInteger_ZERO = null;
var jm_BigInteger_ONE = null;
var jm_BigInteger_TEN = null;
var jm_BigInteger_MINUS_ONE = null;
var jm_BigInteger_SMALL_VALUES = null;
var jm_BigInteger_TWO_POWS = null;
function jm_BigInteger__init_0(var_0, var_1) {
    var var_2 = new jm_BigInteger();
    jm_BigInteger__init_2(var_2, var_0, var_1);
    return var_2;
}
function jm_BigInteger__init_(var_0, var_1, var_2) {
    var var_3 = new jm_BigInteger();
    jm_BigInteger__init_1(var_3, var_0, var_1, var_2);
    return var_3;
}
function jm_BigInteger__init_3(var_0, var_1) {
    var var_2 = new jm_BigInteger();
    jm_BigInteger__init_4(var_2, var_0, var_1);
    return var_2;
}
function jm_BigInteger__init_2($this, $sign, $value) {
    var var$3;
    $this.$firstNonzeroDigit = (-2);
    $this.$sign1 = $sign;
    $this.$numberLength = 1;
    var$3 = $rt_createIntArray(1);
    var$3.data[0] = $value;
    $this.$digits = var$3;
}
function jm_BigInteger__init_1($this, $sign, $numberLength, $digits) {
    $this.$firstNonzeroDigit = (-2);
    $this.$sign1 = $sign;
    $this.$numberLength = $numberLength;
    $this.$digits = $digits;
}
function jm_BigInteger__init_4($this, $sign, $val) {
    var var$3, var$4;
    $this.$firstNonzeroDigit = (-2);
    $this.$sign1 = $sign;
    if (Long_eq(Long_and($val, new Long(0, 4294967295)), Long_ZERO)) {
        $this.$numberLength = 1;
        var$3 = $rt_createIntArray(1);
        var$3.data[0] = $val.lo;
        $this.$digits = var$3;
    } else {
        $this.$numberLength = 2;
        var$3 = $rt_createIntArray(2);
        var$4 = var$3.data;
        var$4[0] = $val.lo;
        var$4[1] = $val.hi;
        $this.$digits = var$3;
    }
}
function jm_BigInteger_valueOf($val) {
    if (Long_lt($val, Long_ZERO)) {
        if (Long_eq($val, Long_fromInt(-1)))
            return jm_BigInteger_MINUS_ONE;
        return jm_BigInteger__init_3((-1), Long_neg($val));
    }
    if (Long_gt($val, Long_fromInt(10)))
        return jm_BigInteger__init_3(1, $val);
    return jm_BigInteger_SMALL_VALUES.data[$val.lo];
}
function jm_BigInteger_setFromString($bi, $val, $radix) {
    var $stringLength, $sign, $substrStart, $newDigit, $charsPerInt, $bigRadixDigitsLength, $topChars, $digits, $bigRadix, $digitIndex, var$14, $substrStart_0, $bigRadixDigit, var$17, var$18;
    $stringLength = jl_String_length($val);
    if (jl_String_charAt($val, 0) != 45) {
        $sign = 1;
        $substrStart = 0;
        $newDigit = $stringLength;
    } else {
        $sign = (-1);
        $substrStart = 1;
        $newDigit = $stringLength + (-1) | 0;
    }
    $charsPerInt = jm_Conversion_digitFitInInt.data[$radix];
    $bigRadixDigitsLength = $newDigit / $charsPerInt | 0;
    $topChars = $newDigit % $charsPerInt | 0;
    if ($topChars)
        $bigRadixDigitsLength = $bigRadixDigitsLength + 1 | 0;
    $digits = $rt_createIntArray($bigRadixDigitsLength);
    $bigRadix = jm_Conversion_bigRadices.data[$radix - 2 | 0];
    $digitIndex = 0;
    if (!$topChars)
        $topChars = $charsPerInt;
    var$14 = $digits.data;
    $substrStart_0 = $substrStart + $topChars | 0;
    while ($substrStart < $stringLength) {
        $bigRadixDigit = jl_Integer_parseInt0(jl_String_substring($val, $substrStart, $substrStart_0), $radix);
        jm_Multiplication_$callClinit();
        $newDigit = jm_Multiplication_multiplyByInt($digits, $digits, $digitIndex, $bigRadix);
        var$17 = Long_and(Long_fromInt($bigRadixDigit), new Long(4294967295, 0));
        $bigRadixDigitsLength = 0;
        while (Long_ne(var$17, Long_ZERO) && $bigRadixDigitsLength < $digitIndex) {
            var$18 = Long_add(var$17, Long_and(Long_fromInt(var$14[$bigRadixDigitsLength]), new Long(4294967295, 0)));
            var$14[$bigRadixDigitsLength] = var$18.lo;
            var$17 = Long_shr(var$18, 32);
            $bigRadixDigitsLength = $bigRadixDigitsLength + 1 | 0;
        }
        $substrStart = $newDigit + var$17.lo | 0;
        $newDigit = $digitIndex + 1 | 0;
        var$14[$digitIndex] = $substrStart;
        $bigRadixDigitsLength = $substrStart_0 + $charsPerInt | 0;
        $digitIndex = $newDigit;
        $substrStart = $substrStart_0;
        $substrStart_0 = $bigRadixDigitsLength;
    }
    $bi.$sign1 = $sign;
    $bi.$numberLength = $digitIndex;
    $bi.$digits = $digits;
    jm_BigInteger_cutOffLeadingZeroes($bi);
}
function jm_BigInteger_abs($this) {
    if ($this.$sign1 < 0)
        $this = jm_BigInteger__init_(1, $this.$numberLength, $this.$digits);
    return $this;
}
function jm_BigInteger_negate($this) {
    return !$this.$sign1 ? $this : jm_BigInteger__init_( -$this.$sign1, $this.$numberLength, $this.$digits);
}
function jm_BigInteger_add($this, $val) {
    return jm_Elementary_add($this, $val);
}
function jm_BigInteger_subtract($this, $val) {
    var var$2, var$3, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    a: {
        var$2 = $this.$sign1;
        var$3 = $val.$sign1;
        if (var$3) {
            if (!var$2)
                $this = jm_BigInteger_negate($val);
            else {
                var$4 = $this.$numberLength;
                var$5 = $val.$numberLength;
                if ((var$4 + var$5 | 0) == 2) {
                    var$6 = Long_and(Long_fromInt($this.$digits.data[0]), new Long(4294967295, 0));
                    var$7 = Long_and(Long_fromInt($val.$digits.data[0]), new Long(4294967295, 0));
                    if (var$2 < 0)
                        var$6 = Long_neg(var$6);
                    if (var$3 < 0)
                        var$7 = Long_neg(var$7);
                    $this = jm_BigInteger_valueOf(Long_sub(var$6, var$7));
                } else {
                    var$8 = $rt_compare(var$4, var$5);
                    var$8 = !var$8 ? jm_Elementary_compareArrays($this.$digits, $val.$digits, var$4) : var$8 <= 0 ? (-1) : 1;
                    if (var$8 == (-1)) {
                        var$8 =  -var$3;
                        var$9 = var$2 != var$3 ? jm_Elementary_add0($val.$digits, var$5, $this.$digits, var$4) : jm_Elementary_subtract($val.$digits, var$5, $this.$digits, var$4);
                    } else if (var$2 != var$3) {
                        var$9 = jm_Elementary_add0($this.$digits, var$4, $val.$digits, var$5);
                        var$8 = var$2;
                    } else {
                        if (!var$8) {
                            $this = jm_BigInteger_ZERO;
                            break a;
                        }
                        var$9 = jm_Elementary_subtract($this.$digits, var$4, $val.$digits, var$5);
                        var$8 = var$2;
                    }
                    var$10 = var$9.data;
                    $this = jm_BigInteger__init_(var$8, var$10.length, var$9);
                    jm_BigInteger_cutOffLeadingZeroes($this);
                }
            }
        }
    }
    return $this;
}
function jm_BigInteger_signum($this) {
    return $this.$sign1;
}
function jm_BigInteger_shiftRight($this, $n) {
    if ($n && $this.$sign1)
        return $n > 0 ? jm_BitLevel_shiftRight($this, $n) : jm_BitLevel_shiftLeft($this,  -$n);
    return $this;
}
function jm_BigInteger_shiftLeft($this, $n) {
    if ($n && $this.$sign1)
        return $n > 0 ? jm_BitLevel_shiftLeft($this, $n) : jm_BitLevel_shiftRight($this,  -$n);
    return $this;
}
function jm_BigInteger_shiftLeftOneBit($this) {
    var var$1, var$2, var$3, var$4;
    if (!$this.$sign1)
        var$1 = $this;
    else {
        var$2 = $this.$numberLength;
        var$3 = var$2 + 1 | 0;
        var$4 = $rt_createIntArray(var$3);
        jm_BitLevel_shiftLeftOneBit(var$4, $this.$digits, var$2);
        var$1 = jm_BigInteger__init_($this.$sign1, var$3, var$4);
        jm_BigInteger_cutOffLeadingZeroes(var$1);
    }
    return var$1;
}
function jm_BigInteger_bitLength($this) {
    var var$1, var$2;
    if (!$this.$sign1)
        var$1 = 0;
    else {
        var$2 = $this.$numberLength << 5;
        var$1 = $this.$digits.data[$this.$numberLength - 1 | 0];
        if ($this.$sign1 < 0 && jm_BigInteger_getFirstNonzeroDigit($this) == ($this.$numberLength - 1 | 0))
            var$1 = var$1 + (-1) | 0;
        var$1 = var$2 - jl_Integer_numberOfLeadingZeros(var$1) | 0;
    }
    return var$1;
}
function jm_BigInteger_testBit($this, $n) {
    var var$2, $intCount, $digit, $firstNonZeroDigit;
    if (!$n)
        return !($this.$digits.data[0] & 1) ? 0 : 1;
    if ($n < 0) {
        var$2 = new jl_ArithmeticException;
        jl_Throwable__init_(var$2, $rt_s(178));
        $rt_throw(var$2);
    }
    $intCount = $n >> 5;
    if ($intCount >= $this.$numberLength)
        return $this.$sign1 >= 0 ? 0 : 1;
    $digit = $this.$digits.data[$intCount];
    $n = 1 << ($n & 31);
    if ($this.$sign1 < 0) {
        $firstNonZeroDigit = jm_BigInteger_getFirstNonzeroDigit($this);
        if ($intCount < $firstNonZeroDigit)
            return 0;
        $digit = $firstNonZeroDigit == $intCount ?  -$digit : $digit ^ (-1);
    }
    return !($digit & $n) ? 0 : 1;
}
function jm_BigInteger_getLowestSetBit($this) {
    var $i;
    if (!$this.$sign1)
        return (-1);
    $i = jm_BigInteger_getFirstNonzeroDigit($this);
    return ($i << 5) + jl_Integer_numberOfTrailingZeros($this.$digits.data[$i]) | 0;
}
function jm_BigInteger_longValue($this) {
    var $value;
    $value = $this.$numberLength <= 1 ? Long_and(Long_fromInt($this.$digits.data[0]), new Long(4294967295, 0)) : Long_or(Long_shl(Long_fromInt($this.$digits.data[1]), 32), Long_and(Long_fromInt($this.$digits.data[0]), new Long(4294967295, 0)));
    return Long_mul(Long_fromInt($this.$sign1), $value);
}
function jm_BigInteger_compareTo($this, $val) {
    if ($this.$sign1 > $val.$sign1)
        return 1;
    if ($this.$sign1 < $val.$sign1)
        return (-1);
    if ($this.$numberLength > $val.$numberLength)
        return $this.$sign1;
    if ($this.$numberLength < $val.$numberLength)
        return  -$val.$sign1;
    return $rt_imul($this.$sign1, jm_Elementary_compareArrays($this.$digits, $val.$digits, $this.$numberLength));
}
function jm_BigInteger_equals($this, $x) {
    var $x1;
    if ($this === $x)
        return 1;
    if (!($x instanceof jm_BigInteger))
        return 0;
    $x1 = $x;
    return $this.$sign1 == $x1.$sign1 && $this.$numberLength == $x1.$numberLength && jm_BigInteger_equalsArrays($this, $x1.$digits) ? 1 : 0;
}
function jm_BigInteger_equalsArrays($this, $b) {
    var $i, var$3;
    $i = $this.$numberLength - 1 | 0;
    while ($i >= 0) {
        var$3 = $b.data;
        if ($this.$digits.data[$i] != var$3[$i])
            break;
        $i = $i + (-1) | 0;
    }
    return $i >= 0 ? 0 : 1;
}
function jm_BigInteger_multiply($this, $val) {
    if (!$val.$sign1)
        return jm_BigInteger_ZERO;
    if (!$this.$sign1)
        return jm_BigInteger_ZERO;
    jm_Multiplication_$callClinit();
    return jm_Multiplication_karatsuba($this, $val);
}
function jm_BigInteger_pow($this, $exp) {
    var var$2, $x, var$4, var$5, var$6, var$7, var$8, var$9, var$10;
    if ($exp < 0) {
        var$2 = new jl_ArithmeticException;
        jl_Throwable__init_(var$2, $rt_s(179));
        $rt_throw(var$2);
    }
    if (!$exp)
        return jm_BigInteger_ONE;
    if ($exp != 1 && !jm_BigInteger_equals($this, jm_BigInteger_ONE) && !jm_BigInteger_equals($this, jm_BigInteger_ZERO)) {
        if (!jm_BigInteger_testBit($this, 0)) {
            $x = 1;
            while (!jm_BigInteger_testBit($this, $x)) {
                $x = $x + 1 | 0;
            }
            var$4 = $rt_imul($x, $exp);
            if (var$4 < jm_BigInteger_TWO_POWS.data.length)
                var$2 = jm_BigInteger_TWO_POWS.data[var$4];
            else {
                var$5 = var$4 >> 5;
                var$6 = var$4 & 31;
                var$7 = var$5 + 1 | 0;
                var$8 = $rt_createIntArray(var$7);
                var$8.data[var$5] = 1 << var$6;
                var$2 = jm_BigInteger__init_(1, var$7, var$8);
            }
            return jm_BigInteger_multiply(var$2, jm_BigInteger_pow(jm_BigInteger_shiftRight($this, $x), $exp));
        }
        jm_Multiplication_$callClinit();
        var$2 = jm_BigInteger_ONE;
        while ($exp > 1) {
            if ($exp & 1)
                var$2 = jm_BigInteger_multiply(var$2, $this);
            if ($this.$numberLength == 1)
                $this = jm_BigInteger_multiply($this, $this);
            else {
                var$9 = new jm_BigInteger;
                var$8 = jm_Multiplication_square($this.$digits, $this.$numberLength, $rt_createIntArray($this.$numberLength << 1));
                var$10 = var$8.data;
                var$9.$firstNonzeroDigit = (-2);
                var$4 = var$10.length;
                if (var$4) {
                    var$9.$sign1 = 1;
                    var$9.$numberLength = var$4;
                    var$9.$digits = var$8;
                    jm_BigInteger_cutOffLeadingZeroes(var$9);
                } else {
                    var$9.$sign1 = 0;
                    var$9.$numberLength = 1;
                    var$8 = $rt_createIntArray(1);
                    var$8.data[0] = 0;
                    var$9.$digits = var$8;
                }
                $this = var$9;
            }
            $exp = $exp >> 1;
        }
        return jm_BigInteger_multiply(var$2, $this);
    }
    return $this;
}
function jm_BigInteger_divideAndRemainder($this, $divisor) {
    var $divisorSign, $divisorLen, $divisorDigits, $thisDigits, $thisLen, $cmp, $thisSign, $quotientLength, $quotientSign, $quotientDigits, $remainderDigits, $result0, $result1, var$15, var$16, var$17, var$18, var$19, var$20, var$21;
    $divisorSign = $divisor.$sign1;
    if (!$divisorSign) {
        $divisor = new jl_ArithmeticException;
        jl_Throwable__init_($divisor, $rt_s(180));
        $rt_throw($divisor);
    }
    $divisorLen = $divisor.$numberLength;
    $divisorDigits = $divisor.$digits;
    if ($divisorLen != 1) {
        $thisDigits = $this.$digits;
        $thisLen = $this.$numberLength;
        $cmp = $rt_compare($thisLen, $divisorLen);
        if ((!$cmp ? jm_Elementary_compareArrays($thisDigits, $divisorDigits, $thisLen) : $cmp <= 0 ? (-1) : 1) < 0) {
            $divisorDigits = $rt_createArray(jm_BigInteger, 2);
            $thisDigits = $divisorDigits.data;
            $thisDigits[0] = jm_BigInteger_ZERO;
            $thisDigits[1] = $this;
            return $divisorDigits;
        }
        $thisSign = $this.$sign1;
        $quotientLength = ($thisLen - $divisorLen | 0) + 1 | 0;
        $quotientSign = $thisSign != $divisorSign ? (-1) : 1;
        $quotientDigits = $rt_createIntArray($quotientLength);
        $remainderDigits = jm_Division_divide($quotientDigits, $quotientLength, $thisDigits, $thisLen, $divisorDigits, $divisorLen);
        $result0 = jm_BigInteger__init_($quotientSign, $quotientLength, $quotientDigits);
        $result1 = jm_BigInteger__init_($thisSign, $divisorLen, $remainderDigits);
        jm_BigInteger_cutOffLeadingZeroes($result0);
        jm_BigInteger_cutOffLeadingZeroes($result1);
        $divisorDigits = $rt_createArray(jm_BigInteger, 2);
        $thisDigits = $divisorDigits.data;
        $thisDigits[0] = $result0;
        $thisDigits[1] = $result1;
        return $divisorDigits;
    }
    $thisLen = $divisorDigits.data[0];
    $divisorDigits = $this.$digits;
    $divisorLen = $this.$numberLength;
    $thisSign = $this.$sign1;
    if ($divisorLen == 1) {
        var$15 = Long_and(Long_fromInt($divisorDigits.data[0]), new Long(4294967295, 0));
        var$16 = Long_and(Long_fromInt($thisLen), new Long(4294967295, 0));
        var$17 = Long_div(var$15, var$16);
        var$16 = Long_rem(var$15, var$16);
        if ($thisSign != $divisorSign)
            var$17 = Long_neg(var$17);
        if ($thisSign < 0)
            var$16 = Long_neg(var$16);
        $divisorDigits = $rt_createArray(jm_BigInteger, 2);
        $thisDigits = $divisorDigits.data;
        $thisDigits[0] = jm_BigInteger_valueOf(var$17);
        $thisDigits[1] = jm_BigInteger_valueOf(var$16);
    } else {
        $quotientSign = $thisSign != $divisorSign ? (-1) : 1;
        $remainderDigits = $rt_createIntArray($divisorLen);
        $quotientDigits = $remainderDigits.data;
        var$18 = $rt_createIntArray(1);
        var$16 = Long_ZERO;
        var$17 = Long_and(Long_fromInt($thisLen), new Long(4294967295, 0));
        $divisorSign = $divisorLen - 1 | 0;
        var$19 = Long_fromInt($thisLen >>> 1);
        $cmp = $thisLen & 1;
        var$20 = Long_shl(var$17, 1);
        while ($divisorSign >= 0) {
            $thisDigits = $divisorDigits.data;
            var$16 = Long_or(Long_shl(var$16, 32), Long_and(Long_fromInt($thisDigits[$divisorSign]), new Long(4294967295, 0)));
            if (Long_ge(var$16, Long_ZERO)) {
                var$21 = Long_div(var$16, var$17);
                var$16 = Long_rem(var$16, var$17);
            } else {
                var$15 = Long_shru(var$16, 1);
                var$21 = Long_div(var$15, var$19);
                var$16 = Long_add(Long_shl(Long_rem(var$15, var$19), 1), Long_and(var$16, Long_fromInt(1)));
                if ($cmp) {
                    if (Long_le(var$21, var$16))
                        var$16 = Long_sub(var$16, var$21);
                    else if (Long_gt(Long_sub(var$21, var$16), var$17)) {
                        var$16 = Long_add(var$16, Long_sub(var$20, var$21));
                        var$21 = Long_sub(var$21, Long_fromInt(2));
                    } else {
                        var$16 = Long_add(var$16, Long_sub(var$17, var$21));
                        var$21 = Long_sub(var$21, Long_fromInt(1));
                    }
                }
            }
            $quotientDigits[$divisorSign] = Long_and(var$21, new Long(4294967295, 0)).lo;
            $divisorSign = $divisorSign + (-1) | 0;
        }
        var$18.data[0] = var$16.lo;
        $divisor = jm_BigInteger__init_($quotientSign, $divisorLen, $remainderDigits);
        $result0 = jm_BigInteger__init_($thisSign, 1, var$18);
        jm_BigInteger_cutOffLeadingZeroes($divisor);
        jm_BigInteger_cutOffLeadingZeroes($result0);
        $divisorDigits = $rt_createArray(jm_BigInteger, 2);
        $thisDigits = $divisorDigits.data;
        $thisDigits[0] = $divisor;
        $thisDigits[1] = $result0;
    }
    return $divisorDigits;
}
function jm_BigInteger_cutOffLeadingZeroes($this) {
    var var$1, var$2, var$3;
    while ($this.$numberLength > 0) {
        var$1 = $this.$digits.data;
        var$2 = $this.$numberLength - 1 | 0;
        $this.$numberLength = var$2;
        if (var$1[var$2])
            break;
    }
    var$1 = $this.$digits.data;
    var$3 = $this.$numberLength;
    $this.$numberLength = var$3 + 1 | 0;
    if (!var$1[var$3])
        $this.$sign1 = 0;
}
function jm_BigInteger_getFirstNonzeroDigit($this) {
    var $i;
    if ($this.$firstNonzeroDigit == (-2)) {
        if (!$this.$sign1)
            $i = (-1);
        else {
            $i = 0;
            while (!$this.$digits.data[$i]) {
                $i = $i + 1 | 0;
            }
        }
        $this.$firstNonzeroDigit = $i;
    }
    return $this.$firstNonzeroDigit;
}
function jm_BigInteger__clinit_() {
    var var$1, var$2, $i;
    jm_BigInteger_ZERO = jm_BigInteger__init_0(0, 0);
    jm_BigInteger_ONE = jm_BigInteger__init_0(1, 1);
    jm_BigInteger_TEN = jm_BigInteger__init_0(1, 10);
    jm_BigInteger_MINUS_ONE = jm_BigInteger__init_0((-1), 1);
    var$1 = $rt_createArray(jm_BigInteger, 11);
    var$2 = var$1.data;
    var$2[0] = jm_BigInteger_ZERO;
    var$2[1] = jm_BigInteger_ONE;
    var$2[2] = jm_BigInteger__init_0(1, 2);
    var$2[3] = jm_BigInteger__init_0(1, 3);
    var$2[4] = jm_BigInteger__init_0(1, 4);
    var$2[5] = jm_BigInteger__init_0(1, 5);
    var$2[6] = jm_BigInteger__init_0(1, 6);
    var$2[7] = jm_BigInteger__init_0(1, 7);
    var$2[8] = jm_BigInteger__init_0(1, 8);
    var$2[9] = jm_BigInteger__init_0(1, 9);
    var$2[10] = jm_BigInteger_TEN;
    jm_BigInteger_SMALL_VALUES = var$1;
    jm_BigInteger_TWO_POWS = $rt_createArray(jm_BigInteger, 32);
    $i = 0;
    while ($i < jm_BigInteger_TWO_POWS.data.length) {
        jm_BigInteger_TWO_POWS.data[$i] = jm_BigInteger_valueOf(Long_shl(Long_fromInt(1), $i));
        $i = $i + 1 | 0;
    }
}
function jl_Long() {
    jl_Number.call(this);
}
var jl_Long_TYPE = null;
function jl_Long_parseLong0($s, $radix) {
    var $negative, $index, $value, var$6, var$7, $digit, var$9, var$10;
    if ($radix >= 2 && $radix <= 36) {
        if ($s !== null && !jl_String_isEmpty($s)) {
            a: {
                $negative = 0;
                $index = 0;
                switch (jl_String_charAt($s, 0)) {
                    case 43:
                        $index = 1;
                        break a;
                    case 45:
                        $negative = 1;
                        $index = 1;
                        break a;
                    default:
                }
            }
            $value = Long_ZERO;
            var$6 = Long_fromInt($radix);
            while ($index < jl_String_length($s)) {
                var$7 = $index + 1 | 0;
                $digit = jl_Character_getNumericValue(jl_String_charAt($s, $index));
                if ($digit < 0) {
                    var$9 = new jl_NumberFormatException;
                    var$10 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$10);
                    jl_AbstractStringBuilder_append(var$10, $rt_s(62));
                    jl_AbstractStringBuilder_append(var$10, $s);
                    jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(var$10));
                    $rt_throw(var$9);
                }
                if ($digit >= $radix) {
                    var$9 = new jl_NumberFormatException;
                    var$10 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$10);
                    jl_AbstractStringBuilder_append(var$10, $rt_s(63));
                    var$10 = jl_StringBuilder_append2(var$10, $radix);
                    jl_AbstractStringBuilder_append(var$10, $rt_s(2));
                    jl_AbstractStringBuilder_append(var$10, $s);
                    jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(var$10));
                    $rt_throw(var$9);
                }
                $value = Long_add(Long_mul(var$6, $value), Long_fromInt($digit));
                if (Long_lt($value, Long_ZERO)) {
                    if (var$7 == jl_String_length($s) && Long_eq($value, new Long(0, 2147483648)) && $negative)
                        return new Long(0, 2147483648);
                    var$9 = new jl_NumberFormatException;
                    var$10 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$10);
                    jl_AbstractStringBuilder_append(var$10, $rt_s(64));
                    jl_AbstractStringBuilder_append(var$10, $s);
                    jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(var$10));
                    $rt_throw(var$9);
                }
                $index = var$7;
            }
            if ($negative)
                $value = Long_neg($value);
            return $value;
        }
        $s = new jl_NumberFormatException;
        jl_Throwable__init_($s, $rt_s(65));
        $rt_throw($s);
    }
    var$9 = new jl_NumberFormatException;
    $s = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($s);
    jl_AbstractStringBuilder_append($s, $rt_s(66));
    jl_Throwable__init_(var$9, jl_AbstractStringBuilder_toString(jl_StringBuilder_append2($s, $radix)));
    $rt_throw(var$9);
}
function jl_Long_parseLong($s) {
    return jl_Long_parseLong0($s, 10);
}
function jl_Long_numberOfLeadingZeros($i) {
    var $n, var$3;
    if (Long_eq($i, Long_ZERO))
        return 64;
    $n = 0;
    var$3 = Long_shru($i, 32);
    if (Long_ne(var$3, Long_ZERO))
        $n = 32;
    else
        var$3 = $i;
    $i = Long_shru(var$3, 16);
    if (Long_eq($i, Long_ZERO))
        $i = var$3;
    else
        $n = $n | 16;
    var$3 = Long_shru($i, 8);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = $i;
    else
        $n = $n | 8;
    $i = Long_shru(var$3, 4);
    if (Long_eq($i, Long_ZERO))
        $i = var$3;
    else
        $n = $n | 4;
    var$3 = Long_shru($i, 2);
    if (Long_eq(var$3, Long_ZERO))
        var$3 = $i;
    else
        $n = $n | 2;
    if (Long_ne(Long_shru(var$3, 1), Long_ZERO))
        $n = $n | 1;
    return (64 - $n | 0) - 1 | 0;
}
function jl_Long_signum($i) {
    return Long_or(Long_shr($i, 63), Long_shru(Long_neg($i), 63)).lo;
}
function jl_Long_divideUnsigned(var$1, var$2) {
    return Long_udiv(var$1, var$2);
}
function jl_Long_remainderUnsigned(var$1, var$2) {
    return Long_urem(var$1, var$2);
}
function jl_Long__clinit_() {
    jl_Long_TYPE = $rt_cls($rt_longcls());
}
function jm_Multiplication() {
    jl_Object.call(this);
}
var jm_Multiplication_tenPows = null;
var jm_Multiplication_fivePows = null;
var jm_Multiplication_bigTenPows = null;
var jm_Multiplication_bigFivePows = null;
function jm_Multiplication_$callClinit() {
    jm_Multiplication_$callClinit = $rt_eraseClinit(jm_Multiplication);
    jm_Multiplication__clinit_();
}
function jm_Multiplication_karatsuba($op1, $op2) {
    var $upperOp1, $ndiv2, $upperOp2, $lowerOp1, $lowerOp2, $upper, $lower, var$10, var$11, var$12, var$13, var$14, var$15, var$16, var$17, var$18, var$19, var$20, var$21, var$22, var$23;
    jm_Multiplication_$callClinit();
    if ($op2.$numberLength <= $op1.$numberLength) {
        $upperOp1 = $op2;
        $op2 = $op1;
        $op1 = $upperOp1;
    }
    if ($op1.$numberLength >= 63) {
        $ndiv2 = ($op2.$numberLength & (-2)) << 4;
        $upperOp1 = jm_BigInteger_shiftRight($op2, $ndiv2);
        $upperOp2 = jm_BigInteger_shiftRight($op1, $ndiv2);
        $lowerOp1 = jm_BigInteger_subtract($op2, jm_BigInteger_shiftLeft($upperOp1, $ndiv2));
        $lowerOp2 = jm_BigInteger_subtract($op1, jm_BigInteger_shiftLeft($upperOp2, $ndiv2));
        $upper = jm_Multiplication_karatsuba($upperOp1, $upperOp2);
        $lower = jm_Multiplication_karatsuba($lowerOp1, $lowerOp2);
        $op1 = jm_BigInteger_shiftLeft(jm_BigInteger_add(jm_BigInteger_add(jm_Multiplication_karatsuba(jm_BigInteger_subtract($upperOp1, $lowerOp1), jm_BigInteger_subtract($lowerOp2, $upperOp2)), $upper), $lower), $ndiv2);
        return jm_BigInteger_add(jm_BigInteger_add(jm_BigInteger_shiftLeft($upper, $ndiv2 << 1), $op1), $lower);
    }
    $ndiv2 = $op2.$numberLength;
    var$10 = $op1.$numberLength;
    var$11 = $ndiv2 + var$10 | 0;
    var$12 = $op2.$sign1 == $op1.$sign1 ? 1 : (-1);
    if (var$11 == 2) {
        var$13 = jm_Multiplication_unsignedMultAddAdd($op2.$digits.data[0], $op1.$digits.data[0], 0, 0);
        $ndiv2 = var$13.lo;
        var$10 = var$13.hi;
        if (!var$10)
            $op1 = jm_BigInteger__init_0(var$12, $ndiv2);
        else {
            $op1 = new jm_BigInteger;
            var$14 = $rt_createIntArray(2);
            var$15 = var$14.data;
            var$15[0] = $ndiv2;
            var$15[1] = var$10;
            jm_BigInteger__init_1($op1, var$12, 2, var$14);
        }
    } else {
        var$16 = $op2.$digits;
        var$17 = $op1.$digits;
        var$18 = $rt_createIntArray(var$11);
        if ($ndiv2 && var$10) {
            if ($ndiv2 == 1) {
                var$14 = var$16.data;
                var$18.data[var$10] = jm_Multiplication_multiplyByInt(var$18, var$17, var$10, var$14[0]);
            } else if (var$10 == 1) {
                var$14 = var$17.data;
                var$18.data[$ndiv2] = jm_Multiplication_multiplyByInt(var$18, var$16, $ndiv2, var$14[0]);
            } else if (var$16 === var$17 && $ndiv2 == var$10)
                jm_Multiplication_square(var$16, $ndiv2, var$18);
            else {
                var$15 = var$18.data;
                var$19 = 0;
                while (var$19 < $ndiv2) {
                    var$14 = var$16.data;
                    var$13 = Long_ZERO;
                    var$20 = var$14[var$19];
                    var$21 = 0;
                    while (var$21 < var$10) {
                        var$22 = var$17.data[var$21];
                        var$23 = var$19 + var$21 | 0;
                        var$13 = jm_Multiplication_unsignedMultAddAdd(var$20, var$22, var$15[var$23], var$13.lo);
                        var$15[var$23] = var$13.lo;
                        var$13 = Long_shru(var$13, 32);
                        var$21 = var$21 + 1 | 0;
                    }
                    var$15[var$19 + var$10 | 0] = var$13.lo;
                    var$19 = var$19 + 1 | 0;
                }
            }
        }
        $op1 = jm_BigInteger__init_(var$12, var$11, var$18);
        jm_BigInteger_cutOffLeadingZeroes($op1);
    }
    return $op1;
}
function jm_Multiplication_multiplyByInt($res, $a, $aSize, $factor) {
    var $carry, $i, var$7;
    jm_Multiplication_$callClinit();
    $carry = Long_ZERO;
    $i = 0;
    while ($i < $aSize) {
        var$7 = $res.data;
        $carry = jm_Multiplication_unsignedMultAddAdd($a.data[$i], $factor, $carry.lo, 0);
        var$7[$i] = $carry.lo;
        $carry = Long_shru($carry, 32);
        $i = $i + 1 | 0;
    }
    return $carry.lo;
}
function jm_Multiplication_square($a, $aLen, $res) {
    var $i, $carry, $i_0, $j, var$8, var$9, $index, var$11, var$12;
    jm_Multiplication_$callClinit();
    $i = 0;
    while ($i < $aLen) {
        $carry = Long_ZERO;
        $i_0 = $i + 1 | 0;
        $j = $i_0;
        while ($j < $aLen) {
            var$8 = $res.data;
            var$9 = $a.data;
            $index = var$9[$i];
            var$11 = var$9[$j];
            var$12 = $i + $j | 0;
            $carry = jm_Multiplication_unsignedMultAddAdd($index, var$11, var$8[var$12], $carry.lo);
            var$8[var$12] = $carry.lo;
            $carry = Long_shru($carry, 32);
            $j = $j + 1 | 0;
        }
        $res.data[$i + $aLen | 0] = $carry.lo;
        $i = $i_0;
    }
    jm_BitLevel_shiftLeftOneBit($res, $res, $aLen << 1);
    $carry = Long_ZERO;
    $i = 0;
    $index = 0;
    while ($i < $aLen) {
        var$8 = $res.data;
        var$9 = $a.data;
        $carry = jm_Multiplication_unsignedMultAddAdd(var$9[$i], var$9[$i], var$8[$index], $carry.lo);
        var$8[$index] = $carry.lo;
        $carry = Long_shru($carry, 32);
        $i_0 = $index + 1 | 0;
        $carry = Long_add($carry, Long_and(Long_fromInt(var$8[$i_0]), new Long(4294967295, 0)));
        var$8[$i_0] = $carry.lo;
        $carry = Long_shru($carry, 32);
        $i = $i + 1 | 0;
        $index = $i_0 + 1 | 0;
    }
    return $res;
}
function jm_Multiplication_powerOf10($exp) {
    var $intExp, $powerOfFive, $longExp, var$5;
    jm_Multiplication_$callClinit();
    $intExp = $exp.lo;
    if (Long_lt($exp, Long_fromInt(jm_Multiplication_bigTenPows.data.length)))
        return jm_Multiplication_bigTenPows.data[$intExp];
    if (Long_le($exp, Long_fromInt(50)))
        return jm_BigInteger_pow(jm_BigInteger_TEN, $intExp);
    if (Long_le($exp, Long_fromInt(1000)))
        return jm_BigInteger_shiftLeft(jm_BigInteger_pow(jm_Multiplication_bigFivePows.data[1], $intExp), $intExp);
    if (Long_gt(Long_add(Long_fromInt(1), Long_fromNumber(Long_toNumber($exp) / 2.4082399653118496)), Long_fromInt(1000000))) {
        $powerOfFive = new jl_ArithmeticException;
        jl_Throwable__init_($powerOfFive, $rt_s(181));
        $rt_throw($powerOfFive);
    }
    if (Long_le($exp, Long_fromInt(2147483647)))
        return jm_BigInteger_shiftLeft(jm_BigInteger_pow(jm_Multiplication_bigFivePows.data[1], $intExp), $intExp);
    $powerOfFive = jm_BigInteger_pow(jm_Multiplication_bigFivePows.data[1], 2147483647);
    $longExp = Long_sub($exp, Long_fromInt(2147483647));
    $intExp = Long_rem($exp, Long_fromInt(2147483647)).lo;
    var$5 = $powerOfFive;
    $exp = $longExp;
    while (Long_gt($exp, Long_fromInt(2147483647))) {
        var$5 = jm_BigInteger_multiply(var$5, $powerOfFive);
        $exp = Long_sub($exp, Long_fromInt(2147483647));
    }
    $powerOfFive = jm_BigInteger_shiftLeft(jm_BigInteger_multiply(var$5, jm_BigInteger_pow(jm_Multiplication_bigFivePows.data[1], $intExp)), 2147483647);
    while (Long_gt($longExp, Long_fromInt(2147483647))) {
        $powerOfFive = jm_BigInteger_shiftLeft($powerOfFive, 2147483647);
        $longExp = Long_sub($longExp, Long_fromInt(2147483647));
    }
    return jm_BigInteger_shiftLeft($powerOfFive, $intExp);
}
function jm_Multiplication_unsignedMultAddAdd($a, $b, $c, $d) {
    jm_Multiplication_$callClinit();
    return Long_add(Long_add(Long_mul(Long_and(Long_fromInt($a), new Long(4294967295, 0)), Long_and(Long_fromInt($b), new Long(4294967295, 0))), Long_and(Long_fromInt($c), new Long(4294967295, 0))), Long_and(Long_fromInt($d), new Long(4294967295, 0)));
}
function jm_Multiplication__clinit_() {
    var var$1, var$2, $fivePow, $i, var$5;
    var$1 = $rt_createIntArray(10);
    var$2 = var$1.data;
    var$2[0] = 1;
    var$2[1] = 10;
    var$2[2] = 100;
    var$2[3] = 1000;
    var$2[4] = 10000;
    var$2[5] = 100000;
    var$2[6] = 1000000;
    var$2[7] = 10000000;
    var$2[8] = 100000000;
    var$2[9] = 1000000000;
    jm_Multiplication_tenPows = var$1;
    var$1 = $rt_createIntArray(14);
    var$2 = var$1.data;
    var$2[0] = 1;
    var$2[1] = 5;
    var$2[2] = 25;
    var$2[3] = 125;
    var$2[4] = 625;
    var$2[5] = 3125;
    var$2[6] = 15625;
    var$2[7] = 78125;
    var$2[8] = 390625;
    var$2[9] = 1953125;
    var$2[10] = 9765625;
    var$2[11] = 48828125;
    var$2[12] = 244140625;
    var$2[13] = 1220703125;
    jm_Multiplication_fivePows = var$1;
    jm_Multiplication_bigTenPows = $rt_createArray(jm_BigInteger, 32);
    jm_Multiplication_bigFivePows = $rt_createArray(jm_BigInteger, 32);
    $fivePow = Long_fromInt(1);
    $i = 0;
    while ($i <= 18) {
        jm_Multiplication_bigFivePows.data[$i] = jm_BigInteger_valueOf($fivePow);
        jm_Multiplication_bigTenPows.data[$i] = jm_BigInteger_valueOf(Long_shl($fivePow, $i));
        $fivePow = Long_mul($fivePow, Long_fromInt(5));
        $i = $i + 1 | 0;
    }
    while ($i < jm_Multiplication_bigTenPows.data.length) {
        var$2 = jm_Multiplication_bigFivePows.data;
        var$1 = jm_Multiplication_bigFivePows.data;
        var$5 = $i - 1 | 0;
        var$2[$i] = jm_BigInteger_multiply(var$1[var$5], jm_Multiplication_bigFivePows.data[1]);
        jm_Multiplication_bigTenPows.data[$i] = jm_BigInteger_multiply(jm_Multiplication_bigTenPows.data[var$5], jm_BigInteger_TEN);
        $i = $i + 1 | 0;
    }
}
function jl_ArrayStoreException() {
    jl_RuntimeException.call(this);
}
function jur_SpecialToken() {
    jl_Object.call(this);
}
function jur_AbstractCharClass() {
    var a = this; jur_SpecialToken.call(a);
    a.$alt0 = 0;
    a.$altSurrogates = 0;
    a.$lowHighSurrogates = null;
    a.$charClassWithoutSurrogates = null;
    a.$charClassWithSurrogates = null;
    a.$mayContainSupplCodepoints = 0;
}
var jur_AbstractCharClass_charClasses = null;
function jur_AbstractCharClass__init_() {
    var var_0 = new jur_AbstractCharClass();
    jur_AbstractCharClass__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass__init_0($this) {
    var var$1;
    var$1 = new ju_BitSet;
    var$1.$data0 = $rt_createIntArray(64);
    $this.$lowHighSurrogates = var$1;
}
function jur_AbstractCharClass_getBits($this) {
    return null;
}
function jur_AbstractCharClass_getLowHighSurrogates($this) {
    return $this.$lowHighSurrogates;
}
function jur_AbstractCharClass_hasLowHighSurrogates($this) {
    return !$this.$altSurrogates ? (ju_BitSet_nextSetBit($this.$lowHighSurrogates, 0) >= 2048 ? 0 : 1) : ju_BitSet_nextClearBit($this.$lowHighSurrogates, 0) >= 2048 ? 0 : 1;
}
function jur_AbstractCharClass_mayContainSupplCodepoints($this) {
    return $this.$mayContainSupplCodepoints;
}
function jur_AbstractCharClass_getInstance($this) {
    return $this;
}
function jur_AbstractCharClass_getSurrogates($this) {
    var $lHS, var$2;
    if ($this.$charClassWithSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        var$2 = new jur_AbstractCharClass$1;
        var$2.$this$09 = $this;
        var$2.$val$lHS = $lHS;
        jur_AbstractCharClass__init_0(var$2);
        $this.$charClassWithSurrogates = var$2;
        jur_AbstractCharClass_setNegative($this.$charClassWithSurrogates, $this.$altSurrogates);
    }
    return $this.$charClassWithSurrogates;
}
function jur_AbstractCharClass_getWithoutSurrogates($this) {
    var $lHS, var$2;
    if ($this.$charClassWithoutSurrogates === null) {
        $lHS = $this.$getLowHighSurrogates();
        var$2 = new jur_AbstractCharClass$2;
        var$2.$this$010 = $this;
        var$2.$val$lHS0 = $lHS;
        var$2.$val$thisClass = $this;
        jur_AbstractCharClass__init_0(var$2);
        $this.$charClassWithoutSurrogates = var$2;
        jur_AbstractCharClass_setNegative($this.$charClassWithoutSurrogates, $this.$alt0);
        $this.$charClassWithoutSurrogates.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints;
    }
    return $this.$charClassWithoutSurrogates;
}
function jur_AbstractCharClass_hasUCI($this) {
    return 0;
}
function jur_AbstractCharClass_setNegative($this, $value) {
    if ($this.$alt0 ^ $value) {
        $this.$alt0 = $this.$alt0 ? 0 : 1;
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
    }
    if (!$this.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    return $this;
}
function jur_AbstractCharClass_isNegative($this) {
    return $this.$alt0;
}
function jur_AbstractCharClass_intersects($cc1, $cc2) {
    if ($cc1.$getBits() !== null && $cc2.$getBits() !== null)
        return ju_BitSet_intersects($cc1.$getBits(), $cc2.$getBits());
    return 1;
}
function jur_AbstractCharClass_getPredefinedClass($name, $negative) {
    return jur_AbstractCharClass$LazyCharClass_getValue(jur_AbstractCharClass$PredefinedCharacterClasses_getObject(jur_AbstractCharClass_charClasses, $name), $negative);
}
function jur_AbstractCharClass__clinit_() {
    jur_AbstractCharClass_charClasses = new jur_AbstractCharClass$PredefinedCharacterClasses;
}
function jur_CharClass() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$ci = 0;
    a.$uci = 0;
    a.$hasUCI0 = 0;
    a.$invertedSurrogates = 0;
    a.$inverted = 0;
    a.$hideBits = 0;
    a.$bits = null;
    a.$nonBitSet = null;
}
function jur_CharClass__init_0() {
    var var_0 = new jur_CharClass();
    jur_CharClass__init_1(var_0);
    return var_0;
}
function jur_CharClass__init_(var_0, var_1) {
    var var_2 = new jur_CharClass();
    jur_CharClass__init_2(var_2, var_0, var_1);
    return var_2;
}
function jur_CharClass__init_1($this) {
    jur_AbstractCharClass__init_0($this);
    $this.$bits = ju_BitSet__init_();
}
function jur_CharClass__init_2($this, $ci, $uci) {
    jur_AbstractCharClass__init_0($this);
    $this.$bits = ju_BitSet__init_();
    $this.$ci = $ci;
    $this.$uci = $uci;
}
function jur_CharClass_add($this, $ch) {
    a: {
        if ($this.$ci) {
            b: {
                if (!($ch >= 97 && $ch <= 122)) {
                    if ($ch < 65)
                        break b;
                    if ($ch > 90)
                        break b;
                }
                if ($this.$inverted) {
                    ju_BitSet_clear($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                    break a;
                }
                ju_BitSet_set($this.$bits, jur_Pattern_getSupplement($ch & 65535));
                break a;
            }
            if ($this.$uci && $ch > 128) {
                $this.$hasUCI0 = 1;
                $ch = jl_Character_toLowerCase0(jl_Character_toUpperCase($ch));
            }
        }
    }
    if (!(!jur_Lexer_isHighSurrogate0($ch) && !jur_Lexer_isLowSurrogate0($ch))) {
        if ($this.$invertedSurrogates)
            ju_BitSet_clear($this.$lowHighSurrogates, $ch - 55296 | 0);
        else
            ju_BitSet_set($this.$lowHighSurrogates, $ch - 55296 | 0);
    }
    if ($this.$inverted)
        ju_BitSet_clear($this.$bits, $ch);
    else
        ju_BitSet_set($this.$bits, $ch);
    if (!$this.$mayContainSupplCodepoints && jl_Character_isSupplementaryCodePoint($ch))
        $this.$mayContainSupplCodepoints = 1;
    return $this;
}
function jur_CharClass_add1($this, $cc) {
    var $curAlt, $nb, var$4;
    if (!$this.$mayContainSupplCodepoints && $cc.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    if ($this.$invertedSurrogates) {
        if (!$cc.$altSurrogates)
            ju_BitSet_andNot($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        else
            ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
    } else if (!$cc.$altSurrogates)
        ju_BitSet_or($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        ju_BitSet_and($this.$lowHighSurrogates, $cc.$getLowHighSurrogates());
        $this.$altSurrogates = $this.$altSurrogates ? 0 : 1;
        $this.$invertedSurrogates = 1;
    }
    if (!$this.$hideBits && $cc.$getBits() !== null) {
        if ($this.$inverted) {
            if (!$cc.$alt0)
                ju_BitSet_andNot($this.$bits, $cc.$getBits());
            else
                ju_BitSet_and($this.$bits, $cc.$getBits());
        } else if (!$cc.$alt0)
            ju_BitSet_or($this.$bits, $cc.$getBits());
        else {
            ju_BitSet_xor($this.$bits, $cc.$getBits());
            ju_BitSet_and($this.$bits, $cc.$getBits());
            $this.$alt0 = $this.$alt0 ? 0 : 1;
            $this.$inverted = 1;
        }
    } else {
        $curAlt = $this.$alt0;
        if ($this.$nonBitSet !== null) {
            $nb = $this.$nonBitSet;
            if (!$curAlt) {
                var$4 = new jur_CharClass$5;
                var$4.$this$011 = $this;
                var$4.$val$curAlt = $curAlt;
                var$4.$val$nb = $nb;
                var$4.$val$cc = $cc;
                jur_AbstractCharClass__init_0(var$4);
                $this.$nonBitSet = var$4;
            } else {
                var$4 = new jur_CharClass$4;
                var$4.$this$012 = $this;
                var$4.$val$curAlt0 = $curAlt;
                var$4.$val$nb0 = $nb;
                var$4.$val$cc0 = $cc;
                jur_AbstractCharClass__init_0(var$4);
                $this.$nonBitSet = var$4;
            }
        } else {
            if ($curAlt && !$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                $nb = new jur_CharClass$1;
                $nb.$this$013 = $this;
                $nb.$val$cc1 = $cc;
                jur_AbstractCharClass__init_0($nb);
                $this.$nonBitSet = $nb;
            } else if (!$curAlt) {
                $nb = new jur_CharClass$3;
                $nb.$this$014 = $this;
                $nb.$val$curAlt1 = $curAlt;
                $nb.$val$cc2 = $cc;
                jur_AbstractCharClass__init_0($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$2;
                $nb.$this$015 = $this;
                $nb.$val$curAlt2 = $curAlt;
                $nb.$val$cc3 = $cc;
                jur_AbstractCharClass__init_0($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
    return $this;
}
function jur_CharClass_add0($this, $i, $end) {
    var var$3;
    if ($i > $end) {
        var$3 = new jl_IllegalArgumentException;
        jl_Throwable__init_0(var$3);
        $rt_throw(var$3);
    }
    a: {
        b: {
            if (!$this.$ci) {
                if ($end < 55296)
                    break b;
                if ($i > 57343)
                    break b;
            }
            $end = $end + 1 | 0;
            while (true) {
                if ($i >= $end)
                    break a;
                jur_CharClass_add($this, $i);
                $i = $i + 1 | 0;
            }
        }
        if ($this.$inverted)
            ju_BitSet_clear0($this.$bits, $i, $end + 1 | 0);
        else
            ju_BitSet_set0($this.$bits, $i, $end + 1 | 0);
    }
    return $this;
}
function jur_CharClass_union($this, $clazz) {
    var $curAlt, $nb, var$4;
    if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    if ($clazz.$hasUCI0)
        $this.$hasUCI0 = 1;
    if (!($this.$altSurrogates ^ $clazz.$altSurrogates)) {
        if (!$this.$altSurrogates)
            ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
    } else if ($this.$altSurrogates)
        ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        $this.$altSurrogates = 1;
    }
    if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
        if (!($this.$alt0 ^ $clazz.$alt0)) {
            if (!$this.$alt0)
                ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
            else
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
        } else if ($this.$alt0)
            ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
        else {
            ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
            ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
            $this.$alt0 = 1;
        }
    } else {
        $curAlt = $this.$alt0;
        if ($this.$nonBitSet !== null) {
            $nb = $this.$nonBitSet;
            if (!$curAlt) {
                var$4 = new jur_CharClass$11;
                var$4.$this$016 = $this;
                var$4.$val$curAlt3 = $curAlt;
                var$4.$val$nb1 = $nb;
                var$4.$val$clazz = $clazz;
                jur_AbstractCharClass__init_0(var$4);
                $this.$nonBitSet = var$4;
            } else {
                var$4 = new jur_CharClass$10;
                var$4.$this$017 = $this;
                var$4.$val$curAlt4 = $curAlt;
                var$4.$val$nb2 = $nb;
                var$4.$val$clazz0 = $clazz;
                jur_AbstractCharClass__init_0(var$4);
                $this.$nonBitSet = var$4;
            }
        } else {
            if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                if (!$curAlt) {
                    $nb = new jur_CharClass$7;
                    $nb.$this$018 = $this;
                    $nb.$val$clazz1 = $clazz;
                    jur_AbstractCharClass__init_0($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$6;
                    $nb.$this$019 = $this;
                    $nb.$val$clazz2 = $clazz;
                    jur_AbstractCharClass__init_0($nb);
                    $this.$nonBitSet = $nb;
                }
            } else if (!$curAlt) {
                $nb = new jur_CharClass$9;
                $nb.$this$020 = $this;
                $nb.$val$clazz3 = $clazz;
                $nb.$val$curAlt5 = $curAlt;
                jur_AbstractCharClass__init_0($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$8;
                $nb.$this$021 = $this;
                $nb.$val$clazz4 = $clazz;
                $nb.$val$curAlt6 = $curAlt;
                jur_AbstractCharClass__init_0($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
}
function jur_CharClass_intersection($this, $clazz) {
    var $curAlt, $nb, var$4;
    if (!$this.$mayContainSupplCodepoints && $clazz.$mayContainSupplCodepoints)
        $this.$mayContainSupplCodepoints = 1;
    if ($clazz.$hasUCI0)
        $this.$hasUCI0 = 1;
    if (!($this.$altSurrogates ^ $clazz.$altSurrogates)) {
        if (!$this.$altSurrogates)
            ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        else
            ju_BitSet_or($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
    } else if (!$this.$altSurrogates)
        ju_BitSet_andNot($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
    else {
        ju_BitSet_xor($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        ju_BitSet_and($this.$lowHighSurrogates, $clazz.$lowHighSurrogates);
        $this.$altSurrogates = 0;
    }
    if (!$this.$hideBits && jur_CharClass_getBits($clazz) !== null) {
        if (!($this.$alt0 ^ $clazz.$alt0)) {
            if (!$this.$alt0)
                ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
            else
                ju_BitSet_or($this.$bits, jur_CharClass_getBits($clazz));
        } else if (!$this.$alt0)
            ju_BitSet_andNot($this.$bits, jur_CharClass_getBits($clazz));
        else {
            ju_BitSet_xor($this.$bits, jur_CharClass_getBits($clazz));
            ju_BitSet_and($this.$bits, jur_CharClass_getBits($clazz));
            $this.$alt0 = 0;
        }
    } else {
        $curAlt = $this.$alt0;
        if ($this.$nonBitSet !== null) {
            $nb = $this.$nonBitSet;
            if (!$curAlt) {
                var$4 = new jur_CharClass$17;
                var$4.$this$022 = $this;
                var$4.$val$curAlt7 = $curAlt;
                var$4.$val$nb3 = $nb;
                var$4.$val$clazz5 = $clazz;
                jur_AbstractCharClass__init_0(var$4);
                $this.$nonBitSet = var$4;
            } else {
                var$4 = new jur_CharClass$16;
                var$4.$this$023 = $this;
                var$4.$val$curAlt8 = $curAlt;
                var$4.$val$nb4 = $nb;
                var$4.$val$clazz6 = $clazz;
                jur_AbstractCharClass__init_0(var$4);
                $this.$nonBitSet = var$4;
            }
        } else {
            if (!$this.$inverted && ju_BitSet_isEmpty($this.$bits)) {
                if (!$curAlt) {
                    $nb = new jur_CharClass$13;
                    $nb.$this$024 = $this;
                    $nb.$val$clazz7 = $clazz;
                    jur_AbstractCharClass__init_0($nb);
                    $this.$nonBitSet = $nb;
                } else {
                    $nb = new jur_CharClass$12;
                    $nb.$this$025 = $this;
                    $nb.$val$clazz8 = $clazz;
                    jur_AbstractCharClass__init_0($nb);
                    $this.$nonBitSet = $nb;
                }
            } else if (!$curAlt) {
                $nb = new jur_CharClass$15;
                $nb.$this$026 = $this;
                $nb.$val$clazz9 = $clazz;
                $nb.$val$curAlt9 = $curAlt;
                jur_AbstractCharClass__init_0($nb);
                $this.$nonBitSet = $nb;
            } else {
                $nb = new jur_CharClass$14;
                $nb.$this$027 = $this;
                $nb.$val$clazz10 = $clazz;
                $nb.$val$curAlt10 = $curAlt;
                jur_AbstractCharClass__init_0($nb);
                $this.$nonBitSet = $nb;
            }
            $this.$hideBits = 1;
        }
    }
}
function jur_CharClass_contains($this, $ch) {
    if ($this.$nonBitSet !== null)
        return $this.$alt0 ^ $this.$nonBitSet.$contains3($ch);
    return $this.$alt0 ^ ju_BitSet_get($this.$bits, $ch);
}
function jur_CharClass_getBits($this) {
    if (!$this.$hideBits)
        return $this.$bits;
    return null;
}
function jur_CharClass_getLowHighSurrogates($this) {
    return $this.$lowHighSurrogates;
}
function jur_CharClass_getInstance($this) {
    var $bs, $res;
    if ($this.$nonBitSet !== null)
        return $this;
    $bs = jur_CharClass_getBits($this);
    $res = new jur_CharClass$18;
    $res.$this$028 = $this;
    $res.$val$bs = $bs;
    jur_AbstractCharClass__init_0($res);
    return jur_AbstractCharClass_setNegative($res, $this.$alt0);
}
function jur_CharClass_toString($this) {
    var $temp, $i;
    $temp = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($temp);
    $i = ju_BitSet_nextSetBit($this.$bits, 0);
    while ($i >= 0) {
        jl_AbstractStringBuilder_append3($temp, jl_Character_toChars($i));
        jl_AbstractStringBuilder_append1($temp, 124);
        $i = ju_BitSet_nextSetBit($this.$bits, $i + 1 | 0);
    }
    if ($temp.$length0 > 0)
        jl_StringBuilder_deleteCharAt($temp, $temp.$length0 - 1 | 0);
    return jl_AbstractStringBuilder_toString($temp);
}
function jur_CharClass_hasUCI($this) {
    return $this.$hasUCI0;
}
function ju_MissingResourceException() {
    var a = this; jl_RuntimeException.call(a);
    a.$className = null;
    a.$key1 = null;
}
function jur_QuantifierSet() {
    jur_AbstractSet.call(this);
    this.$innerSet = null;
}
function jur_QuantifierSet__init_0(var_0, var_1, var_2) {
    var var_3 = new jur_QuantifierSet();
    jur_QuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
}
function jur_QuantifierSet__init_($this, $innerSet, $next, $type) {
    jur_AbstractSet__init_2($this, $next);
    $this.$innerSet = $innerSet;
    $this.$type0 = $type;
}
function jur_QuantifierSet_getInnerSet($this) {
    return $this.$innerSet;
}
function jur_QuantifierSet_first($this, $set) {
    return !$this.$innerSet.$first($set) && !$this.$next4.$first($set) ? 0 : 1;
}
function jur_QuantifierSet_hasConsumed($this, $mr) {
    return 1;
}
function jur_QuantifierSet_processSecondPass($this) {
    var $set;
    $this.$isSecondPassVisited = 1;
    if ($this.$next4 !== null && !$this.$next4.$isSecondPassVisited) {
        $set = $this.$next4.$processBackRefReplacement();
        if ($set !== null) {
            $this.$next4.$isSecondPassVisited = 1;
            $this.$next4 = $set;
        }
        $this.$next4.$processSecondPass();
    }
    if ($this.$innerSet !== null) {
        if (!$this.$innerSet.$isSecondPassVisited) {
            $set = $this.$innerSet.$processBackRefReplacement();
            if ($set !== null) {
                $this.$innerSet.$isSecondPassVisited = 1;
                $this.$innerSet = $set;
            }
            $this.$innerSet.$processSecondPass();
        } else if ($this.$innerSet instanceof jur_SingleSet && $this.$innerSet.$fSet.$isBackReferenced)
            $this.$innerSet = $this.$innerSet.$next4;
    }
}
function jur_LeafQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$leaf = null;
}
function jur_LeafQuantifierSet__init_0(var_0, var_1, var_2) {
    var var_3 = new jur_LeafQuantifierSet();
    jur_LeafQuantifierSet__init_(var_3, var_0, var_1, var_2);
    return var_3;
}
function jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type) {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$leaf = $innerSet;
}
function jur_LeafQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $i, var$5;
    $i = 0;
    a: {
        while (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
            var$5 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$5 <= 0)
                break a;
            $stringIndex = $stringIndex + var$5 | 0;
            $i = $i + 1 | 0;
        }
    }
    while (true) {
        if ($i < 0)
            return (-1);
        var$5 = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if (var$5 >= 0)
            break;
        $stringIndex = $stringIndex - $this.$leaf.$charCount0() | 0;
        $i = $i + (-1) | 0;
    }
    return var$5;
}
function jur_LeafQuantifierSet_getName($this) {
    return $rt_s(182);
}
function jur_CompositeQuantifierSet() {
    jur_LeafQuantifierSet.call(this);
    this.$quantifier = null;
}
function jur_CompositeQuantifierSet__init_0(var_0, var_1, var_2, var_3) {
    var var_4 = new jur_CompositeQuantifierSet();
    jur_CompositeQuantifierSet__init_(var_4, var_0, var_1, var_2, var_3);
    return var_4;
}
function jur_CompositeQuantifierSet__init_($this, $quant, $innerSet, $next, $type) {
    jur_LeafQuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier = $quant;
}
function jur_CompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $min, $max, $i, $shift;
    $min = $this.$quantifier.$min3;
    $max = $this.$quantifier.$max2;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while ($i < $max) {
                    if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break a;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            while (true) {
                if ($i < $min)
                    return (-1);
                $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
                if ($shift >= 0)
                    break;
                $stringIndex = $stringIndex - $this.$leaf.$charCount0() | 0;
                $i = $i + (-1) | 0;
            }
            return $shift;
        }
        if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift < 1)
            break;
        $stringIndex = $stringIndex + $shift | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
}
function jur_CompositeQuantifierSet_getName($this) {
    return jur_Quantifier_toString($this.$quantifier);
}
function jur_GroupQuantifierSet() {
    jur_QuantifierSet.call(this);
}
function jur_GroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_GroupQuantifierSet_getName($this) {
    return $rt_s(183);
}
function jur_AltQuantifierSet() {
    jur_LeafQuantifierSet.call(this);
}
function jur_AltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $shift;
    $shift = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
    return $shift;
}
function jur_AltQuantifierSet_setNext($this, $next) {
    $this.$next4 = $next;
    $this.$innerSet.$setNext($next);
}
function jur_UnifiedQuantifierSet() {
    jur_LeafQuantifierSet.call(this);
}
function jur_UnifiedQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    while (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0 && $this.$leaf.$accepts($stringIndex, $testString) > 0) {
        $stringIndex = $stringIndex + $this.$leaf.$charCount0() | 0;
    }
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_UnifiedQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
    var $startSearch, $newSearch, $newSearch_0;
    $startSearch = $this.$next4.$find0($stringIndex, $testString, $matchResult);
    if ($startSearch < 0)
        return (-1);
    $newSearch = $startSearch - $this.$leaf.$charCount0() | 0;
    while ($newSearch >= $stringIndex && $this.$leaf.$accepts($newSearch, $testString) > 0) {
        $newSearch_0 = $newSearch - $this.$leaf.$charCount0() | 0;
        $startSearch = $newSearch;
        $newSearch = $newSearch_0;
    }
    return $startSearch;
}
function ju_Dictionary() {
    jl_Object.call(this);
}
function ju_Hashtable() {
    var a = this; ju_Dictionary.call(a);
    a.$elementCount0 = 0;
    a.$elementData0 = null;
    a.$loadFactor0 = 0.0;
    a.$threshold0 = 0;
    a.$firstSlot = 0;
    a.$lastSlot = 0;
    a.$modCount4 = 0;
}
var ju_Hashtable_EMPTY_ENUMERATION = null;
var ju_Hashtable_EMPTY_ITERATOR = null;
function ju_Hashtable__init_0() {
    var var_0 = new ju_Hashtable();
    ju_Hashtable__init_(var_0);
    return var_0;
}
function ju_Hashtable__init_($this) {
    $this.$lastSlot = (-1);
    $this.$elementCount0 = 0;
    $this.$elementData0 = $rt_createArray(ju_Hashtable$Entry, 11);
    $this.$firstSlot = $this.$elementData0.data.length;
    $this.$loadFactor0 = 0.75;
    ju_Hashtable_computeMaxSize($this);
}
function ju_Hashtable_computeMaxSize($this) {
    $this.$threshold0 = $this.$elementData0.data.length * $this.$loadFactor0 | 0;
}
function ju_Hashtable_get($this, $key) {
    var $hash, $index, $entry;
    jl_Object_monitorEnterSync($this);
    try {
        $hash = jl_String_hashCode($key);
        $index = ($hash & 2147483647) % $this.$elementData0.data.length | 0;
        $entry = $this.$elementData0.data[$index];
        while ($entry !== null) {
            if (ju_Hashtable$Entry_equalsKey($entry, $key, $hash))
                return $entry.$value2;
            $entry = $entry.$next6;
        }
        return null;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Hashtable_put($this, $key, $value) {
    var $hash, var$4, $index, $entry, $result, var$8;
    jl_Object_monitorEnterSync($this);
    try {
        if ($key !== null && $value !== null) {
            $hash = jl_String_hashCode($key);
            var$4 = $hash & 2147483647;
            $index = var$4 % $this.$elementData0.data.length | 0;
            $entry = $this.$elementData0.data[$index];
            while ($entry !== null && !ju_Hashtable$Entry_equalsKey($entry, $key, $hash)) {
                $entry = $entry.$next6;
            }
            if ($entry !== null) {
                $result = $entry.$value2;
                $entry.$value2 = $value;
                return $result;
            }
            $this.$modCount4 = $this.$modCount4 + 1 | 0;
            var$8 = $this.$elementCount0 + 1 | 0;
            $this.$elementCount0 = var$8;
            if (var$8 > $this.$threshold0) {
                ju_Hashtable_rehash($this);
                $index = var$4 % $this.$elementData0.data.length | 0;
            }
            if ($index < $this.$firstSlot)
                $this.$firstSlot = $index;
            if ($index > $this.$lastSlot)
                $this.$lastSlot = $index;
            $entry = new ju_Hashtable$Entry;
            ju_MapEntry__init_($entry, $key, $value);
            $entry.$hashcode = jl_String_hashCode($key);
            $entry.$next6 = $this.$elementData0.data[$index];
            $this.$elementData0.data[$index] = $entry;
            return null;
        }
        $key = new jl_NullPointerException;
        jl_Throwable__init_0($key);
        $rt_throw($key);
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Hashtable_rehash($this) {
    var $length, $newLast, $newData, var$4, $i, var$6, $entry, $index, $entry_0;
    $length = ($this.$elementData0.data.length << 1) + 1 | 0;
    if (!$length)
        $length = 1;
    $newLast = (-1);
    $newData = $rt_createArray(ju_Hashtable$Entry, $length);
    var$4 = $newData.data;
    $i = $this.$lastSlot + 1 | 0;
    var$6 = $length;
    while (true) {
        $i = $i + (-1) | 0;
        if ($i < $this.$firstSlot)
            break;
        $entry = $this.$elementData0.data[$i];
        while ($entry !== null) {
            $index = (ju_Hashtable$Entry_getKeyHash($entry) & 2147483647) % $length | 0;
            if ($index < var$6)
                var$6 = $index;
            if ($index > $newLast)
                $newLast = $index;
            $entry_0 = $entry.$next6;
            $entry.$next6 = var$4[$index];
            var$4[$index] = $entry;
            $entry = $entry_0;
        }
    }
    $this.$firstSlot = var$6;
    $this.$lastSlot = $newLast;
    $this.$elementData0 = $newData;
    ju_Hashtable_computeMaxSize($this);
}
function ju_Hashtable__clinit_() {
    ju_Hashtable_EMPTY_ENUMERATION = new ju_Hashtable$1;
    ju_Hashtable_EMPTY_ITERATOR = new ju_Hashtable$2;
}
function ju_Properties() {
    ju_Hashtable.call(this);
    this.$defaults = null;
}
function ju_Properties_getProperty($this, $name) {
    var $result, $property;
    $result = ju_Hashtable_get($this, $name);
    $property = !($result instanceof jl_String) ? null : $result;
    if ($property === null && $this.$defaults !== null)
        $property = ju_Properties_getProperty($this.$defaults, $name);
    return $property;
}
function jur_Quantifier() {
    var a = this; jur_SpecialToken.call(a);
    a.$min3 = 0;
    a.$max2 = 0;
}
function jur_Quantifier_min($this) {
    return $this.$min3;
}
function jur_Quantifier_max($this) {
    return $this.$max2;
}
function jur_Quantifier_toString($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(184));
    var$1 = jl_StringBuilder_append2(var$1, $this.$min3);
    jl_AbstractStringBuilder_append(var$1, $rt_s(32));
    jl_AbstractStringBuilder_append(var$1, $this.$max2 == 2147483647 ? $rt_s(44) : jl_Integer_toString0(jl_Integer__init_($this.$max2)));
    jl_AbstractStringBuilder_append(var$1, $rt_s(185));
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_FSet$PossessiveFSet() {
    jur_AbstractSet.call(this);
}
function jur_FSet$PossessiveFSet_matches($this, $stringIndex, $testString, $matchResult) {
    return $stringIndex;
}
function jur_FSet$PossessiveFSet_getName($this) {
    return $rt_s(186);
}
function jur_FSet$PossessiveFSet_hasConsumed($this, $mr) {
    return 0;
}
function ju_BitSet() {
    var a = this; jl_Object.call(a);
    a.$data0 = null;
    a.$length3 = 0;
}
function ju_BitSet__init_() {
    var var_0 = new ju_BitSet();
    ju_BitSet__init_0(var_0);
    return var_0;
}
function ju_BitSet__init_0($this) {
    $this.$data0 = $rt_createIntArray(0);
}
function ju_BitSet_set($this, $bitIndex) {
    var $index, var$3;
    $index = $bitIndex / 32 | 0;
    if ($bitIndex >= $this.$length3) {
        ju_BitSet_ensureCapacity($this, $index + 1 | 0);
        $this.$length3 = $bitIndex + 1 | 0;
    }
    var$3 = $this.$data0.data;
    var$3[$index] = var$3[$index] | 1 << ($bitIndex % 32 | 0);
}
function ju_BitSet_set0($this, $fromIndex, $toIndex) {
    var var$3, $fromDataIndex, $toDataIndex, var$6, $i;
    if ($fromIndex > $toIndex) {
        var$3 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0(var$3);
        $rt_throw(var$3);
    }
    $fromDataIndex = $fromIndex / 32 | 0;
    $toDataIndex = $toIndex / 32 | 0;
    if ($toIndex > $this.$length3) {
        ju_BitSet_ensureCapacity($this, $toDataIndex + 1 | 0);
        $this.$length3 = $toIndex;
    }
    if ($fromDataIndex == $toDataIndex) {
        var$6 = $this.$data0.data;
        var$6[$fromDataIndex] = var$6[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex) & ju_BitSet_trailingOneBits($this, $toIndex);
    } else {
        var$6 = $this.$data0.data;
        var$6[$fromDataIndex] = var$6[$fromDataIndex] | ju_BitSet_trailingZeroBits($this, $fromIndex);
        $i = $fromDataIndex + 1 | 0;
        while ($i < $toDataIndex) {
            $this.$data0.data[$i] = (-1);
            $i = $i + 1 | 0;
        }
        var$6 = $this.$data0.data;
        var$6[$toDataIndex] = var$6[$toDataIndex] | ju_BitSet_trailingOneBits($this, $toIndex);
    }
}
function ju_BitSet_trailingZeroBits($this, $num) {
    return (-1) << ($num % 32 | 0);
}
function ju_BitSet_trailingOneBits($this, $num) {
    $num = $num % 32 | 0;
    return !$num ? 0 : (-1) >>> (32 - $num | 0);
}
function ju_BitSet_clear($this, $bitIndex) {
    var $index, var$3, var$4, var$5;
    $index = $bitIndex / 32 | 0;
    if ($index < $this.$data0.data.length) {
        var$3 = $this.$data0.data;
        var$4 = var$3[$index];
        var$5 = ($bitIndex % 32 | 0) & 31;
        var$3[$index] = var$4 & ((-2) << var$5 | (-2) >>> (32 - var$5 | 0));
        if ($bitIndex == ($this.$length3 - 1 | 0))
            ju_BitSet_recalculateLength($this);
    }
}
function ju_BitSet_clear0($this, $fromIndex, $toIndex) {
    var var$3, $fromDataIndex, $toDataIndex, var$6, $i;
    if ($fromIndex > $toIndex) {
        var$3 = new jl_IndexOutOfBoundsException;
        jl_Throwable__init_0(var$3);
        $rt_throw(var$3);
    }
    if ($fromIndex >= $this.$length3)
        return;
    $toIndex = jl_Math_min($this.$length3, $toIndex);
    $fromDataIndex = $fromIndex / 32 | 0;
    $toDataIndex = $toIndex / 32 | 0;
    if ($fromDataIndex == $toDataIndex) {
        var$6 = $this.$data0.data;
        var$6[$fromDataIndex] = var$6[$fromDataIndex] & (ju_BitSet_trailingOneBits($this, $fromIndex) | ju_BitSet_trailingZeroBits($this, $toIndex));
    } else {
        var$6 = $this.$data0.data;
        var$6[$fromDataIndex] = var$6[$fromDataIndex] & ju_BitSet_trailingOneBits($this, $fromIndex);
        $i = $fromDataIndex + 1 | 0;
        while ($i < $toDataIndex) {
            $this.$data0.data[$i] = 0;
            $i = $i + 1 | 0;
        }
        var$6 = $this.$data0.data;
        var$6[$toDataIndex] = var$6[$toDataIndex] & ju_BitSet_trailingZeroBits($this, $toIndex);
    }
    ju_BitSet_recalculateLength($this);
}
function ju_BitSet_get($this, $bitIndex) {
    var $index;
    $index = $bitIndex / 32 | 0;
    return $index < $this.$data0.data.length && $this.$data0.data[$index] & 1 << ($bitIndex % 32 | 0) ? 1 : 0;
}
function ju_BitSet_nextSetBit($this, $fromIndex) {
    var $index, $top, $i;
    if ($fromIndex >= $this.$length3)
        return (-1);
    $index = $fromIndex / 32 | 0;
    $top = $this.$data0.data[$index] >>> ($fromIndex % 32 | 0);
    if ($top)
        return jl_Integer_numberOfTrailingZeros($top) + $fromIndex | 0;
    $top = ($this.$length3 + 31 | 0) / 32 | 0;
    $i = $index + 1 | 0;
    while ($i < $top) {
        if ($this.$data0.data[$i])
            return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros($this.$data0.data[$i]) | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
}
function ju_BitSet_nextClearBit($this, $fromIndex) {
    var $index, $top, $i;
    if ($fromIndex >= $this.$length3)
        return $fromIndex;
    $index = $fromIndex / 32 | 0;
    $top = ($this.$data0.data[$index] ^ (-1)) >>> ($fromIndex % 32 | 0);
    if ($top)
        return jl_Integer_numberOfTrailingZeros($top) + $fromIndex | 0;
    $top = ($this.$length3 + 31 | 0) / 32 | 0;
    $i = $index + 1 | 0;
    while ($i < $top) {
        if ($this.$data0.data[$i] != (-1))
            return ($i * 32 | 0) + jl_Integer_numberOfTrailingZeros($this.$data0.data[$i] ^ (-1)) | 0;
        $i = $i + 1 | 0;
    }
    return $this.$length3;
}
function ju_BitSet_ensureCapacity($this, $capacity) {
    var $newArrayLength, var$3, var$4, var$5;
    if ($this.$data0.data.length >= $capacity)
        return;
    $newArrayLength = jl_Math_max(($capacity * 3 | 0) / 2 | 0, ($this.$data0.data.length * 2 | 0) + 1 | 0);
    var$3 = $this.$data0.data;
    var$4 = $rt_createIntArray($newArrayLength);
    var$5 = var$4.data;
    $capacity = jl_Math_min($newArrayLength, var$3.length);
    $newArrayLength = 0;
    while ($newArrayLength < $capacity) {
        var$5[$newArrayLength] = var$3[$newArrayLength];
        $newArrayLength = $newArrayLength + 1 | 0;
    }
    $this.$data0 = var$4;
}
function ju_BitSet_recalculateLength($this) {
    var $top, $i, $sz;
    $top = ($this.$length3 + 31 | 0) / 32 | 0;
    $this.$length3 = $top * 32 | 0;
    $i = $top - 1 | 0;
    a: {
        while (true) {
            if ($i < 0)
                break a;
            $sz = jl_Integer_numberOfLeadingZeros($this.$data0.data[$i]);
            if ($sz < 32)
                break;
            $i = $i + (-1) | 0;
            $this.$length3 = $this.$length3 - 32 | 0;
        }
        $this.$length3 = $this.$length3 - $sz | 0;
    }
}
function ju_BitSet_intersects($this, $set) {
    var $sz, $i;
    $sz = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
    $i = 0;
    while ($i < $sz) {
        if ($this.$data0.data[$i] & $set.$data0.data[$i])
            return 1;
        $i = $i + 1 | 0;
    }
    return 0;
}
function ju_BitSet_and($this, $set) {
    var $i, $i_0, var$4;
    $i = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
    $i_0 = 0;
    while ($i_0 < $i) {
        var$4 = $this.$data0.data;
        var$4[$i_0] = var$4[$i_0] & $set.$data0.data[$i_0];
        $i_0 = $i_0 + 1 | 0;
    }
    while ($i < $this.$data0.data.length) {
        $this.$data0.data[$i] = 0;
        $i = $i + 1 | 0;
    }
    $this.$length3 = jl_Math_min($this.$length3, $set.$length3);
    ju_BitSet_recalculateLength($this);
}
function ju_BitSet_andNot($this, $set) {
    var $sz, $i, var$4;
    $sz = jl_Math_min($this.$data0.data.length, $set.$data0.data.length);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data0.data;
        var$4[$i] = var$4[$i] & ($set.$data0.data[$i] ^ (-1));
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
}
function ju_BitSet_or($this, $set) {
    var $sz, $i, var$4;
    $this.$length3 = jl_Math_max($this.$length3, $set.$length3);
    ju_BitSet_ensureCapacity($this, ($this.$length3 + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data0.data.length, $set.$length3);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data0.data;
        var$4[$i] = var$4[$i] | $set.$data0.data[$i];
        $i = $i + 1 | 0;
    }
}
function ju_BitSet_xor($this, $set) {
    var $sz, $i, var$4;
    $this.$length3 = jl_Math_max($this.$length3, $set.$length3);
    ju_BitSet_ensureCapacity($this, ($this.$length3 + 31 | 0) / 32 | 0);
    $sz = jl_Math_min($this.$data0.data.length, $set.$length3);
    $i = 0;
    while ($i < $sz) {
        var$4 = $this.$data0.data;
        var$4[$i] = var$4[$i] ^ $set.$data0.data[$i];
        $i = $i + 1 | 0;
    }
    ju_BitSet_recalculateLength($this);
}
function ju_BitSet_isEmpty($this) {
    return $this.$length3 ? 0 : 1;
}
function jur_LowHighSurrogateRangeSet() {
    var a = this; jur_JointSet.call(a);
    a.$surrChars = null;
    a.$alt = 0;
}
function jur_LowHighSurrogateRangeSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_LowHighSurrogateRangeSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $startStr, $strLength, var$6, $low, $ch;
    $startStr = $matchResult.$leftBound0;
    $strLength = $matchResult.$rightBound0;
    var$6 = $stringIndex + 1 | 0;
    $low = $rt_compare(var$6, $strLength);
    if ($low > 0) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $ch = jl_String_charAt($testString, $stringIndex);
    if (!$this.$surrChars.$contains3($ch))
        return (-1);
    if (jl_Character_isHighSurrogate($ch)) {
        if ($low < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$6)))
            return (-1);
    } else if (jl_Character_isLowSurrogate($ch) && $stringIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0)))
        return (-1);
    return $this.$next4.$matches(var$6, $testString, $matchResult);
}
function jur_LowHighSurrogateRangeSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(187));
    jl_AbstractStringBuilder_append(var$1, !$this.$alt ? $rt_s(12) : $rt_s(188));
    jl_AbstractStringBuilder_append(var$1, $this.$surrChars.$toString());
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_CompositeRangeSet() {
    var a = this; jur_JointSet.call(a);
    a.$withoutSurrogates = null;
    a.$withSurrogates = null;
}
function jur_CompositeRangeSet__init_(var_0, var_1) {
    var var_2 = new jur_CompositeRangeSet();
    jur_CompositeRangeSet__init_0(var_2, var_0, var_1);
    return var_2;
}
function jur_CompositeRangeSet__init_0($this, $withoutSurrogates, $withSurrogates) {
    jur_AbstractSet__init_($this);
    $this.$withoutSurrogates = $withoutSurrogates;
    $this.$withSurrogates = $withSurrogates;
}
function jur_CompositeRangeSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $shift;
    $shift = $this.$withoutSurrogates.$matches($stringIndex, $testString, $matchResult);
    if ($shift < 0)
        $shift = jur_LowHighSurrogateRangeSet_matches($this.$withSurrogates, $stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    return (-1);
}
function jur_CompositeRangeSet_setNext($this, $next) {
    $this.$next4 = $next;
    $this.$withSurrogates.$next4 = $next;
    $this.$withoutSurrogates.$setNext($next);
}
function jur_CompositeRangeSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(189));
    var$1 = jl_StringBuilder_append3(var$1, $this.$withoutSurrogates);
    jl_AbstractStringBuilder_append(var$1, $rt_s(190));
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append3(var$1, $this.$withSurrogates));
}
function jur_CompositeRangeSet_hasConsumed($this, $matchResult) {
    return 1;
}
function jur_CompositeRangeSet_first($this, $set) {
    return 1;
}
function jur_SupplRangeSet() {
    var a = this; jur_JointSet.call(a);
    a.$chars = null;
    a.$alt1 = 0;
}
function jur_SupplRangeSet__init_(var_0) {
    var var_1 = new jur_SupplRangeSet();
    jur_SupplRangeSet__init_0(var_1, var_0);
    return var_1;
}
function jur_SupplRangeSet__init_0($this, $cc) {
    jur_AbstractSet__init_($this);
    $this.$chars = $cc.$getInstance0();
    $this.$alt1 = $cc.$alt0;
}
function jur_SupplRangeSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $strLength, $low, $high;
    $strLength = $matchResult.$rightBound0;
    if ($stringIndex < $strLength) {
        $low = $stringIndex + 1 | 0;
        $high = jl_String_charAt($testString, $stringIndex);
        if ($this.$contains3($high)) {
            $stringIndex = $this.$next4.$matches($low, $testString, $matchResult);
            if ($stringIndex > 0)
                return $stringIndex;
        }
        if ($low < $strLength) {
            $stringIndex = $low + 1 | 0;
            $low = jl_String_charAt($testString, $low);
            if (jl_Character_isSurrogatePair($high, $low) && $this.$contains3(jl_Character_toCodePoint($high, $low)))
                return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        }
    }
    return (-1);
}
function jur_SupplRangeSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(187));
    jl_AbstractStringBuilder_append(var$1, !$this.$alt1 ? $rt_s(12) : $rt_s(188));
    jl_AbstractStringBuilder_append(var$1, $this.$chars.$toString());
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_SupplRangeSet_contains($this, $ch) {
    return $this.$chars.$contains3($ch);
}
function jur_SupplRangeSet_first($this, $set) {
    if ($set instanceof jur_SupplCharSet)
        return $this.$chars.$contains3($set.$ch1);
    if ($set instanceof jur_CharSet)
        return $this.$chars.$contains3($set.$ch2);
    if ($set instanceof jur_SupplRangeSet)
        return jur_AbstractCharClass_intersects($this.$chars, $set.$chars);
    if (!($set instanceof jur_RangeSet))
        return 1;
    return jur_AbstractCharClass_intersects($this.$chars, $set.$chars0);
}
function jur_SupplRangeSet_getChars($this) {
    return $this.$chars;
}
function jur_SupplRangeSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_SupplRangeSet_hasConsumed($this, $mr) {
    return 1;
}
function jur_UCISupplRangeSet() {
    jur_SupplRangeSet.call(this);
}
function jur_UCISupplRangeSet_contains($this, $ch) {
    return $this.$chars.$contains3(jl_Character_toLowerCase0(jl_Character_toUpperCase($ch)));
}
function jur_UCISupplRangeSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(191));
    jl_AbstractStringBuilder_append(var$1, !$this.$alt1 ? $rt_s(12) : $rt_s(188));
    jl_AbstractStringBuilder_append(var$1, $this.$chars.$toString());
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_UCIRangeSet() {
    var a = this; jur_LeafSet.call(a);
    a.$chars1 = null;
    a.$alt2 = 0;
}
function jur_UCIRangeSet__init_(var_0) {
    var var_1 = new jur_UCIRangeSet();
    jur_UCIRangeSet__init_0(var_1, var_0);
    return var_1;
}
function jur_UCIRangeSet__init_0($this, $cc) {
    jur_LeafSet__init_($this);
    $this.$chars1 = $cc.$getInstance0();
    $this.$alt2 = $cc.$alt0;
}
function jur_UCIRangeSet_accepts($this, $strIndex, $testString) {
    return !$this.$chars1.$contains3(jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($testString, $strIndex)))) ? (-1) : 1;
}
function jur_UCIRangeSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(191));
    jl_AbstractStringBuilder_append(var$1, !$this.$alt2 ? $rt_s(12) : $rt_s(188));
    jl_AbstractStringBuilder_append(var$1, $this.$chars1.$toString());
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_RangeSet() {
    var a = this; jur_LeafSet.call(a);
    a.$chars0 = null;
    a.$alt3 = 0;
}
function jur_RangeSet__init_(var_0) {
    var var_1 = new jur_RangeSet();
    jur_RangeSet__init_0(var_1, var_0);
    return var_1;
}
function jur_RangeSet__init_0($this, $cc) {
    jur_LeafSet__init_($this);
    $this.$chars0 = $cc.$getInstance0();
    $this.$alt3 = $cc.$alt0;
}
function jur_RangeSet_accepts($this, $strIndex, $testString) {
    return !$this.$chars0.$contains3(jl_String_charAt($testString, $strIndex)) ? (-1) : 1;
}
function jur_RangeSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(187));
    jl_AbstractStringBuilder_append(var$1, !$this.$alt3 ? $rt_s(12) : $rt_s(188));
    jl_AbstractStringBuilder_append(var$1, $this.$chars0.$toString());
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_RangeSet_first($this, $set) {
    if ($set instanceof jur_CharSet)
        return $this.$chars0.$contains3($set.$ch2);
    if ($set instanceof jur_RangeSet)
        return jur_AbstractCharClass_intersects($this.$chars0, $set.$chars0);
    if (!($set instanceof jur_SupplRangeSet)) {
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return 0;
    }
    return jur_AbstractCharClass_intersects($this.$chars0, $set.$chars);
}
function jur_RangeSet_getChars($this) {
    return $this.$chars0;
}
function jur_HangulDecomposedCharSet() {
    var a = this; jur_JointSet.call(a);
    a.$decomposedChar = null;
    a.$decomposedCharUTF16 = null;
    a.$decomposedCharLength = 0;
}
function jur_HangulDecomposedCharSet__init_(var_0, var_1) {
    var var_2 = new jur_HangulDecomposedCharSet();
    jur_HangulDecomposedCharSet__init_0(var_2, var_0, var_1);
    return var_2;
}
function jur_HangulDecomposedCharSet__init_0($this, $decomposedChar, $decomposedCharLength) {
    jur_AbstractSet__init_($this);
    $this.$decomposedChar = $decomposedChar;
    $this.$decomposedCharLength = $decomposedCharLength;
}
function jur_HangulDecomposedCharSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_HangulDecomposedCharSet_getDecomposedChar($this) {
    if ($this.$decomposedCharUTF16 === null)
        $this.$decomposedCharUTF16 = jl_String__init_($this.$decomposedChar);
    return $this.$decomposedCharUTF16;
}
function jur_HangulDecomposedCharSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(192));
    jl_AbstractStringBuilder_append(var$1, jur_HangulDecomposedCharSet_getDecomposedChar($this));
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_HangulDecomposedCharSet_matches($this, $strIndex, $testString, $matchResult) {
    var $rightBound, $decompSyllable, $vIndex, $tIndex, var$8, $curSymb, $lIndex, $i, $decompCurSymb, var$13, var$14;
    $rightBound = $matchResult.$rightBound0;
    $decompSyllable = $rt_createIntArray(3);
    $vIndex = (-1);
    $tIndex = (-1);
    if ($strIndex >= $rightBound)
        return (-1);
    var$8 = $strIndex + 1 | 0;
    $curSymb = jl_String_charAt($testString, $strIndex);
    $lIndex = $curSymb - 44032 | 0;
    if ($lIndex >= 0 && $lIndex < 11172) {
        $strIndex = 4352 + ($lIndex / 588 | 0) | 0;
        $i = 4449 + (($lIndex % 588 | 0) / 28 | 0) | 0;
        $lIndex = $lIndex % 28 | 0;
        if (!$lIndex) {
            $decompCurSymb = $rt_createIntArray(2);
            var$13 = $decompCurSymb.data;
            var$13[0] = $strIndex;
            var$13[1] = $i;
        } else {
            var$14 = 4519 + $lIndex | 0;
            $decompCurSymb = $rt_createIntArray(3);
            var$13 = $decompCurSymb.data;
            var$13[0] = $strIndex;
            var$13[1] = $i;
            var$13[2] = var$14;
        }
    } else
        $decompCurSymb = null;
    if ($decompCurSymb !== null) {
        $decompCurSymb = $decompCurSymb.data;
        $i = 0;
        if ($decompCurSymb.length != $this.$decomposedCharLength)
            return (-1);
        while (true) {
            if ($i >= $this.$decomposedCharLength)
                return $this.$next4.$matches(var$8, $testString, $matchResult);
            if ($decompCurSymb[$i] != $this.$decomposedChar.data[$i])
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    $decompSyllable = $decompSyllable.data;
    $decompSyllable[0] = $curSymb;
    $lIndex = $curSymb - 4352 | 0;
    if ($lIndex >= 0 && $lIndex < 19) {
        if (var$8 < $rightBound) {
            $curSymb = jl_String_charAt($testString, var$8);
            $vIndex = $curSymb - 4449 | 0;
        }
        if ($vIndex >= 0 && $vIndex < 21) {
            $lIndex = var$8 + 1 | 0;
            $decompSyllable[1] = $curSymb;
            if ($lIndex < $rightBound) {
                $curSymb = jl_String_charAt($testString, $lIndex);
                $tIndex = $curSymb - 4519 | 0;
            }
            if ($tIndex >= 0 && $tIndex < 28) {
                $strIndex = $lIndex + 1 | 0;
                $decompSyllable[2] = $curSymb;
                return $this.$decomposedCharLength == 3 && $decompSyllable[0] == $this.$decomposedChar.data[0] && $decompSyllable[1] == $this.$decomposedChar.data[1] && $decompSyllable[2] == $this.$decomposedChar.data[2] ? $this.$next4.$matches($strIndex, $testString, $matchResult) : (-1);
            }
            return $this.$decomposedCharLength == 2 && $decompSyllable[0] == $this.$decomposedChar.data[0] && $decompSyllable[1] == $this.$decomposedChar.data[1] ? $this.$next4.$matches($lIndex, $testString, $matchResult) : (-1);
        }
        return (-1);
    }
    return (-1);
}
function jur_HangulDecomposedCharSet_first($this, $set) {
    return $set instanceof jur_HangulDecomposedCharSet && !jl_String_equals(jur_HangulDecomposedCharSet_getDecomposedChar($set), jur_HangulDecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
}
function jur_HangulDecomposedCharSet_hasConsumed($this, $matchResult) {
    return 1;
}
function jur_CharSet() {
    jur_LeafSet.call(this);
    this.$ch2 = 0;
}
function jur_CharSet__init_(var_0) {
    var var_1 = new jur_CharSet();
    jur_CharSet__init_0(var_1, var_0);
    return var_1;
}
function jur_CharSet__init_0($this, $ch) {
    jur_LeafSet__init_($this);
    $this.$ch2 = $ch;
}
function jur_CharSet_charCount($this) {
    return 1;
}
function jur_CharSet_accepts($this, $strIndex, $testString) {
    return $this.$ch2 != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
}
function jur_CharSet_find($this, $strIndex, $testString, $matchResult) {
    var $testStr, $strLength, var$6, var$7;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound0;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$6 = jl_String_indexOf($testStr, $this.$ch2, $strIndex);
        if (var$6 < 0)
            return (-1);
        var$7 = $this.$next4;
        $strIndex = var$6 + 1 | 0;
        if (var$7.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$6;
}
function jur_CharSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
    var $testStr, var$6;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$6 = jl_String_lastIndexOf($testStr, $this.$ch2, $lastIndex);
            if (var$6 < 0)
                break a;
            if (var$6 < $strIndex)
                break a;
            if ($this.$next4.$matches(var$6 + 1 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$6 + (-1) | 0;
        }
        return var$6;
    }
    return (-1);
}
function jur_CharSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(44));
    jl_AbstractStringBuilder_append1(var$1, $this.$ch2);
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_CharSet_getChar($this) {
    return $this.$ch2;
}
function jur_CharSet_first($this, $set) {
    if ($set instanceof jur_CharSet)
        return $set.$ch2 != $this.$ch2 ? 0 : 1;
    if (!($set instanceof jur_RangeSet)) {
        if ($set instanceof jur_SupplRangeSet)
            return $set.$contains3($this.$ch2);
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return 0;
    }
    return jur_RangeSet_accepts($set, 0, jl_Character_toString0($this.$ch2)) <= 0 ? 0 : 1;
}
function jur_UCICharSet() {
    jur_LeafSet.call(this);
    this.$ch3 = 0;
}
function jur_UCICharSet__init_(var_0) {
    var var_1 = new jur_UCICharSet();
    jur_UCICharSet__init_0(var_1, var_0);
    return var_1;
}
function jur_UCICharSet__init_0($this, $ch) {
    jur_LeafSet__init_($this);
    $this.$ch3 = jl_Character_toLowerCase(jl_Character_toUpperCase0($ch));
}
function jur_UCICharSet_accepts($this, $strIndex, $testString) {
    return $this.$ch3 != jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($testString, $strIndex))) ? (-1) : 1;
}
function jur_UCICharSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(193));
    jl_AbstractStringBuilder_append1(var$1, $this.$ch3);
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_CICharSet() {
    var a = this; jur_LeafSet.call(a);
    a.$ch4 = 0;
    a.$supplement = 0;
}
function jur_CICharSet__init_(var_0) {
    var var_1 = new jur_CICharSet();
    jur_CICharSet__init_0(var_1, var_0);
    return var_1;
}
function jur_CICharSet__init_0($this, $ch) {
    jur_LeafSet__init_($this);
    $this.$ch4 = $ch;
    $this.$supplement = jur_Pattern_getSupplement($ch);
}
function jur_CICharSet_accepts($this, $strIndex, $testString) {
    return $this.$ch4 != jl_String_charAt($testString, $strIndex) && $this.$supplement != jl_String_charAt($testString, $strIndex) ? (-1) : 1;
}
function jur_CICharSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(194));
    jl_AbstractStringBuilder_append1(var$1, $this.$ch4);
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_DecomposedCharSet() {
    var a = this; jur_JointSet.call(a);
    a.$readCharsForCodePoint = 0;
    a.$decomposedCharUTF160 = null;
    a.$decomposedChar0 = null;
    a.$decomposedCharLength0 = 0;
}
function jur_DecomposedCharSet__init_(var_0, var_1) {
    var var_2 = new jur_DecomposedCharSet();
    jur_DecomposedCharSet__init_0(var_2, var_0, var_1);
    return var_2;
}
function jur_DecomposedCharSet__init_0($this, $decomposedChar, $decomposedCharLength) {
    jur_AbstractSet__init_($this);
    $this.$readCharsForCodePoint = 1;
    $this.$decomposedChar0 = $decomposedChar;
    $this.$decomposedCharLength0 = $decomposedCharLength;
}
function jur_DecomposedCharSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_DecomposedCharSet_matches($this, $strIndex, $testString, $matchResult) {
    var $decCodePoint, $rightBound, $curChar, var$7, $decCurCodePoint, var$9, var$10, $readCodePoints;
    $decCodePoint = $rt_createIntArray(4);
    $rightBound = $matchResult.$rightBound0;
    if ($strIndex >= $rightBound)
        return (-1);
    $curChar = jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound);
    var$7 = $strIndex + $this.$readCharsForCodePoint | 0;
    $decCurCodePoint = jur_Lexer_getDecomposition($curChar);
    if ($decCurCodePoint === null) {
        $decCurCodePoint = $decCodePoint.data;
        $strIndex = 1;
        $decCurCodePoint[0] = $curChar;
    } else {
        $strIndex = $decCurCodePoint.data.length;
        jl_System_arraycopy($decCurCodePoint, 0, $decCodePoint, 0, $strIndex);
        $strIndex = 0 + $strIndex | 0;
    }
    a: {
        if (var$7 < $rightBound) {
            var$9 = $decCodePoint.data;
            $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
            while ($strIndex < 4) {
                if (!(($curChar != 832 ? 0 : 1) | ($curChar != 833 ? 0 : 1) | ($curChar != 835 ? 0 : 1) | ($curChar != 836 ? 0 : 1))) {
                    var$10 = $strIndex + 1 | 0;
                    var$9[$strIndex] = $curChar;
                } else {
                    $decCurCodePoint = jur_Lexer_getDecomposition($curChar).data;
                    if ($decCurCodePoint.length != 2) {
                        var$10 = $strIndex + 1 | 0;
                        var$9[$strIndex] = $decCurCodePoint[0];
                    } else {
                        $readCodePoints = $strIndex + 1 | 0;
                        var$9[$strIndex] = $decCurCodePoint[0];
                        var$10 = $readCodePoints + 1 | 0;
                        var$9[$readCodePoints] = $decCurCodePoint[1];
                    }
                }
                var$7 = var$7 + $this.$readCharsForCodePoint | 0;
                if (var$7 >= $rightBound) {
                    $strIndex = var$10;
                    break a;
                }
                $curChar = jur_DecomposedCharSet_codePointAt($this, var$7, $testString, $rightBound);
                $strIndex = var$10;
            }
        }
    }
    if ($strIndex != $this.$decomposedCharLength0)
        return (-1);
    $decCurCodePoint = $decCodePoint.data;
    $curChar = 0;
    while (true) {
        if ($curChar >= $strIndex)
            return $this.$next4.$matches(var$7, $testString, $matchResult);
        if ($decCurCodePoint[$curChar] != $this.$decomposedChar0.data[$curChar])
            break;
        $curChar = $curChar + 1 | 0;
    }
    return (-1);
}
function jur_DecomposedCharSet_getDecomposedChar($this) {
    var $strBuff, $i;
    if ($this.$decomposedCharUTF160 === null) {
        $strBuff = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($strBuff);
        $i = 0;
        while ($i < $this.$decomposedCharLength0) {
            jl_AbstractStringBuilder_append3($strBuff, jl_Character_toChars($this.$decomposedChar0.data[$i]));
            $i = $i + 1 | 0;
        }
        $this.$decomposedCharUTF160 = jl_AbstractStringBuilder_toString($strBuff);
    }
    return $this.$decomposedCharUTF160;
}
function jur_DecomposedCharSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(195));
    jl_AbstractStringBuilder_append(var$1, jur_DecomposedCharSet_getDecomposedChar($this));
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_DecomposedCharSet_codePointAt($this, $strIndex, $testString, $rightBound) {
    var $curChar, $low, $curCodePointUTF16;
    $this.$readCharsForCodePoint = 1;
    if ($strIndex >= ($rightBound - 1 | 0))
        $curChar = jl_String_charAt($testString, $strIndex);
    else {
        $rightBound = $strIndex + 1 | 0;
        $curChar = jl_String_charAt($testString, $strIndex);
        $low = jl_String_charAt($testString, $rightBound);
        if (jl_Character_isSurrogatePair($curChar, $low)) {
            $curCodePointUTF16 = $rt_createCharArray(2).data;
            $curCodePointUTF16[0] = $curChar;
            $curCodePointUTF16[1] = $low;
            $curChar = 0 < ($curCodePointUTF16.length - 1 | 0) && jl_Character_isHighSurrogate($curCodePointUTF16[0]) && jl_Character_isLowSurrogate($curCodePointUTF16[1]) ? jl_Character_toCodePoint($curCodePointUTF16[0], $curCodePointUTF16[1]) : $curCodePointUTF16[0];
            $this.$readCharsForCodePoint = 2;
        }
    }
    return $curChar;
}
function jur_DecomposedCharSet_first($this, $set) {
    return $set instanceof jur_DecomposedCharSet && !jl_String_equals(jur_DecomposedCharSet_getDecomposedChar($set), jur_DecomposedCharSet_getDecomposedChar($this)) ? 0 : 1;
}
function jur_DecomposedCharSet_hasConsumed($this, $matchResult) {
    return 1;
}
function jur_UCIDecomposedCharSet() {
    jur_DecomposedCharSet.call(this);
}
function jur_CIDecomposedCharSet() {
    jur_DecomposedCharSet.call(this);
}
function jur_PossessiveGroupQuantifierSet() {
    jur_GroupQuantifierSet.call(this);
}
function jur_PossessiveGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $stringIndex_0;
    while (true) {
        $stringIndex_0 = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
        if ($stringIndex_0 <= 0)
            break;
        $stringIndex = $stringIndex_0;
    }
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_PosPlusGroupQuantifierSet() {
    jur_GroupQuantifierSet.call(this);
}
function jur_PosPlusGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $nextIndex;
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        return (-1);
    if ($nextIndex > $stringIndex) {
        while (true) {
            $stringIndex = $this.$innerSet.$matches($nextIndex, $testString, $matchResult);
            if ($stringIndex <= $nextIndex)
                break;
            $nextIndex = $stringIndex;
        }
        $stringIndex = $nextIndex;
    }
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_AltGroupQuantifierSet() {
    jur_GroupQuantifierSet.call(this);
}
function jur_AltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0)
        return $nextIndex;
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_AltGroupQuantifierSet_setNext($this, $next) {
    $this.$next4 = $next;
    $this.$innerSet.$setNext($next);
}
function jur_PosAltGroupQuantifierSet() {
    jur_AltGroupQuantifierSet.call(this);
}
function jur_PosAltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $nextIndex;
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex <= 0)
        $nextIndex = $stringIndex;
    return $this.$next4.$matches($nextIndex, $testString, $matchResult);
}
function jur_PosAltGroupQuantifierSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_CompositeGroupQuantifierSet() {
    var a = this; jur_GroupQuantifierSet.call(a);
    a.$quantifier0 = null;
    a.$setCounter = 0;
}
function jur_CompositeGroupQuantifierSet__init_0(var_0, var_1, var_2, var_3, var_4) {
    var var_5 = new jur_CompositeGroupQuantifierSet();
    jur_CompositeGroupQuantifierSet__init_(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
}
function jur_CompositeGroupQuantifierSet__init_($this, $quant, $innerSet, $next, $type, $setCounter) {
    jur_QuantifierSet__init_($this, $innerSet, $next, $type);
    $this.$quantifier0 = $quant;
    $this.$setCounter = $setCounter;
}
function jur_CompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $enterCounter, $nextIndex;
    $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    if ($enterCounter >= $this.$quantifier0.$max2)
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$setCounter;
    $enterCounter = $enterCounter + 1 | 0;
    jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
    $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex >= 0) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return $nextIndex;
    }
    $nextIndex = $this.$setCounter;
    $enterCounter = $enterCounter + (-1) | 0;
    jur_MatchResultImpl_setEnterCounter($matchResult, $nextIndex, $enterCounter);
    if ($enterCounter >= $this.$quantifier0.$min3)
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
    return (-1);
}
function jur_CompositeGroupQuantifierSet_getName($this) {
    return jur_Quantifier_toString($this.$quantifier0);
}
function jur_PosCompositeGroupQuantifierSet() {
    jur_CompositeGroupQuantifierSet.call(this);
}
function jur_PosCompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $counter, $max, $nextIndex;
    $counter = 0;
    $max = $this.$quantifier0.$max2;
    a: {
        while (true) {
            $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
            if ($nextIndex <= $stringIndex)
                break a;
            if ($counter >= $max)
                break;
            $counter = $counter + 1 | 0;
            $stringIndex = $nextIndex;
        }
    }
    if ($nextIndex < 0 && $counter < $this.$quantifier0.$min3)
        return (-1);
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_ReluctantGroupQuantifierSet() {
    jur_GroupQuantifierSet.call(this);
}
function jur_ReluctantGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $res;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    $res = $this.$next4.$matches($stringIndex, $testString, $matchResult);
    if ($res >= 0)
        return $res;
    return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
}
function jur_RelAltGroupQuantifierSet() {
    jur_AltGroupQuantifierSet.call(this);
}
function jur_RelAltGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $nextIndex;
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    $nextIndex = $this.$next4.$matches($stringIndex, $testString, $matchResult);
    if ($nextIndex < 0)
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    return $nextIndex;
}
function jur_RelCompositeGroupQuantifierSet() {
    jur_CompositeGroupQuantifierSet.call(this);
}
function jur_RelCompositeGroupQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $enterCounter, $nextIndex;
    $enterCounter = jur_MatchResultImpl_getEnterCounter($matchResult, $this.$setCounter);
    if (!$this.$innerSet.$hasConsumed($matchResult))
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    if ($enterCounter >= $this.$quantifier0.$max2) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
        return $this.$next4.$matches($stringIndex, $testString, $matchResult);
    }
    if ($enterCounter < $this.$quantifier0.$min3) {
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    } else {
        $nextIndex = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if ($nextIndex >= 0) {
            jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, 0);
            return $nextIndex;
        }
        jur_MatchResultImpl_setEnterCounter($matchResult, $this.$setCounter, $enterCounter + 1 | 0);
        $nextIndex = $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
    }
    return $nextIndex;
}
function jur_DotAllQuantifierSet() {
    jur_QuantifierSet.call(this);
}
function jur_DotAllQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $strLength;
    $strLength = $matchResult.$rightBound0;
    if ($strLength > $stringIndex)
        return $this.$next4.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_DotAllQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
    var $strLength;
    $strLength = $matchResult.$rightBound0;
    if ($this.$next4.$findBack($stringIndex, $strLength, $testString, $matchResult) >= 0)
        return $stringIndex;
    return (-1);
}
function jur_DotAllQuantifierSet_getName($this) {
    return $rt_s(196);
}
function jur_DotQuantifierSet() {
    jur_QuantifierSet.call(this);
    this.$lt = null;
}
function jur_DotQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $strLength, $startSearch;
    $strLength = $matchResult.$rightBound0;
    $startSearch = jur_DotQuantifierSet_findLineTerminator($this, $stringIndex, $strLength, $testString);
    if ($startSearch >= 0)
        $strLength = $startSearch;
    if ($strLength > $stringIndex)
        return $this.$next4.$findBack($stringIndex, $strLength, $testString, $matchResult);
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_DotQuantifierSet_find($this, $stringIndex, $testString, $matchResult) {
    var $strLength, $res, $nextSearch, $leftBound;
    $strLength = $matchResult.$rightBound0;
    $res = $this.$next4.$find0($stringIndex, $testString, $matchResult);
    if ($res < 0)
        return (-1);
    $nextSearch = jur_DotQuantifierSet_findLineTerminator($this, $res, $strLength, $testString);
    if ($nextSearch >= 0)
        $strLength = $nextSearch;
    $nextSearch = $this.$next4.$findBack($res, $strLength, $testString, $matchResult);
    if ($res < $nextSearch)
        $res = $nextSearch;
    if ($res <= 0)
        $leftBound = $res ? (-1) : 0;
    else {
        $leftBound = $res - 1 | 0;
        a: {
            while (true) {
                if ($leftBound < $stringIndex) {
                    $leftBound = (-1);
                    break a;
                }
                if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $leftBound)))
                    break;
                $leftBound = $leftBound + (-1) | 0;
            }
        }
    }
    if ($leftBound >= $stringIndex)
        $stringIndex = $leftBound >= $res ? $leftBound : $leftBound + 1 | 0;
    return $stringIndex;
}
function jur_DotQuantifierSet_findLineTerminator($this, $i, $to, $testString) {
    while (true) {
        if ($i >= $to)
            return (-1);
        if ($this.$lt.$isLineTerminator(jl_String_charAt($testString, $i)))
            break;
        $i = $i + 1 | 0;
    }
    return $i;
}
function jur_DotQuantifierSet_getName($this) {
    return $rt_s(197);
}
function jur_AbstractLineTerminator() {
    jl_Object.call(this);
}
var jur_AbstractLineTerminator_unixLT = null;
var jur_AbstractLineTerminator_unicodeLT = null;
function jur_AbstractLineTerminator_getInstance($flag) {
    if (!($flag & 1)) {
        if (jur_AbstractLineTerminator_unicodeLT !== null)
            return jur_AbstractLineTerminator_unicodeLT;
        jur_AbstractLineTerminator_unicodeLT = new jur_AbstractLineTerminator$2;
        return jur_AbstractLineTerminator_unicodeLT;
    }
    if (jur_AbstractLineTerminator_unixLT !== null)
        return jur_AbstractLineTerminator_unixLT;
    jur_AbstractLineTerminator_unixLT = new jur_AbstractLineTerminator$1;
    return jur_AbstractLineTerminator_unixLT;
}
function jur_PossessiveQuantifierSet() {
    jur_LeafQuantifierSet.call(this);
}
function jur_PossessiveQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var var$4;
    a: {
        while (true) {
            if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                break a;
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            if (var$4 < 1)
                break;
            $stringIndex = $stringIndex + var$4 | 0;
        }
    }
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_PossessiveAltQuantifierSet() {
    jur_AltQuantifierSet.call(this);
}
function jur_PossessiveAltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var var$4;
    if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
        var$4 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$4 >= 1)
            $stringIndex = $stringIndex + var$4 | 0;
    }
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_PossessiveCompositeQuantifierSet() {
    jur_CompositeQuantifierSet.call(this);
}
function jur_PossessiveCompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $min, $max, $i, $shift, $shift_0;
    $min = $this.$quantifier.$min3;
    $max = $this.$quantifier.$max2;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    if ($i >= $max)
                        break a;
                    if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0)
                        break a;
                    $shift = $this.$leaf.$accepts($stringIndex, $testString);
                    if ($shift < 1)
                        break;
                    $stringIndex = $stringIndex + $shift | 0;
                    $i = $i + 1 | 0;
                }
            }
            return $this.$next4.$matches($stringIndex, $testString, $matchResult);
        }
        if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        $shift_0 = $this.$leaf.$accepts($stringIndex, $testString);
        if ($shift_0 < 1)
            break;
        $stringIndex = $stringIndex + $shift_0 | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
}
function jur_ReluctantQuantifierSet() {
    jur_LeafQuantifierSet.call(this);
}
function jur_ReluctantQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var var$4;
    while (true) {
        var$4 = $this.$next4.$matches($stringIndex, $testString, $matchResult);
        if (var$4 >= 0)
            break;
        if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
            var$4 = $this.$leaf.$accepts($stringIndex, $testString);
            $stringIndex = $stringIndex + var$4 | 0;
        }
        if (var$4 < 1)
            return (-1);
    }
    return var$4;
}
function jur_ReluctantAltQuantifierSet() {
    jur_AltQuantifierSet.call(this);
}
function jur_ReluctantAltQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $shift;
    $shift = $this.$next4.$matches($stringIndex, $testString, $matchResult);
    if ($shift >= 0)
        return $shift;
    return $this.$innerSet.$matches($stringIndex, $testString, $matchResult);
}
function jur_ReluctantCompositeQuantifierSet() {
    jur_CompositeQuantifierSet.call(this);
}
function jur_ReluctantCompositeQuantifierSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $min, $max, $i, var$7, var$8;
    $min = $this.$quantifier.$min3;
    $max = $this.$quantifier.$max2;
    $i = 0;
    while (true) {
        if ($i >= $min) {
            a: {
                while (true) {
                    var$7 = $this.$next4.$matches($stringIndex, $testString, $matchResult);
                    if (var$7 >= 0)
                        break;
                    if (($stringIndex + $this.$leaf.$charCount0() | 0) <= $matchResult.$rightBound0) {
                        var$7 = $this.$leaf.$accepts($stringIndex, $testString);
                        $stringIndex = $stringIndex + var$7 | 0;
                        $i = $i + 1 | 0;
                    }
                    if (var$7 < 1)
                        break a;
                    if ($i > $max)
                        break a;
                }
                return var$7;
            }
            return (-1);
        }
        if (($stringIndex + $this.$leaf.$charCount0() | 0) > $matchResult.$rightBound0) {
            $matchResult.$hitEnd = 1;
            return (-1);
        }
        var$8 = $this.$leaf.$accepts($stringIndex, $testString);
        if (var$8 < 1)
            break;
        $stringIndex = $stringIndex + var$8 | 0;
        $i = $i + 1 | 0;
    }
    return (-1);
}
function jur_SOLSet() {
    jur_AbstractSet.call(this);
}
function jur_SOLSet__init_() {
    var var_0 = new jur_SOLSet();
    jur_SOLSet__init_0(var_0);
    return var_0;
}
function jur_SOLSet__init_0($this) {
    jur_AbstractSet__init_($this);
}
function jur_SOLSet_matches($this, $strIndex, $testString, $matchResult) {
    if ($strIndex && !($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound0))
        return (-1);
    return $this.$next4.$matches($strIndex, $testString, $matchResult);
}
function jur_SOLSet_hasConsumed($this, $matchResult) {
    return 0;
}
function jur_SOLSet_getName($this) {
    return $rt_s(198);
}
function jur_WordBoundary() {
    jur_AbstractSet.call(this);
    this.$positive = 0;
}
function jur_WordBoundary__init_(var_0) {
    var var_1 = new jur_WordBoundary();
    jur_WordBoundary__init_0(var_1, var_0);
    return var_1;
}
function jur_WordBoundary__init_0($this, $positive) {
    jur_AbstractSet__init_($this);
    $this.$positive = $positive;
}
function jur_WordBoundary_matches($this, $stringIndex, $testString, $matchResult) {
    var $ch1, $ch2, $leftBound;
    $ch1 = $stringIndex < $matchResult.$rightBound0 ? jl_String_charAt($testString, $stringIndex) : 32;
    $ch2 = !$stringIndex ? 32 : jl_String_charAt($testString, $stringIndex - 1 | 0);
    $leftBound = $matchResult.$transparentBounds ? 0 : $matchResult.$leftBound0;
    return ($ch1 != 32 && !jur_WordBoundary_isSpace($this, $ch1, $stringIndex, $leftBound, $testString) ? 0 : 1) ^ ($ch2 != 32 && !jur_WordBoundary_isSpace($this, $ch2, $stringIndex - 1 | 0, $leftBound, $testString) ? 0 : 1) ^ $this.$positive ? (-1) : $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_WordBoundary_hasConsumed($this, $matchResult) {
    return 0;
}
function jur_WordBoundary_getName($this) {
    return $rt_s(199);
}
function jur_WordBoundary_isSpace($this, $ch, $index, $leftBound, $testString) {
    var var$5;
    if (!jl_Character_isLetterOrDigit($ch) && $ch != 95) {
        a: {
            if (jl_Character_getType($ch) == 6)
                while (true) {
                    $index = $index + (-1) | 0;
                    if ($index < $leftBound)
                        break a;
                    var$5 = jl_String_charAt($testString, $index);
                    if (jl_Character_isLetterOrDigit(var$5))
                        return 0;
                    if (jl_Character_getType(var$5) != 6)
                        return 1;
                }
        }
        return 1;
    }
    return 0;
}
function jur_PreviousMatch() {
    jur_AbstractSet.call(this);
}
function jur_PreviousMatch__init_() {
    var var_0 = new jur_PreviousMatch();
    jur_PreviousMatch__init_0(var_0);
    return var_0;
}
function jur_PreviousMatch__init_0($this) {
    jur_AbstractSet__init_($this);
}
function jur_PreviousMatch_matches($this, $stringIndex, $testString, $matchResult) {
    if ($stringIndex != $matchResult.$previousMatch)
        return (-1);
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_PreviousMatch_hasConsumed($this, $matchResult) {
    return 0;
}
function jur_PreviousMatch_getName($this) {
    return $rt_s(200);
}
function jur_EOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter = 0;
}
function jur_EOLSet__init_0(var_0) {
    var var_1 = new jur_EOLSet();
    jur_EOLSet__init_(var_1, var_0);
    return var_1;
}
function jur_EOLSet__init_($this, $counter) {
    jur_AbstractSet__init_($this);
    $this.$consCounter = $counter;
}
function jur_EOLSet_matches($this, $strIndex, $testString, $matchResult) {
    var $rightBound, var$5, $ch;
    $rightBound = !$matchResult.$anchoringBounds ? jl_String_length($testString) : $matchResult.$rightBound0;
    if ($strIndex >= $rightBound) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    var$5 = $rightBound - $strIndex | 0;
    if (var$5 == 2 && jl_String_charAt($testString, $strIndex) == 13 && jl_String_charAt($testString, $strIndex + 1 | 0) == 10) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    a: {
        if (var$5 == 1) {
            $ch = jl_String_charAt($testString, $strIndex);
            if ($ch == 10)
                break a;
            if ($ch == 13)
                break a;
            if ($ch == 133)
                break a;
            if (($ch | 1) == 8233)
                break a;
        }
        return (-1);
    }
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, 0);
    return $this.$next4.$matches($strIndex, $testString, $matchResult);
}
function jur_EOLSet_hasConsumed($this, $matchResult) {
    var $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter, (-1));
    return $res;
}
function jur_EOLSet_getName($this) {
    return $rt_s(201);
}
function jur_EOISet() {
    jur_AbstractSet.call(this);
}
function jur_EOISet__init_() {
    var var_0 = new jur_EOISet();
    jur_EOISet__init_0(var_0);
    return var_0;
}
function jur_EOISet__init_0($this) {
    jur_AbstractSet__init_($this);
}
function jur_EOISet_matches($this, $stringIndex, $testString, $matchResult) {
    if ($stringIndex < ($matchResult.$transparentBounds ? jl_String_length($testString) : $matchResult.$rightBound0))
        return (-1);
    $matchResult.$hitEnd = 1;
    $matchResult.$requireEnd = 1;
    return $this.$next4.$matches($stringIndex, $testString, $matchResult);
}
function jur_EOISet_hasConsumed($this, $matchResult) {
    return 0;
}
function jur_EOISet_getName($this) {
    return $rt_s(202);
}
function jur_MultiLineSOLSet() {
    jur_AbstractSet.call(this);
    this.$lt0 = null;
}
function jur_MultiLineSOLSet__init_(var_0) {
    var var_1 = new jur_MultiLineSOLSet();
    jur_MultiLineSOLSet__init_0(var_1, var_0);
    return var_1;
}
function jur_MultiLineSOLSet__init_0($this, $lt) {
    jur_AbstractSet__init_($this);
    $this.$lt0 = $lt;
}
function jur_MultiLineSOLSet_matches($this, $strIndex, $testString, $matchResult) {
    a: {
        if ($strIndex != $matchResult.$rightBound0) {
            if (!$strIndex)
                break a;
            if ($matchResult.$anchoringBounds && $strIndex == $matchResult.$leftBound0)
                break a;
            if ($this.$lt0.$isAfterLineTerminator(jl_String_charAt($testString, $strIndex - 1 | 0), jl_String_charAt($testString, $strIndex)))
                break a;
        }
        return (-1);
    }
    return $this.$next4.$matches($strIndex, $testString, $matchResult);
}
function jur_MultiLineSOLSet_hasConsumed($this, $matchResult) {
    return 0;
}
function jur_MultiLineSOLSet_getName($this) {
    return $rt_s(203);
}
function jur_DotAllSet() {
    jur_JointSet.call(this);
}
function jur_DotAllSet__init_() {
    var var_0 = new jur_DotAllSet();
    jur_DotAllSet__init_0(var_0);
    return var_0;
}
function jur_DotAllSet__init_0($this) {
    jur_AbstractSet__init_($this);
}
function jur_DotAllSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $strLength, var$5, $high, var$7;
    $strLength = $matchResult.$rightBound0;
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $high = jl_String_charAt($testString, $stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        var$7 = $stringIndex + 2 | 0;
        if (var$7 <= $strLength && jl_Character_isSurrogatePair($high, jl_String_charAt($testString, var$5)))
            return $this.$next4.$matches(var$7, $testString, $matchResult);
    }
    return $this.$next4.$matches(var$5, $testString, $matchResult);
}
function jur_DotAllSet_getName($this) {
    return $rt_s(204);
}
function jur_DotAllSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_DotAllSet_getType($this) {
    return (-2147483602);
}
function jur_DotAllSet_hasConsumed($this, $matchResult) {
    return 1;
}
function jur_DotSet() {
    jur_JointSet.call(this);
    this.$lt1 = null;
}
function jur_DotSet__init_(var_0) {
    var var_1 = new jur_DotSet();
    jur_DotSet__init_0(var_1, var_0);
    return var_1;
}
function jur_DotSet__init_0($this, $lt) {
    jur_AbstractSet__init_($this);
    $this.$lt1 = $lt;
}
function jur_DotSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $strLength, var$5, $high, $low;
    $strLength = $matchResult.$rightBound0;
    var$5 = $stringIndex + 1 | 0;
    if (var$5 > $strLength) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $high = jl_String_charAt($testString, $stringIndex);
    if (jl_Character_isHighSurrogate($high)) {
        $stringIndex = $stringIndex + 2 | 0;
        if ($stringIndex <= $strLength) {
            $low = jl_String_charAt($testString, var$5);
            if (jl_Character_isSurrogatePair($high, $low))
                return $this.$lt1.$isLineTerminator(jl_Character_toCodePoint($high, $low)) ? (-1) : $this.$next4.$matches($stringIndex, $testString, $matchResult);
        }
    }
    return $this.$lt1.$isLineTerminator($high) ? (-1) : $this.$next4.$matches(var$5, $testString, $matchResult);
}
function jur_DotSet_getName($this) {
    return $rt_s(205);
}
function jur_DotSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_DotSet_getType($this) {
    return (-2147483602);
}
function jur_DotSet_hasConsumed($this, $matchResult) {
    return 1;
}
function jur_UEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter0 = 0;
}
function jur_UEOLSet__init_(var_0) {
    var var_1 = new jur_UEOLSet();
    jur_UEOLSet__init_0(var_1, var_0);
    return var_1;
}
function jur_UEOLSet__init_0($this, $counter) {
    jur_AbstractSet__init_($this);
    $this.$consCounter0 = $counter;
}
function jur_UEOLSet_matches($this, $strIndex, $testString, $matchResult) {
    var $rightBound;
    $rightBound = !$matchResult.$anchoringBounds ? jl_String_length($testString) : $matchResult.$rightBound0;
    if ($strIndex >= $rightBound) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 0);
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    if (($rightBound - $strIndex | 0) == 1 && jl_String_charAt($testString, $strIndex) == 10) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, 1);
        return $this.$next4.$matches($strIndex + 1 | 0, $testString, $matchResult);
    }
    return (-1);
}
function jur_UEOLSet_hasConsumed($this, $matchResult) {
    var $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter0) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter0, (-1));
    return $res;
}
function jur_UEOLSet_getName($this) {
    return $rt_s(201);
}
function jur_UMultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter1 = 0;
}
function jur_UMultiLineEOLSet__init_(var_0) {
    var var_1 = new jur_UMultiLineEOLSet();
    jur_UMultiLineEOLSet__init_0(var_1, var_0);
    return var_1;
}
function jur_UMultiLineEOLSet__init_0($this, $counter) {
    jur_AbstractSet__init_($this);
    $this.$consCounter1 = $counter;
}
function jur_UMultiLineEOLSet_matches($this, $strIndex, $testString, $matchResult) {
    if ((!$matchResult.$anchoringBounds ? jl_String_length($testString) - $strIndex | 0 : $matchResult.$rightBound0 - $strIndex | 0) <= 0) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, 0);
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    if (jl_String_charAt($testString, $strIndex) != 10)
        return (-1);
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, 1);
    return $this.$next4.$matches($strIndex + 1 | 0, $testString, $matchResult);
}
function jur_UMultiLineEOLSet_hasConsumed($this, $matchResult) {
    var $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter1) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter1, (-1));
    return $res;
}
function jur_UMultiLineEOLSet_getName($this) {
    return $rt_s(206);
}
function jur_MultiLineEOLSet() {
    jur_AbstractSet.call(this);
    this.$consCounter2 = 0;
}
function jur_MultiLineEOLSet__init_(var_0) {
    var var_1 = new jur_MultiLineEOLSet();
    jur_MultiLineEOLSet__init_0(var_1, var_0);
    return var_1;
}
function jur_MultiLineEOLSet__init_0($this, $counter) {
    jur_AbstractSet__init_($this);
    $this.$consCounter2 = $counter;
}
function jur_MultiLineEOLSet_matches($this, $strIndex, $testString, $matchResult) {
    var $strDif, $ch1, $ch2;
    $strDif = !$matchResult.$anchoringBounds ? jl_String_length($testString) - $strIndex | 0 : $matchResult.$leftBound0 - $strIndex | 0;
    if (!$strDif) {
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
        return $this.$next4.$matches($strIndex, $testString, $matchResult);
    }
    if ($strDif < 2) {
        $ch1 = jl_String_charAt($testString, $strIndex);
        $ch2 = 97;
    } else {
        $ch1 = jl_String_charAt($testString, $strIndex);
        $ch2 = jl_String_charAt($testString, $strIndex + 1 | 0);
    }
    switch ($ch1) {
        case 10:
        case 133:
        case 8232:
        case 8233:
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        case 13:
            if ($ch2 != 10) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
                return $this.$next4.$matches($strIndex, $testString, $matchResult);
            }
            jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, 0);
            return $this.$next4.$matches($strIndex, $testString, $matchResult);
        default:
    }
    return (-1);
}
function jur_MultiLineEOLSet_hasConsumed($this, $matchResult) {
    var $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter2) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter2, (-1));
    return $res;
}
function jur_MultiLineEOLSet_getName($this) {
    return $rt_s(207);
}
function jur_CIBackReferenceSet() {
    var a = this; jur_JointSet.call(a);
    a.$referencedGroup = 0;
    a.$consCounter3 = 0;
}
function jur_CIBackReferenceSet__init_(var_0, var_1) {
    var var_2 = new jur_CIBackReferenceSet();
    jur_CIBackReferenceSet__init_0(var_2, var_0, var_1);
    return var_2;
}
function jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter) {
    jur_AbstractSet__init_($this);
    $this.$referencedGroup = $groupIndex;
    $this.$consCounter3 = $consCounter;
}
function jur_CIBackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $group, $i, var$6, var$7;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
        $i = 0;
        while (true) {
            if ($i >= jl_String_length($group)) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, jl_String_length($group));
                return $this.$next4.$matches($stringIndex + jl_String_length($group) | 0, $testString, $matchResult);
            }
            var$6 = jl_String_charAt($group, $i);
            var$7 = $stringIndex + $i | 0;
            if (var$6 != jl_String_charAt($testString, var$7) && jur_Pattern_getSupplement(jl_String_charAt($group, $i)) != jl_String_charAt($testString, var$7))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
}
function jur_CIBackReferenceSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_CIBackReferenceSet_getString($this, $matchResult) {
    return jur_MatchResultImpl_getGroupNoCheck($matchResult, $this.$referencedGroup);
}
function jur_CIBackReferenceSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(208));
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append2(var$1, $this.$groupIndex0));
}
function jur_CIBackReferenceSet_hasConsumed($this, $matchResult) {
    var $res;
    $res = !jur_MatchResultImpl_getConsumed($matchResult, $this.$consCounter3) ? 0 : 1;
    jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, (-1));
    return $res;
}
function jur_BackReferenceSet() {
    jur_CIBackReferenceSet.call(this);
}
function jur_BackReferenceSet__init_(var_0, var_1) {
    var var_2 = new jur_BackReferenceSet();
    jur_BackReferenceSet__init_0(var_2, var_0, var_1);
    return var_2;
}
function jur_BackReferenceSet__init_0($this, $groupIndex, $consCounter) {
    jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter);
}
function jur_BackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $group, $shift;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
        $shift = !jl_String_startsWith0($testString, $group, $stringIndex) ? (-1) : jl_String_length($group);
        if ($shift < 0)
            return (-1);
        jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, $shift);
        return $this.$next4.$matches($stringIndex + $shift | 0, $testString, $matchResult);
    }
    return (-1);
}
function jur_BackReferenceSet_find($this, $strIndex, $testString, $matchResult) {
    var $group, $strLength, $testStr;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    $strLength = $matchResult.$leftBound0;
    if ($group !== null && ($strIndex + jl_String_length($group) | 0) <= $strLength) {
        $testStr = $testString;
        while (true) {
            if ($strIndex > $strLength)
                return (-1);
            $strIndex = jl_String_indexOf1($testStr, $group, $strIndex);
            if ($strIndex < 0)
                return (-1);
            if ($this.$next4.$matches($strIndex + jl_String_length($group) | 0, $testString, $matchResult) >= 0)
                break;
            $strIndex = $strIndex + 1 | 0;
        }
        return $strIndex;
    }
    return (-1);
}
function jur_BackReferenceSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
    var $group, $testStr, var$7;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group === null)
        return (-1);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            var$7 = jl_String_lastIndexOf1($testStr, $group, $lastIndex);
            if (var$7 < 0)
                break a;
            if (var$7 < $strIndex)
                break a;
            if ($this.$next4.$matches(var$7 + jl_String_length($group) | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = var$7 + (-1) | 0;
        }
        return var$7;
    }
    return (-1);
}
function jur_BackReferenceSet_first($this, $set) {
    return 1;
}
function jur_BackReferenceSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(209));
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append2(var$1, $this.$groupIndex0));
}
function jur_UCIBackReferenceSet() {
    jur_CIBackReferenceSet.call(this);
    this.$groupIndex1 = 0;
}
function jur_UCIBackReferenceSet__init_(var_0, var_1) {
    var var_2 = new jur_UCIBackReferenceSet();
    jur_UCIBackReferenceSet__init_0(var_2, var_0, var_1);
    return var_2;
}
function jur_UCIBackReferenceSet__init_0($this, $groupIndex, $consCounter) {
    jur_CIBackReferenceSet__init_0($this, $groupIndex, $consCounter);
}
function jur_UCIBackReferenceSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $group, $i;
    $group = jur_CIBackReferenceSet_getString($this, $matchResult);
    if ($group !== null && ($stringIndex + jl_String_length($group) | 0) <= $matchResult.$rightBound0) {
        $i = 0;
        while (true) {
            if ($i >= jl_String_length($group)) {
                jur_MatchResultImpl_setConsumed($matchResult, $this.$consCounter3, jl_String_length($group));
                return $this.$next4.$matches($stringIndex + jl_String_length($group) | 0, $testString, $matchResult);
            }
            if (jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($group, $i))) != jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($testString, $stringIndex + $i | 0))))
                break;
            $i = $i + 1 | 0;
        }
        return (-1);
    }
    return (-1);
}
function jur_UCIBackReferenceSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(210));
    return jl_AbstractStringBuilder_toString(jl_StringBuilder_append2(var$1, $this.$groupIndex1));
}
function jur_SequenceSet() {
    var a = this; jur_LeafSet.call(a);
    a.$string1 = null;
    a.$leftToRight = null;
    a.$rightToLeft = null;
}
function jur_SequenceSet__init_(var_0) {
    var var_1 = new jur_SequenceSet();
    jur_SequenceSet__init_0(var_1, var_0);
    return var_1;
}
function jur_SequenceSet__init_0($this, $substring) {
    var $j;
    jur_LeafSet__init_($this);
    $this.$string1 = jl_AbstractStringBuilder_toString($substring);
    $this.$charCount = jl_StringBuffer_length($substring);
    $this.$leftToRight = jur_SequenceSet$IntHash__init_($this.$charCount);
    $this.$rightToLeft = jur_SequenceSet$IntHash__init_($this.$charCount);
    $j = 0;
    while ($j < ($this.$charCount - 1 | 0)) {
        jur_SequenceSet$IntHash_put($this.$leftToRight, jl_String_charAt($this.$string1, $j), ($this.$charCount - $j | 0) - 1 | 0);
        jur_SequenceSet$IntHash_put($this.$rightToLeft, jl_String_charAt($this.$string1, ($this.$charCount - $j | 0) - 1 | 0), ($this.$charCount - $j | 0) - 1 | 0);
        $j = $j + 1 | 0;
    }
}
function jur_SequenceSet_accepts($this, $strIndex, $testString) {
    return !jur_SequenceSet_startsWith($this, $testString, $strIndex) ? (-1) : $this.$charCount;
}
function jur_SequenceSet_find($this, $strIndex, $testString, $matchResult) {
    var $strLength, var$5;
    $strLength = $matchResult.$rightBound0;
    while (true) {
        if ($strIndex > $strLength)
            return (-1);
        var$5 = jur_SequenceSet_indexOf($this, $testString, $strIndex, $strLength);
        if (var$5 < 0)
            return (-1);
        if ($this.$next4.$matches(var$5 + $this.$charCount | 0, $testString, $matchResult) >= 0)
            break;
        $strIndex = var$5 + 1 | 0;
    }
    return var$5;
}
function jur_SequenceSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
    while (true) {
        if ($lastIndex < $strIndex)
            return (-1);
        $lastIndex = jur_SequenceSet_lastIndexOf($this, $testString, $strIndex, $lastIndex);
        if ($lastIndex < 0)
            return (-1);
        if ($this.$next4.$matches($lastIndex + $this.$charCount | 0, $testString, $matchResult) >= 0)
            break;
        $lastIndex = $lastIndex + (-1) | 0;
    }
    return $lastIndex;
}
function jur_SequenceSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(211));
    jl_AbstractStringBuilder_append(var$1, $this.$string1);
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_SequenceSet_first($this, $set) {
    var var$2;
    if ($set instanceof jur_CharSet)
        return $set.$ch2 != jl_String_charAt($this.$string1, 0) ? 0 : 1;
    if ($set instanceof jur_RangeSet)
        return jur_RangeSet_accepts($set, 0, jl_String_substring($this.$string1, 0, 1)) <= 0 ? 0 : 1;
    if (!($set instanceof jur_SupplRangeSet)) {
        if (!($set instanceof jur_SupplCharSet))
            return 1;
        return jl_String_length($this.$string1) > 1 && $set.$ch1 == jl_Character_toCodePoint(jl_String_charAt($this.$string1, 0), jl_String_charAt($this.$string1, 1)) ? 1 : 0;
    }
    a: {
        b: {
            $set = $set;
            if (!$set.$contains3(jl_String_charAt($this.$string1, 0))) {
                if (jl_String_length($this.$string1) <= 1)
                    break b;
                if (!$set.$contains3(jl_Character_toCodePoint(jl_String_charAt($this.$string1, 0), jl_String_charAt($this.$string1, 1))))
                    break b;
            }
            var$2 = 1;
            break a;
        }
        var$2 = 0;
    }
    return var$2;
}
function jur_SequenceSet_indexOf($this, $str, $i, $to) {
    var $last, $ch;
    $last = jl_String_charAt($this.$string1, $this.$charCount - 1 | 0);
    while (true) {
        if ($i > ($to - $this.$charCount | 0))
            return (-1);
        $ch = jl_String_charAt($str, ($i + $this.$charCount | 0) - 1 | 0);
        if ($ch == $last && jur_SequenceSet_startsWith($this, $str, $i))
            break;
        $i = $i + jur_SequenceSet$IntHash_get($this.$leftToRight, $ch) | 0;
    }
    return $i;
}
function jur_SequenceSet_lastIndexOf($this, $str, $to, $i) {
    var $first, $delta, $ch;
    $first = jl_String_charAt($this.$string1, 0);
    $delta = (jl_String_length($str) - $i | 0) - $this.$charCount | 0;
    if ($delta <= 0)
        $i = $i + $delta | 0;
    while (true) {
        if ($i < $to)
            return (-1);
        $ch = jl_String_charAt($str, $i);
        if ($ch == $first && jur_SequenceSet_startsWith($this, $str, $i))
            break;
        $i = $i - jur_SequenceSet$IntHash_get($this.$rightToLeft, $ch) | 0;
    }
    return $i;
}
function jur_SequenceSet_startsWith($this, $str, $from) {
    var $i;
    $i = 0;
    while ($i < $this.$charCount) {
        if (jl_String_charAt($str, $i + $from | 0) != jl_String_charAt($this.$string1, $i))
            return 0;
        $i = $i + 1 | 0;
    }
    return 1;
}
function jur_UCISequenceSet() {
    jur_LeafSet.call(this);
    this.$string2 = null;
}
function jur_UCISequenceSet__init_(var_0) {
    var var_1 = new jur_UCISequenceSet();
    jur_UCISequenceSet__init_0(var_1, var_0);
    return var_1;
}
function jur_UCISequenceSet__init_0($this, $substring) {
    var $res, $i;
    jur_LeafSet__init_($this);
    $res = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($res);
    $i = 0;
    while ($i < jl_StringBuffer_length($substring)) {
        jl_AbstractStringBuilder_append1($res, jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_AbstractStringBuilder_charAt($substring, $i))));
        $i = $i + 1 | 0;
    }
    $this.$string2 = jl_AbstractStringBuilder_toString($res);
    $this.$charCount = jl_StringBuilder_length($res);
}
function jur_UCISequenceSet_accepts($this, $strIndex, $testString) {
    var $i;
    $i = 0;
    while (true) {
        if ($i >= jl_String_length($this.$string2))
            return jl_String_length($this.$string2);
        if (jl_String_charAt($this.$string2, $i) != jl_Character_toLowerCase(jl_Character_toUpperCase0(jl_String_charAt($testString, $strIndex + $i | 0))))
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
}
function jur_UCISequenceSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(212));
    jl_AbstractStringBuilder_append(var$1, $this.$string2);
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_CISequenceSet() {
    jur_LeafSet.call(this);
    this.$string0 = null;
}
function jur_CISequenceSet_accepts($this, $strIndex, $testString) {
    var $i, var$4, var$5;
    $i = 0;
    while (true) {
        if ($i >= jl_String_length($this.$string0))
            return jl_String_length($this.$string0);
        var$4 = jl_String_charAt($this.$string0, $i);
        var$5 = $strIndex + $i | 0;
        if (var$4 != jl_String_charAt($testString, var$5) && jur_Pattern_getSupplement(jl_String_charAt($this.$string0, $i)) != jl_String_charAt($testString, var$5))
            break;
        $i = $i + 1 | 0;
    }
    return (-1);
}
function jur_CISequenceSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(213));
    jl_AbstractStringBuilder_append(var$1, $this.$string0);
    return jl_AbstractStringBuilder_toString(var$1);
}
function jn_ByteOrder() {
    jl_Object.call(this);
    this.$name2 = null;
}
var jn_ByteOrder_BIG_ENDIAN = null;
var jn_ByteOrder_LITTLE_ENDIAN = null;
function jn_ByteOrder__init_(var_0) {
    var var_1 = new jn_ByteOrder();
    jn_ByteOrder__init_0(var_1, var_0);
    return var_1;
}
function jn_ByteOrder__init_0($this, $name) {
    $this.$name2 = $name;
}
function jn_ByteOrder__clinit_() {
    jn_ByteOrder_BIG_ENDIAN = jn_ByteOrder__init_($rt_s(214));
    jn_ByteOrder_LITTLE_ENDIAN = jn_ByteOrder__init_($rt_s(215));
}
function jur_AbstractCharClass$PredefinedCharacterClasses() {
    jl_Object.call(this);
}
var jur_AbstractCharClass$PredefinedCharacterClasses_space = null;
var jur_AbstractCharClass$PredefinedCharacterClasses_digit = null;
var jur_AbstractCharClass$PredefinedCharacterClasses_contents = null;
function jur_AbstractCharClass$PredefinedCharacterClasses_getObject($this, $name) {
    var $i, var$3, $row;
    $i = 0;
    while (true) {
        if ($i >= jur_AbstractCharClass$PredefinedCharacterClasses_contents.data.length) {
            var$3 = new ju_MissingResourceException;
            jl_Throwable__init_(var$3, $rt_s(44));
            var$3.$className = $rt_s(44);
            var$3.$key1 = $name;
            $rt_throw(var$3);
        }
        $row = jur_AbstractCharClass$PredefinedCharacterClasses_contents.data[$i].data;
        if (jl_String_equals($name, $row[0]))
            break;
        $i = $i + 1 | 0;
    }
    return $row[1];
}
function jur_AbstractCharClass$PredefinedCharacterClasses__clinit_() {
    var var$1, var$2, var$3, var$4;
    jur_AbstractCharClass$PredefinedCharacterClasses_space = jur_AbstractCharClass$LazySpace__init_();
    jur_AbstractCharClass$PredefinedCharacterClasses_digit = jur_AbstractCharClass$LazyDigit__init_();
    var$1 = $rt_createArray($rt_arraycls(jl_Object), 194);
    var$2 = var$1.data;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(216);
    var$4[1] = jur_AbstractCharClass$LazyLower__init_();
    var$2[0] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(217);
    var$4[1] = jur_AbstractCharClass$LazyUpper__init_();
    var$2[1] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(218);
    var$4[1] = jur_AbstractCharClass$LazyASCII__init_();
    var$2[2] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(219);
    var$4[1] = jur_AbstractCharClass$LazyAlpha__init_();
    var$2[3] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(220);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[4] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(221);
    var$4[1] = jur_AbstractCharClass$LazyAlnum__init_();
    var$2[5] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(222);
    var$4[1] = jur_AbstractCharClass$LazyPunct__init_();
    var$2[6] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(223);
    var$4[1] = jur_AbstractCharClass$LazyGraph__init_();
    var$2[7] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(224);
    var$4[1] = jur_AbstractCharClass$LazyPrint__init_();
    var$2[8] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(225);
    var$4[1] = jur_AbstractCharClass$LazyBlank__init_();
    var$2[9] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(226);
    var$4[1] = jur_AbstractCharClass$LazyCntrl__init_();
    var$2[10] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(227);
    var$4[1] = jur_AbstractCharClass$LazyXDigit__init_();
    var$2[11] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(228);
    var$4[1] = jur_AbstractCharClass$LazyJavaLowerCase__init_();
    var$2[12] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(229);
    var$4[1] = jur_AbstractCharClass$LazyJavaUpperCase__init_();
    var$2[13] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(230);
    var$4[1] = jur_AbstractCharClass$LazyJavaWhitespace__init_();
    var$2[14] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(231);
    var$4[1] = jur_AbstractCharClass$LazyJavaMirrored__init_();
    var$2[15] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(232);
    var$4[1] = jur_AbstractCharClass$LazyJavaDefined__init_();
    var$2[16] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(233);
    var$4[1] = jur_AbstractCharClass$LazyJavaDigit__init_();
    var$2[17] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(234);
    var$4[1] = jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_();
    var$2[18] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(235);
    var$4[1] = jur_AbstractCharClass$LazyJavaISOControl__init_();
    var$2[19] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(236);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_();
    var$2[20] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(237);
    var$4[1] = jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_();
    var$2[21] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(238);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetter__init_();
    var$2[22] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(239);
    var$4[1] = jur_AbstractCharClass$LazyJavaLetterOrDigit__init_();
    var$2[23] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(240);
    var$4[1] = jur_AbstractCharClass$LazyJavaSpaceChar__init_();
    var$2[24] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(241);
    var$4[1] = jur_AbstractCharClass$LazyJavaTitleCase__init_();
    var$2[25] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(242);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_();
    var$2[26] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(243);
    var$4[1] = jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_();
    var$2[27] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(244);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[28] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(245);
    var$4[1] = jur_AbstractCharClass$LazyWord__init_();
    var$2[29] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(246);
    var$4[1] = jur_AbstractCharClass$LazyNonWord__init_();
    var$2[30] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(247);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_space;
    var$2[31] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(4);
    var$4[1] = jur_AbstractCharClass$LazyNonSpace__init_();
    var$2[32] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(248);
    var$4[1] = jur_AbstractCharClass$PredefinedCharacterClasses_digit;
    var$2[33] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(249);
    var$4[1] = jur_AbstractCharClass$LazyNonDigit__init_();
    var$2[34] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(250);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 127);
    var$2[35] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(251);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(128, 255);
    var$2[36] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(252);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(256, 383);
    var$2[37] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(253);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(384, 591);
    var$2[38] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(254);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(592, 687);
    var$2[39] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(255);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(688, 767);
    var$2[40] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(256);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(768, 879);
    var$2[41] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(257);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(880, 1023);
    var$2[42] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(258);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1024, 1279);
    var$2[43] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(259);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1280, 1327);
    var$2[44] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(260);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1328, 1423);
    var$2[45] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(261);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1424, 1535);
    var$2[46] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(262);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1536, 1791);
    var$2[47] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(263);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1792, 1871);
    var$2[48] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(264);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1872, 1919);
    var$2[49] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(265);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(1920, 1983);
    var$2[50] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(266);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2304, 2431);
    var$2[51] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(267);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2432, 2559);
    var$2[52] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(268);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2560, 2687);
    var$2[53] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(269);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2688, 2815);
    var$2[54] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(270);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2816, 2943);
    var$2[55] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(271);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(2944, 3071);
    var$2[56] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(272);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3072, 3199);
    var$2[57] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(273);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3200, 3327);
    var$2[58] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(274);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3328, 3455);
    var$2[59] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(275);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3456, 3583);
    var$2[60] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(276);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3584, 3711);
    var$2[61] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(277);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3712, 3839);
    var$2[62] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(278);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(3840, 4095);
    var$2[63] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(279);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4096, 4255);
    var$2[64] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(280);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4256, 4351);
    var$2[65] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(281);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4352, 4607);
    var$2[66] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(282);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4608, 4991);
    var$2[67] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(283);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(4992, 5023);
    var$2[68] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(284);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5024, 5119);
    var$2[69] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(285);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5120, 5759);
    var$2[70] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(286);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5760, 5791);
    var$2[71] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(287);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5792, 5887);
    var$2[72] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(288);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5888, 5919);
    var$2[73] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(289);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5920, 5951);
    var$2[74] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(290);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5952, 5983);
    var$2[75] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(291);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(5984, 6015);
    var$2[76] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(292);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6016, 6143);
    var$2[77] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(293);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6144, 6319);
    var$2[78] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(294);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6400, 6479);
    var$2[79] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(295);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6480, 6527);
    var$2[80] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(296);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6528, 6623);
    var$2[81] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(297);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6624, 6655);
    var$2[82] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(298);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(6656, 6687);
    var$2[83] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(299);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7424, 7551);
    var$2[84] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(300);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7552, 7615);
    var$2[85] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(301);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7616, 7679);
    var$2[86] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(302);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7680, 7935);
    var$2[87] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(303);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(7936, 8191);
    var$2[88] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(304);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8192, 8303);
    var$2[89] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(305);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8304, 8351);
    var$2[90] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(306);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8352, 8399);
    var$2[91] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(307);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8400, 8447);
    var$2[92] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(308);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8448, 8527);
    var$2[93] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(309);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8528, 8591);
    var$2[94] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(310);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8592, 8703);
    var$2[95] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(311);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8704, 8959);
    var$2[96] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(312);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(8960, 9215);
    var$2[97] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(313);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9216, 9279);
    var$2[98] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(314);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9280, 9311);
    var$2[99] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(315);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9312, 9471);
    var$2[100] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(316);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9472, 9599);
    var$2[101] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(317);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9600, 9631);
    var$2[102] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(318);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9632, 9727);
    var$2[103] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(319);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9728, 9983);
    var$2[104] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(320);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(9984, 10175);
    var$2[105] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(321);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10176, 10223);
    var$2[106] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(322);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10224, 10239);
    var$2[107] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(323);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10240, 10495);
    var$2[108] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(324);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10496, 10623);
    var$2[109] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(325);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10624, 10751);
    var$2[110] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(326);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(10752, 11007);
    var$2[111] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(327);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11008, 11263);
    var$2[112] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(328);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11264, 11359);
    var$2[113] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(329);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11392, 11519);
    var$2[114] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(330);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11520, 11567);
    var$2[115] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(331);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11568, 11647);
    var$2[116] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(332);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11648, 11743);
    var$2[117] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(333);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11776, 11903);
    var$2[118] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(334);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(11904, 12031);
    var$2[119] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(335);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12032, 12255);
    var$2[120] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(336);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12272, 12287);
    var$2[121] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(337);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12288, 12351);
    var$2[122] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(338);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12352, 12447);
    var$2[123] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(339);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12448, 12543);
    var$2[124] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(340);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12544, 12591);
    var$2[125] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(341);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12592, 12687);
    var$2[126] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(342);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12688, 12703);
    var$2[127] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(343);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12704, 12735);
    var$2[128] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(344);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12736, 12783);
    var$2[129] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(345);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12784, 12799);
    var$2[130] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(346);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(12800, 13055);
    var$2[131] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(347);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13056, 13311);
    var$2[132] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(348);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(13312, 19893);
    var$2[133] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(349);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19904, 19967);
    var$2[134] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(350);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(19968, 40959);
    var$2[135] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(351);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(40960, 42127);
    var$2[136] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(352);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42128, 42191);
    var$2[137] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(353);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(42752, 42783);
    var$2[138] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(354);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(43008, 43055);
    var$2[139] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(355);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(44032, 55203);
    var$2[140] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(356);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(55296, 56191);
    var$2[141] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(357);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56192, 56319);
    var$2[142] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(358);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(56320, 57343);
    var$2[143] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(359);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(57344, 63743);
    var$2[144] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(360);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(63744, 64255);
    var$2[145] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(361);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64256, 64335);
    var$2[146] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(362);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(64336, 65023);
    var$2[147] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(363);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65024, 65039);
    var$2[148] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(364);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65040, 65055);
    var$2[149] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(365);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65056, 65071);
    var$2[150] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(366);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65072, 65103);
    var$2[151] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(367);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65104, 65135);
    var$2[152] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(368);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65136, 65279);
    var$2[153] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(369);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(65280, 65519);
    var$2[154] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(370);
    var$4[1] = jur_AbstractCharClass$LazyRange__init_(0, 1114111);
    var$2[155] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(371);
    var$4[1] = jur_AbstractCharClass$LazySpecialsBlock__init_();
    var$2[156] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(372);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(0, 1);
    var$2[157] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(373);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(62, 1);
    var$2[158] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(374);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(1, 1);
    var$2[159] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(375);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(2, 1);
    var$2[160] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(376);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(3, 0);
    var$2[161] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(377);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(4, 0);
    var$2[162] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(378);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(5, 1);
    var$2[163] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(379);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(448, 1);
    var$2[164] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(380);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(6, 1);
    var$2[165] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(381);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(7, 0);
    var$2[166] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(382);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(8, 1);
    var$2[167] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(383);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(3584, 1);
    var$2[168] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(384);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(9, 1);
    var$2[169] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(385);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(10, 1);
    var$2[170] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(386);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(11, 1);
    var$2[171] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(387);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(28672, 0);
    var$2[172] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(388);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(12, 0);
    var$2[173] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(389);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(13, 0);
    var$2[174] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(390);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(14, 0);
    var$2[175] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(391);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_0(983040, 1, 1);
    var$2[176] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(392);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(15, 0);
    var$2[177] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(393);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(16, 1);
    var$2[178] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(394);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(18, 1);
    var$2[179] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(395);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_0(19, 0, 1);
    var$2[180] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(396);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(1643118592, 1);
    var$2[181] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(397);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(20, 0);
    var$2[182] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(398);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(21, 0);
    var$2[183] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(399);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(22, 0);
    var$2[184] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(400);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(23, 0);
    var$2[185] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(401);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(24, 1);
    var$2[186] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(402);
    var$4[1] = jur_AbstractCharClass$LazyCategoryScope__init_(2113929216, 1);
    var$2[187] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(403);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(25, 1);
    var$2[188] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(404);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(26, 0);
    var$2[189] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(405);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(27, 0);
    var$2[190] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(406);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(28, 1);
    var$2[191] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(407);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(29, 0);
    var$2[192] = var$3;
    var$3 = $rt_createArray(jl_Object, 2);
    var$4 = var$3.data;
    var$4[0] = $rt_s(408);
    var$4[1] = jur_AbstractCharClass$LazyCategory__init_(30, 0);
    var$2[193] = var$3;
    jur_AbstractCharClass$PredefinedCharacterClasses_contents = var$1;
}
function jur_AbstractCharClass$LazyCharClass() {
    var a = this; jl_Object.call(a);
    a.$posValue = null;
    a.$negValue = null;
}
function jur_AbstractCharClass$LazyCharClass_getValue($this, $negative) {
    if (!$negative && $this.$posValue === null)
        $this.$posValue = $this.$computeValue();
    else if ($negative && $this.$negValue === null)
        $this.$negValue = jur_AbstractCharClass_setNegative($this.$computeValue(), 1);
    if ($negative)
        return $this.$negValue;
    return $this.$posValue;
}
function jur_UCISupplCharSet() {
    jur_LeafSet.call(this);
    this.$ch0 = 0;
}
function jur_UCISupplCharSet_accepts($this, $strIndex, $testString) {
    var $low, $high;
    $low = $strIndex + 1 | 0;
    $high = jl_String_charAt($testString, $strIndex);
    $low = jl_String_charAt($testString, $low);
    return $this.$ch0 != jl_Character_toLowerCase0(jl_Character_toUpperCase(jl_Character_toCodePoint($high, $low))) ? (-1) : 2;
}
function jur_UCISupplCharSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(193));
    jl_AbstractStringBuilder_append(var$1, jl_String__init_(jl_Character_toChars($this.$ch0)));
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_LowSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$low0 = 0;
}
function jur_LowSurrogateCharSet__init_(var_0) {
    var var_1 = new jur_LowSurrogateCharSet();
    jur_LowSurrogateCharSet__init_0(var_1, var_0);
    return var_1;
}
function jur_LowSurrogateCharSet__init_0($this, $low) {
    jur_AbstractSet__init_($this);
    $this.$low0 = $low;
}
function jur_LowSurrogateCharSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_LowSurrogateCharSet_matches($this, $stringIndex, $testString, $matchResult) {
    var var$4, $low;
    var$4 = $stringIndex + 1 | 0;
    if (var$4 > $matchResult.$rightBound0) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $low = jl_String_charAt($testString, $stringIndex);
    if ($stringIndex > $matchResult.$leftBound0 && jl_Character_isHighSurrogate(jl_String_charAt($testString, $stringIndex - 1 | 0)))
        return (-1);
    if ($this.$low0 != $low)
        return (-1);
    return $this.$next4.$matches(var$4, $testString, $matchResult);
}
function jur_LowSurrogateCharSet_find($this, $strIndex, $testString, $matchResult) {
    var $testStr, $startStr, $strLength, var$7, var$8;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $startStr = $matchResult.$leftBound0;
    $strLength = $matchResult.$rightBound0;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$7 = jl_String_indexOf($testStr, $this.$low0, $strIndex);
        if (var$7 < 0)
            return (-1);
        if (var$7 > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, var$7 - 1 | 0))) {
            $strIndex = var$7 + 1 | 0;
            continue;
        }
        var$8 = $this.$next4;
        $strIndex = var$7 + 1 | 0;
        if (var$8.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$7;
}
function jur_LowSurrogateCharSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
    var $startStr, $testStr;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $startStr = $matchResult.$leftBound0;
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            $lastIndex = jl_String_lastIndexOf($testStr, $this.$low0, $lastIndex);
            if ($lastIndex < 0)
                break a;
            if ($lastIndex < $strIndex)
                break a;
            if ($lastIndex > $startStr && jl_Character_isHighSurrogate(jl_String_charAt($testStr, $lastIndex - 1 | 0))) {
                $lastIndex = $lastIndex + (-2) | 0;
                continue;
            }
            if ($this.$next4.$matches($lastIndex + 1 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    return (-1);
}
function jur_LowSurrogateCharSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(44));
    jl_AbstractStringBuilder_append1(var$1, $this.$low0);
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_LowSurrogateCharSet_first($this, $set) {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_HighSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_LowSurrogateCharSet))
        return 1;
    return $set.$low0 != $this.$low0 ? 0 : 1;
}
function jur_LowSurrogateCharSet_hasConsumed($this, $matchResult) {
    return 1;
}
function jur_HighSurrogateCharSet() {
    jur_JointSet.call(this);
    this.$high0 = 0;
}
function jur_HighSurrogateCharSet__init_(var_0) {
    var var_1 = new jur_HighSurrogateCharSet();
    jur_HighSurrogateCharSet__init_0(var_1, var_0);
    return var_1;
}
function jur_HighSurrogateCharSet__init_0($this, $high) {
    jur_AbstractSet__init_($this);
    $this.$high0 = $high;
}
function jur_HighSurrogateCharSet_setNext($this, $next) {
    $this.$next4 = $next;
}
function jur_HighSurrogateCharSet_matches($this, $stringIndex, $testString, $matchResult) {
    var $strLength, var$5, $low, $high;
    $strLength = $matchResult.$rightBound0;
    var$5 = $stringIndex + 1 | 0;
    $low = $rt_compare(var$5, $strLength);
    if ($low > 0) {
        $matchResult.$hitEnd = 1;
        return (-1);
    }
    $high = jl_String_charAt($testString, $stringIndex);
    if ($low < 0 && jl_Character_isLowSurrogate(jl_String_charAt($testString, var$5)))
        return (-1);
    if ($this.$high0 != $high)
        return (-1);
    return $this.$next4.$matches(var$5, $testString, $matchResult);
}
function jur_HighSurrogateCharSet_find($this, $strIndex, $testString, $matchResult) {
    var $testStr, $strLength, var$6;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound0;
    while (true) {
        if ($strIndex >= $strLength)
            return (-1);
        var$6 = jl_String_indexOf($testStr, $this.$high0, $strIndex);
        if (var$6 < 0)
            return (-1);
        $strIndex = var$6 + 1 | 0;
        if ($strIndex < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, $strIndex))) {
            $strIndex = var$6 + 2 | 0;
            continue;
        }
        if ($this.$next4.$matches($strIndex, $testString, $matchResult) >= 0)
            break;
    }
    return var$6;
}
function jur_HighSurrogateCharSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
    var $testStr, $strLength, var$7;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound0;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            $lastIndex = jl_String_lastIndexOf($testStr, $this.$high0, $lastIndex);
            if ($lastIndex < 0)
                break a;
            if ($lastIndex < $strIndex)
                break a;
            var$7 = $lastIndex + 1 | 0;
            if (var$7 < $strLength && jl_Character_isLowSurrogate(jl_String_charAt($testStr, var$7))) {
                $lastIndex = $lastIndex + (-1) | 0;
                continue;
            }
            if ($this.$next4.$matches(var$7, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    return (-1);
}
function jur_HighSurrogateCharSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(44));
    jl_AbstractStringBuilder_append1(var$1, $this.$high0);
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_HighSurrogateCharSet_first($this, $set) {
    if ($set instanceof jur_CharSet)
        return 0;
    if ($set instanceof jur_RangeSet)
        return 0;
    if ($set instanceof jur_SupplRangeSet)
        return 0;
    if ($set instanceof jur_SupplCharSet)
        return 0;
    if ($set instanceof jur_LowSurrogateCharSet)
        return 0;
    if (!($set instanceof jur_HighSurrogateCharSet))
        return 1;
    return $set.$high0 != $this.$high0 ? 0 : 1;
}
function jur_HighSurrogateCharSet_hasConsumed($this, $matchResult) {
    return 1;
}
function jur_SupplCharSet() {
    var a = this; jur_LeafSet.call(a);
    a.$high = 0;
    a.$low = 0;
    a.$ch1 = 0;
}
function jur_SupplCharSet_accepts($this, $strIndex, $testString) {
    var $low, $high;
    $low = $strIndex + 1 | 0;
    $high = jl_String_charAt($testString, $strIndex);
    $low = jl_String_charAt($testString, $low);
    return $this.$high == $high && $this.$low == $low ? 2 : (-1);
}
function jur_SupplCharSet_find($this, $strIndex, $testString, $matchResult) {
    var $testStr, $strLength, $ch;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_find($this, $strIndex, $testString, $matchResult);
    $testStr = $testString;
    $strLength = $matchResult.$rightBound0;
    while ($strIndex < $strLength) {
        $strIndex = jl_String_indexOf($testStr, $this.$high, $strIndex);
        if ($strIndex < 0)
            return (-1);
        $strIndex = $strIndex + 1 | 0;
        if ($strIndex >= $strLength)
            continue;
        $ch = jl_String_charAt($testStr, $strIndex);
        if ($this.$low == $ch && $this.$next4.$matches($strIndex + 1 | 0, $testString, $matchResult) >= 0)
            return $strIndex + (-1) | 0;
        $strIndex = $strIndex + 1 | 0;
    }
    return (-1);
}
function jur_SupplCharSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult) {
    var $testStr;
    if (!($testString instanceof jl_String))
        return jur_AbstractSet_findBack($this, $strIndex, $lastIndex, $testString, $matchResult);
    $testStr = $testString;
    a: {
        while (true) {
            if ($lastIndex < $strIndex)
                return (-1);
            $lastIndex = jl_String_lastIndexOf($testStr, $this.$low, $lastIndex) + (-1) | 0;
            if ($lastIndex < 0)
                break a;
            if ($lastIndex < $strIndex)
                break a;
            if ($this.$high == jl_String_charAt($testStr, $lastIndex) && $this.$next4.$matches($lastIndex + 2 | 0, $testString, $matchResult) >= 0)
                break;
            $lastIndex = $lastIndex + (-1) | 0;
        }
        return $lastIndex;
    }
    return (-1);
}
function jur_SupplCharSet_getName($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(44));
    jl_AbstractStringBuilder_append1(var$1, $this.$high);
    jl_AbstractStringBuilder_append1(var$1, $this.$low);
    return jl_AbstractStringBuilder_toString(var$1);
}
function jur_SupplCharSet_getCodePoint($this) {
    return $this.$ch1;
}
function jur_SupplCharSet_first($this, $set) {
    if ($set instanceof jur_SupplCharSet)
        return $set.$ch1 != $this.$ch1 ? 0 : 1;
    if ($set instanceof jur_SupplRangeSet)
        return $set.$contains3($this.$ch1);
    if ($set instanceof jur_CharSet)
        return 0;
    if (!($set instanceof jur_RangeSet))
        return 1;
    return 0;
}
function jur_AbstractLineTerminator$1() {
    jur_AbstractLineTerminator.call(this);
}
function jur_AbstractLineTerminator$1_isLineTerminator($this, $ch) {
    return $ch != 10 ? 0 : 1;
}
function jur_AbstractLineTerminator$1_isAfterLineTerminator($this, $ch, $ch2) {
    return $ch != 10 ? 0 : 1;
}
function jur_AbstractLineTerminator$2() {
    jur_AbstractLineTerminator.call(this);
}
function jur_AbstractLineTerminator$2_isLineTerminator($this, $ch) {
    return $ch != 10 && $ch != 13 && $ch != 133 && ($ch | 1) != 8233 ? 0 : 1;
}
function jur_AbstractLineTerminator$2_isAfterLineTerminator($this, $ch, $ch2) {
    a: {
        b: {
            if ($ch != 10 && $ch != 133 && ($ch | 1) != 8233) {
                if ($ch != 13)
                    break b;
                if ($ch2 == 10)
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = 0;
    }
    return $ch;
}
function jur_SequenceSet$IntHash() {
    var a = this; jl_Object.call(a);
    a.$table = null;
    a.$values = null;
    a.$mask = 0;
    a.$size3 = 0;
}
function jur_SequenceSet$IntHash__init_(var_0) {
    var var_1 = new jur_SequenceSet$IntHash();
    jur_SequenceSet$IntHash__init_0(var_1, var_0);
    return var_1;
}
function jur_SequenceSet$IntHash__init_0($this, $size) {
    while ($size >= $this.$mask) {
        $this.$mask = $this.$mask << 1 | 1;
    }
    $this.$mask = $this.$mask << 1 | 1;
    $this.$table = $rt_createIntArray($this.$mask + 1 | 0);
    $this.$values = $rt_createIntArray($this.$mask + 1 | 0);
    $this.$size3 = $size;
}
function jur_SequenceSet$IntHash_put($this, $key, $value) {
    var $i, $hashCode;
    $i = 0;
    $hashCode = $key & $this.$mask;
    while ($this.$table.data[$hashCode] && $this.$table.data[$hashCode] != $key) {
        $i = ($i + 1 | 0) & $this.$mask;
        $hashCode = ($hashCode + $i | 0) & $this.$mask;
    }
    $this.$table.data[$hashCode] = $key;
    $this.$values.data[$hashCode] = $value;
}
function jur_SequenceSet$IntHash_get($this, $key) {
    var $hashCode, $i, $storedKey;
    $hashCode = $key & $this.$mask;
    $i = 0;
    while (true) {
        $storedKey = $this.$table.data[$hashCode];
        if (!$storedKey)
            break;
        if ($storedKey == $key)
            return $this.$values.data[$hashCode];
        $i = ($i + 1 | 0) & $this.$mask;
        $hashCode = ($hashCode + $i | 0) & $this.$mask;
    }
    return $this.$size3;
}
function jm_Conversion() {
    jl_Object.call(this);
}
var jm_Conversion_digitFitInInt = null;
var jm_Conversion_bigRadices = null;
function jm_Conversion__clinit_() {
    var var$1, var$2;
    var$1 = $rt_createIntArray(37);
    var$2 = var$1.data;
    var$2[0] = (-1);
    var$2[1] = (-1);
    var$2[2] = 31;
    var$2[3] = 19;
    var$2[4] = 15;
    var$2[5] = 13;
    var$2[6] = 11;
    var$2[7] = 11;
    var$2[8] = 10;
    var$2[9] = 9;
    var$2[10] = 9;
    var$2[11] = 8;
    var$2[12] = 8;
    var$2[13] = 8;
    var$2[14] = 8;
    var$2[15] = 7;
    var$2[16] = 7;
    var$2[17] = 7;
    var$2[18] = 7;
    var$2[19] = 7;
    var$2[20] = 7;
    var$2[21] = 7;
    var$2[22] = 6;
    var$2[23] = 6;
    var$2[24] = 6;
    var$2[25] = 6;
    var$2[26] = 6;
    var$2[27] = 6;
    var$2[28] = 6;
    var$2[29] = 6;
    var$2[30] = 6;
    var$2[31] = 6;
    var$2[32] = 6;
    var$2[33] = 6;
    var$2[34] = 6;
    var$2[35] = 6;
    var$2[36] = 5;
    jm_Conversion_digitFitInInt = var$1;
    var$1 = $rt_createIntArray(35);
    var$2 = var$1.data;
    var$2[0] = (-2147483648);
    var$2[1] = 1162261467;
    var$2[2] = 1073741824;
    var$2[3] = 1220703125;
    var$2[4] = 362797056;
    var$2[5] = 1977326743;
    var$2[6] = 1073741824;
    var$2[7] = 387420489;
    var$2[8] = 1000000000;
    var$2[9] = 214358881;
    var$2[10] = 429981696;
    var$2[11] = 815730721;
    var$2[12] = 1475789056;
    var$2[13] = 170859375;
    var$2[14] = 268435456;
    var$2[15] = 410338673;
    var$2[16] = 612220032;
    var$2[17] = 893871739;
    var$2[18] = 1280000000;
    var$2[19] = 1801088541;
    var$2[20] = 113379904;
    var$2[21] = 148035889;
    var$2[22] = 191102976;
    var$2[23] = 244140625;
    var$2[24] = 308915776;
    var$2[25] = 387420489;
    var$2[26] = 481890304;
    var$2[27] = 594823321;
    var$2[28] = 729000000;
    var$2[29] = 887503681;
    var$2[30] = 1073741824;
    var$2[31] = 1291467969;
    var$2[32] = 1544804416;
    var$2[33] = 1838265625;
    var$2[34] = 60466176;
    jm_Conversion_bigRadices = var$1;
}
function jm_Elementary() {
    jl_Object.call(this);
}
function jm_Elementary_compareArrays($a, $b, $size) {
    var $i, var$5;
    $i = $size - 1 | 0;
    while ($i >= 0) {
        var$5 = $b.data;
        if ($a.data[$i] != var$5[$i])
            break;
        $i = $i + (-1) | 0;
    }
    if ($i < 0)
        $size = 0;
    else {
        $b = $b.data;
        $size = Long_ge(Long_and(Long_fromInt($a.data[$i]), new Long(4294967295, 0)), Long_and(Long_fromInt($b[$i]), new Long(4294967295, 0))) ? 1 : (-1);
    }
    return $size;
}
function jm_Elementary_add($op1, $op2) {
    var $op1Sign, $op2Sign, $op1Len, $op2Len, $a, $b, $res, $valueLo, $valueHi, $resDigits, var$13, $cmp, $res_0;
    $op1Sign = $op1.$sign1;
    $op2Sign = $op2.$sign1;
    if (!$op1Sign)
        return $op2;
    if (!$op2Sign)
        return $op1;
    $op1Len = $op1.$numberLength;
    $op2Len = $op2.$numberLength;
    if (($op1Len + $op2Len | 0) == 2) {
        $a = Long_and(Long_fromInt($op1.$digits.data[0]), new Long(4294967295, 0));
        $b = Long_and(Long_fromInt($op2.$digits.data[0]), new Long(4294967295, 0));
        if ($op1Sign != $op2Sign)
            return jm_BigInteger_valueOf($op1Sign >= 0 ? Long_sub($a, $b) : Long_sub($b, $a));
        $res = Long_add($a, $b);
        $valueLo = $res.lo;
        $valueHi = $res.hi;
        if (!$valueHi)
            $op1 = jm_BigInteger__init_0($op1Sign, $valueLo);
        else {
            $op1 = new jm_BigInteger;
            $resDigits = $rt_createIntArray(2);
            var$13 = $resDigits.data;
            var$13[0] = $valueLo;
            var$13[1] = $valueHi;
            jm_BigInteger__init_1($op1, $op1Sign, 2, $resDigits);
        }
        return $op1;
    }
    if ($op1Sign == $op2Sign)
        $resDigits = $op1Len < $op2Len ? jm_Elementary_add0($op2.$digits, $op2Len, $op1.$digits, $op1Len) : jm_Elementary_add0($op1.$digits, $op1Len, $op2.$digits, $op2Len);
    else {
        $cmp = $rt_compare($op1Len, $op2Len);
        $cmp = !$cmp ? jm_Elementary_compareArrays($op1.$digits, $op2.$digits, $op1Len) : $cmp <= 0 ? (-1) : 1;
        if (!$cmp)
            return jm_BigInteger_ZERO;
        if ($cmp != 1) {
            $resDigits = jm_Elementary_subtract($op2.$digits, $op2Len, $op1.$digits, $op1Len);
            $op1Sign = $op2Sign;
        } else
            $resDigits = jm_Elementary_subtract($op1.$digits, $op1Len, $op2.$digits, $op2Len);
    }
    var$13 = $resDigits.data;
    $res_0 = jm_BigInteger__init_($op1Sign, var$13.length, $resDigits);
    jm_BigInteger_cutOffLeadingZeroes($res_0);
    return $res_0;
}
function jm_Elementary_add1($res, $a, $aSize, $b, $bSize) {
    var var$6, $carry, var$8, $i;
    var$6 = $res.data;
    $res = $b.data;
    $a = $a.data;
    $carry = Long_add(Long_and(Long_fromInt($a[0]), new Long(4294967295, 0)), Long_and(Long_fromInt($res[0]), new Long(4294967295, 0)));
    var$6[0] = $carry.lo;
    var$8 = Long_shr($carry, 32);
    if ($aSize < $bSize) {
        $i = 1;
        while ($i < $aSize) {
            $carry = Long_add(var$8, Long_add(Long_and(Long_fromInt($a[$i]), new Long(4294967295, 0)), Long_and(Long_fromInt($res[$i]), new Long(4294967295, 0))));
            var$6[$i] = $carry.lo;
            var$8 = Long_shr($carry, 32);
            $i = $i + 1 | 0;
        }
        while ($i < $bSize) {
            $carry = Long_add(var$8, Long_and(Long_fromInt($res[$i]), new Long(4294967295, 0)));
            var$6[$i] = $carry.lo;
            var$8 = Long_shr($carry, 32);
            $i = $i + 1 | 0;
        }
    } else {
        $i = 1;
        while ($i < $bSize) {
            $carry = Long_add(var$8, Long_add(Long_and(Long_fromInt($a[$i]), new Long(4294967295, 0)), Long_and(Long_fromInt($res[$i]), new Long(4294967295, 0))));
            var$6[$i] = $carry.lo;
            var$8 = Long_shr($carry, 32);
            $i = $i + 1 | 0;
        }
        while ($i < $aSize) {
            $carry = Long_add(var$8, Long_and(Long_fromInt($a[$i]), new Long(4294967295, 0)));
            var$6[$i] = $carry.lo;
            var$8 = Long_shr($carry, 32);
            $i = $i + 1 | 0;
        }
    }
    if (Long_ne(var$8, Long_ZERO))
        var$6[$i] = var$8.lo;
}
function jm_Elementary_add0($a, $aSize, $b, $bSize) {
    var $res;
    $res = $rt_createIntArray($aSize + 1 | 0);
    jm_Elementary_add1($res, $a, $aSize, $b, $bSize);
    return $res;
}
function jm_Elementary_subtract($a, $aSize, $b, $bSize) {
    var $res, var$6, var$7, var$8, var$9, var$10, var$11;
    $res = $rt_createIntArray($aSize);
    var$6 = $res.data;
    var$7 = Long_ZERO;
    var$8 = 0;
    while (var$8 < $bSize) {
        var$9 = $a.data;
        var$10 = $b.data;
        var$11 = Long_add(var$7, Long_sub(Long_and(Long_fromInt(var$9[var$8]), new Long(4294967295, 0)), Long_and(Long_fromInt(var$10[var$8]), new Long(4294967295, 0))));
        var$6[var$8] = var$11.lo;
        var$7 = Long_shr(var$11, 32);
        var$8 = var$8 + 1 | 0;
    }
    while (var$8 < $aSize) {
        var$11 = Long_add(var$7, Long_and(Long_fromInt($a.data[var$8]), new Long(4294967295, 0)));
        var$6[var$8] = var$11.lo;
        var$7 = Long_shr(var$11, 32);
        var$8 = var$8 + 1 | 0;
    }
    return $res;
}
function jur_IntHash() {
    jl_Object.call(this);
}
function ju_Enumeration() {
}
function ju_Hashtable$1() {
    jl_Object.call(this);
}
function ju_Hashtable$2() {
    jl_Object.call(this);
}
function jur_AbstractCharClass$LazySpace() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazySpace__init_() {
    var var_0 = new jur_AbstractCharClass$LazySpace();
    jur_AbstractCharClass$LazySpace__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazySpace__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazySpace_computeValue($this) {
    return jur_CharClass_add(jur_CharClass_add0(jur_CharClass__init_0(), 9, 13), 32);
}
function jur_AbstractCharClass$LazyDigit() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyDigit__init_() {
    var var_0 = new jur_AbstractCharClass$LazyDigit();
    jur_AbstractCharClass$LazyDigit__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyDigit__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyDigit_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass__init_0(), 48, 57);
}
function jur_AbstractCharClass$LazyLower() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyLower__init_() {
    var var_0 = new jur_AbstractCharClass$LazyLower();
    jur_AbstractCharClass$LazyLower__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyLower__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyLower_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass__init_0(), 97, 122);
}
function jur_AbstractCharClass$LazyUpper() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyUpper__init_() {
    var var_0 = new jur_AbstractCharClass$LazyUpper();
    jur_AbstractCharClass$LazyUpper__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyUpper__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyUpper_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass__init_0(), 65, 90);
}
function jur_AbstractCharClass$LazyASCII() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyASCII__init_() {
    var var_0 = new jur_AbstractCharClass$LazyASCII();
    jur_AbstractCharClass$LazyASCII__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyASCII__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyASCII_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass__init_0(), 0, 127);
}
function jur_AbstractCharClass$LazyAlpha() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyAlpha__init_() {
    var var_0 = new jur_AbstractCharClass$LazyAlpha();
    jur_AbstractCharClass$LazyAlpha__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyAlpha__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyAlpha_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 97, 122), 65, 90);
}
function jur_AbstractCharClass$LazyAlnum() {
    jur_AbstractCharClass$LazyAlpha.call(this);
}
function jur_AbstractCharClass$LazyAlnum__init_() {
    var var_0 = new jur_AbstractCharClass$LazyAlnum();
    jur_AbstractCharClass$LazyAlnum__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyAlnum__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyAlnum_computeValue($this) {
    return jur_CharClass_add0(jur_AbstractCharClass$LazyAlpha_computeValue($this), 48, 57);
}
function jur_AbstractCharClass$LazyPunct() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyPunct__init_() {
    var var_0 = new jur_AbstractCharClass$LazyPunct();
    jur_AbstractCharClass$LazyPunct__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyPunct__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyPunct_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 33, 64), 91, 96), 123, 126);
}
function jur_AbstractCharClass$LazyGraph() {
    jur_AbstractCharClass$LazyAlnum.call(this);
}
function jur_AbstractCharClass$LazyGraph__init_() {
    var var_0 = new jur_AbstractCharClass$LazyGraph();
    jur_AbstractCharClass$LazyGraph__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyGraph__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyGraph_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_AbstractCharClass$LazyAlnum_computeValue($this), 33, 64), 91, 96), 123, 126);
}
function jur_AbstractCharClass$LazyPrint() {
    jur_AbstractCharClass$LazyGraph.call(this);
}
function jur_AbstractCharClass$LazyPrint__init_() {
    var var_0 = new jur_AbstractCharClass$LazyPrint();
    jur_AbstractCharClass$LazyPrint__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyPrint__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyPrint_computeValue($this) {
    return jur_CharClass_add(jur_AbstractCharClass$LazyGraph_computeValue($this), 32);
}
function jur_AbstractCharClass$LazyBlank() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyBlank__init_() {
    var var_0 = new jur_AbstractCharClass$LazyBlank();
    jur_AbstractCharClass$LazyBlank__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyBlank__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyBlank_computeValue($this) {
    return jur_CharClass_add(jur_CharClass_add(jur_CharClass__init_0(), 32), 9);
}
function jur_AbstractCharClass$LazyCntrl() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyCntrl__init_() {
    var var_0 = new jur_AbstractCharClass$LazyCntrl();
    jur_AbstractCharClass$LazyCntrl__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyCntrl__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyCntrl_computeValue($this) {
    return jur_CharClass_add(jur_CharClass_add0(jur_CharClass__init_0(), 0, 31), 127);
}
function jur_AbstractCharClass$LazyXDigit() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyXDigit__init_() {
    var var_0 = new jur_AbstractCharClass$LazyXDigit();
    jur_AbstractCharClass$LazyXDigit__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyXDigit__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyXDigit_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 48, 57), 97, 102), 65, 70);
}
function jur_AbstractCharClass$LazyJavaLowerCase() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaLowerCase__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaLowerCase();
    jur_AbstractCharClass$LazyJavaLowerCase__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaLowerCase__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaLowerCase_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLowerCase$1;
    $chCl.$this$029 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaUpperCase() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaUpperCase__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaUpperCase();
    jur_AbstractCharClass$LazyJavaUpperCase__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaUpperCase__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaUpperCase_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUpperCase$1;
    $chCl.$this$030 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaWhitespace() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaWhitespace__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaWhitespace();
    jur_AbstractCharClass$LazyJavaWhitespace__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaWhitespace__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaWhitespace_computeValue($this) {
    var var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaWhitespace$1;
    var$1.$this$031 = $this;
    jur_AbstractCharClass__init_0(var$1);
    return var$1;
}
function jur_AbstractCharClass$LazyJavaMirrored() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaMirrored__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaMirrored();
    jur_AbstractCharClass$LazyJavaMirrored__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaMirrored__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaMirrored_computeValue($this) {
    var var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaMirrored$1;
    var$1.$this$032 = $this;
    jur_AbstractCharClass__init_0(var$1);
    return var$1;
}
function jur_AbstractCharClass$LazyJavaDefined() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaDefined__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaDefined();
    jur_AbstractCharClass$LazyJavaDefined__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaDefined__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaDefined_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaDefined$1;
    $chCl.$this$033 = $this;
    jur_AbstractCharClass__init_0($chCl);
    ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaDigit() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaDigit__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaDigit();
    jur_AbstractCharClass$LazyJavaDigit__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaDigit__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaDigit_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaDigit$1;
    $chCl.$this$034 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable();
    jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1;
    $chCl.$this$035 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaISOControl() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaISOControl__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaISOControl();
    jur_AbstractCharClass$LazyJavaISOControl__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaISOControl__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaISOControl_computeValue($this) {
    var var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaISOControl$1;
    var$1.$this$036 = $this;
    jur_AbstractCharClass__init_0(var$1);
    return var$1;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1;
    $chCl.$this$037 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart();
    jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1;
    $chCl.$this$038 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaLetter() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaLetter__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaLetter();
    jur_AbstractCharClass$LazyJavaLetter__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaLetter__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaLetter_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLetter$1;
    $chCl.$this$039 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaLetterOrDigit() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaLetterOrDigit__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaLetterOrDigit();
    jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaLetterOrDigit__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaLetterOrDigit$1;
    $chCl.$this$040 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaSpaceChar() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaSpaceChar__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaSpaceChar();
    jur_AbstractCharClass$LazyJavaSpaceChar__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaSpaceChar__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaSpaceChar_computeValue($this) {
    var var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaSpaceChar$1;
    var$1.$this$041 = $this;
    jur_AbstractCharClass__init_0(var$1);
    return var$1;
}
function jur_AbstractCharClass$LazyJavaTitleCase() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaTitleCase__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaTitleCase();
    jur_AbstractCharClass$LazyJavaTitleCase__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaTitleCase__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaTitleCase_computeValue($this) {
    var var$1;
    var$1 = new jur_AbstractCharClass$LazyJavaTitleCase$1;
    var$1.$this$042 = $this;
    jur_AbstractCharClass__init_0(var$1);
    return var$1;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1;
    $chCl.$this$043 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_() {
    var var_0 = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart();
    jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue($this) {
    var $chCl;
    $chCl = new jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1;
    $chCl.$this$044 = $this;
    jur_AbstractCharClass__init_0($chCl);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyWord() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazyWord__init_() {
    var var_0 = new jur_AbstractCharClass$LazyWord();
    jur_AbstractCharClass$LazyWord__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyWord__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyWord_computeValue($this) {
    return jur_CharClass_add(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 97, 122), 65, 90), 48, 57), 95);
}
function jur_AbstractCharClass$LazyNonWord() {
    jur_AbstractCharClass$LazyWord.call(this);
}
function jur_AbstractCharClass$LazyNonWord__init_() {
    var var_0 = new jur_AbstractCharClass$LazyNonWord();
    jur_AbstractCharClass$LazyNonWord__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyNonWord__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyNonWord_computeValue($this) {
    var $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyWord_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyNonSpace() {
    jur_AbstractCharClass$LazySpace.call(this);
}
function jur_AbstractCharClass$LazyNonSpace__init_() {
    var var_0 = new jur_AbstractCharClass$LazyNonSpace();
    jur_AbstractCharClass$LazyNonSpace__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyNonSpace__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyNonSpace_computeValue($this) {
    var $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazySpace_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyNonDigit() {
    jur_AbstractCharClass$LazyDigit.call(this);
}
function jur_AbstractCharClass$LazyNonDigit__init_() {
    var var_0 = new jur_AbstractCharClass$LazyNonDigit();
    jur_AbstractCharClass$LazyNonDigit__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazyNonDigit__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazyNonDigit_computeValue($this) {
    var $chCl;
    $chCl = jur_AbstractCharClass_setNegative(jur_AbstractCharClass$LazyDigit_computeValue($this), 1);
    $chCl.$mayContainSupplCodepoints = 1;
    return $chCl;
}
function jur_AbstractCharClass$LazyRange() {
    var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$start5 = 0;
    a.$end1 = 0;
}
function jur_AbstractCharClass$LazyRange__init_(var_0, var_1) {
    var var_2 = new jur_AbstractCharClass$LazyRange();
    jur_AbstractCharClass$LazyRange__init_0(var_2, var_0, var_1);
    return var_2;
}
function jur_AbstractCharClass$LazyRange__init_0($this, $start, $end) {
    $this.$start5 = $start;
    $this.$end1 = $end;
}
function jur_AbstractCharClass$LazyRange_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass__init_0(), $this.$start5, $this.$end1);
}
function jur_AbstractCharClass$LazySpecialsBlock() {
    jur_AbstractCharClass$LazyCharClass.call(this);
}
function jur_AbstractCharClass$LazySpecialsBlock__init_() {
    var var_0 = new jur_AbstractCharClass$LazySpecialsBlock();
    jur_AbstractCharClass$LazySpecialsBlock__init_0(var_0);
    return var_0;
}
function jur_AbstractCharClass$LazySpecialsBlock__init_0($this) {
    return;
}
function jur_AbstractCharClass$LazySpecialsBlock_computeValue($this) {
    return jur_CharClass_add0(jur_CharClass_add0(jur_CharClass__init_0(), 65279, 65279), 65520, 65533);
}
function jur_AbstractCharClass$LazyCategory() {
    var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category = 0;
    a.$mayContainSupplCodepoints0 = 0;
    a.$containsAllSurrogates = 0;
}
function jur_AbstractCharClass$LazyCategory__init_(var_0, var_1) {
    var var_2 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_1(var_2, var_0, var_1);
    return var_2;
}
function jur_AbstractCharClass$LazyCategory__init_0(var_0, var_1, var_2) {
    var var_3 = new jur_AbstractCharClass$LazyCategory();
    jur_AbstractCharClass$LazyCategory__init_2(var_3, var_0, var_1, var_2);
    return var_3;
}
function jur_AbstractCharClass$LazyCategory__init_1($this, $cat, $mayContainSupplCodepoints) {
    $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
    $this.$category = $cat;
}
function jur_AbstractCharClass$LazyCategory__init_2($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) {
    $this.$containsAllSurrogates = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints0 = $mayContainSupplCodepoints;
    $this.$category = $cat;
}
function jur_AbstractCharClass$LazyCategory_computeValue($this) {
    var $chCl;
    $chCl = jur_UnicodeCategory__init_($this.$category);
    if ($this.$containsAllSurrogates)
        ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints0;
    return $chCl;
}
function jur_AbstractCharClass$LazyCategoryScope() {
    var a = this; jur_AbstractCharClass$LazyCharClass.call(a);
    a.$category0 = 0;
    a.$mayContainSupplCodepoints1 = 0;
    a.$containsAllSurrogates0 = 0;
}
function jur_AbstractCharClass$LazyCategoryScope__init_(var_0, var_1) {
    var var_2 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_1(var_2, var_0, var_1);
    return var_2;
}
function jur_AbstractCharClass$LazyCategoryScope__init_0(var_0, var_1, var_2) {
    var var_3 = new jur_AbstractCharClass$LazyCategoryScope();
    jur_AbstractCharClass$LazyCategoryScope__init_2(var_3, var_0, var_1, var_2);
    return var_3;
}
function jur_AbstractCharClass$LazyCategoryScope__init_1($this, $cat, $mayContainSupplCodepoints) {
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
}
function jur_AbstractCharClass$LazyCategoryScope__init_2($this, $cat, $mayContainSupplCodepoints, $containsAllSurrogates) {
    $this.$containsAllSurrogates0 = $containsAllSurrogates;
    $this.$mayContainSupplCodepoints1 = $mayContainSupplCodepoints;
    $this.$category0 = $cat;
}
function jur_AbstractCharClass$LazyCategoryScope_computeValue($this) {
    var $chCl;
    $chCl = new jur_UnicodeCategoryScope;
    jur_UnicodeCategory__init_0($chCl, $this.$category0);
    if ($this.$containsAllSurrogates0)
        ju_BitSet_set0($chCl.$lowHighSurrogates, 0, 2048);
    $chCl.$mayContainSupplCodepoints = $this.$mayContainSupplCodepoints1;
    return $chCl;
}
function ju_Hashtable$Entry() {
    var a = this; ju_MapEntry.call(a);
    a.$next6 = null;
    a.$hashcode = 0;
}
function ju_Hashtable$Entry_getKeyHash($this) {
    return $this.$key.$hashCode0();
}
function ju_Hashtable$Entry_equalsKey($this, $aKey, $hash) {
    return $this.$hashcode == jl_String_hashCode($aKey) && $this.$key.$equals($aKey) ? 1 : 0;
}
function otjc_JSString() {
    jl_Object.call(this);
}
function otciu_UnicodeHelper$Range() {
    var a = this; jl_Object.call(a);
    a.$start0 = 0;
    a.$end = 0;
    a.$data = null;
}
function otciu_UnicodeHelper$Range__init_(var_0, var_1, var_2) {
    var var_3 = new otciu_UnicodeHelper$Range();
    otciu_UnicodeHelper$Range__init_0(var_3, var_0, var_1, var_2);
    return var_3;
}
function otciu_UnicodeHelper$Range__init_0($this, $start, $end, $data) {
    $this.$start0 = $start;
    $this.$end = $end;
    $this.$data = $data;
}
function ju_AbstractList$SubAbstractList() {
    var a = this; ju_AbstractList.call(a);
    a.$fullList = null;
    a.$offset = 0;
    a.$size4 = 0;
}
function ju_AbstractList$SubAbstractList__init_(var_0, var_1, var_2) {
    var var_3 = new ju_AbstractList$SubAbstractList();
    ju_AbstractList$SubAbstractList__init_0(var_3, var_0, var_1, var_2);
    return var_3;
}
function ju_AbstractList$SubAbstractList__init_0($this, $list, $start, $end) {
    $this.$fullList = $list;
    $this.$modCount = $this.$fullList.$modCount;
    $this.$offset = $start;
    $this.$size4 = $end - $start | 0;
}
function ju_AbstractList$SubAbstractList_get($this, $location) {
    var var$2;
    if ($this.$modCount != $this.$fullList.$modCount) {
        var$2 = new ju_ConcurrentModificationException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    if (0 <= $location && $location < $this.$size4)
        return ju_ArrayList_get($this.$fullList, $location + $this.$offset | 0);
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$2);
    $rt_throw(var$2);
}
function ju_AbstractList$SubAbstractList_iterator($this) {
    return ju_AbstractList$SubAbstractList_listIterator($this, 0);
}
function ju_AbstractList$SubAbstractList_listIterator($this, $location) {
    var var$2, var$3, var$4;
    if ($this.$modCount != $this.$fullList.$modCount) {
        var$2 = new ju_ConcurrentModificationException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    if (0 <= $location && $location <= $this.$size4) {
        var$2 = new ju_AbstractList$SubAbstractList$SubAbstractListIterator;
        var$3 = ju_AbstractList_listIterator($this.$fullList, $location + $this.$offset | 0);
        $location = $this.$offset;
        var$4 = $this.$size4;
        var$2.$iterator0 = var$3;
        var$2.$subList0 = $this;
        var$2.$start6 = $location;
        var$2.$end2 = var$2.$start6 + var$4 | 0;
        return var$2;
    }
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_0(var$2);
    $rt_throw(var$2);
}
function ju_AbstractList$SubAbstractList_size($this) {
    var var$1;
    if ($this.$modCount == $this.$fullList.$modCount)
        return $this.$size4;
    var$1 = new ju_ConcurrentModificationException;
    jl_Throwable__init_0(var$1);
    $rt_throw(var$1);
}
function ju_AbstractList$SubAbstractListRandomAccess() {
    ju_AbstractList$SubAbstractList.call(this);
}
function tt_CellPosition() {
    var a = this; jl_Object.call(a);
    a.$row = 0;
    a.$col = 0;
}
function tt_CellPosition__init_(var_0, var_1) {
    var var_2 = new tt_CellPosition();
    tt_CellPosition__init_0(var_2, var_0, var_1);
    return var_2;
}
function tt_CellPosition__init_0($this, $row, $col) {
    $this.$row = $row;
    $this.$col = $col;
}
function tt_CellPosition_hashCode($this) {
    return $this.$row + (101 * $this.$col | 0) | 0;
}
function tt_CellPosition_equals($this, $obj) {
    var $other;
    if ($this === $obj)
        return 1;
    if ($obj === null)
        return 0;
    if (jl_Object_getClass($this) !== jl_Object_getClass($obj))
        return 0;
    $other = $obj;
    return $this.$row == $other.$row && $this.$col == $other.$col ? 1 : 0;
}
function tt_CellPosition_compareTo0($this, $other) {
    var $rowdiff;
    $rowdiff = $this.$row - $other.$row | 0;
    if (!$rowdiff)
        $rowdiff = $this.$col - $other.$col | 0;
    return $rowdiff;
}
function tt_CellPosition_compareTo($this, var$1) {
    return tt_CellPosition_compareTo0($this, var$1);
}
function tt_TableWithRulingLines() {
    var a = this; tt_Table.call(a);
    a.$verticalRulings0 = null;
    a.$horizontalRulings = null;
    a.$si = null;
}
function tt_TableWithRulingLines_rowsOfCells($cells) {
    var $rv, $iter, $c, $lastTop, $lastRow;
    $rv = ju_ArrayList__init_();
    if (ju_AbstractCollection_isEmpty($cells))
        return $rv;
    ju_Collections_sort($cells, new tt_TableWithRulingLines$1);
    $iter = ju_AbstractList_iterator($cells);
    $c = ju_AbstractList$1_next($iter);
    $lastTop = tt_Rectangle_getTop($c);
    $lastRow = ju_ArrayList__init_();
    ju_ArrayList_add($lastRow, $c);
    ju_ArrayList_add($rv, $lastRow);
    while (ju_AbstractList$1_hasNext($iter)) {
        $cells = ju_AbstractList$1_next($iter);
        if (!tt_Utils_feq(tt_Rectangle_getTop($cells), $lastTop)) {
            $lastRow = ju_ArrayList__init_();
            ju_ArrayList_add($rv, $lastRow);
        }
        ju_ArrayList_add($lastRow, $cells);
        $lastTop = tt_Rectangle_getTop($cells);
    }
    return $rv;
}
function cjag_PathIterator() {
}
function cjag_Path2D$Iterator() {
    var a = this; jl_Object.call(a);
    a.$typeIdx = 0;
    a.$pointIdx = 0;
    a.$path = null;
}
var cjag_Path2D$Iterator_curvecoords = null;
function cjag_Path2D$Iterator__init_0(var_0) {
    var var_1 = new cjag_Path2D$Iterator();
    cjag_Path2D$Iterator__init_(var_1, var_0);
    return var_1;
}
function cjag_Path2D$Iterator__init_($this, $path) {
    $this.$path = $path;
}
function cjag_Path2D$Iterator_isDone($this) {
    return $this.$typeIdx < $this.$path.$numTypes ? 0 : 1;
}
function cjag_Path2D$Iterator_next($this) {
    var var$1, var$2, $type;
    var$1 = $this.$path.$pointTypes.data;
    var$2 = $this.$typeIdx;
    $this.$typeIdx = var$2 + 1 | 0;
    $type = var$1[var$2];
    $this.$pointIdx = $this.$pointIdx + cjag_Path2D$Iterator_curvecoords.data[$type] | 0;
}
function cjag_Path2D$Iterator__clinit_() {
    var var$1, var$2;
    var$1 = $rt_createIntArray(5);
    var$2 = var$1.data;
    var$2[0] = 2;
    var$2[1] = 2;
    var$2[2] = 4;
    var$2[3] = 6;
    var$2[4] = 0;
    cjag_Path2D$Iterator_curvecoords = var$1;
}
function cjag_Path2D$Float$TxIterator() {
    var a = this; cjag_Path2D$Iterator.call(a);
    a.$floatCoords1 = null;
    a.$affine0 = null;
}
function cjag_Path2D$Float$TxIterator_currentSegment($this, $coords) {
    var $type, $numCoords;
    $type = $this.$path.$pointTypes.data[$this.$typeIdx];
    $numCoords = cjag_Path2D$Iterator_curvecoords.data[$type];
    if ($numCoords > 0)
        cjag_AffineTransform_transform($this.$affine0, $this.$floatCoords1, $this.$pointIdx, $coords, 0, $numCoords / 2 | 0);
    return $type;
}
function cjag_Path2D$Float$CopyIterator() {
    cjag_Path2D$Iterator.call(this);
    this.$floatCoords0 = null;
}
function cjag_Path2D$Float$CopyIterator_currentSegment($this, $coords) {
    var $type, $numCoords;
    $type = $this.$path.$pointTypes.data[$this.$typeIdx];
    $numCoords = cjag_Path2D$Iterator_curvecoords.data[$type];
    if ($numCoords > 0)
        jl_System_arraycopy($this.$floatCoords0, $this.$pointIdx, $coords, 0, $numCoords);
    return $type;
}
function tt_CohenSutherlandClipping() {
    var a = this; jl_Object.call(a);
    a.$xMin = 0.0;
    a.$yMin = 0.0;
    a.$xMax = 0.0;
    a.$yMax = 0.0;
}
function tt_CohenSutherlandClipping_setClip($this, $clip) {
    $this.$xMin = $clip.$getX();
    $this.$xMax = $this.$xMin + $clip.$getWidth();
    $this.$yMin = $clip.$getY();
    $this.$yMax = $this.$yMin + $clip.$getHeight();
}
function tt_CohenSutherlandClipping_regionCode($this, $x, $y) {
    var $code;
    $code = $x < $this.$xMin ? 1 : $x <= $this.$xMax ? 0 : 2;
    if ($y < $this.$yMin)
        $code = $code | 4;
    else if ($y > $this.$yMax)
        $code = $code | 8;
    return $code;
}
function tt_CohenSutherlandClipping_clip($this, $line) {
    var $p1x, $p1y, $p2x, $p2y, $qx, $qy, $vertical, $slope, $c1, $c2, $c;
    $p1x = cjag_Line2D$Float_getX1($line);
    $p1y = cjag_Line2D$Float_getY1($line);
    $p2x = cjag_Line2D$Float_getX2($line);
    $p2y = cjag_Line2D$Float_getY2($line);
    $qx = 0.0;
    $qy = 0.0;
    $vertical = $p1x !== $p2x ? 0 : 1;
    $slope = $vertical ? 0.0 : ($p2y - $p1y) / ($p2x - $p1x);
    $c1 = tt_CohenSutherlandClipping_regionCode($this, $p1x, $p1y);
    $c2 = tt_CohenSutherlandClipping_regionCode($this, $p2x, $p2y);
    while (true) {
        if (!$c1 && !$c2) {
            cjag_Line2D$Float_setLine($line, $p1x, $p1y, $p2x, $p2y);
            return 1;
        }
        if ($c1 & $c2)
            break;
        $c = $c1 ? $c1 : $c2;
        if ($c & 1) {
            $qx = $this.$xMin;
            $qy = (!tt_Utils_feq($qx, $p1x) ? $qx - $p1x : 0.0) * $slope + $p1y;
        } else if ($c & 2) {
            $qx = $this.$xMax;
            $qy = (!tt_Utils_feq($qx, $p1x) ? $qx - $p1x : 0.0) * $slope + $p1y;
        } else if ($c & 4) {
            $qy = $this.$yMin;
            $qx = $vertical ? $p1x : (!tt_Utils_feq($qy, $p1y) ? $qy - $p1y : 0.0) / $slope + $p1x;
        } else if ($c & 8) {
            $qy = $this.$yMax;
            $qx = $vertical ? $p1x : (!tt_Utils_feq($qy, $p1y) ? $qy - $p1y : 0.0) / $slope + $p1x;
        }
        if ($c != $c1) {
            $c2 = tt_CohenSutherlandClipping_regionCode($this, $qx, $qy);
            $p2x = $qx;
            $p2y = $qy;
        } else {
            $c1 = tt_CohenSutherlandClipping_regionCode($this, $qx, $qy);
            $p1x = $qx;
            $p1y = $qy;
        }
    }
    return 0;
}
function jnci_BufferedEncoder() {
    jnc_CharsetEncoder.call(this);
}
function jnci_BufferedEncoder_encodeLoop($this, $in, $out) {
    var $inArray, var$4, $inPos, $inSize, $outArray, var$8, $i, $outSize, var$11, $controller;
    $inArray = $rt_createCharArray(jl_Math_min(jn_Buffer_remaining($in), 512));
    var$4 = $inArray.data;
    $inPos = 0;
    $inSize = 0;
    $outArray = $rt_createByteArray(jl_Math_min(jn_Buffer_remaining($out), 512));
    var$8 = $outArray.data;
    a: {
        while (true) {
            if (($inPos + 32 | 0) > $inSize && jn_Buffer_hasRemaining($in)) {
                $i = $inPos;
                while ($i < $inSize) {
                    var$4[$i - $inPos | 0] = var$4[$i];
                    $i = $i + 1 | 0;
                }
                $outSize = $inSize - $inPos | 0;
                $inSize = jl_Math_min(jn_Buffer_remaining($in) + $outSize | 0, var$4.length);
                jn_CharBuffer_get($in, $inArray, $outSize, $inSize - $outSize | 0);
                $inPos = 0;
            }
            if (!jn_Buffer_hasRemaining($out)) {
                var$11 = !jn_Buffer_hasRemaining($in) && $inPos >= $inSize ? jnc_CoderResult_UNDERFLOW : jnc_CoderResult_OVERFLOW;
                break a;
            }
            $outSize = jl_Math_min(jn_Buffer_remaining($out), var$8.length);
            $controller = new jnci_BufferedEncoder$Controller;
            $controller.$in = $in;
            $controller.$out2 = $out;
            var$11 = jnci_UTF8Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, 0, $outSize, $controller);
            $inPos = $controller.$inPosition;
            if (var$11 === null && 0 == $controller.$outPosition)
                var$11 = jnc_CoderResult_UNDERFLOW;
            jn_ByteBuffer_put($out, $outArray, 0, $controller.$outPosition);
            if (var$11 !== null)
                break;
        }
    }
    jn_CharBuffer_position($in, $in.$position - ($inSize - $inPos | 0) | 0);
    return var$11;
}
function jnci_UTF8Encoder() {
    jnci_BufferedEncoder.call(this);
}
function jnci_UTF8Encoder_arrayEncode($this, $inArray, $inPos, $inSize, $outArray, $outPos, $outSize, $controller) {
    var $result, $low, var$10, $ch, var$12, $codePoint;
    $result = null;
    a: {
        while ($inPos < $inSize) {
            if ($outPos >= $outSize) {
                $low = $inPos;
                break a;
            }
            var$10 = $inArray.data;
            $low = $inPos + 1 | 0;
            $ch = var$10[$inPos];
            if ($ch < 128) {
                var$10 = $outArray.data;
                var$12 = $outPos + 1 | 0;
                var$10[$outPos] = $ch << 24 >> 24;
            } else if ($ch < 2048) {
                if (($outPos + 2 | 0) > $outSize) {
                    $low = $low + (-1) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 2))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                $inPos = $outPos + 1 | 0;
                var$10[$outPos] = (192 | $ch >> 6) << 24 >> 24;
                var$12 = $inPos + 1 | 0;
                var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
            } else if (!jl_Character_isSurrogate($ch)) {
                if (($outPos + 3 | 0) > $outSize) {
                    $low = $low + (-1) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 3))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                $codePoint = $outPos + 1 | 0;
                var$10[$outPos] = (224 | $ch >> 12) << 24 >> 24;
                $inPos = $codePoint + 1 | 0;
                var$10[$codePoint] = (128 | $ch >> 6 & 63) << 24 >> 24;
                var$12 = $inPos + 1 | 0;
                var$10[$inPos] = (128 | $ch & 63) << 24 >> 24;
            } else {
                if (!jl_Character_isHighSurrogate($ch)) {
                    $result = jnc_CoderResult_malformedForLength(1);
                    break a;
                }
                if ($low >= $inSize) {
                    if (jnci_BufferedEncoder$Controller_hasMoreInput($controller))
                        break a;
                    $result = jnc_CoderResult_UNDERFLOW;
                    break a;
                }
                $inPos = $low + 1 | 0;
                $low = var$10[$low];
                if (!jl_Character_isLowSurrogate($low)) {
                    $low = $inPos + (-2) | 0;
                    $result = jnc_CoderResult_malformedForLength(1);
                    break a;
                }
                if (($outPos + 4 | 0) > $outSize) {
                    $low = $inPos + (-2) | 0;
                    if (jnci_BufferedEncoder$Controller_hasMoreOutput($controller, 4))
                        break a;
                    $result = jnc_CoderResult_OVERFLOW;
                    break a;
                }
                var$10 = $outArray.data;
                $codePoint = jl_Character_toCodePoint($ch, $low);
                $low = $outPos + 1 | 0;
                var$10[$outPos] = (240 | $codePoint >> 18) << 24 >> 24;
                $outPos = $low + 1 | 0;
                var$10[$low] = (128 | $codePoint >> 12 & 63) << 24 >> 24;
                $low = $outPos + 1 | 0;
                var$10[$outPos] = (128 | $codePoint >> 6 & 63) << 24 >> 24;
                var$12 = $low + 1 | 0;
                var$10[$low] = (128 | $codePoint & 63) << 24 >> 24;
                $low = $inPos;
            }
            $inPos = $low;
            $outPos = var$12;
        }
        $low = $inPos;
    }
    $controller.$inPosition = $low;
    $controller.$outPosition = $outPos;
    return $result;
}
function jm_RoundingMode() {
    jl_Enum.call(this);
    this.$bigDecimalRM = 0;
}
var jm_RoundingMode_UP = null;
var jm_RoundingMode_DOWN = null;
var jm_RoundingMode_CEILING = null;
var jm_RoundingMode_FLOOR = null;
var jm_RoundingMode_HALF_UP = null;
var jm_RoundingMode_HALF_DOWN = null;
var jm_RoundingMode_HALF_EVEN = null;
var jm_RoundingMode_UNNECESSARY = null;
var jm_RoundingMode_$VALUES = null;
function jm_RoundingMode__init_(var_0, var_1, var_2) {
    var var_3 = new jm_RoundingMode();
    jm_RoundingMode__init_0(var_3, var_0, var_1, var_2);
    return var_3;
}
function jm_RoundingMode__init_0($this, var$1, var$2, $rm) {
    jl_Enum__init_0($this, var$1, var$2);
    $this.$bigDecimalRM = $rm;
}
function jm_RoundingMode__clinit_() {
    var var$1, var$2;
    jm_RoundingMode_UP = jm_RoundingMode__init_($rt_s(409), 0, 0);
    jm_RoundingMode_DOWN = jm_RoundingMode__init_($rt_s(410), 1, 1);
    jm_RoundingMode_CEILING = jm_RoundingMode__init_($rt_s(411), 2, 2);
    jm_RoundingMode_FLOOR = jm_RoundingMode__init_($rt_s(412), 3, 3);
    jm_RoundingMode_HALF_UP = jm_RoundingMode__init_($rt_s(413), 4, 4);
    jm_RoundingMode_HALF_DOWN = jm_RoundingMode__init_($rt_s(414), 5, 5);
    jm_RoundingMode_HALF_EVEN = jm_RoundingMode__init_($rt_s(415), 6, 6);
    jm_RoundingMode_UNNECESSARY = jm_RoundingMode__init_($rt_s(416), 7, 7);
    var$1 = $rt_createArray(jm_RoundingMode, 8);
    var$2 = var$1.data;
    var$2[0] = jm_RoundingMode_UP;
    var$2[1] = jm_RoundingMode_DOWN;
    var$2[2] = jm_RoundingMode_CEILING;
    var$2[3] = jm_RoundingMode_FLOOR;
    var$2[4] = jm_RoundingMode_HALF_UP;
    var$2[5] = jm_RoundingMode_HALF_DOWN;
    var$2[6] = jm_RoundingMode_HALF_EVEN;
    var$2[7] = jm_RoundingMode_UNNECESSARY;
    jm_RoundingMode_$VALUES = var$1;
}
function jm_BitLevel() {
    jl_Object.call(this);
}
function jm_BitLevel_shiftLeft($source, $count) {
    var $intCount, $resLength, $resDigits, $result;
    $intCount = $count >> 5;
    $count = $count & 31;
    $resLength = ($source.$numberLength + $intCount | 0) + ($count ? 1 : 0) | 0;
    $resDigits = $rt_createIntArray($resLength);
    jm_BitLevel_shiftLeft0($resDigits, $source.$digits, $intCount, $count);
    $result = jm_BigInteger__init_($source.$sign1, $resLength, $resDigits);
    jm_BigInteger_cutOffLeadingZeroes($result);
    return $result;
}
function jm_BitLevel_shiftLeft0($result, $source, $intCount, $count) {
    var var$5, $rightShiftCount, $i, var$8, $i_0, var$10;
    a: {
        if (!$count)
            jl_System_arraycopy($source, 0, $result, $intCount, $result.data.length - $intCount | 0);
        else {
            var$5 = $result.data;
            $rightShiftCount = 32 - $count | 0;
            $i = var$5.length - 1 | 0;
            var$5[$i] = 0;
            while (true) {
                if ($i <= $intCount)
                    break a;
                var$8 = $source.data;
                $i_0 = var$5[$i];
                var$10 = ($i - $intCount | 0) - 1 | 0;
                var$5[$i] = $i_0 | var$8[var$10] >>> $rightShiftCount;
                var$5[$i - 1 | 0] = var$8[var$10] << $count;
                $i = $i + (-1) | 0;
            }
        }
    }
    $i_0 = 0;
    while ($i_0 < $intCount) {
        $result.data[$i_0] = 0;
        $i_0 = $i_0 + 1 | 0;
    }
}
function jm_BitLevel_shiftLeftOneBit($result, $source, $srcLen) {
    var $carry, $i, var$6, $val;
    $carry = 0;
    $i = 0;
    while ($i < $srcLen) {
        var$6 = $result.data;
        $val = $source.data[$i];
        var$6[$i] = $val << 1 | $carry;
        $carry = $val >>> 31;
        $i = $i + 1 | 0;
    }
    if ($carry)
        $result.data[$srcLen] = $carry;
}
function jm_BitLevel_shiftRight($source, $count) {
    var $intCount, $resLength, var$5, $resDigits, $i, var$8, var$9, $result;
    $intCount = $count >> 5;
    $count = $count & 31;
    if ($intCount >= $source.$numberLength)
        return $source.$sign1 >= 0 ? jm_BigInteger_ZERO : jm_BigInteger_MINUS_ONE;
    a: {
        $resLength = $source.$numberLength - $intCount | 0;
        var$5 = $resLength + 1 | 0;
        $resDigits = $rt_createIntArray(var$5);
        jm_BitLevel_shiftRight0($resDigits, $resLength, $source.$digits, $intCount, $count);
        if ($source.$sign1 >= 0)
            var$5 = $resLength;
        else {
            $i = 0;
            while (true) {
                var$8 = $rt_compare($i, $intCount);
                if (var$8 >= 0)
                    break;
                if ($source.$digits.data[$i])
                    break;
                $i = $i + 1 | 0;
            }
            if (var$8 >= 0) {
                if ($count <= 0) {
                    var$5 = $resLength;
                    break a;
                }
                if (!($source.$digits.data[$i] << (32 - $count | 0))) {
                    var$5 = $resLength;
                    break a;
                }
            }
            var$9 = $resDigits.data;
            $count = 0;
            while (true) {
                $intCount = $rt_compare($count, $resLength);
                if ($intCount >= 0)
                    break;
                if (var$9[$count] != (-1))
                    break;
                var$9[$count] = 0;
                $count = $count + 1 | 0;
            }
            if ($intCount)
                var$5 = $resLength;
            var$9[$count] = var$9[$count] + 1 | 0;
        }
    }
    $result = jm_BigInteger__init_($source.$sign1, var$5, $resDigits);
    jm_BigInteger_cutOffLeadingZeroes($result);
    return $result;
}
function jm_BitLevel_shiftRight0($result, $resultLen, $source, $intCount, $count) {
    var $allZero, $i, var$8, $leftShiftCount, var$10, var$11;
    $allZero = 1;
    $i = 0;
    while ($i < $intCount) {
        $allZero = $allZero & ($source.data[$i] ? 0 : 1);
        $i = $i + 1 | 0;
    }
    if (!$count)
        jl_System_arraycopy($source, $intCount, $result, 0, $resultLen);
    else {
        var$8 = $source.data;
        $leftShiftCount = 32 - $count | 0;
        $allZero = $allZero & (var$8[$i] << $leftShiftCount ? 0 : 1);
        var$10 = 0;
        var$11 = $resultLen - 1 | 0;
        while (var$10 < var$11) {
            $source = $result.data;
            $resultLen = var$10 + $intCount | 0;
            $source[var$10] = var$8[$resultLen] >>> $count | var$8[$resultLen + 1 | 0] << $leftShiftCount;
            var$10 = var$10 + 1 | 0;
        }
        $result.data[var$10] = var$8[var$10 + $intCount | 0] >>> $count;
    }
    return $allZero;
}
function jur_AbstractCharClass$1() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS = null;
    a.$this$09 = null;
}
function jur_AbstractCharClass$1_contains($this, $ch) {
    var $index;
    $index = $ch - 55296 | 0;
    return $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS, $index) : 0;
}
function jur_AbstractCharClass$2() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$lHS0 = null;
    a.$val$thisClass = null;
    a.$this$010 = null;
}
function jur_AbstractCharClass$2_contains($this, $ch) {
    var $index, $containslHS;
    $index = $ch - 55296 | 0;
    $containslHS = $index >= 0 && $index < 2048 ? $this.$altSurrogates ^ ju_BitSet_get($this.$val$lHS0, $index) : 0;
    return $this.$val$thisClass.$contains3($ch) && !$containslHS ? 1 : 0;
}
function jur_CharClass$18() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$bs = null;
    a.$this$028 = null;
}
function jur_CharClass$18_contains($this, $ch) {
    return $this.$alt0 ^ ju_BitSet_get($this.$val$bs, $ch);
}
function jur_CharClass$18_toString($this) {
    var $temp, $i;
    $temp = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($temp);
    $i = ju_BitSet_nextSetBit($this.$val$bs, 0);
    while ($i >= 0) {
        jl_AbstractStringBuilder_append3($temp, jl_Character_toChars($i));
        jl_AbstractStringBuilder_append1($temp, 124);
        $i = ju_BitSet_nextSetBit($this.$val$bs, $i + 1 | 0);
    }
    if ($temp.$length0 > 0)
        jl_StringBuilder_deleteCharAt($temp, $temp.$length0 - 1 | 0);
    return jl_AbstractStringBuilder_toString($temp);
}
function jur_CharClass$1() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$cc1 = null;
    a.$this$013 = null;
}
function jur_CharClass$1_contains($this, $ch) {
    return $this.$val$cc1.$contains3($ch);
}
function jur_CharClass$3() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt1 = 0;
    a.$val$cc2 = null;
    a.$this$014 = null;
}
function jur_CharClass$3_contains($this, $ch) {
    return !($this.$val$curAlt1 ^ ju_BitSet_get($this.$this$014.$bits, $ch)) && !($this.$val$curAlt1 ^ $this.$this$014.$inverted ^ $this.$val$cc2.$contains3($ch)) ? 0 : 1;
}
function jur_CharClass$2() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt2 = 0;
    a.$val$cc3 = null;
    a.$this$015 = null;
}
function jur_CharClass$2_contains($this, $ch) {
    return !($this.$val$curAlt2 ^ ju_BitSet_get($this.$this$015.$bits, $ch)) && !($this.$val$curAlt2 ^ $this.$this$015.$inverted ^ $this.$val$cc3.$contains3($ch)) ? 1 : 0;
}
function jur_CharClass$5() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt = 0;
    a.$val$nb = null;
    a.$val$cc = null;
    a.$this$011 = null;
}
function jur_CharClass$5_contains($this, $ch) {
    return $this.$val$curAlt ^ (!$this.$val$nb.$contains3($ch) && !$this.$val$cc.$contains3($ch) ? 0 : 1);
}
function jur_CharClass$4() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt0 = 0;
    a.$val$nb0 = null;
    a.$val$cc0 = null;
    a.$this$012 = null;
}
function jur_CharClass$4_contains($this, $ch) {
    return $this.$val$curAlt0 ^ (!$this.$val$nb0.$contains3($ch) && !$this.$val$cc0.$contains3($ch) ? 0 : 1) ? 0 : 1;
}
function jur_CharClass$7() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz1 = null;
    a.$this$018 = null;
}
function jur_CharClass$7_contains($this, $ch) {
    return jur_CharClass_contains($this.$val$clazz1, $ch);
}
function jur_CharClass$6() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz2 = null;
    a.$this$019 = null;
}
function jur_CharClass$6_contains($this, $ch) {
    return jur_CharClass_contains($this.$val$clazz2, $ch) ? 0 : 1;
}
function jur_CharClass$9() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz3 = null;
    a.$val$curAlt5 = 0;
    a.$this$020 = null;
}
function jur_CharClass$9_contains($this, $ch) {
    return !jur_CharClass_contains($this.$val$clazz3, $ch) && !($this.$val$curAlt5 ^ ju_BitSet_get($this.$this$020.$bits, $ch)) ? 0 : 1;
}
function jur_CharClass$8() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz4 = null;
    a.$val$curAlt6 = 0;
    a.$this$021 = null;
}
function jur_CharClass$8_contains($this, $ch) {
    return !jur_CharClass_contains($this.$val$clazz4, $ch) && !($this.$val$curAlt6 ^ ju_BitSet_get($this.$this$021.$bits, $ch)) ? 1 : 0;
}
function jur_CharClass$11() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt3 = 0;
    a.$val$nb1 = null;
    a.$val$clazz = null;
    a.$this$016 = null;
}
function jur_CharClass$11_contains($this, $ch) {
    return !($this.$val$curAlt3 ^ $this.$val$nb1.$contains3($ch)) && !jur_CharClass_contains($this.$val$clazz, $ch) ? 0 : 1;
}
function jur_CharClass$10() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt4 = 0;
    a.$val$nb2 = null;
    a.$val$clazz0 = null;
    a.$this$017 = null;
}
function jur_CharClass$10_contains($this, $ch) {
    return !($this.$val$curAlt4 ^ $this.$val$nb2.$contains3($ch)) && !jur_CharClass_contains($this.$val$clazz0, $ch) ? 1 : 0;
}
function jur_CharClass$13() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz7 = null;
    a.$this$024 = null;
}
function jur_CharClass$13_contains($this, $ch) {
    return jur_CharClass_contains($this.$val$clazz7, $ch);
}
function jur_CharClass$12() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz8 = null;
    a.$this$025 = null;
}
function jur_CharClass$12_contains($this, $ch) {
    return jur_CharClass_contains($this.$val$clazz8, $ch) ? 0 : 1;
}
function jur_CharClass$15() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz9 = null;
    a.$val$curAlt9 = 0;
    a.$this$026 = null;
}
function jur_CharClass$15_contains($this, $ch) {
    return jur_CharClass_contains($this.$val$clazz9, $ch) && $this.$val$curAlt9 ^ ju_BitSet_get($this.$this$026.$bits, $ch) ? 1 : 0;
}
function jur_CharClass$14() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$clazz10 = null;
    a.$val$curAlt10 = 0;
    a.$this$027 = null;
}
function jur_CharClass$14_contains($this, $ch) {
    return jur_CharClass_contains($this.$val$clazz10, $ch) && $this.$val$curAlt10 ^ ju_BitSet_get($this.$this$027.$bits, $ch) ? 0 : 1;
}
function jur_CharClass$17() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt7 = 0;
    a.$val$nb3 = null;
    a.$val$clazz5 = null;
    a.$this$022 = null;
}
function jur_CharClass$17_contains($this, $ch) {
    return $this.$val$curAlt7 ^ $this.$val$nb3.$contains3($ch) && jur_CharClass_contains($this.$val$clazz5, $ch) ? 1 : 0;
}
function jur_CharClass$16() {
    var a = this; jur_AbstractCharClass.call(a);
    a.$val$curAlt8 = 0;
    a.$val$nb4 = null;
    a.$val$clazz6 = null;
    a.$this$023 = null;
}
function jur_CharClass$16_contains($this, $ch) {
    return $this.$val$curAlt8 ^ $this.$val$nb4.$contains3($ch) && jur_CharClass_contains($this.$val$clazz6, $ch) ? 0 : 1;
}
function ju_ConcurrentModificationException() {
    jl_RuntimeException.call(this);
}
function p_PDFTextStripper$FinishConsumer() {
}
function p_PDFTextStripper$getTextAsync$lambda$_7_0() {
    jl_Object.call(this);
    this.$_03 = null;
}
function p_PDFTextStripper$getTextAsync$lambda$_7_0_complete(var$0, var$1) {
    otpp_AsyncCallbackWrapper_complete(var$0.$_03, var$1);
}
function p_PDFTextStripper$getTextAsync$lambda$_7_0_complete$exported$0(var$0, var$1) {
    p_PDFTextStripper$getTextAsync$lambda$_7_0_complete(var$0, $rt_str(var$1));
}
function tt_Cell() {
    var a = this; tt_RectangularTextContainer.call(a);
    a.$spanning = 0;
    a.$placeholder = 0;
    a.$textElements0 = null;
}
function tt_Cell_getText($this, $useLineReturns) {
    var $sb, $curTop, var$4, $tc;
    if (!$this.$textElements0.$size0)
        return $rt_s(44);
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    ju_Collections_sort($this.$textElements0, tt_Rectangle_ILL_DEFINED_ORDER);
    $curTop = tt_Rectangle_getTop(ju_ArrayList_get($this.$textElements0, 0));
    var$4 = ju_AbstractList_iterator($this.$textElements0);
    while (ju_AbstractList$1_hasNext(var$4)) {
        $tc = ju_AbstractList$1_next(var$4);
        if ($useLineReturns && tt_Rectangle_getTop($tc) > $curTop)
            jl_AbstractStringBuilder_append1($sb, 13);
        jl_AbstractStringBuilder_append($sb, tt_TextChunk_getText($tc));
        $curTop = tt_Rectangle_getTop($tc);
    }
    return jl_String_trim(jl_AbstractStringBuilder_toString($sb));
}
function tt_Cell_getText0($this) {
    return tt_Cell_getText($this, 1);
}
function tt_Cell_setSpanning($this, $spanning) {
    $this.$spanning = $spanning;
}
function tt_Cell_setPlaceholder($this, $placeholder) {
    $this.$placeholder = $placeholder;
}
function tt_Cell_getTextElements($this) {
    return $this.$textElements0;
}
function tt_Cell_setTextElements($this, $textElements) {
    $this.$textElements0 = $textElements;
}
function tte_SpreadsheetExtractionAlgorithm$PolygonVertex() {
    var a = this; jl_Object.call(a);
    a.$point = null;
    a.$direction = null;
}
function tte_SpreadsheetExtractionAlgorithm$PolygonVertex__init_(var_0, var_1) {
    var var_2 = new tte_SpreadsheetExtractionAlgorithm$PolygonVertex();
    tte_SpreadsheetExtractionAlgorithm$PolygonVertex__init_0(var_2, var_0, var_1);
    return var_2;
}
function tte_SpreadsheetExtractionAlgorithm$PolygonVertex__init_0($this, $point, $direction) {
    $this.$direction = $direction;
    $this.$point = $point;
}
function tte_SpreadsheetExtractionAlgorithm$PolygonVertex_equals($this, $other) {
    if ($this === $other)
        return 1;
    if (!($other instanceof tte_SpreadsheetExtractionAlgorithm$PolygonVertex))
        return 0;
    return cjag_Point2D_equals($this.$point, $other.$point);
}
function tte_SpreadsheetExtractionAlgorithm$PolygonVertex_hashCode($this) {
    return cjag_Point2D_hashCode($this.$point);
}
function tte_SpreadsheetExtractionAlgorithm$PolygonVertex_toString($this) {
    var var$1, var$2;
    var$1 = $rt_createArray(jl_Object, 3);
    var$2 = var$1.data;
    var$2[0] = jl_Class_getName(jl_Object_getClass($this));
    var$2[1] = cjag_Point2D$Float_toString($this.$point);
    var$2[2] = jl_Enum_toString($this.$direction);
    return jl_String_format($rt_s(417), var$1);
}
function tte_SpreadsheetExtractionAlgorithm$Direction() {
    jl_Enum.call(this);
}
var tte_SpreadsheetExtractionAlgorithm$Direction_HORIZONTAL = null;
var tte_SpreadsheetExtractionAlgorithm$Direction_VERTICAL = null;
var tte_SpreadsheetExtractionAlgorithm$Direction_$VALUES = null;
function tte_SpreadsheetExtractionAlgorithm$Direction__clinit_() {
    var var$1, var$2, var$3;
    var$1 = new tte_SpreadsheetExtractionAlgorithm$Direction;
    jl_Enum__init_0(var$1, $rt_s(418), 0);
    tte_SpreadsheetExtractionAlgorithm$Direction_HORIZONTAL = var$1;
    var$1 = new tte_SpreadsheetExtractionAlgorithm$Direction;
    jl_Enum__init_0(var$1, $rt_s(419), 1);
    tte_SpreadsheetExtractionAlgorithm$Direction_VERTICAL = var$1;
    var$2 = $rt_createArray(tte_SpreadsheetExtractionAlgorithm$Direction, 2);
    var$3 = var$2.data;
    var$3[0] = tte_SpreadsheetExtractionAlgorithm$Direction_HORIZONTAL;
    var$3[1] = tte_SpreadsheetExtractionAlgorithm$Direction_VERTICAL;
    tte_SpreadsheetExtractionAlgorithm$Direction_$VALUES = var$2;
}
function tt_QuickSort() {
    jl_Object.call(this);
}
var tt_QuickSort_NATURAL_ORDER = null;
function tt_QuickSort_quicksort($list, $cmp) {
    var $stack, $right, $left, $p, var$7, var$8, var$9, var$10;
    $stack = new ju_Stack;
    ju_Vector__init_0($stack);
    ju_Vector_addElement($stack, jl_Integer_valueOf(0));
    ju_Vector_addElement($stack, jl_Integer_valueOf($list.$size0));
    while (!ju_Vector_isEmpty($stack)) {
        $right = ju_Stack_pop($stack).$value;
        $left = ju_Stack_pop($stack).$value;
        $p = $right - $left | 0;
        if ($p < 2)
            continue;
        $p = $left + ($p / 2 | 0) | 0;
        var$7 = $right - 2 | 0;
        var$8 = ju_ArrayList_get($list, $p);
        var$9 = $right - 1 | 0;
        tt_QuickSort_swap($list, $p, var$9);
        var$10 = $left;
        while (var$10 < var$7) {
            if (tt_Rectangle$1_compare($cmp, ju_ArrayList_get($list, var$10), var$8) <= 0) {
                var$10 = var$10 + 1 | 0;
                continue;
            }
            if (tt_Rectangle$1_compare($cmp, var$8, ju_ArrayList_get($list, var$7)) > 0) {
                tt_QuickSort_swap($list, var$10, var$7);
                continue;
            }
            var$7 = var$7 + (-1) | 0;
        }
        if (tt_Rectangle$1_compare($cmp, ju_ArrayList_get($list, var$7), var$8) < 0)
            var$7 = var$7 + 1 | 0;
        tt_QuickSort_swap($list, var$9, var$7);
        ju_Vector_addElement($stack, jl_Integer_valueOf(var$7 + 1 | 0));
        ju_Vector_addElement($stack, jl_Integer_valueOf($right));
        ju_Vector_addElement($stack, jl_Integer_valueOf($left));
        ju_Vector_addElement($stack, jl_Integer_valueOf(var$7));
    }
}
function tt_QuickSort_swap($list, $i, $j) {
    var $tmp_0;
    $tmp_0 = ju_ArrayList_get($list, $i);
    ju_ArrayList_set($list, $i, ju_ArrayList_get($list, $j));
    ju_ArrayList_set($list, $j, $tmp_0);
}
function tt_QuickSort__clinit_() {
    tt_QuickSort_NATURAL_ORDER = new tt_QuickSort$1;
}
function jl_Object$Monitor() {
    var a = this; jl_Object.call(a);
    a.$enteringThreads = null;
    a.$notifyListeners = null;
    a.$owner = null;
    a.$count = 0;
}
function jl_Runnable() {
}
function jl_Thread() {
    var a = this; jl_Object.call(a);
    a.$id = Long_ZERO;
    a.$timeSliceStart = Long_ZERO;
    a.$finishedLock = null;
    a.$name3 = null;
    a.$alive = 0;
    a.$target = null;
}
var jl_Thread_mainThread = null;
var jl_Thread_currentThread0 = null;
var jl_Thread_nextId = Long_ZERO;
var jl_Thread_activeCount = 0;
function jl_Thread_setCurrentThread($thread_0) {
    if (jl_Thread_currentThread0 !== $thread_0)
        jl_Thread_currentThread0 = $thread_0;
    jl_Thread_currentThread0.$timeSliceStart = jl_System_currentTimeMillis();
}
function jl_Thread_currentThread() {
    return jl_Thread_currentThread0;
}
function jl_Thread__clinit_() {
    var var$1, var$2, var$3;
    var$1 = new jl_Thread;
    var$2 = null;
    var$1.$finishedLock = new jl_Object;
    var$1.$alive = 1;
    var$1.$name3 = $rt_s(420);
    var$1.$target = var$2;
    var$3 = jl_Thread_nextId;
    jl_Thread_nextId = Long_add(var$3, Long_fromInt(1));
    var$1.$id = var$3;
    jl_Thread_mainThread = var$1;
    jl_Thread_currentThread0 = jl_Thread_mainThread;
    jl_Thread_nextId = Long_fromInt(1);
    jl_Thread_activeCount = 1;
}
function jl_IllegalStateException() {
    jl_Exception.call(this);
}
function jl_IllegalMonitorStateException() {
    jl_RuntimeException.call(this);
}
function cjag_Area() {
    jl_Object.call(this);
    this.$curves = null;
}
var cjag_Area_EmptyCurves = null;
var cjag_Area_$assertionsDisabled = 0;
function cjag_Area_getPathIterator($this, $at) {
    var var$2, var$3;
    var$2 = new cjag_AreaIterator;
    var$3 = $this.$curves;
    var$2.$curves0 = var$3;
    var$2.$transform0 = $at;
    if (ju_Vector_size(var$3) >= 1)
        var$2.$thiscurve = ju_Vector_elementAt(var$3, 0);
    return var$2;
}
function cjag_Area__clinit_() {
    cjag_Area_$assertionsDisabled = 0;
    cjag_Area_EmptyCurves = ju_Vector__init_();
}
function cjag_Rectangle2D$Double() {
    var a = this; cjag_Rectangle2D.call(a);
    a.$x0 = 0.0;
    a.$y0 = 0.0;
    a.$width = 0.0;
    a.$height = 0.0;
}
function cjag_Rectangle2D$Double__init_(var_0, var_1, var_2, var_3) {
    var var_4 = new cjag_Rectangle2D$Double();
    cjag_Rectangle2D$Double__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
}
function cjag_Rectangle2D$Double__init_0($this, $x, $y, $w, $h) {
    cjag_Rectangle2D__init_0($this);
    cjag_Rectangle2D$Double_setRect($this, $x, $y, $w, $h);
}
function cjag_Rectangle2D$Double_getX($this) {
    return $this.$x0;
}
function cjag_Rectangle2D$Double_getY($this) {
    return $this.$y0;
}
function cjag_Rectangle2D$Double_getWidth($this) {
    return $this.$width;
}
function cjag_Rectangle2D$Double_getHeight($this) {
    return $this.$height;
}
function cjag_Rectangle2D$Double_setRect($this, $x, $y, $w, $h) {
    $this.$x0 = $x;
    $this.$y0 = $y;
    $this.$width = $w;
    $this.$height = $h;
}
function cjag_Rectangle2D$Double_outcode($this, $x, $y) {
    var $out;
    $out = 0;
    if ($this.$width <= 0.0)
        $out = 5;
    else if ($x < $this.$x0)
        $out = 1;
    else if ($x > $this.$x0 + $this.$width)
        $out = 4;
    if ($this.$height <= 0.0)
        $out = $out | 10;
    else if ($y < $this.$y0)
        $out = $out | 2;
    else if ($y > $this.$y0 + $this.$height)
        $out = $out | 8;
    return $out;
}
function tt_Ruling$4() {
    jl_Object.call(this);
}
function tt_Ruling$4_compare($this, $a, $b) {
    var $diff;
    $diff = tt_Ruling_getPosition($a) - tt_Ruling_getPosition($b);
    if ($diff === 0.0)
        $diff = tt_Ruling_getStart($a) - tt_Ruling_getStart($b);
    return $rt_compare($diff, 0.0);
}
function tt_Ruling$4_compare0($this, var$1, var$2) {
    return tt_Ruling$4_compare($this, var$1, var$2);
}
function tt_Ruling$1() {
    jl_Object.call(this);
}
function tt_Ruling$1_compare($this, $o1, $o2) {
    return $rt_compare($o1.$y10, $o2.$y10);
}
function tt_Ruling$1_compare0($this, var$1, var$2) {
    return tt_Ruling$1_compare($this, var$1, var$2);
}
function tt_Ruling$2() {
    jl_Object.call(this);
}
function tt_Ruling$2_compare($this, $o1, $o2) {
    if (cjag_Point2D$Float_getY($o1) > cjag_Point2D$Float_getY($o2))
        return 1;
    if (cjag_Point2D$Float_getY($o1) < cjag_Point2D$Float_getY($o2))
        return (-1);
    if (cjag_Point2D$Float_getX($o1) > cjag_Point2D$Float_getX($o2))
        return 1;
    if (cjag_Point2D$Float_getX($o1) >= cjag_Point2D$Float_getX($o2))
        return 0;
    return (-1);
}
function tt_Ruling$2_compare0($this, var$1, var$2) {
    return tt_Ruling$2_compare($this, var$1, var$2);
}
function tt_Ruling$1SortObject() {
    var a = this; jl_Object.call(a);
    a.$type1 = null;
    a.$position1 = 0.0;
    a.$ruling = null;
}
function tt_Ruling$1SortObject__init_(var_0, var_1, var_2) {
    var var_3 = new tt_Ruling$1SortObject();
    tt_Ruling$1SortObject__init_0(var_3, var_0, var_1, var_2);
    return var_3;
}
function tt_Ruling$1SortObject__init_0($this, $type, $position, $ruling) {
    $this.$type1 = $type;
    $this.$position1 = $position;
    $this.$ruling = $ruling;
}
function tt_Ruling$SOType() {
    jl_Enum.call(this);
}
var tt_Ruling$SOType_VERTICAL = null;
var tt_Ruling$SOType_HRIGHT = null;
var tt_Ruling$SOType_HLEFT = null;
var tt_Ruling$SOType_$VALUES = null;
function tt_Ruling$SOType__clinit_() {
    var var$1, var$2, var$3;
    var$1 = new tt_Ruling$SOType;
    jl_Enum__init_0(var$1, $rt_s(419), 0);
    tt_Ruling$SOType_VERTICAL = var$1;
    var$1 = new tt_Ruling$SOType;
    jl_Enum__init_0(var$1, $rt_s(421), 1);
    tt_Ruling$SOType_HRIGHT = var$1;
    var$1 = new tt_Ruling$SOType;
    jl_Enum__init_0(var$1, $rt_s(422), 2);
    tt_Ruling$SOType_HLEFT = var$1;
    var$2 = $rt_createArray(tt_Ruling$SOType, 3);
    var$3 = var$2.data;
    var$3[0] = tt_Ruling$SOType_VERTICAL;
    var$3[1] = tt_Ruling$SOType_HRIGHT;
    var$3[2] = tt_Ruling$SOType_HLEFT;
    tt_Ruling$SOType_$VALUES = var$2;
}
function tt_Ruling$3() {
    jl_Object.call(this);
}
function tt_Ruling$3_compare($this, $a, $b) {
    if (!tt_Utils_feq($a.$position1, $b.$position1))
        return $rt_compare($a.$position1, $b.$position1);
    return $a.$type1 === tt_Ruling$SOType_VERTICAL && $b.$type1 === tt_Ruling$SOType_HLEFT ? 1 : $a.$type1 === tt_Ruling$SOType_VERTICAL && $b.$type1 === tt_Ruling$SOType_HRIGHT ? (-1) : $a.$type1 === tt_Ruling$SOType_HLEFT && $b.$type1 === tt_Ruling$SOType_VERTICAL ? (-1) : $a.$type1 === tt_Ruling$SOType_HRIGHT && $b.$type1 === tt_Ruling$SOType_VERTICAL ? 1 : $rt_compare($a.$position1, $b.$position1);
}
function tt_Ruling$3_compare0($this, var$1, var$2) {
    return tt_Ruling$3_compare($this, var$1, var$2);
}
function tt_Ruling$5() {
    jl_Object.call(this);
}
var tt_Ruling$5_$SwitchMap$technology$tabula$Ruling$SOType = null;
function tt_Ruling$5_$callClinit() {
    tt_Ruling$5_$callClinit = $rt_eraseClinit(tt_Ruling$5);
    tt_Ruling$5__clinit_();
}
function tt_Ruling$5__clinit_() {
    var $$je;
    tt_Ruling$5_$SwitchMap$technology$tabula$Ruling$SOType = $rt_createIntArray(tt_Ruling$SOType_$VALUES.$clone().data.length);
    a: {
        try {
            tt_Ruling$5_$SwitchMap$technology$tabula$Ruling$SOType.data[jl_Enum_ordinal(tt_Ruling$SOType_VERTICAL)] = 1;
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    b: {
        try {
            tt_Ruling$5_$SwitchMap$technology$tabula$Ruling$SOType.data[jl_Enum_ordinal(tt_Ruling$SOType_HRIGHT)] = 2;
            break b;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    c: {
        try {
            tt_Ruling$5_$SwitchMap$technology$tabula$Ruling$SOType.data[jl_Enum_ordinal(tt_Ruling$SOType_HLEFT)] = 3;
            break c;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
}
function otp_PlatformQueue() {
    jl_Object.call(this);
}
function otp_PlatformQueue_isEmpty$static($this) {
    return $this.length ? 0 : 1;
}
function otp_PlatformRunnable() {
}
function jl_Object$monitorExit$lambda$_8_0() {
    jl_Object.call(this);
    this.$_00 = null;
}
function jl_Object$monitorExit$lambda$_8_0_run(var$0) {
    var var$1, var$2, var$3;
    var$1 = var$0.$_00;
    if (!jl_Object_isEmptyMonitor(var$1) && var$1.$monitor.$owner === null) {
        var$2 = var$1.$monitor;
        if (var$2.$enteringThreads !== null && !otp_PlatformQueue_isEmpty$static(var$2.$enteringThreads)) {
            var$1 = var$2.$enteringThreads;
            var$3 = var$1.shift();
            if (var$1 === null)
                var$2.$enteringThreads = null;
            jl_Object$monitorEnterWait$lambda$_6_0_run(var$3);
        }
    }
}
function jl_UnsupportedOperationException() {
    jl_RuntimeException.call(this);
}
function tt_QuickSort$1() {
    jl_Object.call(this);
}
function ju_Vector() {
    var a = this; ju_AbstractList.call(a);
    a.$elementCount1 = 0;
    a.$elementData1 = null;
    a.$capacityIncrement = 0;
}
var ju_Vector_$assertionsDisabled = 0;
function ju_Vector__init_() {
    var var_0 = new ju_Vector();
    ju_Vector__init_0(var_0);
    return var_0;
}
function ju_Vector__init_0($this) {
    $this.$elementData1 = ju_Vector_newElementArray($this, 10);
    $this.$elementCount1 = 0;
    $this.$capacityIncrement = 0;
}
function ju_Vector_newElementArray($this, $size) {
    return $rt_createArray(jl_Object, $size);
}
function ju_Vector_add($this, $object) {
    var var$2, var$3;
    jl_Object_monitorEnterSync($this);
    try {
        if ($this.$elementCount1 == $this.$elementData1.data.length)
            ju_Vector_growByOne($this);
        var$2 = $this.$elementData1.data;
        var$3 = $this.$elementCount1;
        $this.$elementCount1 = var$3 + 1 | 0;
        var$2[var$3] = $object;
        $this.$modCount = $this.$modCount + 1 | 0;
        return 1;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Vector_addElement($this, $object) {
    var var$2, var$3;
    jl_Object_monitorEnterSync($this);
    try {
        if ($this.$elementCount1 == $this.$elementData1.data.length)
            ju_Vector_growByOne($this);
        var$2 = $this.$elementData1.data;
        var$3 = $this.$elementCount1;
        $this.$elementCount1 = var$3 + 1 | 0;
        var$2[var$3] = $object;
        $this.$modCount = $this.$modCount + 1 | 0;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Vector_clear($this) {
    ju_Vector_removeAllElements($this);
}
function ju_Vector_elementAt($this, $location) {
    var var$2;
    jl_Object_monitorEnterSync($this);
    try {
        if ($location < $this.$elementCount1)
            return $this.$elementData1.data[$location];
        var$2 = new jl_ArrayIndexOutOfBoundsException;
        jl_Throwable__init_(var$2, jl_Integer_toString($location));
        $rt_throw(var$2);
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Vector_elements($this) {
    var var$1;
    var$1 = new ju_Vector$1;
    var$1.$this$045 = $this;
    return var$1;
}
function ju_Vector_get($this, $location) {
    return ju_Vector_elementAt($this, $location);
}
function ju_Vector_growByOne($this) {
    var var$1, $newData;
    if ($this.$capacityIncrement > 0)
        var$1 = $this.$capacityIncrement;
    else {
        var$1 = $this.$elementData1.data.length;
        if (!var$1)
            var$1 = 1;
    }
    $newData = ju_Vector_newElementArray($this, $this.$elementData1.data.length + var$1 | 0);
    jl_System_arraycopy($this.$elementData1, 0, $newData, 0, $this.$elementCount1);
    $this.$elementData1 = $newData;
}
function ju_Vector_isEmpty($this) {
    jl_Object_monitorEnterSync($this);
    try {
        return $this.$elementCount1 ? 0 : 1;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Vector_removeAllElements($this) {
    var $i;
    jl_Object_monitorEnterSync($this);
    try {
        $i = 0;
        while ($i < $this.$elementCount1) {
            $this.$elementData1.data[$i] = null;
            $i = $i + 1 | 0;
        }
        $this.$modCount = $this.$modCount + 1 | 0;
        $this.$elementCount1 = 0;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Vector_size($this) {
    jl_Object_monitorEnterSync($this);
    try {
        return $this.$elementCount1;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Vector_toArray($this, $contents) {
    var var$2, var$3;
    jl_Object_monitorEnterSync($this);
    try {
        var$2 = $contents.data;
        if ($this.$elementCount1 > var$2.length)
            $contents = jlr_Array_newInstance(jl_Class_getComponentType(jl_Object_getClass($contents)), $this.$elementCount1);
        var$3 = $contents.data;
        jl_System_arraycopy($this.$elementData1, 0, $contents, 0, $this.$elementCount1);
        if ($this.$elementCount1 < var$3.length)
            var$3[$this.$elementCount1] = null;
        return $contents;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Vector__clinit_() {
    ju_Vector_$assertionsDisabled = 0;
}
function ju_Stack() {
    ju_Vector.call(this);
}
function ju_Stack_pop($this) {
    var $obj, var$2;
    jl_Object_monitorEnterSync($this);
    try {
        if (!$this.$elementCount1) {
            $obj = new ju_EmptyStackException;
            jl_Throwable__init_0($obj);
            $rt_throw($obj);
        }
        var$2 = $this.$elementCount1 - 1 | 0;
        $this.$elementCount1 = var$2;
        $obj = $this.$elementData1.data[var$2];
        $this.$elementData1.data[var$2] = null;
        $this.$modCount = $this.$modCount + 1 | 0;
        return $obj;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_Stack_push($this, $object) {
    ju_Vector_addElement($this, $object);
    return $object;
}
function tt_TableWithRulingLines$1() {
    jl_Object.call(this);
}
function tt_TableWithRulingLines$1_compare($this, $arg0, $arg1) {
    return $rt_compare(tt_Rectangle_getTop($arg0), tt_Rectangle_getTop($arg1));
}
function tt_TableWithRulingLines$1_compare0($this, var$1, var$2) {
    return tt_TableWithRulingLines$1_compare($this, var$1, var$2);
}
function jl_Object$monitorEnterWait$lambda$_6_0() {
    var a = this; jl_Object.call(a);
    a.$_0 = null;
    a.$_1 = null;
    a.$_2 = 0;
    a.$_3 = null;
}
function jl_Object$monitorEnterWait$lambda$_6_0_run(var$0) {
    var var$1, var$2, var$3, var$4;
    var$1 = var$0.$_0;
    var$2 = var$0.$_1;
    var$3 = var$0.$_2;
    var$4 = var$0.$_3;
    jl_Thread_setCurrentThread(var$1);
    var$2.$monitor.$owner = var$1;
    var$1 = var$2.$monitor;
    var$1.$count = var$1.$count + var$3 | 0;
    otpp_AsyncCallbackWrapper_complete(var$4, null);
}
function csag_Curve() {
    jl_Object.call(this);
    this.$direction0 = 0;
}
function csag_Curve__init_(var_0) {
    var var_1 = new csag_Curve();
    csag_Curve__init_0(var_1, var_0);
    return var_1;
}
function csag_Curve_insertLine($curves, $x0, $y0, $x1, $y1) {
    var var$6;
    var$6 = $rt_compare($y0, $y1);
    if (var$6 < 0)
        ju_Vector_add($curves, csag_Order1__init_($x0, $y0, $x1, $y1, 1));
    else if (var$6 > 0)
        ju_Vector_add($curves, csag_Order1__init_($x1, $y1, $x0, $y0, (-1)));
}
function csag_Curve__init_0($this, $direction) {
    $this.$direction0 = $direction;
}
function csag_Curve_getDirection($this) {
    return $this.$direction0;
}
function csag_Curve_getWithDirection($this, $direction) {
    if ($this.$direction0 != $direction)
        $this = $this.$getReversedCurve();
    return $this;
}
function csag_Curve_orderof($x1, $x2) {
    var var$3;
    var$3 = $rt_compare($x1, $x2);
    if (var$3 < 0)
        return (-1);
    if (var$3 <= 0)
        return 0;
    return 1;
}
function csag_Curve_toString($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(423));
    var$1 = jl_StringBuilder_append2(var$1, $this.$getOrder());
    jl_AbstractStringBuilder_append(var$1, $rt_s(91));
    jl_AbstractStringBuilder_append(var$1, $rt_s(424));
    var$1 = jl_StringBuilder_append(var$1, $this.$getX0());
    jl_AbstractStringBuilder_append(var$1, $rt_s(91));
    var$1 = jl_StringBuilder_append(var$1, $this.$getY0());
    jl_AbstractStringBuilder_append(var$1, $rt_s(425));
    jl_AbstractStringBuilder_append(var$1, $this.$controlPointString());
    jl_AbstractStringBuilder_append(var$1, $rt_s(424));
    var$1 = jl_StringBuilder_append(var$1, $this.$getX1());
    jl_AbstractStringBuilder_append(var$1, $rt_s(91));
    var$1 = jl_StringBuilder_append(var$1, $this.$getY1());
    jl_AbstractStringBuilder_append(var$1, $rt_s(425));
    jl_AbstractStringBuilder_append(var$1, $this.$direction0 != 1 ? $rt_s(426) : $rt_s(249));
    jl_AbstractStringBuilder_append(var$1, $rt_s(56));
    return jl_AbstractStringBuilder_toString(var$1);
}
function csag_Curve_controlPointString($this) {
    return $rt_s(44);
}
function csag_Curve_compareTo($this, $that, $yrange) {
    var var$3, $y0, $xsh, $s0, $ys0, $s1, $t0, $yt0, $t1, $xs0, $xt0, $ymin, $maxbump, $y, $scale, $newy, $sh, $ysh, $th, $xth, $yth, $t, $ymid, $$je;
    var$3 = $yrange.data;
    $y0 = var$3[0];
    $xsh = jl_Math_min0(jl_Math_min0(var$3[1], $this.$getYBot()), $that.$getYBot());
    if ($xsh <= var$3[0]) {
        ji_PrintStream_println(jl_System_err(), jl_StringBuilder_toString(jl_StringBuilder_append3(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(427)), $this)));
        ji_PrintStream_println(jl_System_err(), jl_StringBuilder_toString(jl_StringBuilder_append3(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(428)), $that)));
        ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(429)), var$3[0]), $rt_s(430)), var$3[1])));
        $rt_throw(jl_RuntimeException__init_(jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(431)), var$3[0]), $rt_s(432)), $xsh))));
    }
    var$3[1] = $xsh;
    if ($this.$getXMax() <= $that.$getXMin()) {
        if ($this.$getXMin() !== $that.$getXMax())
            return (-1);
        return 0;
    }
    if ($this.$getXMin() >= $that.$getXMax())
        return 1;
    $s0 = $this.$TforY($y0);
    $ys0 = $this.$YforT($s0);
    if ($ys0 < $y0) {
        $s0 = csag_Curve_refineTforY($this, $s0, $ys0, $y0);
        $ys0 = $this.$YforT($s0);
    }
    $s1 = $this.$TforY($xsh);
    if ($this.$YforT($s1) < $y0)
        $s1 = csag_Curve_refineTforY($this, $s1, $this.$YforT($s1), $y0);
    $t0 = $that.$TforY($y0);
    $yt0 = $that.$YforT($t0);
    if ($yt0 < $y0) {
        $t0 = csag_Curve_refineTforY($that, $t0, $yt0, $y0);
        $yt0 = $that.$YforT($t0);
    }
    $t1 = $that.$TforY($xsh);
    if ($that.$YforT($t1) < $y0)
        $t1 = csag_Curve_refineTforY($that, $t1, $that.$YforT($t1), $y0);
    $xs0 = $this.$XforT($s0);
    $xt0 = $that.$XforT($t0);
    $ymin = jl_Math_max0(jl_Math_max0(jl_Math_abs($y0), jl_Math_abs($xsh)) * 1.0E-14, 1.0E-300);
    if (csag_Curve_fairlyClose($this, $xs0, $xt0)) {
        $maxbump = jl_Math_min0($ymin * 1.0E13, ($xsh - $y0) * 0.1);
        $y = $y0 + $ymin;
        $scale = $ymin;
        a: {
            while ($y <= $xsh) {
                if (!csag_Curve_fairlyClose($this, $this.$XforY($y), $that.$XforY($y))) {
                    $y = $y - $scale;
                    while (true) {
                        $scale = $scale / 2.0;
                        $newy = $y + $scale;
                        if ($newy <= $y)
                            break;
                        if (csag_Curve_fairlyClose($this, $this.$XforY($newy), $that.$XforY($newy)))
                            $y = $newy;
                    }
                    break a;
                }
                $scale = $scale * 2.0;
                if ($scale > $maxbump)
                    $scale = $maxbump;
                $y = $y + $scale;
            }
        }
        if ($y > $y0) {
            if ($y < $xsh)
                var$3[1] = $y;
            return 0;
        }
    }
    if ($ymin <= 0.0)
        ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(433)), $ymin)));
    b: {
        c: {
            while (true) {
                if ($s0 >= $s1)
                    break b;
                if ($t0 >= $t1)
                    break b;
                $sh = $this.$nextVertical($s0, $s1);
                $xsh = $this.$XforT($sh);
                $ysh = $this.$YforT($sh);
                $th = $that.$nextVertical($t0, $t1);
                $xth = $that.$XforT($th);
                $yth = $that.$YforT($th);
                try {
                    if (csag_Curve_findIntersect($this, $that, $yrange, $ymin, 0, 0, $s0, $xs0, $ys0, $sh, $xsh, $ysh, $t0, $xt0, $yt0, $th, $xth, $yth))
                        break;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    if ($$je instanceof jl_Throwable) {
                        $t = $$je;
                        ji_PrintStream_println(jl_System_err(), jl_StringBuilder_toString(jl_StringBuilder_append3(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(434)), $t)));
                        ji_PrintStream_println(jl_System_err(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(435)), var$3[0]), $rt_s(430)), var$3[1])));
                        ji_PrintStream_println(jl_System_err(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(436)), $ys0), $rt_s(430)), $ysh)));
                        ji_PrintStream_println(jl_System_err(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(437)), $yt0), $rt_s(430)), $yth)));
                        ji_PrintStream_println(jl_System_err(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(438)), $ymin)));
                        return 0;
                    } else {
                        throw $$e;
                    }
                }
                if ($ysh >= $yth) {
                    if ($yth > var$3[0]) {
                        if ($yth >= var$3[1])
                            break b;
                        var$3[1] = $yth;
                        break b;
                    }
                    $sh = $s0;
                    $xsh = $xs0;
                    $ysh = $ys0;
                    $t0 = $th;
                    $xt0 = $xth;
                    $yt0 = $yth;
                } else if ($ysh > var$3[0])
                    break c;
                $s0 = $sh;
                $xs0 = $xsh;
                $ys0 = $ysh;
            }
            break b;
        }
        if ($ysh < var$3[1])
            var$3[1] = $ysh;
    }
    $ymid = (var$3[0] + var$3[1]) / 2.0;
    return csag_Curve_orderof($this.$XforY($ymid), $that.$XforY($ymid));
}
function csag_Curve_findIntersect($this, $that, $yrange, $ymin, $slevel, $tlevel, $s0, $xs0, $ys0, $s1, $xs1, $ys1, $t0, $xt0, $yt0, $t1, $xt1, $yt1) {
    var $t, $xt, $yt, $xlk, $ylk, $xnm, $ynm, $xmk, $ymk, $det, $detinv, $s, $t_0, $y, $xs, $ys;
    if ($ys0 <= $yt1 && $yt0 <= $ys1) {
        if (jl_Math_min0($xs0, $xs1) <= jl_Math_max0($xt0, $xt1) && jl_Math_max0($xs0, $xs1) >= jl_Math_min0($xt0, $xt1)) {
            a: {
                $t = $s1 - $s0;
                if ($t <= 0.001) {
                    $xt = $t1 - $t0;
                    if ($xt > 0.001) {
                        $t = ($t0 + $t1) / 2.0;
                        $xt = $that.$XforT($t);
                        $yt = $that.$YforT($t);
                        if ($t !== $t0 && $t !== $t1) {
                            if ($yt >= $ys0 && csag_Curve_findIntersect($this, $that, $yrange, $ymin, $slevel, $tlevel + 1 | 0, $s0, $xs0, $ys0, $s1, $xs1, $ys1, $t0, $xt0, $yt0, $t, $xt, $yt))
                                return 1;
                            if ($ys1 >= $yt && csag_Curve_findIntersect($this, $that, $yrange, $ymin, $slevel, $tlevel + 1 | 0, $s0, $xs0, $ys0, $s1, $xs1, $ys1, $t, $xt, $yt, $t1, $xt1, $yt1))
                                return 1;
                            break a;
                        }
                        ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(439)), $t0)));
                        ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(440)), $t1)));
                        $rt_throw(jl_RuntimeException__init_($rt_s(441)));
                    }
                    $xlk = $xs1 - $xs0;
                    $ylk = $ys1 - $ys0;
                    $xnm = $xt1 - $xt0;
                    $ynm = $yt1 - $yt0;
                    $xmk = $xt0 - $xs0;
                    $ymk = $yt0 - $ys0;
                    $det = $xnm * $ylk - $ynm * $xlk;
                    if ($det === 0.0)
                        break a;
                    $detinv = 1.0 / $det;
                    $s = ($xnm * $ymk - $ynm * $xmk) * $detinv;
                    $t_0 = ($xlk * $ymk - $ylk * $xmk) * $detinv;
                    if ($s < 0.0)
                        break a;
                    if ($s > 1.0)
                        break a;
                    if ($t_0 < 0.0)
                        break a;
                    if ($t_0 > 1.0)
                        break a;
                    $ymin = $s0 + $s * $t;
                    $s0 = $t0 + $t_0 * $xt;
                    if (!($ymin >= 0.0 && $ymin <= 1.0 && $s0 >= 0.0 && $s0 <= 1.0))
                        ji_PrintStream_println(jl_System_out(), $rt_s(442));
                    $yrange = $yrange.data;
                    $y = ($this.$YforT($ymin) + $that.$YforT($s0)) / 2.0;
                    if ($y > $yrange[1])
                        break a;
                    if ($y <= $yrange[0])
                        break a;
                    $yrange[1] = $y;
                    return 1;
                }
                $s = ($s0 + $s1) / 2.0;
                $xs = $this.$XforT($s);
                $ys = $this.$YforT($s);
                if ($s !== $s0 && $s !== $s1)
                    b: {
                        if ($t1 - $t0 <= 0.001) {
                            if ($ys >= $yt0 && csag_Curve_findIntersect($this, $that, $yrange, $ymin, $slevel + 1 | 0, $tlevel, $s0, $xs0, $ys0, $s, $xs, $ys, $t0, $xt0, $yt0, $t1, $xt1, $yt1))
                                return 1;
                            if ($yt1 < $ys)
                                break b;
                            if (!csag_Curve_findIntersect($this, $that, $yrange, $ymin, $slevel + 1 | 0, $tlevel, $s, $xs, $ys, $s1, $xs1, $ys1, $t0, $xt0, $yt0, $t1, $xt1, $yt1))
                                break b;
                            return 1;
                        }
                        $t = ($t0 + $t1) / 2.0;
                        $xt = $that.$XforT($t);
                        $yt = $that.$YforT($t);
                        if ($t !== $t0 && $t !== $t1) {
                            if ($ys >= $yt0 && $yt >= $ys0 && csag_Curve_findIntersect($this, $that, $yrange, $ymin, $slevel + 1 | 0, $tlevel + 1 | 0, $s0, $xs0, $ys0, $s, $xs, $ys, $t0, $xt0, $yt0, $t, $xt, $yt))
                                return 1;
                            if ($ys >= $yt && csag_Curve_findIntersect($this, $that, $yrange, $ymin, $slevel + 1 | 0, $tlevel + 1 | 0, $s0, $xs0, $ys0, $s, $xs, $ys, $t, $xt, $yt, $t1, $xt1, $yt1))
                                return 1;
                            if ($yt >= $ys && csag_Curve_findIntersect($this, $that, $yrange, $ymin, $slevel + 1 | 0, $tlevel + 1 | 0, $s, $xs, $ys, $s1, $xs1, $ys1, $t0, $xt0, $yt0, $t, $xt, $yt))
                                return 1;
                            if ($ys1 >= $yt && $yt1 >= $ys && csag_Curve_findIntersect($this, $that, $yrange, $ymin, $slevel + 1 | 0, $tlevel + 1 | 0, $s, $xs, $ys, $s1, $xs1, $ys1, $t, $xt, $yt, $t1, $xt1, $yt1))
                                return 1;
                        } else {
                            ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(439)), $t0)));
                            ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(440)), $t1)));
                            $rt_throw(jl_RuntimeException__init_($rt_s(441)));
                        }
                    }
                else {
                    ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(443)), $s0)));
                    ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(444)), $s1)));
                    $rt_throw(jl_RuntimeException__init_($rt_s(445)));
                }
            }
            return 0;
        }
        return 0;
    }
    return 0;
}
function csag_Curve_refineTforY($this, $t0, $yt0, $y0) {
    var $t1, $th, var$6;
    $t1 = 1.0;
    while (true) {
        $th = ($t0 + $t1) / 2.0;
        if ($th === $t0)
            break;
        if ($th === $t1)
            break;
        var$6 = $rt_compare($this.$YforT($th), $y0);
        if (var$6 >= 0) {
            if (var$6 <= 0)
                return $t1;
            $t1 = $th;
            $th = $t0;
        }
        $t0 = $th;
    }
    return $t1;
}
function csag_Curve_fairlyClose($this, $v1, $v2) {
    return jl_Math_abs($v1 - $v2) >= jl_Math_max0(jl_Math_abs($v1), jl_Math_abs($v2)) * 1.0E-10 ? 0 : 1;
}
function csag_AreaOp() {
    jl_Object.call(this);
}
var csag_AreaOp_YXTopComparator = null;
var csag_AreaOp_EmptyLinkList = null;
var csag_AreaOp_EmptyChainList = null;
function csag_AreaOp__init_0(var_0) {
    var var_1 = new csag_AreaOp();
    csag_AreaOp__init_(var_1, var_0);
    return var_1;
}
function csag_AreaOp_calculate($this, $left, $right) {
    var $edges;
    $edges = ju_Vector__init_();
    csag_AreaOp_addEdges($edges, $left, 0);
    csag_AreaOp_addEdges($edges, $right, 1);
    return csag_AreaOp_pruneEdges($this, $edges);
}
function csag_AreaOp_addEdges($edges, $curves, $curvetag) {
    var $enum_, $c;
    $enum_ = ju_Vector_elements($curves);
    while (ju_Vector$1_hasMoreElements($enum_)) {
        $c = ju_Vector$1_nextElement($enum_);
        if ($c.$getOrder() > 0) {
            $curves = new csag_Edge;
            $curves.$curve = $c;
            $curves.$ctag = $curvetag;
            $curves.$etag = 0;
            ju_Vector_add($edges, $curves);
        }
    }
}
function csag_AreaOp_pruneEdges($this, $edges) {
    var $numedges, $edgelist, $left, $right, $yrange, var$7, $subcurves, $chains, $links, $y, $nexteq, $eq, var$14, $e, var$16, $eq_0, $prevedge, $ordering, $eq_1, $ystart, $yend, $etag, $origstate, $activematch, $furthesty, $furthesty_0, $ret, $enum_, $link, $nextlink, $nextlink_0;
    $numedges = ju_Vector_size($edges);
    if ($numedges < 2)
        return $edges;
    $edgelist = ju_Vector_toArray($edges, $rt_createArray(csag_Edge, $numedges));
    ju_Arrays_sort($edgelist, csag_AreaOp_YXTopComparator);
    $left = 0;
    $right = 0;
    $yrange = $rt_createDoubleArray(2);
    var$7 = $yrange.data;
    $subcurves = ju_Vector__init_();
    $chains = ju_Vector__init_();
    $links = ju_Vector__init_();
    a: {
        b: while (true) {
            if ($left >= $numedges)
                break a;
            $y = var$7[0];
            $nexteq = $right - 1 | 0;
            $eq = $nexteq;
            while ($nexteq >= $left) {
                var$14 = $edgelist.data;
                $e = var$14[$nexteq];
                if (csag_Edge_getCurve($e).$getYBot() > $y) {
                    if ($eq > $nexteq)
                        var$14[$eq] = $e;
                    $eq = $eq + (-1) | 0;
                }
                $nexteq = $nexteq + (-1) | 0;
            }
            $left = $eq + 1 | 0;
            if ($left >= $right) {
                if ($right >= $numedges)
                    break a;
                $y = csag_Edge_getCurve($edgelist.data[$right]).$getYTop();
                if ($y > var$7[0])
                    csag_AreaOp_finalizeSubCurves($subcurves, $chains);
                var$7[0] = $y;
            }
            c: {
                while (true) {
                    $eq = $rt_compare($right, $numedges);
                    if ($eq >= 0)
                        break c;
                    if (csag_Edge_getCurve($edgelist.data[$right]).$getYTop() > $y)
                        break;
                    $right = $right + 1 | 0;
                }
            }
            var$14 = $edgelist.data;
            var$7[1] = csag_Edge_getCurve(var$14[$left]).$getYBot();
            if ($eq < 0) {
                $y = csag_Edge_getCurve(var$14[$right]).$getYTop();
                if (var$7[1] > $y)
                    var$7[1] = $y;
            }
            $nexteq = 1;
            var$16 = $left;
            while (var$16 < $right) {
                $e = var$14[var$16];
                csag_Edge_setEquivalence($e, 0);
                $eq_0 = var$16;
                d: {
                    while ($eq_0 > $left) {
                        $prevedge = var$14[$eq_0 - 1 | 0];
                        $ordering = csag_Edge_compareTo($e, $prevedge, $yrange);
                        if (var$7[1] <= var$7[0])
                            break b;
                        if ($ordering >= 0) {
                            if ($ordering)
                                break d;
                            $eq_1 = csag_Edge_getEquivalence($prevedge);
                            if (!$eq_1) {
                                $ordering = $nexteq + 1 | 0;
                                csag_Edge_setEquivalence($prevedge, $nexteq);
                                $eq_1 = $nexteq;
                                $nexteq = $ordering;
                            }
                            csag_Edge_setEquivalence($e, $eq_1);
                            break d;
                        }
                        var$14[$eq_0] = $prevedge;
                        $eq_0 = $eq_0 + (-1) | 0;
                    }
                }
                var$14[$eq_0] = $e;
                var$16 = var$16 + 1 | 0;
            }
            $this.$newRow();
            $ystart = var$7[0];
            $yend = var$7[1];
            $nexteq = $left;
            while ($nexteq < $right) {
                $e = var$14[$nexteq];
                $eq_0 = csag_Edge_getEquivalence($e);
                if (!$eq_0)
                    $etag = $this.$classify($e);
                else {
                    $origstate = $this.$getState();
                    $etag = $origstate != 1 ? 1 : (-1);
                    $activematch = null;
                    $prevedge = $e;
                    $furthesty = $yend;
                    e: {
                        while (true) {
                            $this.$classify($e);
                            if ($activematch === null && csag_Edge_isActiveFor($e, $ystart, $etag))
                                $activematch = $e;
                            $furthesty_0 = csag_Edge_getCurve($e).$getYBot();
                            if ($furthesty_0 > $furthesty)
                                $prevedge = $e;
                            else
                                $furthesty_0 = $furthesty;
                            $nexteq = $nexteq + 1 | 0;
                            if ($nexteq >= $right)
                                break e;
                            $e = var$14[$nexteq];
                            if (csag_Edge_getEquivalence($e) != $eq_0)
                                break;
                            $furthesty = $furthesty_0;
                        }
                    }
                    $nexteq = $nexteq + (-1) | 0;
                    if ($this.$getState() == $origstate)
                        $etag = 0;
                    else {
                        if ($activematch !== null)
                            $prevedge = $activematch;
                        $e = $prevedge;
                    }
                }
                if ($etag) {
                    csag_Edge_record($e, $yend, $etag);
                    ju_Vector_add($links, csag_CurveLink__init_(csag_Edge_getCurve($e), $ystart, $yend, $etag));
                }
                $nexteq = $nexteq + 1 | 0;
            }
            f: {
                if ($this.$getState() != (-1)) {
                    ji_PrintStream_println(jl_System_out(), $rt_s(446));
                    ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(447)), $right - $left | 0)));
                    ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(448)), ju_Vector_size($links))));
                    ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(449)), var$7[0])));
                    if ($eq >= 0)
                        ji_PrintStream_println(jl_System_out(), $rt_s(450));
                    else
                        ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(451)), csag_Edge_getCurve(var$14[$right]).$getYTop())));
                    $nexteq = $left;
                    while (true) {
                        if ($nexteq >= $right)
                            break f;
                        $e = var$14[$nexteq];
                        ji_PrintStream_println1(jl_System_out(), $e);
                        $eq = csag_Edge_getEquivalence($e);
                        if ($eq)
                            ji_PrintStream_println(jl_System_out(), jl_StringBuilder_toString(jl_StringBuilder_append1(jl_StringBuilder_append2(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(452)), $eq), $rt_s(453))));
                        $nexteq = $nexteq + 1 | 0;
                    }
                }
            }
            csag_AreaOp_resolveLinks($subcurves, $chains, $links);
            ju_Vector_clear($links);
            var$7[0] = $yend;
        }
        $rt_throw(jl_RuntimeException__init_(jl_StringBuilder_toString(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder_append(jl_StringBuilder_append1(jl_StringBuilder__init_(), $rt_s(454)), var$7[1]), $rt_s(455)), var$7[0]))));
    }
    csag_AreaOp_finalizeSubCurves($subcurves, $chains);
    $ret = ju_Vector__init_();
    $enum_ = ju_Vector_elements($subcurves);
    while (ju_Vector$1_hasMoreElements($enum_)) {
        $link = ju_Vector$1_nextElement($enum_);
        ju_Vector_add($ret, csag_CurveLink_getMoveto($link));
        $nextlink = $link;
        while (true) {
            $nextlink_0 = csag_CurveLink_getNext($nextlink);
            if ($nextlink_0 === null)
                break;
            if (csag_CurveLink_absorb($link, $nextlink_0)) {
                $nextlink = $nextlink_0;
                continue;
            }
            ju_Vector_add($ret, csag_CurveLink_getSubCurve($link));
            $nextlink = $nextlink_0;
            $link = $nextlink_0;
        }
        ju_Vector_add($ret, csag_CurveLink_getSubCurve($link));
    }
    return $ret;
}
function csag_AreaOp_finalizeSubCurves($subcurves, $chains) {
    var $numchains, $endlist, var$5, $i, $subcurve;
    $numchains = ju_Vector_size($chains);
    if (!$numchains)
        return;
    if ($numchains & 1) {
        $subcurves = new jl_RuntimeException;
        jl_Throwable__init_($subcurves, $rt_s(456));
        $rt_throw($subcurves);
    }
    $endlist = $rt_createArray(csag_ChainEnd, $numchains);
    var$5 = $endlist.data;
    ju_Vector_toArray($chains, $endlist);
    $i = 1;
    while ($i < $numchains) {
        $subcurve = csag_ChainEnd_linkTo(var$5[$i - 1 | 0], var$5[$i]);
        if ($subcurve !== null)
            ju_Vector_add($subcurves, $subcurve);
        $i = $i + 2 | 0;
    }
    ju_Vector_removeAllElements($chains);
}
function csag_AreaOp_resolveLinks($subcurves, $chains, $links) {
    var $numlinks, $linklist, $numchains, $endlist, $curchain, $curlink, $chain, $nextchain, $link, $nextlink, $connectchains, $connectlinks, $cx, $lx, $subcurve, $openend, $closeend;
    $numlinks = ju_Vector_size($links);
    if (!$numlinks)
        $linklist = csag_AreaOp_EmptyLinkList;
    else {
        if ($numlinks & 1) {
            $chains = new jl_RuntimeException;
            jl_Throwable__init_($chains, $rt_s(457));
            $rt_throw($chains);
        }
        $linklist = $rt_createArray(csag_CurveLink, $numlinks + 2 | 0);
        ju_Vector_toArray($links, $linklist);
    }
    $numchains = ju_Vector_size($chains);
    if (!$numchains)
        $endlist = csag_AreaOp_EmptyChainList;
    else {
        if ($numchains & 1) {
            $subcurves = new jl_RuntimeException;
            jl_Throwable__init_($subcurves, $rt_s(456));
            $rt_throw($subcurves);
        }
        $endlist = $rt_createArray(csag_ChainEnd, $numchains + 2 | 0);
        ju_Vector_toArray($chains, $endlist);
    }
    $endlist = $endlist.data;
    $linklist = $linklist.data;
    $curchain = 0;
    $curlink = 0;
    ju_Vector_removeAllElements($chains);
    $chain = $endlist[0];
    $nextchain = $endlist[1];
    $link = $linklist[0];
    $nextlink = $linklist[1];
    while (!($chain === null && $link === null)) {
        $connectchains = $link !== null ? 0 : 1;
        $connectlinks = $chain !== null ? 0 : 1;
        if (!$connectchains && !$connectlinks) {
            $connectchains = !($curchain & 1) && csag_ChainEnd_getX($chain) === csag_ChainEnd_getX($nextchain) ? 1 : 0;
            $connectlinks = !($curlink & 1) && csag_CurveLink_getX($link) === csag_CurveLink_getX($nextlink) ? 1 : 0;
            if (!$connectchains && !$connectlinks) {
                $cx = csag_ChainEnd_getX($chain);
                $lx = csag_CurveLink_getX($link);
                $connectchains = $nextchain !== null && $cx < $lx && csag_AreaOp_obstructs(csag_ChainEnd_getX($nextchain), $lx, $curchain) ? 1 : 0;
                $connectlinks = $nextlink !== null && $lx < $cx && csag_AreaOp_obstructs(csag_CurveLink_getX($nextlink), $cx, $curlink) ? 1 : 0;
            }
        }
        if (!$connectchains) {
            $subcurve = $chain;
            $chain = $nextchain;
        } else {
            $subcurve = csag_ChainEnd_linkTo($chain, $nextchain);
            if ($subcurve !== null)
                ju_Vector_add($subcurves, $subcurve);
            $curchain = $curchain + 2 | 0;
            $subcurve = $endlist[$curchain];
            $chain = $endlist[$curchain + 1 | 0];
        }
        if (!$connectlinks) {
            $links = $link;
            $link = $nextlink;
        } else {
            $openend = csag_ChainEnd__init_($link, null);
            $closeend = csag_ChainEnd__init_($nextlink, $openend);
            $openend.$partner = $closeend;
            ju_Vector_add($chains, $openend);
            ju_Vector_add($chains, $closeend);
            $curlink = $curlink + 2 | 0;
            $links = $linklist[$curlink];
            $link = $linklist[$curlink + 1 | 0];
        }
        if ($connectchains) {
            $nextchain = $chain;
            $nextlink = $link;
            $chain = $subcurve;
            $link = $links;
        } else if ($connectlinks) {
            $nextchain = $chain;
            $nextlink = $link;
            $chain = $subcurve;
            $link = $links;
        } else {
            csag_ChainEnd_addLink($subcurve, $links);
            ju_Vector_add($chains, $subcurve);
            $curchain = $curchain + 1 | 0;
            $nextchain = $endlist[$curchain + 1 | 0];
            $curlink = $curlink + 1 | 0;
            $nextlink = $linklist[$curlink + 1 | 0];
        }
    }
    if (ju_Vector_size($chains) & 1)
        ji_PrintStream_println(jl_System_out(), $rt_s(456));
}
function csag_AreaOp_obstructs($v1, $v2, $phase) {
    return $phase & 1 ? ($v1 >= $v2 ? 0 : 1) : $v1 > $v2 ? 0 : 1;
}
function csag_AreaOp__init_($this, $x0) {
    return;
}
function csag_AreaOp__clinit_() {
    csag_AreaOp_YXTopComparator = new csag_AreaOp$1;
    csag_AreaOp_EmptyLinkList = $rt_createArray(csag_CurveLink, 2);
    csag_AreaOp_EmptyChainList = $rt_createArray(csag_ChainEnd, 2);
}
function csag_AreaOp$NZWindOp() {
    csag_AreaOp.call(this);
    this.$count0 = 0;
}
function csag_AreaOp$NZWindOp_newRow($this) {
    $this.$count0 = 0;
}
function csag_AreaOp$NZWindOp_classify($this, $e) {
    var $newCount, $type;
    $newCount = $this.$count0;
    $type = $newCount ? 0 : 1;
    $newCount = $newCount + $e.$curve.$direction0 | 0;
    $this.$count0 = $newCount;
    if (!$newCount)
        $type = (-1);
    return $type;
}
function csag_AreaOp$NZWindOp_getState($this) {
    return $this.$count0 ? 1 : (-1);
}
function csag_AreaOp$EOWindOp() {
    csag_AreaOp.call(this);
    this.$inside = 0;
}
function csag_AreaOp$EOWindOp_newRow($this) {
    $this.$inside = 0;
}
function csag_AreaOp$EOWindOp_classify($this, $e) {
    var $newInside;
    $newInside = $this.$inside ? 0 : 1;
    $this.$inside = $newInside;
    return !$newInside ? (-1) : 1;
}
function csag_AreaOp$EOWindOp_getState($this) {
    return !$this.$inside ? (-1) : 1;
}
function csag_Order1() {
    var a = this; csag_Curve.call(a);
    a.$x00 = 0.0;
    a.$y00 = 0.0;
    a.$x11 = 0.0;
    a.$y11 = 0.0;
    a.$xmin = 0.0;
    a.$xmax = 0.0;
}
function csag_Order1__init_(var_0, var_1, var_2, var_3, var_4) {
    var var_5 = new csag_Order1();
    csag_Order1__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
}
function csag_Order1__init_0($this, $x0, $y0, $x1, $y1, $direction) {
    csag_Curve__init_0($this, $direction);
    $this.$x00 = $x0;
    $this.$y00 = $y0;
    $this.$x11 = $x1;
    $this.$y11 = $y1;
    if ($x0 >= $x1) {
        $this.$xmin = $x1;
        $this.$xmax = $x0;
    } else {
        $this.$xmin = $x0;
        $this.$xmax = $x1;
    }
}
function csag_Order1_getOrder($this) {
    return 1;
}
function csag_Order1_getXTop($this) {
    return $this.$x00;
}
function csag_Order1_getYTop($this) {
    return $this.$y00;
}
function csag_Order1_getYBot($this) {
    return $this.$y11;
}
function csag_Order1_getXMin($this) {
    return $this.$xmin;
}
function csag_Order1_getXMax($this) {
    return $this.$xmax;
}
function csag_Order1_getX0($this) {
    return $this.$direction0 != 1 ? $this.$x11 : $this.$x00;
}
function csag_Order1_getY0($this) {
    return $this.$direction0 != 1 ? $this.$y11 : $this.$y00;
}
function csag_Order1_getX1($this) {
    return $this.$direction0 != (-1) ? $this.$x11 : $this.$x00;
}
function csag_Order1_getY1($this) {
    return $this.$direction0 != (-1) ? $this.$y11 : $this.$y00;
}
function csag_Order1_XforY($this, $y) {
    if ($this.$x00 !== $this.$x11 && $y > $this.$y00) {
        if ($y >= $this.$y11)
            return $this.$x11;
        return $this.$x00 + ($y - $this.$y00) * ($this.$x11 - $this.$x00) / ($this.$y11 - $this.$y00);
    }
    return $this.$x00;
}
function csag_Order1_TforY($this, $y) {
    if ($y <= $this.$y00)
        return 0.0;
    if ($y >= $this.$y11)
        return 1.0;
    return ($y - $this.$y00) / ($this.$y11 - $this.$y00);
}
function csag_Order1_XforT($this, $t) {
    return $this.$x00 + $t * ($this.$x11 - $this.$x00);
}
function csag_Order1_YforT($this, $t) {
    return $this.$y00 + $t * ($this.$y11 - $this.$y00);
}
function csag_Order1_nextVertical($this, $t0, $t1) {
    return $t1;
}
function csag_Order1_getSubCurve($this, $ystart, $yend, $dir) {
    var $num, $denom;
    if ($ystart === $this.$y00 && $yend === $this.$y11)
        return csag_Curve_getWithDirection($this, $dir);
    if ($this.$x00 === $this.$x11)
        return csag_Order1__init_($this.$x00, $ystart, $this.$x11, $yend, $dir);
    $num = $this.$x00 - $this.$x11;
    $denom = $this.$y00 - $this.$y11;
    return csag_Order1__init_($this.$x00 + ($ystart - $this.$y00) * $num / $denom, $ystart, $this.$x00 + ($yend - $this.$y00) * $num / $denom, $yend, $dir);
}
function csag_Order1_getReversedCurve($this) {
    return csag_Order1__init_($this.$x00, $this.$y00, $this.$x11, $this.$y11,  -$this.$direction0);
}
function csag_Order1_compareTo($this, $other, $yrange) {
    var $c1, $dxa, $dya, $dxb, $dyb, $denom, $y;
    if (!($other instanceof csag_Order1))
        return csag_Curve_compareTo($this, $other, $yrange);
    $yrange = $yrange.data;
    $c1 = $other;
    if ($yrange[1] <= $yrange[0]) {
        $other = new jl_RuntimeException;
        jl_Throwable__init_($other, $rt_s(458));
        $rt_throw($other);
    }
    $yrange[1] = jl_Math_min0(jl_Math_min0($yrange[1], $this.$y11), $c1.$y11);
    if ($yrange[1] <= $yrange[0]) {
        $other = new jl_RuntimeException;
        $c1 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($c1);
        jl_AbstractStringBuilder_append($c1, $rt_s(431));
        $c1 = jl_StringBuilder_append($c1, $yrange[0]);
        jl_AbstractStringBuilder_append($c1, $rt_s(432));
        jl_Throwable__init_($other, jl_AbstractStringBuilder_toString(jl_StringBuilder_append($c1, $yrange[1])));
        $rt_throw($other);
    }
    if ($this.$xmax <= $c1.$xmin)
        return $this.$xmin !== $c1.$xmax ? (-1) : 0;
    if ($this.$xmin >= $c1.$xmax)
        return 1;
    $dxa = $this.$x11 - $this.$x00;
    $dya = $this.$y11 - $this.$y00;
    $dxb = $c1.$x11 - $c1.$x00;
    $dyb = $c1.$y11 - $c1.$y00;
    $denom = $dxb * $dya - $dxa * $dyb;
    if ($denom === 0.0)
        $y = jl_Math_max0($this.$y00, $c1.$y00);
    else {
        $y = (($this.$x00 - $c1.$x00) * $dya * $dyb - $this.$y00 * $dxa * $dyb + $c1.$y00 * $dxb * $dya) / $denom;
        if ($y <= $yrange[0])
            $y = jl_Math_min0($this.$y11, $c1.$y11);
        else {
            if ($y < $yrange[1])
                $yrange[1] = $y;
            $y = jl_Math_max0($this.$y00, $c1.$y00);
        }
    }
    return csag_Curve_orderof(csag_Order1_XforY($this, $y), csag_Order1_XforY($c1, $y));
}
function csag_Order1_getSegment($this, $coords) {
    if ($this.$direction0 != 1) {
        $coords = $coords.data;
        $coords[0] = $this.$x00;
        $coords[1] = $this.$y00;
    } else {
        $coords = $coords.data;
        $coords[0] = $this.$x11;
        $coords[1] = $this.$y11;
    }
    return 1;
}
function csag_Order0() {
    var a = this; csag_Curve.call(a);
    a.$x4 = 0.0;
    a.$y4 = 0.0;
}
function csag_Order0__init_(var_0, var_1) {
    var var_2 = new csag_Order0();
    csag_Order0__init_0(var_2, var_0, var_1);
    return var_2;
}
function csag_Order0__init_0($this, $x, $y) {
    csag_Curve__init_0($this, 1);
    $this.$x4 = $x;
    $this.$y4 = $y;
}
function csag_Order0_getOrder($this) {
    return 0;
}
function csag_Order0_getXTop($this) {
    return $this.$x4;
}
function csag_Order0_getYTop($this) {
    return $this.$y4;
}
function csag_Order0_getYBot($this) {
    return $this.$y4;
}
function csag_Order0_getXMin($this) {
    return $this.$x4;
}
function csag_Order0_getXMax($this) {
    return $this.$x4;
}
function csag_Order0_getX0($this) {
    return $this.$x4;
}
function csag_Order0_getY0($this) {
    return $this.$y4;
}
function csag_Order0_getX1($this) {
    return $this.$x4;
}
function csag_Order0_getY1($this) {
    return $this.$y4;
}
function csag_Order0_XforY($this, $y) {
    return $y;
}
function csag_Order0_TforY($this, $y) {
    return 0.0;
}
function csag_Order0_XforT($this, $t) {
    return $this.$x4;
}
function csag_Order0_YforT($this, $t) {
    return $this.$y4;
}
function csag_Order0_nextVertical($this, $t0, $t1) {
    return $t1;
}
function csag_Order0_getSubCurve($this, $ystart, $yend, $dir) {
    return $this;
}
function csag_Order0_getReversedCurve($this) {
    return $this;
}
function csag_Order0_getSegment($this, $coords) {
    $coords = $coords.data;
    $coords[0] = $this.$x4;
    $coords[1] = $this.$y4;
    return 0;
}
function csag_Order2() {
    var a = this; csag_Curve.call(a);
    a.$x01 = 0.0;
    a.$y01 = 0.0;
    a.$cx0 = 0.0;
    a.$cy0 = 0.0;
    a.$x12 = 0.0;
    a.$y12 = 0.0;
    a.$xmin0 = 0.0;
    a.$xmax0 = 0.0;
    a.$xcoeff0 = 0.0;
    a.$xcoeff1 = 0.0;
    a.$xcoeff2 = 0.0;
    a.$ycoeff0 = 0.0;
    a.$ycoeff1 = 0.0;
    a.$ycoeff2 = 0.0;
}
function csag_Order2__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6) {
    var var_7 = new csag_Order2();
    csag_Order2__init_0(var_7, var_0, var_1, var_2, var_3, var_4, var_5, var_6);
    return var_7;
}
function csag_Order2_insert($curves, $tmp_0, $x0, $y0, $cx0, $cy0, $x1, $y1, $direction) {
    var $numparams, $t, var$12, var$13, $i0, $i1;
    if ($y0 <= $cy0 && $cy0 <= $y1)
        $numparams = 0;
    else {
        $t = $y0 - $cy0;
        var$12 = $t + $y1 - $cy0;
        if (var$12 === 0.0)
            $numparams = 0;
        else {
            $t = $t / var$12;
            if ($t > 0.0 && $t < 1.0) {
                $tmp_0.data[0] = $t;
                $numparams = 1;
            } else
                $numparams = 0;
        }
    }
    if (!$numparams) {
        csag_Order2_addInstance($curves, $x0, $y0, $cx0, $cy0, $x1, $y1, $direction);
        return;
    }
    var$13 = $tmp_0.data;
    $t = var$13[0];
    var$13[0] = $x0;
    var$13[1] = $y0;
    var$13[2] = $cx0;
    var$13[3] = $cy0;
    var$13[4] = $x1;
    var$13[5] = $y1;
    csag_Order2_split($tmp_0, 0, $t);
    $i0 = $direction != 1 ? 4 : 0;
    $i1 = 4 - $i0 | 0;
    csag_Order2_addInstance($curves, var$13[$i0], var$13[$i0 + 1 | 0], var$13[$i0 + 2 | 0], var$13[$i0 + 3 | 0], var$13[$i0 + 4 | 0], var$13[$i0 + 5 | 0], $direction);
    csag_Order2_addInstance($curves, var$13[$i1], var$13[$i1 + 1 | 0], var$13[$i1 + 2 | 0], var$13[$i1 + 3 | 0], var$13[$i1 + 4 | 0], var$13[$i1 + 5 | 0], $direction);
}
function csag_Order2_addInstance($curves, $x0, $y0, $cx0, $cy0, $x1, $y1, $direction) {
    if ($y0 > $y1)
        ju_Vector_add($curves, csag_Order2__init_($x1, $y1, $cx0, $cy0, $x0, $y0,  -$direction));
    else if ($y1 > $y0)
        ju_Vector_add($curves, csag_Order2__init_($x0, $y0, $cx0, $cy0, $x1, $y1, $direction));
}
function csag_Order2_split($coords, $pos, $t) {
    var var$4, var$5, var$6, var$7, var$8, $cx, var$10, $cy, $x0, $y0;
    $coords = $coords.data;
    var$4 = $pos + 8 | 0;
    var$5 = $pos + 4 | 0;
    var$6 = $coords[var$5];
    $coords[var$4] = var$6;
    var$4 = $pos + 9 | 0;
    var$7 = $pos + 5 | 0;
    var$8 = $coords[var$7];
    $coords[var$4] = var$8;
    var$4 = $pos + 2 | 0;
    $cx = $coords[var$4];
    var$10 = $pos + 3 | 0;
    $cy = $coords[var$10];
    var$6 = $cx + (var$6 - $cx) * $t;
    var$8 = $cy + (var$8 - $cy) * $t;
    $x0 = $coords[$pos + 0 | 0];
    $y0 = $coords[$pos + 1 | 0];
    $cx = $x0 + ($cx - $x0) * $t;
    $x0 = $y0 + ($cy - $y0) * $t;
    $y0 = $cx + (var$6 - $cx) * $t;
    $t = $x0 + (var$8 - $x0) * $t;
    $coords[var$4] = $cx;
    $coords[var$10] = $x0;
    $coords[var$5] = $y0;
    $coords[var$7] = $t;
    $coords[$pos + 6 | 0] = var$6;
    $coords[$pos + 7 | 0] = var$8;
}
function csag_Order2__init_0($this, $x0, $y0, $cx0, $cy0, $x1, $y1, $direction) {
    csag_Curve__init_0($this, $direction);
    if ($cy0 < $y0)
        $cy0 = $y0;
    else if ($cy0 > $y1)
        $cy0 = $y1;
    $this.$x01 = $x0;
    $this.$y01 = $y0;
    $this.$cx0 = $cx0;
    $this.$cy0 = $cy0;
    $this.$x12 = $x1;
    $this.$y12 = $y1;
    $this.$xmin0 = jl_Math_min0(jl_Math_min0($x0, $x1), $cx0);
    $this.$xmax0 = jl_Math_max0(jl_Math_max0($x0, $x1), $cx0);
    $this.$xcoeff0 = $x0;
    $this.$xcoeff1 = $cx0 + $cx0 - $x0 - $x0;
    $this.$xcoeff2 = $x0 - $cx0 - $cx0 + $x1;
    $this.$ycoeff0 = $y0;
    $this.$ycoeff1 = $cy0 + $cy0 - $y0 - $y0;
    $this.$ycoeff2 = $y0 - $cy0 - $cy0 + $y1;
}
function csag_Order2_getOrder($this) {
    return 2;
}
function csag_Order2_getXTop($this) {
    return $this.$x01;
}
function csag_Order2_getYTop($this) {
    return $this.$y01;
}
function csag_Order2_getYBot($this) {
    return $this.$y12;
}
function csag_Order2_getXMin($this) {
    return $this.$xmin0;
}
function csag_Order2_getXMax($this) {
    return $this.$xmax0;
}
function csag_Order2_getX0($this) {
    return $this.$direction0 != 1 ? $this.$x12 : $this.$x01;
}
function csag_Order2_getY0($this) {
    return $this.$direction0 != 1 ? $this.$y12 : $this.$y01;
}
function csag_Order2_getX1($this) {
    return $this.$direction0 != (-1) ? $this.$x12 : $this.$x01;
}
function csag_Order2_getY1($this) {
    return $this.$direction0 != (-1) ? $this.$y12 : $this.$y01;
}
function csag_Order2_XforY($this, $y) {
    if ($y <= $this.$y01)
        return $this.$x01;
    if ($y >= $this.$y12)
        return $this.$x12;
    return csag_Order2_XforT($this, csag_Order2_TforY($this, $y));
}
function csag_Order2_TforY($this, $y) {
    if ($y <= $this.$y01)
        return 0.0;
    if ($y >= $this.$y12)
        return 1.0;
    return csag_Order2_TforY0($y, $this.$ycoeff0, $this.$ycoeff1, $this.$ycoeff2);
}
function csag_Order2_TforY0($y, $ycoeff0, $ycoeff1, $ycoeff2) {
    var $root, $d, $q;
    $y = $ycoeff0 - $y;
    if ($ycoeff2 === 0.0) {
        $root =  -$y / $ycoeff1;
        if ($root >= 0.0 && $root <= 1.0)
            return $root;
    } else {
        $d = $ycoeff1 * $ycoeff1 - 4.0 * $ycoeff2 * $y;
        if ($d >= 0.0) {
            $ycoeff0 = jl_Math_sqrt($d);
            if ($ycoeff1 < 0.0)
                $ycoeff0 =  -$ycoeff0;
            $q = ($ycoeff1 + $ycoeff0) / (-2.0);
            $root = $q / $ycoeff2;
            if ($root >= 0.0 && $root <= 1.0)
                return $root;
            if ($q !== 0.0) {
                $ycoeff0 = $y / $q;
                if ($ycoeff0 >= 0.0 && $ycoeff0 <= 1.0)
                    return $ycoeff0;
            }
        }
    }
    return 0.0 >= ($y + $y + $ycoeff1 + $ycoeff2) / 2.0 ? 1.0 : 0.0;
}
function csag_Order2_XforT($this, $t) {
    return ($this.$xcoeff2 * $t + $this.$xcoeff1) * $t + $this.$xcoeff0;
}
function csag_Order2_YforT($this, $t) {
    return ($this.$ycoeff2 * $t + $this.$ycoeff1) * $t + $this.$ycoeff0;
}
function csag_Order2_nextVertical($this, $t0, $t1) {
    var $t;
    $t =  -$this.$xcoeff1 / (2.0 * $this.$xcoeff2);
    if ($t > $t0 && $t < $t1)
        return $t;
    return $t1;
}
function csag_Order2_getSubCurve($this, $ystart, $yend, $dir) {
    var $t0, $t1, $eqn, var$7, $i;
    if ($ystart > $this.$y01)
        $t0 = csag_Order2_TforY0($ystart, $this.$ycoeff0, $this.$ycoeff1, $this.$ycoeff2);
    else {
        if ($yend >= $this.$y12)
            return csag_Curve_getWithDirection($this, $dir);
        $t0 = 0.0;
    }
    $t1 = $yend >= $this.$y12 ? 1.0 : csag_Order2_TforY0($yend, $this.$ycoeff0, $this.$ycoeff1, $this.$ycoeff2);
    $eqn = $rt_createDoubleArray(10);
    var$7 = $eqn.data;
    var$7[0] = $this.$x01;
    var$7[1] = $this.$y01;
    var$7[2] = $this.$cx0;
    var$7[3] = $this.$cy0;
    var$7[4] = $this.$x12;
    var$7[5] = $this.$y12;
    if ($t1 < 1.0)
        csag_Order2_split($eqn, 0, $t1);
    if ($t0 <= 0.0)
        $i = 0;
    else {
        csag_Order2_split($eqn, 0, $t0 / $t1);
        $i = 4;
    }
    return csag_Order2__init_(var$7[$i + 0 | 0], $ystart, var$7[$i + 2 | 0], var$7[$i + 3 | 0], var$7[$i + 4 | 0], $yend, $dir);
}
function csag_Order2_getReversedCurve($this) {
    return csag_Order2__init_($this.$x01, $this.$y01, $this.$cx0, $this.$cy0, $this.$x12, $this.$y12,  -$this.$direction0);
}
function csag_Order2_getSegment($this, $coords) {
    $coords = $coords.data;
    $coords[0] = $this.$cx0;
    $coords[1] = $this.$cy0;
    if ($this.$direction0 != 1) {
        $coords[2] = $this.$x01;
        $coords[3] = $this.$y01;
    } else {
        $coords[2] = $this.$x12;
        $coords[3] = $this.$y12;
    }
    return 2;
}
function csag_Order2_controlPointString($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(424));
    var$1 = jl_StringBuilder_append(var$1, $this.$cx0);
    jl_AbstractStringBuilder_append(var$1, $rt_s(91));
    var$1 = jl_StringBuilder_append(var$1, $this.$cy0);
    jl_AbstractStringBuilder_append(var$1, $rt_s(425));
    return jl_AbstractStringBuilder_toString(var$1);
}
function csag_Order3() {
    var a = this; csag_Curve.call(a);
    a.$x02 = 0.0;
    a.$y02 = 0.0;
    a.$cx00 = 0.0;
    a.$cy00 = 0.0;
    a.$cx1 = 0.0;
    a.$cy1 = 0.0;
    a.$x13 = 0.0;
    a.$y13 = 0.0;
    a.$xmin1 = 0.0;
    a.$xmax1 = 0.0;
    a.$xcoeff00 = 0.0;
    a.$xcoeff10 = 0.0;
    a.$xcoeff20 = 0.0;
    a.$xcoeff3 = 0.0;
    a.$ycoeff00 = 0.0;
    a.$ycoeff10 = 0.0;
    a.$ycoeff20 = 0.0;
    a.$ycoeff3 = 0.0;
    a.$TforY1 = 0.0;
    a.$YforT1 = 0.0;
    a.$TforY2 = 0.0;
    a.$YforT2 = 0.0;
    a.$TforY3 = 0.0;
    a.$YforT3 = 0.0;
}
function csag_Order3__init_(var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8) {
    var var_9 = new csag_Order3();
    csag_Order3__init_0(var_9, var_0, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8);
    return var_9;
}
function csag_Order3_insert($curves, $tmp_0, $x0, $y0, $cx0, $cy0, $cx1, $cy1, $x1, $y1, $direction) {
    var $numparams, var$13, $t, var$15, var$16, var$17, var$18, $index, var$20;
    if ($y0 <= $cy0 && $cy0 <= $cy1 && $cy1 <= $y1)
        $numparams = 0;
    else {
        var$13 = $tmp_0.data;
        $t = $y1 - $cy1;
        var$15 = $cy1 - $cy0;
        var$16 = $cy0 - $y0;
        var$13[0] = var$16;
        var$13[1] = (var$15 - var$16) * 2.0;
        var$13[2] = $t - var$15 - var$15 + var$16;
        var$17 = cjag_QuadCurve2D_solveQuadratic($tmp_0, $tmp_0);
        $numparams = 0;
        var$18 = 0;
        while (var$18 < var$17) {
            var$15 = var$13[var$18];
            if (var$15 > 0.0 && var$15 < 1.0) {
                if ($numparams < var$18)
                    var$13[$numparams] = var$15;
                $numparams = $numparams + 1 | 0;
            }
            var$18 = var$18 + 1 | 0;
        }
    }
    if (!$numparams) {
        csag_Order3_addInstance($curves, $x0, $y0, $cx0, $cy0, $cx1, $cy1, $x1, $y1, $direction);
        return;
    }
    var$13 = $tmp_0.data;
    var$13[3] = $x0;
    var$13[4] = $y0;
    var$13[5] = $cx0;
    var$13[6] = $cy0;
    var$13[7] = $cx1;
    var$13[8] = $cy1;
    var$13[9] = $x1;
    var$13[10] = $y1;
    $t = var$13[0];
    var$18 = $rt_compare($numparams, 1);
    if (var$18 > 0 && $t > var$13[1]) {
        var$13[0] = var$13[1];
        var$13[1] = $t;
        $t = var$13[0];
    }
    csag_Order3_split($tmp_0, 3, $t);
    if (var$18 > 0)
        csag_Order3_split($tmp_0, 9, (var$13[1] - $t) / (1.0 - $t));
    $index = 3;
    if ($direction == (-1))
        $index = $index + ($numparams * 6 | 0) | 0;
    var$20 = $rt_compare($direction, 1);
    while ($numparams >= 0) {
        $x0 = var$13[$index + 0 | 0];
        $y0 = var$13[$index + 1 | 0];
        $cx0 = var$13[$index + 2 | 0];
        $cy0 = var$13[$index + 3 | 0];
        $cx1 = var$13[$index + 4 | 0];
        $cy1 = var$13[$index + 5 | 0];
        var$18 = $index + 6 | 0;
        csag_Order3_addInstance($curves, $x0, $y0, $cx0, $cy0, $cx1, $cy1, var$13[var$18], var$13[$index + 7 | 0], $direction);
        $numparams = $numparams + (-1) | 0;
        if (!var$20) {
            $index = var$18;
            continue;
        }
        $index = $index + (-6) | 0;
    }
}
function csag_Order3_addInstance($curves, $x0, $y0, $cx0, $cy0, $cx1, $cy1, $x1, $y1, $direction) {
    if ($y0 > $y1)
        ju_Vector_add($curves, csag_Order3__init_($x1, $y1, $cx1, $cy1, $cx0, $cy0, $x0, $y0,  -$direction));
    else if ($y1 > $y0)
        ju_Vector_add($curves, csag_Order3__init_($x0, $y0, $cx0, $cy0, $cx1, $cy1, $x1, $y1, $direction));
}
function csag_Order3_split($coords, $pos, $t) {
    var var$4, var$5, $x0, var$7, var$8, var$9, $cx1, var$11, $cy1, var$13, $y0, var$15, $cx0, $cy0, var$18, var$19;
    $coords = $coords.data;
    var$4 = $pos + 12 | 0;
    var$5 = $pos + 6 | 0;
    $x0 = $coords[var$5];
    $coords[var$4] = $x0;
    var$4 = $pos + 13 | 0;
    var$7 = $pos + 7 | 0;
    var$8 = $coords[var$7];
    $coords[var$4] = var$8;
    var$9 = $pos + 4 | 0;
    $cx1 = $coords[var$9];
    var$11 = $pos + 5 | 0;
    $cy1 = $coords[var$11];
    var$13 = $cx1 + ($x0 - $cx1) * $t;
    var$8 = $cy1 + (var$8 - $cy1) * $t;
    $x0 = $coords[$pos + 0 | 0];
    $y0 = $coords[$pos + 1 | 0];
    var$15 = $pos + 2 | 0;
    $cx0 = $coords[var$15];
    var$4 = $pos + 3 | 0;
    $cy0 = $coords[var$4];
    $x0 = $x0 + ($cx0 - $x0) * $t;
    var$18 = $y0 + ($cy0 - $y0) * $t;
    $cx0 = $cx0 + ($cx1 - $cx0) * $t;
    $cy0 = $cy0 + ($cy1 - $cy0) * $t;
    var$19 = $cx0 + (var$13 - $cx0) * $t;
    $cx1 = $cy0 + (var$8 - $cy0) * $t;
    $y0 = $x0 + ($cx0 - $x0) * $t;
    $cy0 = var$18 + ($cy0 - var$18) * $t;
    $coords[var$15] = $x0;
    $coords[var$4] = var$18;
    $coords[var$9] = $y0;
    $coords[var$11] = $cy0;
    $coords[var$5] = $y0 + (var$19 - $y0) * $t;
    $coords[var$7] = $cy0 + ($cx1 - $cy0) * $t;
    $coords[$pos + 8 | 0] = var$19;
    $coords[$pos + 9 | 0] = $cx1;
    $coords[$pos + 10 | 0] = var$13;
    $coords[$pos + 11 | 0] = var$8;
}
function csag_Order3__init_0($this, $x0, $y0, $cx0, $cy0, $cx1, $cy1, $x1, $y1, $direction) {
    csag_Curve__init_0($this, $direction);
    if ($cy0 < $y0)
        $cy0 = $y0;
    if ($cy1 > $y1)
        $cy1 = $y1;
    $this.$x02 = $x0;
    $this.$y02 = $y0;
    $this.$cx00 = $cx0;
    $this.$cy00 = $cy0;
    $this.$cx1 = $cx1;
    $this.$cy1 = $cy1;
    $this.$x13 = $x1;
    $this.$y13 = $y1;
    $this.$xmin1 = jl_Math_min0(jl_Math_min0($x0, $x1), jl_Math_min0($cx0, $cx1));
    $this.$xmax1 = jl_Math_max0(jl_Math_max0($x0, $x1), jl_Math_max0($cx0, $cx1));
    $this.$xcoeff00 = $x0;
    $this.$xcoeff10 = ($cx0 - $x0) * 3.0;
    $cx1 = $cx1 - $cx0;
    $this.$xcoeff20 = ($cx1 - $cx0 + $x0) * 3.0;
    $this.$xcoeff3 = $x1 - $cx1 * 3.0 - $x0;
    $this.$ycoeff00 = $y0;
    $this.$ycoeff10 = ($cy0 - $y0) * 3.0;
    $x0 = $cy1 - $cy0;
    $this.$ycoeff20 = ($x0 - $cy0 + $y0) * 3.0;
    $this.$ycoeff3 = $y1 - $x0 * 3.0 - $y0;
    $this.$YforT3 = $y0;
    $this.$YforT2 = $y0;
    $this.$YforT1 = $y0;
}
function csag_Order3_getOrder($this) {
    return 3;
}
function csag_Order3_getXTop($this) {
    return $this.$x02;
}
function csag_Order3_getYTop($this) {
    return $this.$y02;
}
function csag_Order3_getYBot($this) {
    return $this.$y13;
}
function csag_Order3_getXMin($this) {
    return $this.$xmin1;
}
function csag_Order3_getXMax($this) {
    return $this.$xmax1;
}
function csag_Order3_getX0($this) {
    return $this.$direction0 != 1 ? $this.$x13 : $this.$x02;
}
function csag_Order3_getY0($this) {
    return $this.$direction0 != 1 ? $this.$y13 : $this.$y02;
}
function csag_Order3_getCX0($this) {
    return $this.$direction0 != 1 ? $this.$cx1 : $this.$cx00;
}
function csag_Order3_getCY0($this) {
    return $this.$direction0 != 1 ? $this.$cy1 : $this.$cy00;
}
function csag_Order3_getCX1($this) {
    return $this.$direction0 != (-1) ? $this.$cx1 : $this.$cx00;
}
function csag_Order3_getCY1($this) {
    return $this.$direction0 != (-1) ? $this.$cy1 : $this.$cy00;
}
function csag_Order3_getX1($this) {
    return $this.$direction0 != (-1) ? $this.$x13 : $this.$x02;
}
function csag_Order3_getY1($this) {
    return $this.$direction0 != (-1) ? $this.$y13 : $this.$y02;
}
function csag_Order3_TforY($this, $y) {
    var $a, $b, $c, $Q, $R, $R2, $Q3, $a_3, $theta, $t, $neg, $S, $A, $t0, $t1;
    if ($y <= $this.$y02)
        return 0.0;
    if ($y >= $this.$y13)
        return 1.0;
    if ($y === $this.$YforT1)
        return $this.$TforY1;
    if ($y === $this.$YforT2)
        return $this.$TforY2;
    if ($y === $this.$YforT3)
        return $this.$TforY3;
    if ($this.$ycoeff3 === 0.0)
        return csag_Order2_TforY0($y, $this.$ycoeff00, $this.$ycoeff10, $this.$ycoeff20);
    $a = $this.$ycoeff20 / $this.$ycoeff3;
    $b = $this.$ycoeff10 / $this.$ycoeff3;
    $c = ($this.$ycoeff00 - $y) / $this.$ycoeff3;
    $Q = ($a * $a - 3.0 * $b) / 9.0;
    $R = (2.0 * $a * $a * $a - 9.0 * $a * $b + 27.0 * $c) / 54.0;
    $R2 = $R * $R;
    $Q3 = $Q * $Q * $Q;
    $a_3 = $a / 3.0;
    if ($R2 < $Q3) {
        $theta = jl_Math_acos($R / jl_Math_sqrt($Q3));
        $Q3 = (-2.0) * jl_Math_sqrt($Q);
        $t = csag_Order3_refine($this, $a, $b, $c, $y, $Q3 * jl_Math_cos($theta / 3.0) - $a_3);
        if ($t < 0.0)
            $t = csag_Order3_refine($this, $a, $b, $c, $y, $Q3 * jl_Math_cos(($theta + 6.283185307179586) / 3.0) - $a_3);
        if ($t < 0.0)
            $t = csag_Order3_refine($this, $a, $b, $c, $y, $Q3 * jl_Math_cos(($theta - 6.283185307179586) / 3.0) - $a_3);
    } else {
        $neg = $R >= 0.0 ? 0 : 1;
        $S = jl_Math_sqrt($R2 - $Q3);
        if ($neg)
            $R =  -$R;
        $A = jl_Math_pow($R + $S, 0.3333333333333333);
        if (!$neg)
            $A =  -$A;
        $t = csag_Order3_refine($this, $a, $b, $c, $y, $A + ($A !== 0.0 ? $Q / $A : 0.0) - $a_3);
    }
    a: {
        if ($t < 0.0) {
            $t0 = 0.0;
            $t1 = 1.0;
            while (true) {
                $t = ($t0 + $t1) / 2.0;
                if ($t === $t0)
                    break;
                if ($t === $t1)
                    break a;
                $neg = $rt_compare(csag_Order3_YforT($this, $t), $y);
                if ($neg >= 0) {
                    if ($neg <= 0)
                        break a;
                    $t1 = $t;
                    $t = $t0;
                }
                $t0 = $t;
            }
        }
    }
    if ($t >= 0.0) {
        $this.$TforY3 = $this.$TforY2;
        $this.$YforT3 = $this.$YforT2;
        $this.$TforY2 = $this.$TforY1;
        $this.$YforT2 = $this.$YforT1;
        $this.$TforY1 = $t;
        $this.$YforT1 = $y;
    }
    return $t;
}
function csag_Order3_refine($this, $a, $b, $c, $target, $t) {
    var $y, $t0, $t1, $useslope, $t2, $slope, var$12;
    if ($t >= (-0.1) && $t <= 1.1) {
        $y = csag_Order3_YforT($this, $t);
        if ($y >= $target) {
            $t0 = 0.0;
            $t1 = $t;
        } else {
            $t1 = 1.0;
            $t0 = $t;
        }
        $useslope = 1;
        a: {
            while ($y !== $target) {
                if (!$useslope) {
                    $t2 = ($t0 + $t1) / 2.0;
                    if ($t2 === $t0)
                        break a;
                    if ($t2 === $t1)
                        break a;
                } else {
                    $slope = csag_Order3_dYforT($this, $t, 1);
                    if ($slope === 0.0) {
                        $useslope = 0;
                        continue;
                    }
                    $t2 = $t + ($target - $y) / $slope;
                    if (!($t2 !== $t && $t2 > $t0 && $t2 < $t1)) {
                        $useslope = 0;
                        continue;
                    }
                }
                $y = csag_Order3_YforT($this, $t2);
                var$12 = $rt_compare($y, $target);
                if (var$12 < 0) {
                    $t0 = $t2;
                    $t = $t2;
                    continue;
                }
                if (var$12 <= 0) {
                    $t = $t2;
                    break a;
                }
                $t1 = $t2;
                $t = $t2;
            }
        }
        if ($t > 1.0)
            $t = (-1.0);
        return $t;
    }
    return (-1.0);
}
function csag_Order3_XforY($this, $y) {
    if ($y <= $this.$y02)
        return $this.$x02;
    if ($y >= $this.$y13)
        return $this.$x13;
    return csag_Order3_XforT($this, csag_Order3_TforY($this, $y));
}
function csag_Order3_XforT($this, $t) {
    return (($this.$xcoeff3 * $t + $this.$xcoeff20) * $t + $this.$xcoeff10) * $t + $this.$xcoeff00;
}
function csag_Order3_YforT($this, $t) {
    return (($this.$ycoeff3 * $t + $this.$ycoeff20) * $t + $this.$ycoeff10) * $t + $this.$ycoeff00;
}
function csag_Order3_dYforT($this, $t, $deriv) {
    switch ($deriv) {
        case 0:
            return (($this.$ycoeff3 * $t + $this.$ycoeff20) * $t + $this.$ycoeff10) * $t + $this.$ycoeff00;
        case 1:
            return (3.0 * $this.$ycoeff3 * $t + 2.0 * $this.$ycoeff20) * $t + $this.$ycoeff10;
        case 2:
            return 6.0 * $this.$ycoeff3 * $t + 2.0 * $this.$ycoeff20;
        case 3:
            return 6.0 * $this.$ycoeff3;
        default:
    }
    return 0.0;
}
function csag_Order3_nextVertical($this, $t0, $t1) {
    var $eqn, var$4, $numroots, $i;
    $eqn = $rt_createDoubleArray(3);
    var$4 = $eqn.data;
    var$4[0] = $this.$xcoeff10;
    var$4[1] = 2.0 * $this.$xcoeff20;
    var$4[2] = 3.0 * $this.$xcoeff3;
    $numroots = cjag_QuadCurve2D_solveQuadratic($eqn, $eqn);
    $i = 0;
    while ($i < $numroots) {
        if (var$4[$i] > $t0 && var$4[$i] < $t1)
            $t1 = var$4[$i];
        $i = $i + 1 | 0;
    }
    return $t1;
}
function csag_Order3_getSubCurve($this, $ystart, $yend, $dir) {
    var $eqn, var$5, $t0, $t1, var$8, $i;
    if ($ystart <= $this.$y02 && $yend >= $this.$y13)
        return csag_Curve_getWithDirection($this, $dir);
    $eqn = $rt_createDoubleArray(14);
    var$5 = $eqn.data;
    $t0 = csag_Order3_TforY($this, $ystart);
    $t1 = csag_Order3_TforY($this, $yend);
    var$5[0] = $this.$x02;
    var$5[1] = $this.$y02;
    var$5[2] = $this.$cx00;
    var$5[3] = $this.$cy00;
    var$5[4] = $this.$cx1;
    var$5[5] = $this.$cy1;
    var$5[6] = $this.$x13;
    var$5[7] = $this.$y13;
    if ($t0 <= $t1) {
        var$8 = $t1;
        $t1 = $t0;
        $t0 = var$8;
    }
    if ($t0 < 1.0)
        csag_Order3_split($eqn, 0, $t0);
    if ($t1 <= 0.0)
        $i = 0;
    else {
        csag_Order3_split($eqn, 0, $t1 / $t0);
        $i = 6;
    }
    return csag_Order3__init_(var$5[$i + 0 | 0], $ystart, var$5[$i + 2 | 0], var$5[$i + 3 | 0], var$5[$i + 4 | 0], var$5[$i + 5 | 0], var$5[$i + 6 | 0], $yend, $dir);
}
function csag_Order3_getReversedCurve($this) {
    return csag_Order3__init_($this.$x02, $this.$y02, $this.$cx00, $this.$cy00, $this.$cx1, $this.$cy1, $this.$x13, $this.$y13,  -$this.$direction0);
}
function csag_Order3_getSegment($this, $coords) {
    if ($this.$direction0 != 1) {
        $coords = $coords.data;
        $coords[0] = $this.$cx1;
        $coords[1] = $this.$cy1;
        $coords[2] = $this.$cx00;
        $coords[3] = $this.$cy00;
        $coords[4] = $this.$x02;
        $coords[5] = $this.$y02;
    } else {
        $coords = $coords.data;
        $coords[0] = $this.$cx00;
        $coords[1] = $this.$cy00;
        $coords[2] = $this.$cx1;
        $coords[3] = $this.$cy1;
        $coords[4] = $this.$x13;
        $coords[5] = $this.$y13;
    }
    return 3;
}
function csag_Order3_controlPointString($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(424));
    var$1 = jl_StringBuilder_append(var$1, csag_Order3_getCX0($this));
    jl_AbstractStringBuilder_append(var$1, $rt_s(91));
    var$1 = jl_StringBuilder_append(var$1, csag_Order3_getCY0($this));
    jl_AbstractStringBuilder_append(var$1, $rt_s(425));
    jl_AbstractStringBuilder_append(var$1, $rt_s(424));
    var$1 = jl_StringBuilder_append(var$1, csag_Order3_getCX1($this));
    jl_AbstractStringBuilder_append(var$1, $rt_s(91));
    var$1 = jl_StringBuilder_append(var$1, csag_Order3_getCY1($this));
    jl_AbstractStringBuilder_append(var$1, $rt_s(425));
    return jl_AbstractStringBuilder_toString(var$1);
}
function cjag_QuadCurve2D() {
    jl_Object.call(this);
}
function cjag_QuadCurve2D_solveQuadratic($eqn, $res) {
    var $a, $b, $c, var$6, $d, $q;
    $eqn = $eqn.data;
    $a = $eqn[2];
    $b = $eqn[1];
    $c = $eqn[0];
    if ($a === 0.0) {
        if ($b === 0.0)
            return (-1);
        $eqn = $res.data;
        var$6 = 1;
        $eqn[0] =  -$c / $b;
    } else {
        $d = $b * $b - 4.0 * $a * $c;
        if ($d < 0.0)
            return 0;
        $d = jl_Math_sqrt($d);
        if ($b < 0.0)
            $d =  -$d;
        $eqn = $res.data;
        $q = ($b + $d) / (-2.0);
        $eqn[0] = $q / $a;
        if ($q === 0.0)
            var$6 = 1;
        else {
            var$6 = 2;
            $eqn[1] = $c / $q;
        }
    }
    return var$6;
}
function csag_AreaOp$1() {
    jl_Object.call(this);
}
function csag_AreaOp$1_compare($this, $o1, $o2) {
    var $c1, $c2, var$5, var$6;
    $c1 = $o1.$curve;
    $c2 = $o2.$curve;
    var$5 = $c1.$getYTop();
    var$6 = $c2.$getYTop();
    if (var$5 === var$6) {
        var$5 = $c1.$getXTop();
        var$6 = $c2.$getXTop();
        if (var$5 === var$6)
            return 0;
    }
    if (var$5 >= var$6)
        return 1;
    return (-1);
}
function csag_CurveLink() {
    var a = this; jl_Object.call(a);
    a.$curve0 = null;
    a.$ytop = 0.0;
    a.$ybot = 0.0;
    a.$etag0 = 0;
    a.$next7 = null;
}
function csag_CurveLink__init_(var_0, var_1, var_2, var_3) {
    var var_4 = new csag_CurveLink();
    csag_CurveLink__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
}
function csag_CurveLink__init_0($this, $curve, $ystart, $yend, $etag) {
    var var$5, var$6;
    $this.$curve0 = $curve;
    $this.$ytop = $ystart;
    $this.$ybot = $yend;
    $this.$etag0 = $etag;
    if ($this.$ytop >= $curve.$getYTop() && $this.$ybot <= $curve.$getYBot())
        return;
    var$5 = new jl_RuntimeException;
    var$6 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$6);
    jl_AbstractStringBuilder_append(var$6, $rt_s(459));
    var$6 = jl_StringBuilder_append(var$6, $this.$ytop);
    jl_AbstractStringBuilder_append(var$6, $rt_s(430));
    var$6 = jl_StringBuilder_append(var$6, $this.$ybot);
    jl_AbstractStringBuilder_append(var$6, $rt_s(460));
    jl_Throwable__init_(var$5, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3(var$6, $curve)));
    $rt_throw(var$5);
}
function csag_CurveLink_absorb($this, $link) {
    return csag_CurveLink_absorb0($this, $link.$curve0, $link.$ytop, $link.$ybot, $link.$etag0);
}
function csag_CurveLink_absorb0($this, $curve, $ystart, $yend, $etag) {
    var var$5, var$6;
    if ($this.$curve0 === $curve && $this.$etag0 == $etag && $this.$ybot >= $ystart && $this.$ytop <= $yend) {
        if ($ystart >= $curve.$getYTop() && $yend <= $curve.$getYBot()) {
            $this.$ytop = jl_Math_min0($this.$ytop, $ystart);
            $this.$ybot = jl_Math_max0($this.$ybot, $yend);
            return 1;
        }
        var$5 = new jl_RuntimeException;
        var$6 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$6);
        jl_AbstractStringBuilder_append(var$6, $rt_s(459));
        var$6 = jl_StringBuilder_append(var$6, $ystart);
        jl_AbstractStringBuilder_append(var$6, $rt_s(430));
        var$6 = jl_StringBuilder_append(var$6, $yend);
        jl_AbstractStringBuilder_append(var$6, $rt_s(460));
        jl_Throwable__init_(var$5, jl_AbstractStringBuilder_toString(jl_StringBuilder_append3(var$6, $curve)));
        $rt_throw(var$5);
    }
    return 0;
}
function csag_CurveLink_getSubCurve($this) {
    if ($this.$ytop === $this.$curve0.$getYTop() && $this.$ybot === $this.$curve0.$getYBot())
        return csag_Curve_getWithDirection($this.$curve0, $this.$etag0);
    return $this.$curve0.$getSubCurve0($this.$ytop, $this.$ybot, $this.$etag0);
}
function csag_CurveLink_getMoveto($this) {
    return csag_Order0__init_(csag_CurveLink_getXTop($this), $this.$ytop);
}
function csag_CurveLink_getXTop($this) {
    return $this.$curve0.$XforY($this.$ytop);
}
function csag_CurveLink_getYTop($this) {
    return $this.$ytop;
}
function csag_CurveLink_getXBot($this) {
    return $this.$curve0.$XforY($this.$ybot);
}
function csag_CurveLink_getX($this) {
    return $this.$curve0.$XforY($this.$ytop);
}
function csag_CurveLink_getEdgeTag($this) {
    return $this.$etag0;
}
function csag_CurveLink_setNext($this, $link) {
    $this.$next7 = $link;
}
function csag_CurveLink_getNext($this) {
    return $this.$next7;
}
function csag_ChainEnd() {
    var a = this; jl_Object.call(a);
    a.$head = null;
    a.$tail = null;
    a.$partner = null;
    a.$etag1 = 0;
}
function csag_ChainEnd__init_(var_0, var_1) {
    var var_2 = new csag_ChainEnd();
    csag_ChainEnd__init_0(var_2, var_0, var_1);
    return var_2;
}
function csag_ChainEnd__init_0($this, $first, $partner) {
    $this.$head = $first;
    $this.$tail = $first;
    $this.$partner = $partner;
    $this.$etag1 = $first.$etag0;
}
function csag_ChainEnd_setOtherEnd($this, $partner) {
    $this.$partner = $partner;
}
function csag_ChainEnd_linkTo($this, $that) {
    var var$2, $exit, $otherenter, $otherexit;
    if ($this.$etag1 && $that.$etag1) {
        if ($this.$etag1 == $that.$etag1) {
            $that = new jl_RuntimeException;
            jl_Throwable__init_($that, $rt_s(461));
            $rt_throw($that);
        }
        if ($this.$etag1 != 1) {
            var$2 = $that;
            $exit = $this;
        } else {
            var$2 = $this;
            $exit = $that;
        }
        $this.$etag1 = 0;
        $that.$etag1 = 0;
        var$2.$tail.$next7 = $exit.$head;
        var$2.$tail = $exit.$tail;
        if ($this.$partner === $that)
            return var$2.$head;
        $otherenter = $exit.$partner;
        $otherexit = var$2.$partner;
        $otherenter.$partner = $otherexit;
        $otherexit.$partner = $otherenter;
        if (var$2.$head.$ytop >= $otherenter.$head.$ytop) {
            $otherexit.$tail.$next7 = var$2.$head;
            $otherexit.$tail = var$2.$tail;
        } else {
            var$2.$tail.$next7 = $otherenter.$head;
            $otherenter.$head = var$2.$head;
        }
        return null;
    }
    var$2 = new jl_RuntimeException;
    jl_Throwable__init_(var$2, $rt_s(462));
    $rt_throw(var$2);
}
function csag_ChainEnd_addLink($this, $newlink) {
    if ($this.$etag1 != 1) {
        $newlink.$next7 = $this.$head;
        $this.$head = $newlink;
    } else {
        $this.$tail.$next7 = $newlink;
        $this.$tail = $newlink;
    }
}
function csag_ChainEnd_getX($this) {
    if ($this.$etag1 != 1)
        return csag_CurveLink_getXBot($this.$head);
    return csag_CurveLink_getXBot($this.$tail);
}
function jur_BackReferencedSingleSet() {
    jur_SingleSet.call(this);
}
function jur_BackReferencedSingleSet_find($this, $startSearch, $testString, $matchResult) {
    var $res, $lastIndex, $saveStart;
    $res = 0;
    $lastIndex = $matchResult.$rightBound0;
    a: {
        while (true) {
            if ($startSearch > $lastIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $startSearch);
            $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $saveStart);
            $startSearch = $startSearch + 1 | 0;
        }
    }
    return $startSearch;
}
function jur_BackReferencedSingleSet_findBack($this, $stringIndex, $startSearch, $testString, $matchResult) {
    var $res, $saveStart;
    $res = 0;
    a: {
        while (true) {
            if ($startSearch < $stringIndex) {
                $startSearch = $res;
                break a;
            }
            $saveStart = jur_MatchResultImpl_getStart($matchResult, $this.$groupIndex0);
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $startSearch);
            $res = $this.$kid.$matches($startSearch, $testString, $matchResult);
            if ($res >= 0)
                break;
            jur_MatchResultImpl_setStart($matchResult, $this.$groupIndex0, $saveStart);
            $startSearch = $startSearch + (-1) | 0;
        }
    }
    return $startSearch;
}
function jur_BackReferencedSingleSet_processBackRefReplacement($this) {
    return null;
}
function ju_AbstractMap$KeySet() {
    ju_AbstractSet.call(this);
    this.$this$06 = null;
}
function ju_AbstractMap$KeySet_iterator($this) {
    var $iter, var$2;
    $iter = ju_TreeMap$EntrySet_iterator(ju_TreeMap_entrySet($this.$this$06));
    var$2 = new ju_AbstractMap$KeySet$1;
    var$2.$this$1 = $this;
    var$2.$val$iter = $iter;
    return var$2;
}
function ju_AbstractMap$KeySet_size($this) {
    return ju_TreeMap_size($this.$this$06);
}
function cjl_Character() {
    jl_Object.call(this);
}
var cjl_Character_bidiValues = null;
var cjl_Character_mirrored = null;
var cjl_Character_typeValues = null;
var cjl_Character_typeValuesCache = null;
var cjl_Character_uppercaseValues = null;
var cjl_Character_uppercaseValuesCache = null;
var cjl_Character_lowercaseValues = null;
var cjl_Character_lowercaseValuesCache = null;
var cjl_Character_digitValues = null;
var cjl_Character_typeTags = null;
var cjl_Character_DIRECTIONALITY = null;
var cjl_Character_titlecaseValues = null;
var cjl_Character_numericValues = null;
var cjl_Character_$assertionsDisabled = 0;
function cjl_Character__clinit_() {
    var var$1, var$2;
    cjl_Character_$assertionsDisabled = jl_Class_desiredAssertionStatus($rt_cls(cjl_Character)) ? 0 : 1;
    cjl_Character_bidiValues = jl_String_toCharArray($rt_s(463));
    cjl_Character_mirrored = jl_String_toCharArray($rt_s(464));
    cjl_Character_typeValues = jl_String_toCharArray($rt_s(465));
    var$1 = $rt_createIntArray(1000);
    var$2 = var$1.data;
    var$2[0] = 15;
    var$2[1] = 15;
    var$2[2] = 15;
    var$2[3] = 15;
    var$2[4] = 15;
    var$2[5] = 15;
    var$2[6] = 15;
    var$2[7] = 15;
    var$2[8] = 15;
    var$2[9] = 15;
    var$2[10] = 15;
    var$2[11] = 15;
    var$2[12] = 15;
    var$2[13] = 15;
    var$2[14] = 15;
    var$2[15] = 15;
    var$2[16] = 15;
    var$2[17] = 15;
    var$2[18] = 15;
    var$2[19] = 15;
    var$2[20] = 15;
    var$2[21] = 15;
    var$2[22] = 15;
    var$2[23] = 15;
    var$2[24] = 15;
    var$2[25] = 15;
    var$2[26] = 15;
    var$2[27] = 15;
    var$2[28] = 15;
    var$2[29] = 15;
    var$2[30] = 15;
    var$2[31] = 15;
    var$2[32] = 12;
    var$2[33] = 24;
    var$2[34] = 24;
    var$2[35] = 24;
    var$2[36] = 26;
    var$2[37] = 24;
    var$2[38] = 24;
    var$2[39] = 24;
    var$2[40] = 21;
    var$2[41] = 22;
    var$2[42] = 24;
    var$2[43] = 25;
    var$2[44] = 24;
    var$2[45] = 20;
    var$2[46] = 24;
    var$2[47] = 24;
    var$2[48] = 9;
    var$2[49] = 9;
    var$2[50] = 9;
    var$2[51] = 9;
    var$2[52] = 9;
    var$2[53] = 9;
    var$2[54] = 9;
    var$2[55] = 9;
    var$2[56] = 9;
    var$2[57] = 9;
    var$2[58] = 24;
    var$2[59] = 24;
    var$2[60] = 25;
    var$2[61] = 25;
    var$2[62] = 25;
    var$2[63] = 24;
    var$2[64] = 24;
    var$2[65] = 1;
    var$2[66] = 1;
    var$2[67] = 1;
    var$2[68] = 1;
    var$2[69] = 1;
    var$2[70] = 1;
    var$2[71] = 1;
    var$2[72] = 1;
    var$2[73] = 1;
    var$2[74] = 1;
    var$2[75] = 1;
    var$2[76] = 1;
    var$2[77] = 1;
    var$2[78] = 1;
    var$2[79] = 1;
    var$2[80] = 1;
    var$2[81] = 1;
    var$2[82] = 1;
    var$2[83] = 1;
    var$2[84] = 1;
    var$2[85] = 1;
    var$2[86] = 1;
    var$2[87] = 1;
    var$2[88] = 1;
    var$2[89] = 1;
    var$2[90] = 1;
    var$2[91] = 21;
    var$2[92] = 24;
    var$2[93] = 22;
    var$2[94] = 27;
    var$2[95] = 23;
    var$2[96] = 27;
    var$2[97] = 2;
    var$2[98] = 2;
    var$2[99] = 2;
    var$2[100] = 2;
    var$2[101] = 2;
    var$2[102] = 2;
    var$2[103] = 2;
    var$2[104] = 2;
    var$2[105] = 2;
    var$2[106] = 2;
    var$2[107] = 2;
    var$2[108] = 2;
    var$2[109] = 2;
    var$2[110] = 2;
    var$2[111] = 2;
    var$2[112] = 2;
    var$2[113] = 2;
    var$2[114] = 2;
    var$2[115] = 2;
    var$2[116] = 2;
    var$2[117] = 2;
    var$2[118] = 2;
    var$2[119] = 2;
    var$2[120] = 2;
    var$2[121] = 2;
    var$2[122] = 2;
    var$2[123] = 21;
    var$2[124] = 25;
    var$2[125] = 22;
    var$2[126] = 25;
    var$2[127] = 15;
    var$2[128] = 15;
    var$2[129] = 15;
    var$2[130] = 15;
    var$2[131] = 15;
    var$2[132] = 15;
    var$2[133] = 15;
    var$2[134] = 15;
    var$2[135] = 15;
    var$2[136] = 15;
    var$2[137] = 15;
    var$2[138] = 15;
    var$2[139] = 15;
    var$2[140] = 15;
    var$2[141] = 15;
    var$2[142] = 15;
    var$2[143] = 15;
    var$2[144] = 15;
    var$2[145] = 15;
    var$2[146] = 15;
    var$2[147] = 15;
    var$2[148] = 15;
    var$2[149] = 15;
    var$2[150] = 15;
    var$2[151] = 15;
    var$2[152] = 15;
    var$2[153] = 15;
    var$2[154] = 15;
    var$2[155] = 15;
    var$2[156] = 15;
    var$2[157] = 15;
    var$2[158] = 15;
    var$2[159] = 15;
    var$2[160] = 12;
    var$2[161] = 24;
    var$2[162] = 26;
    var$2[163] = 26;
    var$2[164] = 26;
    var$2[165] = 26;
    var$2[166] = 28;
    var$2[167] = 28;
    var$2[168] = 27;
    var$2[169] = 28;
    var$2[170] = 2;
    var$2[171] = 29;
    var$2[172] = 25;
    var$2[173] = 16;
    var$2[174] = 28;
    var$2[175] = 27;
    var$2[176] = 28;
    var$2[177] = 25;
    var$2[178] = 11;
    var$2[179] = 11;
    var$2[180] = 27;
    var$2[181] = 2;
    var$2[182] = 28;
    var$2[183] = 24;
    var$2[184] = 27;
    var$2[185] = 11;
    var$2[186] = 2;
    var$2[187] = 30;
    var$2[188] = 11;
    var$2[189] = 11;
    var$2[190] = 11;
    var$2[191] = 24;
    var$2[192] = 1;
    var$2[193] = 1;
    var$2[194] = 1;
    var$2[195] = 1;
    var$2[196] = 1;
    var$2[197] = 1;
    var$2[198] = 1;
    var$2[199] = 1;
    var$2[200] = 1;
    var$2[201] = 1;
    var$2[202] = 1;
    var$2[203] = 1;
    var$2[204] = 1;
    var$2[205] = 1;
    var$2[206] = 1;
    var$2[207] = 1;
    var$2[208] = 1;
    var$2[209] = 1;
    var$2[210] = 1;
    var$2[211] = 1;
    var$2[212] = 1;
    var$2[213] = 1;
    var$2[214] = 1;
    var$2[215] = 25;
    var$2[216] = 1;
    var$2[217] = 1;
    var$2[218] = 1;
    var$2[219] = 1;
    var$2[220] = 1;
    var$2[221] = 1;
    var$2[222] = 1;
    var$2[223] = 2;
    var$2[224] = 2;
    var$2[225] = 2;
    var$2[226] = 2;
    var$2[227] = 2;
    var$2[228] = 2;
    var$2[229] = 2;
    var$2[230] = 2;
    var$2[231] = 2;
    var$2[232] = 2;
    var$2[233] = 2;
    var$2[234] = 2;
    var$2[235] = 2;
    var$2[236] = 2;
    var$2[237] = 2;
    var$2[238] = 2;
    var$2[239] = 2;
    var$2[240] = 2;
    var$2[241] = 2;
    var$2[242] = 2;
    var$2[243] = 2;
    var$2[244] = 2;
    var$2[245] = 2;
    var$2[246] = 2;
    var$2[247] = 25;
    var$2[248] = 2;
    var$2[249] = 2;
    var$2[250] = 2;
    var$2[251] = 2;
    var$2[252] = 2;
    var$2[253] = 2;
    var$2[254] = 2;
    var$2[255] = 2;
    var$2[256] = 1;
    var$2[257] = 2;
    var$2[258] = 1;
    var$2[259] = 2;
    var$2[260] = 1;
    var$2[261] = 2;
    var$2[262] = 1;
    var$2[263] = 2;
    var$2[264] = 1;
    var$2[265] = 2;
    var$2[266] = 1;
    var$2[267] = 2;
    var$2[268] = 1;
    var$2[269] = 2;
    var$2[270] = 1;
    var$2[271] = 2;
    var$2[272] = 1;
    var$2[273] = 2;
    var$2[274] = 1;
    var$2[275] = 2;
    var$2[276] = 1;
    var$2[277] = 2;
    var$2[278] = 1;
    var$2[279] = 2;
    var$2[280] = 1;
    var$2[281] = 2;
    var$2[282] = 1;
    var$2[283] = 2;
    var$2[284] = 1;
    var$2[285] = 2;
    var$2[286] = 1;
    var$2[287] = 2;
    var$2[288] = 1;
    var$2[289] = 2;
    var$2[290] = 1;
    var$2[291] = 2;
    var$2[292] = 1;
    var$2[293] = 2;
    var$2[294] = 1;
    var$2[295] = 2;
    var$2[296] = 1;
    var$2[297] = 2;
    var$2[298] = 1;
    var$2[299] = 2;
    var$2[300] = 1;
    var$2[301] = 2;
    var$2[302] = 1;
    var$2[303] = 2;
    var$2[304] = 1;
    var$2[305] = 2;
    var$2[306] = 1;
    var$2[307] = 2;
    var$2[308] = 1;
    var$2[309] = 2;
    var$2[310] = 1;
    var$2[311] = 2;
    var$2[312] = 2;
    var$2[313] = 1;
    var$2[314] = 2;
    var$2[315] = 1;
    var$2[316] = 2;
    var$2[317] = 1;
    var$2[318] = 2;
    var$2[319] = 1;
    var$2[320] = 2;
    var$2[321] = 1;
    var$2[322] = 2;
    var$2[323] = 1;
    var$2[324] = 2;
    var$2[325] = 1;
    var$2[326] = 2;
    var$2[327] = 1;
    var$2[328] = 2;
    var$2[329] = 2;
    var$2[330] = 1;
    var$2[331] = 2;
    var$2[332] = 1;
    var$2[333] = 2;
    var$2[334] = 1;
    var$2[335] = 2;
    var$2[336] = 1;
    var$2[337] = 2;
    var$2[338] = 1;
    var$2[339] = 2;
    var$2[340] = 1;
    var$2[341] = 2;
    var$2[342] = 1;
    var$2[343] = 2;
    var$2[344] = 1;
    var$2[345] = 2;
    var$2[346] = 1;
    var$2[347] = 2;
    var$2[348] = 1;
    var$2[349] = 2;
    var$2[350] = 1;
    var$2[351] = 2;
    var$2[352] = 1;
    var$2[353] = 2;
    var$2[354] = 1;
    var$2[355] = 2;
    var$2[356] = 1;
    var$2[357] = 2;
    var$2[358] = 1;
    var$2[359] = 2;
    var$2[360] = 1;
    var$2[361] = 2;
    var$2[362] = 1;
    var$2[363] = 2;
    var$2[364] = 1;
    var$2[365] = 2;
    var$2[366] = 1;
    var$2[367] = 2;
    var$2[368] = 1;
    var$2[369] = 2;
    var$2[370] = 1;
    var$2[371] = 2;
    var$2[372] = 1;
    var$2[373] = 2;
    var$2[374] = 1;
    var$2[375] = 2;
    var$2[376] = 1;
    var$2[377] = 1;
    var$2[378] = 2;
    var$2[379] = 1;
    var$2[380] = 2;
    var$2[381] = 1;
    var$2[382] = 2;
    var$2[383] = 2;
    var$2[384] = 2;
    var$2[385] = 1;
    var$2[386] = 1;
    var$2[387] = 2;
    var$2[388] = 1;
    var$2[389] = 2;
    var$2[390] = 1;
    var$2[391] = 1;
    var$2[392] = 2;
    var$2[393] = 1;
    var$2[394] = 1;
    var$2[395] = 1;
    var$2[396] = 2;
    var$2[397] = 2;
    var$2[398] = 1;
    var$2[399] = 1;
    var$2[400] = 1;
    var$2[401] = 1;
    var$2[402] = 2;
    var$2[403] = 1;
    var$2[404] = 1;
    var$2[405] = 2;
    var$2[406] = 1;
    var$2[407] = 1;
    var$2[408] = 1;
    var$2[409] = 2;
    var$2[410] = 2;
    var$2[411] = 2;
    var$2[412] = 1;
    var$2[413] = 1;
    var$2[414] = 2;
    var$2[415] = 1;
    var$2[416] = 1;
    var$2[417] = 2;
    var$2[418] = 1;
    var$2[419] = 2;
    var$2[420] = 1;
    var$2[421] = 2;
    var$2[422] = 1;
    var$2[423] = 1;
    var$2[424] = 2;
    var$2[425] = 1;
    var$2[426] = 2;
    var$2[427] = 2;
    var$2[428] = 1;
    var$2[429] = 2;
    var$2[430] = 1;
    var$2[431] = 1;
    var$2[432] = 2;
    var$2[433] = 1;
    var$2[434] = 1;
    var$2[435] = 1;
    var$2[436] = 2;
    var$2[437] = 1;
    var$2[438] = 2;
    var$2[439] = 1;
    var$2[440] = 1;
    var$2[441] = 2;
    var$2[442] = 2;
    var$2[443] = 5;
    var$2[444] = 1;
    var$2[445] = 2;
    var$2[446] = 2;
    var$2[447] = 2;
    var$2[448] = 5;
    var$2[449] = 5;
    var$2[450] = 5;
    var$2[451] = 5;
    var$2[452] = 1;
    var$2[453] = 3;
    var$2[454] = 2;
    var$2[455] = 1;
    var$2[456] = 3;
    var$2[457] = 2;
    var$2[458] = 1;
    var$2[459] = 3;
    var$2[460] = 2;
    var$2[461] = 1;
    var$2[462] = 2;
    var$2[463] = 1;
    var$2[464] = 2;
    var$2[465] = 1;
    var$2[466] = 2;
    var$2[467] = 1;
    var$2[468] = 2;
    var$2[469] = 1;
    var$2[470] = 2;
    var$2[471] = 1;
    var$2[472] = 2;
    var$2[473] = 1;
    var$2[474] = 2;
    var$2[475] = 1;
    var$2[476] = 2;
    var$2[477] = 2;
    var$2[478] = 1;
    var$2[479] = 2;
    var$2[480] = 1;
    var$2[481] = 2;
    var$2[482] = 1;
    var$2[483] = 2;
    var$2[484] = 1;
    var$2[485] = 2;
    var$2[486] = 1;
    var$2[487] = 2;
    var$2[488] = 1;
    var$2[489] = 2;
    var$2[490] = 1;
    var$2[491] = 2;
    var$2[492] = 1;
    var$2[493] = 2;
    var$2[494] = 1;
    var$2[495] = 2;
    var$2[496] = 2;
    var$2[497] = 1;
    var$2[498] = 3;
    var$2[499] = 2;
    var$2[500] = 1;
    var$2[501] = 2;
    var$2[502] = 1;
    var$2[503] = 1;
    var$2[504] = 1;
    var$2[505] = 2;
    var$2[506] = 1;
    var$2[507] = 2;
    var$2[508] = 1;
    var$2[509] = 2;
    var$2[510] = 1;
    var$2[511] = 2;
    var$2[512] = 1;
    var$2[513] = 2;
    var$2[514] = 1;
    var$2[515] = 2;
    var$2[516] = 1;
    var$2[517] = 2;
    var$2[518] = 1;
    var$2[519] = 2;
    var$2[520] = 1;
    var$2[521] = 2;
    var$2[522] = 1;
    var$2[523] = 2;
    var$2[524] = 1;
    var$2[525] = 2;
    var$2[526] = 1;
    var$2[527] = 2;
    var$2[528] = 1;
    var$2[529] = 2;
    var$2[530] = 1;
    var$2[531] = 2;
    var$2[532] = 1;
    var$2[533] = 2;
    var$2[534] = 1;
    var$2[535] = 2;
    var$2[536] = 1;
    var$2[537] = 2;
    var$2[538] = 1;
    var$2[539] = 2;
    var$2[540] = 1;
    var$2[541] = 2;
    var$2[542] = 1;
    var$2[543] = 2;
    var$2[544] = 1;
    var$2[545] = 2;
    var$2[546] = 1;
    var$2[547] = 2;
    var$2[548] = 1;
    var$2[549] = 2;
    var$2[550] = 1;
    var$2[551] = 2;
    var$2[552] = 1;
    var$2[553] = 2;
    var$2[554] = 1;
    var$2[555] = 2;
    var$2[556] = 1;
    var$2[557] = 2;
    var$2[558] = 1;
    var$2[559] = 2;
    var$2[560] = 1;
    var$2[561] = 2;
    var$2[562] = 1;
    var$2[563] = 2;
    var$2[564] = 2;
    var$2[565] = 2;
    var$2[566] = 2;
    var$2[567] = 0;
    var$2[568] = 0;
    var$2[569] = 0;
    var$2[570] = 0;
    var$2[571] = 0;
    var$2[572] = 0;
    var$2[573] = 0;
    var$2[574] = 0;
    var$2[575] = 0;
    var$2[576] = 0;
    var$2[577] = 0;
    var$2[578] = 0;
    var$2[579] = 0;
    var$2[580] = 0;
    var$2[581] = 0;
    var$2[582] = 0;
    var$2[583] = 0;
    var$2[584] = 0;
    var$2[585] = 0;
    var$2[586] = 0;
    var$2[587] = 0;
    var$2[588] = 0;
    var$2[589] = 0;
    var$2[590] = 0;
    var$2[591] = 0;
    var$2[592] = 2;
    var$2[593] = 2;
    var$2[594] = 2;
    var$2[595] = 2;
    var$2[596] = 2;
    var$2[597] = 2;
    var$2[598] = 2;
    var$2[599] = 2;
    var$2[600] = 2;
    var$2[601] = 2;
    var$2[602] = 2;
    var$2[603] = 2;
    var$2[604] = 2;
    var$2[605] = 2;
    var$2[606] = 2;
    var$2[607] = 2;
    var$2[608] = 2;
    var$2[609] = 2;
    var$2[610] = 2;
    var$2[611] = 2;
    var$2[612] = 2;
    var$2[613] = 2;
    var$2[614] = 2;
    var$2[615] = 2;
    var$2[616] = 2;
    var$2[617] = 2;
    var$2[618] = 2;
    var$2[619] = 2;
    var$2[620] = 2;
    var$2[621] = 2;
    var$2[622] = 2;
    var$2[623] = 2;
    var$2[624] = 2;
    var$2[625] = 2;
    var$2[626] = 2;
    var$2[627] = 2;
    var$2[628] = 2;
    var$2[629] = 2;
    var$2[630] = 2;
    var$2[631] = 2;
    var$2[632] = 2;
    var$2[633] = 2;
    var$2[634] = 2;
    var$2[635] = 2;
    var$2[636] = 2;
    var$2[637] = 2;
    var$2[638] = 2;
    var$2[639] = 2;
    var$2[640] = 2;
    var$2[641] = 2;
    var$2[642] = 2;
    var$2[643] = 2;
    var$2[644] = 2;
    var$2[645] = 2;
    var$2[646] = 2;
    var$2[647] = 2;
    var$2[648] = 2;
    var$2[649] = 2;
    var$2[650] = 2;
    var$2[651] = 2;
    var$2[652] = 2;
    var$2[653] = 2;
    var$2[654] = 2;
    var$2[655] = 2;
    var$2[656] = 2;
    var$2[657] = 2;
    var$2[658] = 2;
    var$2[659] = 2;
    var$2[660] = 2;
    var$2[661] = 2;
    var$2[662] = 2;
    var$2[663] = 2;
    var$2[664] = 2;
    var$2[665] = 2;
    var$2[666] = 2;
    var$2[667] = 2;
    var$2[668] = 2;
    var$2[669] = 2;
    var$2[670] = 2;
    var$2[671] = 2;
    var$2[672] = 2;
    var$2[673] = 2;
    var$2[674] = 2;
    var$2[675] = 2;
    var$2[676] = 2;
    var$2[677] = 2;
    var$2[678] = 2;
    var$2[679] = 2;
    var$2[680] = 2;
    var$2[681] = 2;
    var$2[682] = 2;
    var$2[683] = 2;
    var$2[684] = 2;
    var$2[685] = 2;
    var$2[686] = 2;
    var$2[687] = 2;
    var$2[688] = 4;
    var$2[689] = 4;
    var$2[690] = 4;
    var$2[691] = 4;
    var$2[692] = 4;
    var$2[693] = 4;
    var$2[694] = 4;
    var$2[695] = 4;
    var$2[696] = 4;
    var$2[697] = 4;
    var$2[698] = 4;
    var$2[699] = 4;
    var$2[700] = 4;
    var$2[701] = 4;
    var$2[702] = 4;
    var$2[703] = 4;
    var$2[704] = 4;
    var$2[705] = 4;
    var$2[706] = 27;
    var$2[707] = 27;
    var$2[708] = 27;
    var$2[709] = 27;
    var$2[710] = 4;
    var$2[711] = 4;
    var$2[712] = 4;
    var$2[713] = 4;
    var$2[714] = 4;
    var$2[715] = 4;
    var$2[716] = 4;
    var$2[717] = 4;
    var$2[718] = 4;
    var$2[719] = 4;
    var$2[720] = 4;
    var$2[721] = 4;
    var$2[722] = 27;
    var$2[723] = 27;
    var$2[724] = 27;
    var$2[725] = 27;
    var$2[726] = 27;
    var$2[727] = 27;
    var$2[728] = 27;
    var$2[729] = 27;
    var$2[730] = 27;
    var$2[731] = 27;
    var$2[732] = 27;
    var$2[733] = 27;
    var$2[734] = 27;
    var$2[735] = 27;
    var$2[736] = 4;
    var$2[737] = 4;
    var$2[738] = 4;
    var$2[739] = 4;
    var$2[740] = 4;
    var$2[741] = 27;
    var$2[742] = 27;
    var$2[743] = 27;
    var$2[744] = 27;
    var$2[745] = 27;
    var$2[746] = 27;
    var$2[747] = 27;
    var$2[748] = 27;
    var$2[749] = 27;
    var$2[750] = 4;
    var$2[751] = 27;
    var$2[752] = 27;
    var$2[753] = 27;
    var$2[754] = 27;
    var$2[755] = 27;
    var$2[756] = 27;
    var$2[757] = 27;
    var$2[758] = 27;
    var$2[759] = 27;
    var$2[760] = 27;
    var$2[761] = 27;
    var$2[762] = 27;
    var$2[763] = 27;
    var$2[764] = 27;
    var$2[765] = 27;
    var$2[766] = 27;
    var$2[767] = 27;
    var$2[768] = 6;
    var$2[769] = 6;
    var$2[770] = 6;
    var$2[771] = 6;
    var$2[772] = 6;
    var$2[773] = 6;
    var$2[774] = 6;
    var$2[775] = 6;
    var$2[776] = 6;
    var$2[777] = 6;
    var$2[778] = 6;
    var$2[779] = 6;
    var$2[780] = 6;
    var$2[781] = 6;
    var$2[782] = 6;
    var$2[783] = 6;
    var$2[784] = 6;
    var$2[785] = 6;
    var$2[786] = 6;
    var$2[787] = 6;
    var$2[788] = 6;
    var$2[789] = 6;
    var$2[790] = 6;
    var$2[791] = 6;
    var$2[792] = 6;
    var$2[793] = 6;
    var$2[794] = 6;
    var$2[795] = 6;
    var$2[796] = 6;
    var$2[797] = 6;
    var$2[798] = 6;
    var$2[799] = 6;
    var$2[800] = 6;
    var$2[801] = 6;
    var$2[802] = 6;
    var$2[803] = 6;
    var$2[804] = 6;
    var$2[805] = 6;
    var$2[806] = 6;
    var$2[807] = 6;
    var$2[808] = 6;
    var$2[809] = 6;
    var$2[810] = 6;
    var$2[811] = 6;
    var$2[812] = 6;
    var$2[813] = 6;
    var$2[814] = 6;
    var$2[815] = 6;
    var$2[816] = 6;
    var$2[817] = 6;
    var$2[818] = 6;
    var$2[819] = 6;
    var$2[820] = 6;
    var$2[821] = 6;
    var$2[822] = 6;
    var$2[823] = 6;
    var$2[824] = 6;
    var$2[825] = 6;
    var$2[826] = 6;
    var$2[827] = 6;
    var$2[828] = 6;
    var$2[829] = 6;
    var$2[830] = 6;
    var$2[831] = 6;
    var$2[832] = 6;
    var$2[833] = 6;
    var$2[834] = 6;
    var$2[835] = 6;
    var$2[836] = 6;
    var$2[837] = 6;
    var$2[838] = 6;
    var$2[839] = 6;
    var$2[840] = 6;
    var$2[841] = 6;
    var$2[842] = 6;
    var$2[843] = 6;
    var$2[844] = 6;
    var$2[845] = 6;
    var$2[846] = 6;
    var$2[847] = 6;
    var$2[848] = 6;
    var$2[849] = 6;
    var$2[850] = 6;
    var$2[851] = 6;
    var$2[852] = 6;
    var$2[853] = 6;
    var$2[854] = 6;
    var$2[855] = 6;
    var$2[856] = 0;
    var$2[857] = 0;
    var$2[858] = 0;
    var$2[859] = 0;
    var$2[860] = 0;
    var$2[861] = 6;
    var$2[862] = 6;
    var$2[863] = 6;
    var$2[864] = 6;
    var$2[865] = 6;
    var$2[866] = 6;
    var$2[867] = 6;
    var$2[868] = 6;
    var$2[869] = 6;
    var$2[870] = 6;
    var$2[871] = 6;
    var$2[872] = 6;
    var$2[873] = 6;
    var$2[874] = 6;
    var$2[875] = 6;
    var$2[876] = 6;
    var$2[877] = 6;
    var$2[878] = 6;
    var$2[879] = 6;
    var$2[880] = 0;
    var$2[881] = 0;
    var$2[882] = 0;
    var$2[883] = 0;
    var$2[884] = 27;
    var$2[885] = 27;
    var$2[886] = 0;
    var$2[887] = 0;
    var$2[888] = 0;
    var$2[889] = 0;
    var$2[890] = 4;
    var$2[891] = 0;
    var$2[892] = 0;
    var$2[893] = 0;
    var$2[894] = 24;
    var$2[895] = 0;
    var$2[896] = 0;
    var$2[897] = 0;
    var$2[898] = 0;
    var$2[899] = 0;
    var$2[900] = 27;
    var$2[901] = 27;
    var$2[902] = 1;
    var$2[903] = 24;
    var$2[904] = 1;
    var$2[905] = 1;
    var$2[906] = 1;
    var$2[907] = 0;
    var$2[908] = 1;
    var$2[909] = 0;
    var$2[910] = 1;
    var$2[911] = 1;
    var$2[912] = 2;
    var$2[913] = 1;
    var$2[914] = 1;
    var$2[915] = 1;
    var$2[916] = 1;
    var$2[917] = 1;
    var$2[918] = 1;
    var$2[919] = 1;
    var$2[920] = 1;
    var$2[921] = 1;
    var$2[922] = 1;
    var$2[923] = 1;
    var$2[924] = 1;
    var$2[925] = 1;
    var$2[926] = 1;
    var$2[927] = 1;
    var$2[928] = 1;
    var$2[929] = 1;
    var$2[930] = 0;
    var$2[931] = 1;
    var$2[932] = 1;
    var$2[933] = 1;
    var$2[934] = 1;
    var$2[935] = 1;
    var$2[936] = 1;
    var$2[937] = 1;
    var$2[938] = 1;
    var$2[939] = 1;
    var$2[940] = 2;
    var$2[941] = 2;
    var$2[942] = 2;
    var$2[943] = 2;
    var$2[944] = 2;
    var$2[945] = 2;
    var$2[946] = 2;
    var$2[947] = 2;
    var$2[948] = 2;
    var$2[949] = 2;
    var$2[950] = 2;
    var$2[951] = 2;
    var$2[952] = 2;
    var$2[953] = 2;
    var$2[954] = 2;
    var$2[955] = 2;
    var$2[956] = 2;
    var$2[957] = 2;
    var$2[958] = 2;
    var$2[959] = 2;
    var$2[960] = 2;
    var$2[961] = 2;
    var$2[962] = 2;
    var$2[963] = 2;
    var$2[964] = 2;
    var$2[965] = 2;
    var$2[966] = 2;
    var$2[967] = 2;
    var$2[968] = 2;
    var$2[969] = 2;
    var$2[970] = 2;
    var$2[971] = 2;
    var$2[972] = 2;
    var$2[973] = 2;
    var$2[974] = 2;
    var$2[975] = 0;
    var$2[976] = 2;
    var$2[977] = 2;
    var$2[978] = 1;
    var$2[979] = 1;
    var$2[980] = 1;
    var$2[981] = 2;
    var$2[982] = 2;
    var$2[983] = 2;
    var$2[984] = 1;
    var$2[985] = 2;
    var$2[986] = 1;
    var$2[987] = 2;
    var$2[988] = 1;
    var$2[989] = 2;
    var$2[990] = 1;
    var$2[991] = 2;
    var$2[992] = 1;
    var$2[993] = 2;
    var$2[994] = 1;
    var$2[995] = 2;
    var$2[996] = 1;
    var$2[997] = 2;
    var$2[998] = 1;
    var$2[999] = 2;
    cjl_Character_typeValuesCache = var$1;
    cjl_Character_uppercaseValues = jl_String_toCharArray($rt_s(466));
    var$1 = $rt_createIntArray(819);
    var$2 = var$1.data;
    var$2[0] = 924;
    var$2[1] = 182;
    var$2[2] = 183;
    var$2[3] = 184;
    var$2[4] = 185;
    var$2[5] = 186;
    var$2[6] = 187;
    var$2[7] = 188;
    var$2[8] = 189;
    var$2[9] = 190;
    var$2[10] = 191;
    var$2[11] = 192;
    var$2[12] = 193;
    var$2[13] = 194;
    var$2[14] = 195;
    var$2[15] = 196;
    var$2[16] = 197;
    var$2[17] = 198;
    var$2[18] = 199;
    var$2[19] = 200;
    var$2[20] = 201;
    var$2[21] = 202;
    var$2[22] = 203;
    var$2[23] = 204;
    var$2[24] = 205;
    var$2[25] = 206;
    var$2[26] = 207;
    var$2[27] = 208;
    var$2[28] = 209;
    var$2[29] = 210;
    var$2[30] = 211;
    var$2[31] = 212;
    var$2[32] = 213;
    var$2[33] = 214;
    var$2[34] = 215;
    var$2[35] = 216;
    var$2[36] = 217;
    var$2[37] = 218;
    var$2[38] = 219;
    var$2[39] = 220;
    var$2[40] = 221;
    var$2[41] = 222;
    var$2[42] = 223;
    var$2[43] = 192;
    var$2[44] = 193;
    var$2[45] = 194;
    var$2[46] = 195;
    var$2[47] = 196;
    var$2[48] = 197;
    var$2[49] = 198;
    var$2[50] = 199;
    var$2[51] = 200;
    var$2[52] = 201;
    var$2[53] = 202;
    var$2[54] = 203;
    var$2[55] = 204;
    var$2[56] = 205;
    var$2[57] = 206;
    var$2[58] = 207;
    var$2[59] = 208;
    var$2[60] = 209;
    var$2[61] = 210;
    var$2[62] = 211;
    var$2[63] = 212;
    var$2[64] = 213;
    var$2[65] = 214;
    var$2[66] = 247;
    var$2[67] = 216;
    var$2[68] = 217;
    var$2[69] = 218;
    var$2[70] = 219;
    var$2[71] = 220;
    var$2[72] = 221;
    var$2[73] = 222;
    var$2[74] = 376;
    var$2[75] = 256;
    var$2[76] = 256;
    var$2[77] = 258;
    var$2[78] = 258;
    var$2[79] = 260;
    var$2[80] = 260;
    var$2[81] = 262;
    var$2[82] = 262;
    var$2[83] = 264;
    var$2[84] = 264;
    var$2[85] = 266;
    var$2[86] = 266;
    var$2[87] = 268;
    var$2[88] = 268;
    var$2[89] = 270;
    var$2[90] = 270;
    var$2[91] = 272;
    var$2[92] = 272;
    var$2[93] = 274;
    var$2[94] = 274;
    var$2[95] = 276;
    var$2[96] = 276;
    var$2[97] = 278;
    var$2[98] = 278;
    var$2[99] = 280;
    var$2[100] = 280;
    var$2[101] = 282;
    var$2[102] = 282;
    var$2[103] = 284;
    var$2[104] = 284;
    var$2[105] = 286;
    var$2[106] = 286;
    var$2[107] = 288;
    var$2[108] = 288;
    var$2[109] = 290;
    var$2[110] = 290;
    var$2[111] = 292;
    var$2[112] = 292;
    var$2[113] = 294;
    var$2[114] = 294;
    var$2[115] = 296;
    var$2[116] = 296;
    var$2[117] = 298;
    var$2[118] = 298;
    var$2[119] = 300;
    var$2[120] = 300;
    var$2[121] = 302;
    var$2[122] = 302;
    var$2[123] = 304;
    var$2[124] = 73;
    var$2[125] = 306;
    var$2[126] = 306;
    var$2[127] = 308;
    var$2[128] = 308;
    var$2[129] = 310;
    var$2[130] = 310;
    var$2[131] = 312;
    var$2[132] = 313;
    var$2[133] = 313;
    var$2[134] = 315;
    var$2[135] = 315;
    var$2[136] = 317;
    var$2[137] = 317;
    var$2[138] = 319;
    var$2[139] = 319;
    var$2[140] = 321;
    var$2[141] = 321;
    var$2[142] = 323;
    var$2[143] = 323;
    var$2[144] = 325;
    var$2[145] = 325;
    var$2[146] = 327;
    var$2[147] = 327;
    var$2[148] = 329;
    var$2[149] = 330;
    var$2[150] = 330;
    var$2[151] = 332;
    var$2[152] = 332;
    var$2[153] = 334;
    var$2[154] = 334;
    var$2[155] = 336;
    var$2[156] = 336;
    var$2[157] = 338;
    var$2[158] = 338;
    var$2[159] = 340;
    var$2[160] = 340;
    var$2[161] = 342;
    var$2[162] = 342;
    var$2[163] = 344;
    var$2[164] = 344;
    var$2[165] = 346;
    var$2[166] = 346;
    var$2[167] = 348;
    var$2[168] = 348;
    var$2[169] = 350;
    var$2[170] = 350;
    var$2[171] = 352;
    var$2[172] = 352;
    var$2[173] = 354;
    var$2[174] = 354;
    var$2[175] = 356;
    var$2[176] = 356;
    var$2[177] = 358;
    var$2[178] = 358;
    var$2[179] = 360;
    var$2[180] = 360;
    var$2[181] = 362;
    var$2[182] = 362;
    var$2[183] = 364;
    var$2[184] = 364;
    var$2[185] = 366;
    var$2[186] = 366;
    var$2[187] = 368;
    var$2[188] = 368;
    var$2[189] = 370;
    var$2[190] = 370;
    var$2[191] = 372;
    var$2[192] = 372;
    var$2[193] = 374;
    var$2[194] = 374;
    var$2[195] = 376;
    var$2[196] = 377;
    var$2[197] = 377;
    var$2[198] = 379;
    var$2[199] = 379;
    var$2[200] = 381;
    var$2[201] = 381;
    var$2[202] = 83;
    var$2[203] = 384;
    var$2[204] = 385;
    var$2[205] = 386;
    var$2[206] = 386;
    var$2[207] = 388;
    var$2[208] = 388;
    var$2[209] = 390;
    var$2[210] = 391;
    var$2[211] = 391;
    var$2[212] = 393;
    var$2[213] = 394;
    var$2[214] = 395;
    var$2[215] = 395;
    var$2[216] = 397;
    var$2[217] = 398;
    var$2[218] = 399;
    var$2[219] = 400;
    var$2[220] = 401;
    var$2[221] = 401;
    var$2[222] = 403;
    var$2[223] = 404;
    var$2[224] = 502;
    var$2[225] = 406;
    var$2[226] = 407;
    var$2[227] = 408;
    var$2[228] = 408;
    var$2[229] = 410;
    var$2[230] = 411;
    var$2[231] = 412;
    var$2[232] = 413;
    var$2[233] = 544;
    var$2[234] = 415;
    var$2[235] = 416;
    var$2[236] = 416;
    var$2[237] = 418;
    var$2[238] = 418;
    var$2[239] = 420;
    var$2[240] = 420;
    var$2[241] = 422;
    var$2[242] = 423;
    var$2[243] = 423;
    var$2[244] = 425;
    var$2[245] = 426;
    var$2[246] = 427;
    var$2[247] = 428;
    var$2[248] = 428;
    var$2[249] = 430;
    var$2[250] = 431;
    var$2[251] = 431;
    var$2[252] = 433;
    var$2[253] = 434;
    var$2[254] = 435;
    var$2[255] = 435;
    var$2[256] = 437;
    var$2[257] = 437;
    var$2[258] = 439;
    var$2[259] = 440;
    var$2[260] = 440;
    var$2[261] = 442;
    var$2[262] = 443;
    var$2[263] = 444;
    var$2[264] = 444;
    var$2[265] = 446;
    var$2[266] = 503;
    var$2[267] = 448;
    var$2[268] = 449;
    var$2[269] = 450;
    var$2[270] = 451;
    var$2[271] = 452;
    var$2[272] = 452;
    var$2[273] = 452;
    var$2[274] = 455;
    var$2[275] = 455;
    var$2[276] = 455;
    var$2[277] = 458;
    var$2[278] = 458;
    var$2[279] = 458;
    var$2[280] = 461;
    var$2[281] = 461;
    var$2[282] = 463;
    var$2[283] = 463;
    var$2[284] = 465;
    var$2[285] = 465;
    var$2[286] = 467;
    var$2[287] = 467;
    var$2[288] = 469;
    var$2[289] = 469;
    var$2[290] = 471;
    var$2[291] = 471;
    var$2[292] = 473;
    var$2[293] = 473;
    var$2[294] = 475;
    var$2[295] = 475;
    var$2[296] = 398;
    var$2[297] = 478;
    var$2[298] = 478;
    var$2[299] = 480;
    var$2[300] = 480;
    var$2[301] = 482;
    var$2[302] = 482;
    var$2[303] = 484;
    var$2[304] = 484;
    var$2[305] = 486;
    var$2[306] = 486;
    var$2[307] = 488;
    var$2[308] = 488;
    var$2[309] = 490;
    var$2[310] = 490;
    var$2[311] = 492;
    var$2[312] = 492;
    var$2[313] = 494;
    var$2[314] = 494;
    var$2[315] = 496;
    var$2[316] = 497;
    var$2[317] = 497;
    var$2[318] = 497;
    var$2[319] = 500;
    var$2[320] = 500;
    var$2[321] = 502;
    var$2[322] = 503;
    var$2[323] = 504;
    var$2[324] = 504;
    var$2[325] = 506;
    var$2[326] = 506;
    var$2[327] = 508;
    var$2[328] = 508;
    var$2[329] = 510;
    var$2[330] = 510;
    var$2[331] = 512;
    var$2[332] = 512;
    var$2[333] = 514;
    var$2[334] = 514;
    var$2[335] = 516;
    var$2[336] = 516;
    var$2[337] = 518;
    var$2[338] = 518;
    var$2[339] = 520;
    var$2[340] = 520;
    var$2[341] = 522;
    var$2[342] = 522;
    var$2[343] = 524;
    var$2[344] = 524;
    var$2[345] = 526;
    var$2[346] = 526;
    var$2[347] = 528;
    var$2[348] = 528;
    var$2[349] = 530;
    var$2[350] = 530;
    var$2[351] = 532;
    var$2[352] = 532;
    var$2[353] = 534;
    var$2[354] = 534;
    var$2[355] = 536;
    var$2[356] = 536;
    var$2[357] = 538;
    var$2[358] = 538;
    var$2[359] = 540;
    var$2[360] = 540;
    var$2[361] = 542;
    var$2[362] = 542;
    var$2[363] = 544;
    var$2[364] = 545;
    var$2[365] = 546;
    var$2[366] = 546;
    var$2[367] = 548;
    var$2[368] = 548;
    var$2[369] = 550;
    var$2[370] = 550;
    var$2[371] = 552;
    var$2[372] = 552;
    var$2[373] = 554;
    var$2[374] = 554;
    var$2[375] = 556;
    var$2[376] = 556;
    var$2[377] = 558;
    var$2[378] = 558;
    var$2[379] = 560;
    var$2[380] = 560;
    var$2[381] = 562;
    var$2[382] = 562;
    var$2[383] = 564;
    var$2[384] = 565;
    var$2[385] = 566;
    var$2[386] = 567;
    var$2[387] = 568;
    var$2[388] = 569;
    var$2[389] = 570;
    var$2[390] = 571;
    var$2[391] = 572;
    var$2[392] = 573;
    var$2[393] = 574;
    var$2[394] = 575;
    var$2[395] = 576;
    var$2[396] = 577;
    var$2[397] = 578;
    var$2[398] = 579;
    var$2[399] = 580;
    var$2[400] = 581;
    var$2[401] = 582;
    var$2[402] = 583;
    var$2[403] = 584;
    var$2[404] = 585;
    var$2[405] = 586;
    var$2[406] = 587;
    var$2[407] = 588;
    var$2[408] = 589;
    var$2[409] = 590;
    var$2[410] = 591;
    var$2[411] = 592;
    var$2[412] = 593;
    var$2[413] = 594;
    var$2[414] = 385;
    var$2[415] = 390;
    var$2[416] = 597;
    var$2[417] = 393;
    var$2[418] = 394;
    var$2[419] = 600;
    var$2[420] = 399;
    var$2[421] = 602;
    var$2[422] = 400;
    var$2[423] = 604;
    var$2[424] = 605;
    var$2[425] = 606;
    var$2[426] = 607;
    var$2[427] = 403;
    var$2[428] = 609;
    var$2[429] = 610;
    var$2[430] = 404;
    var$2[431] = 612;
    var$2[432] = 613;
    var$2[433] = 614;
    var$2[434] = 615;
    var$2[435] = 407;
    var$2[436] = 406;
    var$2[437] = 618;
    var$2[438] = 619;
    var$2[439] = 620;
    var$2[440] = 621;
    var$2[441] = 622;
    var$2[442] = 412;
    var$2[443] = 624;
    var$2[444] = 625;
    var$2[445] = 413;
    var$2[446] = 627;
    var$2[447] = 628;
    var$2[448] = 415;
    var$2[449] = 630;
    var$2[450] = 631;
    var$2[451] = 632;
    var$2[452] = 633;
    var$2[453] = 634;
    var$2[454] = 635;
    var$2[455] = 636;
    var$2[456] = 637;
    var$2[457] = 638;
    var$2[458] = 639;
    var$2[459] = 422;
    var$2[460] = 641;
    var$2[461] = 642;
    var$2[462] = 425;
    var$2[463] = 644;
    var$2[464] = 645;
    var$2[465] = 646;
    var$2[466] = 647;
    var$2[467] = 430;
    var$2[468] = 649;
    var$2[469] = 433;
    var$2[470] = 434;
    var$2[471] = 652;
    var$2[472] = 653;
    var$2[473] = 654;
    var$2[474] = 655;
    var$2[475] = 656;
    var$2[476] = 657;
    var$2[477] = 439;
    var$2[478] = 659;
    var$2[479] = 660;
    var$2[480] = 661;
    var$2[481] = 662;
    var$2[482] = 663;
    var$2[483] = 664;
    var$2[484] = 665;
    var$2[485] = 666;
    var$2[486] = 667;
    var$2[487] = 668;
    var$2[488] = 669;
    var$2[489] = 670;
    var$2[490] = 671;
    var$2[491] = 672;
    var$2[492] = 673;
    var$2[493] = 674;
    var$2[494] = 675;
    var$2[495] = 676;
    var$2[496] = 677;
    var$2[497] = 678;
    var$2[498] = 679;
    var$2[499] = 680;
    var$2[500] = 681;
    var$2[501] = 682;
    var$2[502] = 683;
    var$2[503] = 684;
    var$2[504] = 685;
    var$2[505] = 686;
    var$2[506] = 687;
    var$2[507] = 688;
    var$2[508] = 689;
    var$2[509] = 690;
    var$2[510] = 691;
    var$2[511] = 692;
    var$2[512] = 693;
    var$2[513] = 694;
    var$2[514] = 695;
    var$2[515] = 696;
    var$2[516] = 697;
    var$2[517] = 698;
    var$2[518] = 699;
    var$2[519] = 700;
    var$2[520] = 701;
    var$2[521] = 702;
    var$2[522] = 703;
    var$2[523] = 704;
    var$2[524] = 705;
    var$2[525] = 706;
    var$2[526] = 707;
    var$2[527] = 708;
    var$2[528] = 709;
    var$2[529] = 710;
    var$2[530] = 711;
    var$2[531] = 712;
    var$2[532] = 713;
    var$2[533] = 714;
    var$2[534] = 715;
    var$2[535] = 716;
    var$2[536] = 717;
    var$2[537] = 718;
    var$2[538] = 719;
    var$2[539] = 720;
    var$2[540] = 721;
    var$2[541] = 722;
    var$2[542] = 723;
    var$2[543] = 724;
    var$2[544] = 725;
    var$2[545] = 726;
    var$2[546] = 727;
    var$2[547] = 728;
    var$2[548] = 729;
    var$2[549] = 730;
    var$2[550] = 731;
    var$2[551] = 732;
    var$2[552] = 733;
    var$2[553] = 734;
    var$2[554] = 735;
    var$2[555] = 736;
    var$2[556] = 737;
    var$2[557] = 738;
    var$2[558] = 739;
    var$2[559] = 740;
    var$2[560] = 741;
    var$2[561] = 742;
    var$2[562] = 743;
    var$2[563] = 744;
    var$2[564] = 745;
    var$2[565] = 746;
    var$2[566] = 747;
    var$2[567] = 748;
    var$2[568] = 749;
    var$2[569] = 750;
    var$2[570] = 751;
    var$2[571] = 752;
    var$2[572] = 753;
    var$2[573] = 754;
    var$2[574] = 755;
    var$2[575] = 756;
    var$2[576] = 757;
    var$2[577] = 758;
    var$2[578] = 759;
    var$2[579] = 760;
    var$2[580] = 761;
    var$2[581] = 762;
    var$2[582] = 763;
    var$2[583] = 764;
    var$2[584] = 765;
    var$2[585] = 766;
    var$2[586] = 767;
    var$2[587] = 768;
    var$2[588] = 769;
    var$2[589] = 770;
    var$2[590] = 771;
    var$2[591] = 772;
    var$2[592] = 773;
    var$2[593] = 774;
    var$2[594] = 775;
    var$2[595] = 776;
    var$2[596] = 777;
    var$2[597] = 778;
    var$2[598] = 779;
    var$2[599] = 780;
    var$2[600] = 781;
    var$2[601] = 782;
    var$2[602] = 783;
    var$2[603] = 784;
    var$2[604] = 785;
    var$2[605] = 786;
    var$2[606] = 787;
    var$2[607] = 788;
    var$2[608] = 789;
    var$2[609] = 790;
    var$2[610] = 791;
    var$2[611] = 792;
    var$2[612] = 793;
    var$2[613] = 794;
    var$2[614] = 795;
    var$2[615] = 796;
    var$2[616] = 797;
    var$2[617] = 798;
    var$2[618] = 799;
    var$2[619] = 800;
    var$2[620] = 801;
    var$2[621] = 802;
    var$2[622] = 803;
    var$2[623] = 804;
    var$2[624] = 805;
    var$2[625] = 806;
    var$2[626] = 807;
    var$2[627] = 808;
    var$2[628] = 809;
    var$2[629] = 810;
    var$2[630] = 811;
    var$2[631] = 812;
    var$2[632] = 813;
    var$2[633] = 814;
    var$2[634] = 815;
    var$2[635] = 816;
    var$2[636] = 817;
    var$2[637] = 818;
    var$2[638] = 819;
    var$2[639] = 820;
    var$2[640] = 821;
    var$2[641] = 822;
    var$2[642] = 823;
    var$2[643] = 824;
    var$2[644] = 825;
    var$2[645] = 826;
    var$2[646] = 827;
    var$2[647] = 828;
    var$2[648] = 829;
    var$2[649] = 830;
    var$2[650] = 831;
    var$2[651] = 832;
    var$2[652] = 833;
    var$2[653] = 834;
    var$2[654] = 835;
    var$2[655] = 836;
    var$2[656] = 921;
    var$2[657] = 838;
    var$2[658] = 839;
    var$2[659] = 840;
    var$2[660] = 841;
    var$2[661] = 842;
    var$2[662] = 843;
    var$2[663] = 844;
    var$2[664] = 845;
    var$2[665] = 846;
    var$2[666] = 847;
    var$2[667] = 848;
    var$2[668] = 849;
    var$2[669] = 850;
    var$2[670] = 851;
    var$2[671] = 852;
    var$2[672] = 853;
    var$2[673] = 854;
    var$2[674] = 855;
    var$2[675] = 856;
    var$2[676] = 857;
    var$2[677] = 858;
    var$2[678] = 859;
    var$2[679] = 860;
    var$2[680] = 861;
    var$2[681] = 862;
    var$2[682] = 863;
    var$2[683] = 864;
    var$2[684] = 865;
    var$2[685] = 866;
    var$2[686] = 867;
    var$2[687] = 868;
    var$2[688] = 869;
    var$2[689] = 870;
    var$2[690] = 871;
    var$2[691] = 872;
    var$2[692] = 873;
    var$2[693] = 874;
    var$2[694] = 875;
    var$2[695] = 876;
    var$2[696] = 877;
    var$2[697] = 878;
    var$2[698] = 879;
    var$2[699] = 880;
    var$2[700] = 881;
    var$2[701] = 882;
    var$2[702] = 883;
    var$2[703] = 884;
    var$2[704] = 885;
    var$2[705] = 886;
    var$2[706] = 887;
    var$2[707] = 888;
    var$2[708] = 889;
    var$2[709] = 890;
    var$2[710] = 891;
    var$2[711] = 892;
    var$2[712] = 893;
    var$2[713] = 894;
    var$2[714] = 895;
    var$2[715] = 896;
    var$2[716] = 897;
    var$2[717] = 898;
    var$2[718] = 899;
    var$2[719] = 900;
    var$2[720] = 901;
    var$2[721] = 902;
    var$2[722] = 903;
    var$2[723] = 904;
    var$2[724] = 905;
    var$2[725] = 906;
    var$2[726] = 907;
    var$2[727] = 908;
    var$2[728] = 909;
    var$2[729] = 910;
    var$2[730] = 911;
    var$2[731] = 912;
    var$2[732] = 913;
    var$2[733] = 914;
    var$2[734] = 915;
    var$2[735] = 916;
    var$2[736] = 917;
    var$2[737] = 918;
    var$2[738] = 919;
    var$2[739] = 920;
    var$2[740] = 921;
    var$2[741] = 922;
    var$2[742] = 923;
    var$2[743] = 924;
    var$2[744] = 925;
    var$2[745] = 926;
    var$2[746] = 927;
    var$2[747] = 928;
    var$2[748] = 929;
    var$2[749] = 930;
    var$2[750] = 931;
    var$2[751] = 932;
    var$2[752] = 933;
    var$2[753] = 934;
    var$2[754] = 935;
    var$2[755] = 936;
    var$2[756] = 937;
    var$2[757] = 938;
    var$2[758] = 939;
    var$2[759] = 902;
    var$2[760] = 904;
    var$2[761] = 905;
    var$2[762] = 906;
    var$2[763] = 944;
    var$2[764] = 913;
    var$2[765] = 914;
    var$2[766] = 915;
    var$2[767] = 916;
    var$2[768] = 917;
    var$2[769] = 918;
    var$2[770] = 919;
    var$2[771] = 920;
    var$2[772] = 921;
    var$2[773] = 922;
    var$2[774] = 923;
    var$2[775] = 924;
    var$2[776] = 925;
    var$2[777] = 926;
    var$2[778] = 927;
    var$2[779] = 928;
    var$2[780] = 929;
    var$2[781] = 931;
    var$2[782] = 931;
    var$2[783] = 932;
    var$2[784] = 933;
    var$2[785] = 934;
    var$2[786] = 935;
    var$2[787] = 936;
    var$2[788] = 937;
    var$2[789] = 938;
    var$2[790] = 939;
    var$2[791] = 908;
    var$2[792] = 910;
    var$2[793] = 911;
    var$2[794] = 975;
    var$2[795] = 914;
    var$2[796] = 920;
    var$2[797] = 978;
    var$2[798] = 979;
    var$2[799] = 980;
    var$2[800] = 934;
    var$2[801] = 928;
    var$2[802] = 983;
    var$2[803] = 984;
    var$2[804] = 984;
    var$2[805] = 986;
    var$2[806] = 986;
    var$2[807] = 988;
    var$2[808] = 988;
    var$2[809] = 990;
    var$2[810] = 990;
    var$2[811] = 992;
    var$2[812] = 992;
    var$2[813] = 994;
    var$2[814] = 994;
    var$2[815] = 996;
    var$2[816] = 996;
    var$2[817] = 998;
    var$2[818] = 998;
    cjl_Character_uppercaseValuesCache = var$1;
    cjl_Character_lowercaseValues = jl_String_toCharArray($rt_s(467));
    var$1 = $rt_createIntArray(808);
    var$2 = var$1.data;
    var$2[0] = 224;
    var$2[1] = 225;
    var$2[2] = 226;
    var$2[3] = 227;
    var$2[4] = 228;
    var$2[5] = 229;
    var$2[6] = 230;
    var$2[7] = 231;
    var$2[8] = 232;
    var$2[9] = 233;
    var$2[10] = 234;
    var$2[11] = 235;
    var$2[12] = 236;
    var$2[13] = 237;
    var$2[14] = 238;
    var$2[15] = 239;
    var$2[16] = 240;
    var$2[17] = 241;
    var$2[18] = 242;
    var$2[19] = 243;
    var$2[20] = 244;
    var$2[21] = 245;
    var$2[22] = 246;
    var$2[23] = 215;
    var$2[24] = 248;
    var$2[25] = 249;
    var$2[26] = 250;
    var$2[27] = 251;
    var$2[28] = 252;
    var$2[29] = 253;
    var$2[30] = 254;
    var$2[31] = 223;
    var$2[32] = 224;
    var$2[33] = 225;
    var$2[34] = 226;
    var$2[35] = 227;
    var$2[36] = 228;
    var$2[37] = 229;
    var$2[38] = 230;
    var$2[39] = 231;
    var$2[40] = 232;
    var$2[41] = 233;
    var$2[42] = 234;
    var$2[43] = 235;
    var$2[44] = 236;
    var$2[45] = 237;
    var$2[46] = 238;
    var$2[47] = 239;
    var$2[48] = 240;
    var$2[49] = 241;
    var$2[50] = 242;
    var$2[51] = 243;
    var$2[52] = 244;
    var$2[53] = 245;
    var$2[54] = 246;
    var$2[55] = 247;
    var$2[56] = 248;
    var$2[57] = 249;
    var$2[58] = 250;
    var$2[59] = 251;
    var$2[60] = 252;
    var$2[61] = 253;
    var$2[62] = 254;
    var$2[63] = 255;
    var$2[64] = 257;
    var$2[65] = 257;
    var$2[66] = 259;
    var$2[67] = 259;
    var$2[68] = 261;
    var$2[69] = 261;
    var$2[70] = 263;
    var$2[71] = 263;
    var$2[72] = 265;
    var$2[73] = 265;
    var$2[74] = 267;
    var$2[75] = 267;
    var$2[76] = 269;
    var$2[77] = 269;
    var$2[78] = 271;
    var$2[79] = 271;
    var$2[80] = 273;
    var$2[81] = 273;
    var$2[82] = 275;
    var$2[83] = 275;
    var$2[84] = 277;
    var$2[85] = 277;
    var$2[86] = 279;
    var$2[87] = 279;
    var$2[88] = 281;
    var$2[89] = 281;
    var$2[90] = 283;
    var$2[91] = 283;
    var$2[92] = 285;
    var$2[93] = 285;
    var$2[94] = 287;
    var$2[95] = 287;
    var$2[96] = 289;
    var$2[97] = 289;
    var$2[98] = 291;
    var$2[99] = 291;
    var$2[100] = 293;
    var$2[101] = 293;
    var$2[102] = 295;
    var$2[103] = 295;
    var$2[104] = 297;
    var$2[105] = 297;
    var$2[106] = 299;
    var$2[107] = 299;
    var$2[108] = 301;
    var$2[109] = 301;
    var$2[110] = 303;
    var$2[111] = 303;
    var$2[112] = 105;
    var$2[113] = 305;
    var$2[114] = 307;
    var$2[115] = 307;
    var$2[116] = 309;
    var$2[117] = 309;
    var$2[118] = 311;
    var$2[119] = 311;
    var$2[120] = 312;
    var$2[121] = 314;
    var$2[122] = 314;
    var$2[123] = 316;
    var$2[124] = 316;
    var$2[125] = 318;
    var$2[126] = 318;
    var$2[127] = 320;
    var$2[128] = 320;
    var$2[129] = 322;
    var$2[130] = 322;
    var$2[131] = 324;
    var$2[132] = 324;
    var$2[133] = 326;
    var$2[134] = 326;
    var$2[135] = 328;
    var$2[136] = 328;
    var$2[137] = 329;
    var$2[138] = 331;
    var$2[139] = 331;
    var$2[140] = 333;
    var$2[141] = 333;
    var$2[142] = 335;
    var$2[143] = 335;
    var$2[144] = 337;
    var$2[145] = 337;
    var$2[146] = 339;
    var$2[147] = 339;
    var$2[148] = 341;
    var$2[149] = 341;
    var$2[150] = 343;
    var$2[151] = 343;
    var$2[152] = 345;
    var$2[153] = 345;
    var$2[154] = 347;
    var$2[155] = 347;
    var$2[156] = 349;
    var$2[157] = 349;
    var$2[158] = 351;
    var$2[159] = 351;
    var$2[160] = 353;
    var$2[161] = 353;
    var$2[162] = 355;
    var$2[163] = 355;
    var$2[164] = 357;
    var$2[165] = 357;
    var$2[166] = 359;
    var$2[167] = 359;
    var$2[168] = 361;
    var$2[169] = 361;
    var$2[170] = 363;
    var$2[171] = 363;
    var$2[172] = 365;
    var$2[173] = 365;
    var$2[174] = 367;
    var$2[175] = 367;
    var$2[176] = 369;
    var$2[177] = 369;
    var$2[178] = 371;
    var$2[179] = 371;
    var$2[180] = 373;
    var$2[181] = 373;
    var$2[182] = 375;
    var$2[183] = 375;
    var$2[184] = 255;
    var$2[185] = 378;
    var$2[186] = 378;
    var$2[187] = 380;
    var$2[188] = 380;
    var$2[189] = 382;
    var$2[190] = 382;
    var$2[191] = 383;
    var$2[192] = 384;
    var$2[193] = 595;
    var$2[194] = 387;
    var$2[195] = 387;
    var$2[196] = 389;
    var$2[197] = 389;
    var$2[198] = 596;
    var$2[199] = 392;
    var$2[200] = 392;
    var$2[201] = 598;
    var$2[202] = 599;
    var$2[203] = 396;
    var$2[204] = 396;
    var$2[205] = 397;
    var$2[206] = 477;
    var$2[207] = 601;
    var$2[208] = 603;
    var$2[209] = 402;
    var$2[210] = 402;
    var$2[211] = 608;
    var$2[212] = 611;
    var$2[213] = 405;
    var$2[214] = 617;
    var$2[215] = 616;
    var$2[216] = 409;
    var$2[217] = 409;
    var$2[218] = 410;
    var$2[219] = 411;
    var$2[220] = 623;
    var$2[221] = 626;
    var$2[222] = 414;
    var$2[223] = 629;
    var$2[224] = 417;
    var$2[225] = 417;
    var$2[226] = 419;
    var$2[227] = 419;
    var$2[228] = 421;
    var$2[229] = 421;
    var$2[230] = 640;
    var$2[231] = 424;
    var$2[232] = 424;
    var$2[233] = 643;
    var$2[234] = 426;
    var$2[235] = 427;
    var$2[236] = 429;
    var$2[237] = 429;
    var$2[238] = 648;
    var$2[239] = 432;
    var$2[240] = 432;
    var$2[241] = 650;
    var$2[242] = 651;
    var$2[243] = 436;
    var$2[244] = 436;
    var$2[245] = 438;
    var$2[246] = 438;
    var$2[247] = 658;
    var$2[248] = 441;
    var$2[249] = 441;
    var$2[250] = 442;
    var$2[251] = 443;
    var$2[252] = 445;
    var$2[253] = 445;
    var$2[254] = 446;
    var$2[255] = 447;
    var$2[256] = 448;
    var$2[257] = 449;
    var$2[258] = 450;
    var$2[259] = 451;
    var$2[260] = 454;
    var$2[261] = 454;
    var$2[262] = 454;
    var$2[263] = 457;
    var$2[264] = 457;
    var$2[265] = 457;
    var$2[266] = 460;
    var$2[267] = 460;
    var$2[268] = 460;
    var$2[269] = 462;
    var$2[270] = 462;
    var$2[271] = 464;
    var$2[272] = 464;
    var$2[273] = 466;
    var$2[274] = 466;
    var$2[275] = 468;
    var$2[276] = 468;
    var$2[277] = 470;
    var$2[278] = 470;
    var$2[279] = 472;
    var$2[280] = 472;
    var$2[281] = 474;
    var$2[282] = 474;
    var$2[283] = 476;
    var$2[284] = 476;
    var$2[285] = 477;
    var$2[286] = 479;
    var$2[287] = 479;
    var$2[288] = 481;
    var$2[289] = 481;
    var$2[290] = 483;
    var$2[291] = 483;
    var$2[292] = 485;
    var$2[293] = 485;
    var$2[294] = 487;
    var$2[295] = 487;
    var$2[296] = 489;
    var$2[297] = 489;
    var$2[298] = 491;
    var$2[299] = 491;
    var$2[300] = 493;
    var$2[301] = 493;
    var$2[302] = 495;
    var$2[303] = 495;
    var$2[304] = 496;
    var$2[305] = 499;
    var$2[306] = 499;
    var$2[307] = 499;
    var$2[308] = 501;
    var$2[309] = 501;
    var$2[310] = 405;
    var$2[311] = 447;
    var$2[312] = 505;
    var$2[313] = 505;
    var$2[314] = 507;
    var$2[315] = 507;
    var$2[316] = 509;
    var$2[317] = 509;
    var$2[318] = 511;
    var$2[319] = 511;
    var$2[320] = 513;
    var$2[321] = 513;
    var$2[322] = 515;
    var$2[323] = 515;
    var$2[324] = 517;
    var$2[325] = 517;
    var$2[326] = 519;
    var$2[327] = 519;
    var$2[328] = 521;
    var$2[329] = 521;
    var$2[330] = 523;
    var$2[331] = 523;
    var$2[332] = 525;
    var$2[333] = 525;
    var$2[334] = 527;
    var$2[335] = 527;
    var$2[336] = 529;
    var$2[337] = 529;
    var$2[338] = 531;
    var$2[339] = 531;
    var$2[340] = 533;
    var$2[341] = 533;
    var$2[342] = 535;
    var$2[343] = 535;
    var$2[344] = 537;
    var$2[345] = 537;
    var$2[346] = 539;
    var$2[347] = 539;
    var$2[348] = 541;
    var$2[349] = 541;
    var$2[350] = 543;
    var$2[351] = 543;
    var$2[352] = 414;
    var$2[353] = 545;
    var$2[354] = 547;
    var$2[355] = 547;
    var$2[356] = 549;
    var$2[357] = 549;
    var$2[358] = 551;
    var$2[359] = 551;
    var$2[360] = 553;
    var$2[361] = 553;
    var$2[362] = 555;
    var$2[363] = 555;
    var$2[364] = 557;
    var$2[365] = 557;
    var$2[366] = 559;
    var$2[367] = 559;
    var$2[368] = 561;
    var$2[369] = 561;
    var$2[370] = 563;
    var$2[371] = 563;
    var$2[372] = 564;
    var$2[373] = 565;
    var$2[374] = 566;
    var$2[375] = 567;
    var$2[376] = 568;
    var$2[377] = 569;
    var$2[378] = 570;
    var$2[379] = 571;
    var$2[380] = 572;
    var$2[381] = 573;
    var$2[382] = 574;
    var$2[383] = 575;
    var$2[384] = 576;
    var$2[385] = 577;
    var$2[386] = 578;
    var$2[387] = 579;
    var$2[388] = 580;
    var$2[389] = 581;
    var$2[390] = 582;
    var$2[391] = 583;
    var$2[392] = 584;
    var$2[393] = 585;
    var$2[394] = 586;
    var$2[395] = 587;
    var$2[396] = 588;
    var$2[397] = 589;
    var$2[398] = 590;
    var$2[399] = 591;
    var$2[400] = 592;
    var$2[401] = 593;
    var$2[402] = 594;
    var$2[403] = 595;
    var$2[404] = 596;
    var$2[405] = 597;
    var$2[406] = 598;
    var$2[407] = 599;
    var$2[408] = 600;
    var$2[409] = 601;
    var$2[410] = 602;
    var$2[411] = 603;
    var$2[412] = 604;
    var$2[413] = 605;
    var$2[414] = 606;
    var$2[415] = 607;
    var$2[416] = 608;
    var$2[417] = 609;
    var$2[418] = 610;
    var$2[419] = 611;
    var$2[420] = 612;
    var$2[421] = 613;
    var$2[422] = 614;
    var$2[423] = 615;
    var$2[424] = 616;
    var$2[425] = 617;
    var$2[426] = 618;
    var$2[427] = 619;
    var$2[428] = 620;
    var$2[429] = 621;
    var$2[430] = 622;
    var$2[431] = 623;
    var$2[432] = 624;
    var$2[433] = 625;
    var$2[434] = 626;
    var$2[435] = 627;
    var$2[436] = 628;
    var$2[437] = 629;
    var$2[438] = 630;
    var$2[439] = 631;
    var$2[440] = 632;
    var$2[441] = 633;
    var$2[442] = 634;
    var$2[443] = 635;
    var$2[444] = 636;
    var$2[445] = 637;
    var$2[446] = 638;
    var$2[447] = 639;
    var$2[448] = 640;
    var$2[449] = 641;
    var$2[450] = 642;
    var$2[451] = 643;
    var$2[452] = 644;
    var$2[453] = 645;
    var$2[454] = 646;
    var$2[455] = 647;
    var$2[456] = 648;
    var$2[457] = 649;
    var$2[458] = 650;
    var$2[459] = 651;
    var$2[460] = 652;
    var$2[461] = 653;
    var$2[462] = 654;
    var$2[463] = 655;
    var$2[464] = 656;
    var$2[465] = 657;
    var$2[466] = 658;
    var$2[467] = 659;
    var$2[468] = 660;
    var$2[469] = 661;
    var$2[470] = 662;
    var$2[471] = 663;
    var$2[472] = 664;
    var$2[473] = 665;
    var$2[474] = 666;
    var$2[475] = 667;
    var$2[476] = 668;
    var$2[477] = 669;
    var$2[478] = 670;
    var$2[479] = 671;
    var$2[480] = 672;
    var$2[481] = 673;
    var$2[482] = 674;
    var$2[483] = 675;
    var$2[484] = 676;
    var$2[485] = 677;
    var$2[486] = 678;
    var$2[487] = 679;
    var$2[488] = 680;
    var$2[489] = 681;
    var$2[490] = 682;
    var$2[491] = 683;
    var$2[492] = 684;
    var$2[493] = 685;
    var$2[494] = 686;
    var$2[495] = 687;
    var$2[496] = 688;
    var$2[497] = 689;
    var$2[498] = 690;
    var$2[499] = 691;
    var$2[500] = 692;
    var$2[501] = 693;
    var$2[502] = 694;
    var$2[503] = 695;
    var$2[504] = 696;
    var$2[505] = 697;
    var$2[506] = 698;
    var$2[507] = 699;
    var$2[508] = 700;
    var$2[509] = 701;
    var$2[510] = 702;
    var$2[511] = 703;
    var$2[512] = 704;
    var$2[513] = 705;
    var$2[514] = 706;
    var$2[515] = 707;
    var$2[516] = 708;
    var$2[517] = 709;
    var$2[518] = 710;
    var$2[519] = 711;
    var$2[520] = 712;
    var$2[521] = 713;
    var$2[522] = 714;
    var$2[523] = 715;
    var$2[524] = 716;
    var$2[525] = 717;
    var$2[526] = 718;
    var$2[527] = 719;
    var$2[528] = 720;
    var$2[529] = 721;
    var$2[530] = 722;
    var$2[531] = 723;
    var$2[532] = 724;
    var$2[533] = 725;
    var$2[534] = 726;
    var$2[535] = 727;
    var$2[536] = 728;
    var$2[537] = 729;
    var$2[538] = 730;
    var$2[539] = 731;
    var$2[540] = 732;
    var$2[541] = 733;
    var$2[542] = 734;
    var$2[543] = 735;
    var$2[544] = 736;
    var$2[545] = 737;
    var$2[546] = 738;
    var$2[547] = 739;
    var$2[548] = 740;
    var$2[549] = 741;
    var$2[550] = 742;
    var$2[551] = 743;
    var$2[552] = 744;
    var$2[553] = 745;
    var$2[554] = 746;
    var$2[555] = 747;
    var$2[556] = 748;
    var$2[557] = 749;
    var$2[558] = 750;
    var$2[559] = 751;
    var$2[560] = 752;
    var$2[561] = 753;
    var$2[562] = 754;
    var$2[563] = 755;
    var$2[564] = 756;
    var$2[565] = 757;
    var$2[566] = 758;
    var$2[567] = 759;
    var$2[568] = 760;
    var$2[569] = 761;
    var$2[570] = 762;
    var$2[571] = 763;
    var$2[572] = 764;
    var$2[573] = 765;
    var$2[574] = 766;
    var$2[575] = 767;
    var$2[576] = 768;
    var$2[577] = 769;
    var$2[578] = 770;
    var$2[579] = 771;
    var$2[580] = 772;
    var$2[581] = 773;
    var$2[582] = 774;
    var$2[583] = 775;
    var$2[584] = 776;
    var$2[585] = 777;
    var$2[586] = 778;
    var$2[587] = 779;
    var$2[588] = 780;
    var$2[589] = 781;
    var$2[590] = 782;
    var$2[591] = 783;
    var$2[592] = 784;
    var$2[593] = 785;
    var$2[594] = 786;
    var$2[595] = 787;
    var$2[596] = 788;
    var$2[597] = 789;
    var$2[598] = 790;
    var$2[599] = 791;
    var$2[600] = 792;
    var$2[601] = 793;
    var$2[602] = 794;
    var$2[603] = 795;
    var$2[604] = 796;
    var$2[605] = 797;
    var$2[606] = 798;
    var$2[607] = 799;
    var$2[608] = 800;
    var$2[609] = 801;
    var$2[610] = 802;
    var$2[611] = 803;
    var$2[612] = 804;
    var$2[613] = 805;
    var$2[614] = 806;
    var$2[615] = 807;
    var$2[616] = 808;
    var$2[617] = 809;
    var$2[618] = 810;
    var$2[619] = 811;
    var$2[620] = 812;
    var$2[621] = 813;
    var$2[622] = 814;
    var$2[623] = 815;
    var$2[624] = 816;
    var$2[625] = 817;
    var$2[626] = 818;
    var$2[627] = 819;
    var$2[628] = 820;
    var$2[629] = 821;
    var$2[630] = 822;
    var$2[631] = 823;
    var$2[632] = 824;
    var$2[633] = 825;
    var$2[634] = 826;
    var$2[635] = 827;
    var$2[636] = 828;
    var$2[637] = 829;
    var$2[638] = 830;
    var$2[639] = 831;
    var$2[640] = 832;
    var$2[641] = 833;
    var$2[642] = 834;
    var$2[643] = 835;
    var$2[644] = 836;
    var$2[645] = 837;
    var$2[646] = 838;
    var$2[647] = 839;
    var$2[648] = 840;
    var$2[649] = 841;
    var$2[650] = 842;
    var$2[651] = 843;
    var$2[652] = 844;
    var$2[653] = 845;
    var$2[654] = 846;
    var$2[655] = 847;
    var$2[656] = 848;
    var$2[657] = 849;
    var$2[658] = 850;
    var$2[659] = 851;
    var$2[660] = 852;
    var$2[661] = 853;
    var$2[662] = 854;
    var$2[663] = 855;
    var$2[664] = 856;
    var$2[665] = 857;
    var$2[666] = 858;
    var$2[667] = 859;
    var$2[668] = 860;
    var$2[669] = 861;
    var$2[670] = 862;
    var$2[671] = 863;
    var$2[672] = 864;
    var$2[673] = 865;
    var$2[674] = 866;
    var$2[675] = 867;
    var$2[676] = 868;
    var$2[677] = 869;
    var$2[678] = 870;
    var$2[679] = 871;
    var$2[680] = 872;
    var$2[681] = 873;
    var$2[682] = 874;
    var$2[683] = 875;
    var$2[684] = 876;
    var$2[685] = 877;
    var$2[686] = 878;
    var$2[687] = 879;
    var$2[688] = 880;
    var$2[689] = 881;
    var$2[690] = 882;
    var$2[691] = 883;
    var$2[692] = 884;
    var$2[693] = 885;
    var$2[694] = 886;
    var$2[695] = 887;
    var$2[696] = 888;
    var$2[697] = 889;
    var$2[698] = 890;
    var$2[699] = 891;
    var$2[700] = 892;
    var$2[701] = 893;
    var$2[702] = 894;
    var$2[703] = 895;
    var$2[704] = 896;
    var$2[705] = 897;
    var$2[706] = 898;
    var$2[707] = 899;
    var$2[708] = 900;
    var$2[709] = 901;
    var$2[710] = 940;
    var$2[711] = 903;
    var$2[712] = 941;
    var$2[713] = 942;
    var$2[714] = 943;
    var$2[715] = 907;
    var$2[716] = 972;
    var$2[717] = 909;
    var$2[718] = 973;
    var$2[719] = 974;
    var$2[720] = 912;
    var$2[721] = 945;
    var$2[722] = 946;
    var$2[723] = 947;
    var$2[724] = 948;
    var$2[725] = 949;
    var$2[726] = 950;
    var$2[727] = 951;
    var$2[728] = 952;
    var$2[729] = 953;
    var$2[730] = 954;
    var$2[731] = 955;
    var$2[732] = 956;
    var$2[733] = 957;
    var$2[734] = 958;
    var$2[735] = 959;
    var$2[736] = 960;
    var$2[737] = 961;
    var$2[738] = 930;
    var$2[739] = 963;
    var$2[740] = 964;
    var$2[741] = 965;
    var$2[742] = 966;
    var$2[743] = 967;
    var$2[744] = 968;
    var$2[745] = 969;
    var$2[746] = 970;
    var$2[747] = 971;
    var$2[748] = 940;
    var$2[749] = 941;
    var$2[750] = 942;
    var$2[751] = 943;
    var$2[752] = 944;
    var$2[753] = 945;
    var$2[754] = 946;
    var$2[755] = 947;
    var$2[756] = 948;
    var$2[757] = 949;
    var$2[758] = 950;
    var$2[759] = 951;
    var$2[760] = 952;
    var$2[761] = 953;
    var$2[762] = 954;
    var$2[763] = 955;
    var$2[764] = 956;
    var$2[765] = 957;
    var$2[766] = 958;
    var$2[767] = 959;
    var$2[768] = 960;
    var$2[769] = 961;
    var$2[770] = 962;
    var$2[771] = 963;
    var$2[772] = 964;
    var$2[773] = 965;
    var$2[774] = 966;
    var$2[775] = 967;
    var$2[776] = 968;
    var$2[777] = 969;
    var$2[778] = 970;
    var$2[779] = 971;
    var$2[780] = 972;
    var$2[781] = 973;
    var$2[782] = 974;
    var$2[783] = 975;
    var$2[784] = 976;
    var$2[785] = 977;
    var$2[786] = 978;
    var$2[787] = 979;
    var$2[788] = 980;
    var$2[789] = 981;
    var$2[790] = 982;
    var$2[791] = 983;
    var$2[792] = 985;
    var$2[793] = 985;
    var$2[794] = 987;
    var$2[795] = 987;
    var$2[796] = 989;
    var$2[797] = 989;
    var$2[798] = 991;
    var$2[799] = 991;
    var$2[800] = 993;
    var$2[801] = 993;
    var$2[802] = 995;
    var$2[803] = 995;
    var$2[804] = 997;
    var$2[805] = 997;
    var$2[806] = 999;
    var$2[807] = 999;
    cjl_Character_lowercaseValuesCache = var$1;
    cjl_Character_digitValues = jl_String_toCharArray($rt_s(468));
    cjl_Character_typeTags = jl_String_toCharArray($rt_s(469));
    var$1 = $rt_createByteArray(19);
    var$2 = var$1.data;
    var$2[0] = 0;
    var$2[1] = 1;
    var$2[2] = 3;
    var$2[3] = 4;
    var$2[4] = 5;
    var$2[5] = 6;
    var$2[6] = 7;
    var$2[7] = 10;
    var$2[8] = 11;
    var$2[9] = 12;
    var$2[10] = 13;
    var$2[11] = 14;
    var$2[12] = 15;
    var$2[13] = 2;
    var$2[14] = 16;
    var$2[15] = 17;
    var$2[16] = 18;
    var$2[17] = 8;
    var$2[18] = 9;
    cjl_Character_DIRECTIONALITY = var$1;
    cjl_Character_titlecaseValues = jl_String_toCharArray($rt_s(470));
    cjl_Character_numericValues = jl_String_toCharArray($rt_s(471));
}
function cjag_IllegalPathStateException() {
    jl_RuntimeException.call(this);
}
function cgh_Arrays() {
    jl_Object.call(this);
}
function cgh_Arrays_copyOf($org, $length) {
    var $ret, var$4, $i, var$6;
    $ret = $rt_createByteArray($length);
    var$4 = $ret.data;
    $i = 0;
    while (true) {
        var$6 = $org.data;
        if ($i >= jl_Math_min($length, var$6.length))
            break;
        var$4[$i] = var$6[$i];
        $i = $i + 1 | 0;
    }
    return $ret;
}
function oljg_Envelope() {
    var a = this; jl_Object.call(a);
    a.$minx = 0.0;
    a.$maxx = 0.0;
    a.$miny = 0.0;
    a.$maxy = 0.0;
}
function oljg_Envelope__init_(var_0, var_1, var_2, var_3) {
    var var_4 = new oljg_Envelope();
    oljg_Envelope__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
}
function oljg_Envelope__init_0($this, $x1, $x2, $y1, $y2) {
    oljg_Envelope_init($this, $x1, $x2, $y1, $y2);
}
function oljg_Envelope_init($this, $x1, $x2, $y1, $y2) {
    if ($x1 >= $x2) {
        $this.$minx = $x2;
        $this.$maxx = $x1;
    } else {
        $this.$minx = $x1;
        $this.$maxx = $x2;
    }
    if ($y1 >= $y2) {
        $this.$miny = $y2;
        $this.$maxy = $y1;
    } else {
        $this.$miny = $y1;
        $this.$maxy = $y2;
    }
}
function oljg_Envelope_init0($this, $env) {
    $this.$minx = $env.$minx;
    $this.$maxx = $env.$maxx;
    $this.$miny = $env.$miny;
    $this.$maxy = $env.$maxy;
}
function oljg_Envelope_isNull($this) {
    return $this.$maxx >= $this.$minx ? 0 : 1;
}
function oljg_Envelope_getMinX($this) {
    return $this.$minx;
}
function oljg_Envelope_getMaxX($this) {
    return $this.$maxx;
}
function oljg_Envelope_getMinY($this) {
    return $this.$miny;
}
function oljg_Envelope_getMaxY($this) {
    return $this.$maxy;
}
function oljg_Envelope_expandToInclude($this, $other) {
    if (oljg_Envelope_isNull($other))
        return;
    if (oljg_Envelope_isNull($this)) {
        $this.$minx = $other.$minx;
        $this.$maxx = $other.$maxx;
        $this.$miny = $other.$miny;
        $this.$maxy = $other.$maxy;
    } else {
        if ($other.$minx < $this.$minx)
            $this.$minx = $other.$minx;
        if ($other.$maxx > $this.$maxx)
            $this.$maxx = $other.$maxx;
        if ($other.$miny < $this.$miny)
            $this.$miny = $other.$miny;
        if ($other.$maxy > $this.$maxy)
            $this.$maxy = $other.$maxy;
    }
}
function oljg_Envelope_intersects($this, $other) {
    if (!oljg_Envelope_isNull($this) && !oljg_Envelope_isNull($other))
        return $other.$minx <= $this.$maxx && $other.$maxx >= $this.$minx && $other.$miny <= $this.$maxy && $other.$maxy >= $this.$miny ? 1 : 0;
    return 0;
}
function cjag_Path2D$Double() {
    cjag_Path2D.call(this);
    this.$doubleCoords = null;
}
function cjag_Path2D$Double_needRoom($this, $needMove, $newCoords) {
    var var$3, $size, var$5, var$6, var$7, var$8;
    if ($needMove && !$this.$numTypes) {
        var$3 = new cjag_IllegalPathStateException;
        jl_Throwable__init_(var$3, $rt_s(97));
        $rt_throw(var$3);
    }
    $size = $this.$pointTypes.data.length;
    if ($this.$numTypes >= $size) {
        $needMove = $size > 500 ? 500 : $size;
        $this.$pointTypes = cgh_Arrays_copyOf($this.$pointTypes, $size + $needMove | 0);
    }
    $needMove = $this.$doubleCoords.data.length;
    if (($this.$numCoords + $newCoords | 0) > $needMove) {
        $size = $needMove > 1000 ? 1000 : $needMove;
        if ($size >= $newCoords)
            $newCoords = $size;
        var$5 = $this.$doubleCoords;
        $needMove = $needMove + $newCoords | 0;
        var$6 = $rt_createDoubleArray($needMove);
        var$7 = var$6.data;
        $newCoords = 0;
        while (true) {
            var$8 = var$5.data;
            if ($newCoords >= jl_Math_min($needMove, var$8.length))
                break;
            var$7[$newCoords] = var$8[$newCoords];
            $newCoords = $newCoords + 1 | 0;
        }
        $this.$doubleCoords = var$6;
    }
}
function cjag_Path2D$Double_moveTo($this, $x, $y) {
    var var$3, var$4, var$5;
    jl_Object_monitorEnterSync($this);
    try {
        if ($this.$numTypes > 0 && !$this.$pointTypes.data[$this.$numTypes - 1 | 0]) {
            $this.$doubleCoords.data[$this.$numCoords - 2 | 0] = $x;
            $this.$doubleCoords.data[$this.$numCoords - 1 | 0] = $y;
        } else {
            cjag_Path2D$Double_needRoom($this, 0, 2);
            var$3 = $this.$pointTypes.data;
            var$4 = $this.$numTypes;
            $this.$numTypes = var$4 + 1 | 0;
            var$3[var$4] = 0;
            var$3 = $this.$doubleCoords.data;
            var$5 = $this.$numCoords;
            $this.$numCoords = var$5 + 1 | 0;
            var$3[var$5] = $x;
            var$3 = $this.$doubleCoords.data;
            var$5 = $this.$numCoords;
            $this.$numCoords = var$5 + 1 | 0;
            var$3[var$5] = $y;
        }
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function cjag_Path2D$Double_lineTo($this, $x, $y) {
    var var$3, var$4, var$5;
    jl_Object_monitorEnterSync($this);
    try {
        cjag_Path2D$Double_needRoom($this, 1, 2);
        var$3 = $this.$pointTypes.data;
        var$4 = $this.$numTypes;
        $this.$numTypes = var$4 + 1 | 0;
        var$3[var$4] = 1;
        var$3 = $this.$doubleCoords.data;
        var$4 = $this.$numCoords;
        $this.$numCoords = var$4 + 1 | 0;
        var$3[var$4] = $x;
        var$3 = $this.$doubleCoords.data;
        var$5 = $this.$numCoords;
        $this.$numCoords = var$5 + 1 | 0;
        var$3[var$5] = $y;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function cjag_Path2D$Double_quadTo($this, $x1, $y1, $x2, $y2) {
    var var$5, var$6, var$7;
    jl_Object_monitorEnterSync($this);
    try {
        cjag_Path2D$Double_needRoom($this, 1, 4);
        var$5 = $this.$pointTypes.data;
        var$6 = $this.$numTypes;
        $this.$numTypes = var$6 + 1 | 0;
        var$5[var$6] = 2;
        var$5 = $this.$doubleCoords.data;
        var$7 = $this.$numCoords;
        $this.$numCoords = var$7 + 1 | 0;
        var$5[var$7] = $x1;
        var$5 = $this.$doubleCoords.data;
        var$7 = $this.$numCoords;
        $this.$numCoords = var$7 + 1 | 0;
        var$5[var$7] = $y1;
        var$5 = $this.$doubleCoords.data;
        var$7 = $this.$numCoords;
        $this.$numCoords = var$7 + 1 | 0;
        var$5[var$7] = $x2;
        var$5 = $this.$doubleCoords.data;
        var$7 = $this.$numCoords;
        $this.$numCoords = var$7 + 1 | 0;
        var$5[var$7] = $y2;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function cjag_Path2D$Double_curveTo($this, $x1, $y1, $x2, $y2, $x3, $y3) {
    var var$7, var$8, var$9;
    jl_Object_monitorEnterSync($this);
    try {
        cjag_Path2D$Double_needRoom($this, 1, 6);
        var$7 = $this.$pointTypes.data;
        var$8 = $this.$numTypes;
        $this.$numTypes = var$8 + 1 | 0;
        var$7[var$8] = 3;
        var$7 = $this.$doubleCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $x1;
        var$7 = $this.$doubleCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $y1;
        var$7 = $this.$doubleCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $x2;
        var$7 = $this.$doubleCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $y2;
        var$7 = $this.$doubleCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $x3;
        var$7 = $this.$doubleCoords.data;
        var$9 = $this.$numCoords;
        $this.$numCoords = var$9 + 1 | 0;
        var$7[var$9] = $y3;
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function cjag_Path2D$Double_append($this, $pi, $connect) {
    var $coords, var$4;
    $coords = $rt_createDoubleArray(6);
    var$4 = $coords.data;
    while (!cjag_AreaIterator_isDone($pi)) {
        a: {
            b: {
                switch (cjag_AreaIterator_currentSegment($pi, $coords)) {
                    case 0:
                        if ($connect && $this.$numTypes >= 1 && $this.$numCoords >= 1) {
                            if ($this.$pointTypes.data[$this.$numTypes - 1 | 0] == 4)
                                break b;
                            if ($this.$doubleCoords.data[$this.$numCoords - 2 | 0] !== var$4[0])
                                break b;
                            if ($this.$doubleCoords.data[$this.$numCoords - 1 | 0] !== var$4[1])
                                break b;
                            break a;
                        }
                        cjag_Path2D$Double_moveTo($this, var$4[0], var$4[1]);
                        break a;
                    case 1:
                        break b;
                    case 2:
                        cjag_Path2D$Double_quadTo($this, var$4[0], var$4[1], var$4[2], var$4[3]);
                        break a;
                    case 3:
                        cjag_Path2D$Double_curveTo($this, var$4[0], var$4[1], var$4[2], var$4[3], var$4[4], var$4[5]);
                        break a;
                    case 4:
                        break;
                    default:
                        break a;
                }
                cjag_Path2D_closePath($this);
                break a;
            }
            cjag_Path2D$Double_lineTo($this, var$4[0], var$4[1]);
        }
        cjag_AreaIterator_next($pi);
        $connect = 0;
    }
}
function cjag_Path2D$Double_getBounds2D($this) {
    var $i, $x1, $y1, var$4, var$5, var$6, var$7, $y, $x;
    jl_Object_monitorEnterSync($this);
    try {
        $i = $this.$numCoords;
        if ($i <= 0) {
            $x1 = 0.0;
            $y1 = $x1;
            var$4 = $x1;
            var$5 = $x1;
        } else {
            var$6 = $this.$doubleCoords.data;
            var$7 = $i + (-1) | 0;
            $y1 = var$6[var$7];
            var$6 = $this.$doubleCoords.data;
            $i = var$7 + (-1) | 0;
            var$5 = var$6[$i];
            $x1 = var$5;
            var$4 = $y1;
            while ($i > 0) {
                var$6 = $this.$doubleCoords.data;
                $i = $i + (-1) | 0;
                $y = var$6[$i];
                var$6 = $this.$doubleCoords.data;
                $i = $i + (-1) | 0;
                $x = var$6[$i];
                if ($x < $x1)
                    $x1 = $x;
                if ($y < var$4)
                    var$4 = $y;
                if ($x <= var$5)
                    $x = var$5;
                if ($y > $y1)
                    $y1 = $y;
                var$5 = $x;
            }
        }
        return cjag_Rectangle2D$Double__init_($x1, var$4, var$5 - $x1, $y1 - var$4);
    } finally {
        jl_Object_monitorExitSync($this);
    }
}
function ju_HashMap$1() {
    ju_AbstractSet.call(this);
    this.$this$07 = null;
}
function ju_HashMap$1_size($this) {
    return $this.$this$07.$elementCount;
}
function ju_HashMap$1_iterator($this) {
    var var$1;
    var$1 = new ju_HashMap$KeyIterator;
    ju_HashMap$AbstractMapIterator__init_(var$1, $this.$this$07);
    return var$1;
}
function ju_TreeMap$EntrySet() {
    var a = this; ju_AbstractSet.call(a);
    a.$modCount3 = 0;
    a.$owner0 = null;
    a.$from = null;
    a.$fromIncluded = 0;
    a.$fromChecked = 0;
    a.$to = null;
    a.$toIncluded = 0;
    a.$toChecked = 0;
    a.$reverse = 0;
}
function ju_TreeMap$EntrySet_iterator($this) {
    var var$1, var$2, var$3;
    if ($this.$reverse) {
        var$1 = !$this.$toChecked ? ju_TreeMap_pathToFirst($this.$owner0, 1) : !$this.$toIncluded ? ju_TreeMap_pathToNext($this.$owner0, $this.$to, 1) : ju_TreeMap_pathToExactOrNext($this.$owner0, $this.$to, 1);
        var$2 = !$this.$fromChecked ? ju_TreeMap_access$100($this.$owner0, 0) : !$this.$fromIncluded ? ju_TreeMap_findNext($this.$owner0, $this.$to, 0) : ju_TreeMap_findExactOrNext($this.$owner0, $this.$to, 0);
        var$3 = ju_TreeMap$EntryIterator__init_($this.$owner0, var$1, var$2, 1);
    } else {
        var$1 = !$this.$fromChecked ? ju_TreeMap_pathToFirst($this.$owner0, 0) : !$this.$fromIncluded ? ju_TreeMap_pathToNext($this.$owner0, $this.$from, 0) : ju_TreeMap_pathToExactOrNext($this.$owner0, $this.$from, 0);
        var$2 = !$this.$toChecked ? ju_TreeMap_access$100($this.$owner0, 1) : !$this.$toIncluded ? ju_TreeMap_findNext($this.$owner0, $this.$to, 1) : ju_TreeMap_findExactOrNext($this.$owner0, $this.$to, 1);
        var$3 = ju_TreeMap$EntryIterator__init_($this.$owner0, var$1, var$2, 0);
    }
    return var$3;
}
function cjag_RectIterator() {
    var a = this; jl_Object.call(a);
    a.$x = 0.0;
    a.$y = 0.0;
    a.$w = 0.0;
    a.$h = 0.0;
    a.$affine = null;
    a.$index = 0;
}
function cjag_RectIterator_getWindingRule($this) {
    return 1;
}
function cjag_RectIterator_isDone($this) {
    return $this.$index <= 5 ? 0 : 1;
}
function cjag_RectIterator_next($this) {
    $this.$index = $this.$index + 1 | 0;
}
function cjag_RectIterator_currentSegment($this, $coords) {
    var var$2, var$3;
    if (cjag_RectIterator_isDone($this)) {
        var$2 = new ju_NoSuchElementException;
        jl_Throwable__init_(var$2, $rt_s(472));
        $rt_throw(var$2);
    }
    if ($this.$index == 5)
        return 4;
    var$3 = $coords.data;
    var$3[0] = $this.$x;
    var$3[1] = $this.$y;
    if (!($this.$index != 1 && $this.$index != 2))
        var$3[0] = var$3[0] + $this.$w;
    if (!($this.$index != 2 && $this.$index != 3))
        var$3[1] = var$3[1] + $this.$h;
    if ($this.$affine !== null)
        $this.$affine.$transform1($coords, 0, $coords, 0, 1);
    return $this.$index ? 1 : 0;
}
function ju_EmptyStackException() {
    jl_RuntimeException.call(this);
}
function ju_AbstractMap$SimpleEntry() {
    var a = this; jl_Object.call(a);
    a.$key0 = null;
    a.$value4 = null;
}
function ju_AbstractMap$SimpleEntry_getValue($this) {
    return $this.$value4;
}
function ju_AbstractMap$SimpleEntry_setValue($this, $value) {
    var $old;
    $old = $this.$value4;
    $this.$value4 = $value;
    return $old;
}
function ju_AbstractMap$SimpleEntry_getKey($this) {
    return $this.$key0;
}
function ju_AbstractMap$SimpleEntry_equals($this, $obj) {
    var $other;
    if (!$rt_isInstance($obj, ju_Map$Entry))
        return 0;
    a: {
        $other = $obj;
        if ($this.$key0 === null) {
            if ($other.$key0 === null)
                break a;
        } else if ($this.$key0.$equals($other.$key0))
            break a;
        return 0;
    }
    return $this.$value4 !== null ? $this.$value4.$equals($other.$value4) : $other.$value4 !== null ? 0 : 1;
}
function ju_AbstractMap$SimpleEntry_hashCode($this) {
    return ($this.$key0 === null ? 0 : $this.$key0.$hashCode0()) ^ ($this.$value4 === null ? 0 : $this.$value4.$hashCode0());
}
function ju_AbstractMap$SimpleEntry_toString($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, jl_String_valueOf($this.$key0));
    jl_AbstractStringBuilder_append(var$1, $rt_s(473));
    jl_AbstractStringBuilder_append(var$1, jl_String_valueOf($this.$value4));
    return jl_AbstractStringBuilder_toString(var$1);
}
function csag_Edge() {
    var a = this; jl_Object.call(a);
    a.$curve = null;
    a.$ctag = 0;
    a.$etag = 0;
    a.$activey = 0.0;
    a.$equivalence = 0;
    a.$lastEdge = null;
    a.$lastResult = 0;
    a.$lastLimit = 0.0;
}
function csag_Edge_getCurve($this) {
    return $this.$curve;
}
function csag_Edge_getEquivalence($this) {
    return $this.$equivalence;
}
function csag_Edge_setEquivalence($this, $eq) {
    $this.$equivalence = $eq;
}
function csag_Edge_compareTo($this, $other, $yrange) {
    var var$3, $ret;
    if ($other === $this.$lastEdge) {
        var$3 = $yrange.data;
        if (var$3[0] < $this.$lastLimit) {
            if (var$3[1] > $this.$lastLimit)
                var$3[1] = $this.$lastLimit;
            return $this.$lastResult;
        }
    }
    if ($this === $other.$lastEdge) {
        var$3 = $yrange.data;
        if (var$3[0] < $other.$lastLimit) {
            if (var$3[1] > $other.$lastLimit)
                var$3[1] = $other.$lastLimit;
            return 0 - $other.$lastResult | 0;
        }
    }
    var$3 = $yrange.data;
    $ret = $this.$curve.$compareTo9($other.$curve, $yrange);
    $this.$lastEdge = $other;
    $this.$lastLimit = var$3[1];
    $this.$lastResult = $ret;
    return $ret;
}
function csag_Edge_record($this, $yend, $etag) {
    $this.$activey = $yend;
    $this.$etag = $etag;
}
function csag_Edge_isActiveFor($this, $y, $etag) {
    return $this.$etag == $etag && $this.$activey >= $y ? 1 : 0;
}
function csag_Edge_toString($this) {
    var var$1;
    var$1 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$1);
    jl_AbstractStringBuilder_append(var$1, $rt_s(474));
    var$1 = jl_StringBuilder_append3(var$1, $this.$curve);
    jl_AbstractStringBuilder_append(var$1, $rt_s(91));
    jl_AbstractStringBuilder_append(var$1, $this.$ctag ? $rt_s(475) : $rt_s(476));
    jl_AbstractStringBuilder_append(var$1, $rt_s(91));
    jl_AbstractStringBuilder_append(var$1, $this.$etag == 1 ? $rt_s(477) : $this.$etag != (-1) ? $rt_s(383) : $rt_s(478));
    jl_AbstractStringBuilder_append(var$1, $rt_s(56));
    return jl_AbstractStringBuilder_toString(var$1);
}
function oahlu_BinarySearch() {
    jl_Object.call(this);
}
function jur_MatchResult() {
}
function jur_Matcher() {
    var a = this; jl_Object.call(a);
    a.$pat = null;
    a.$start2 = null;
    a.$string = null;
    a.$matchResult = null;
    a.$leftBound = 0;
    a.$rightBound = 0;
}
function jur_Matcher_find0($this, $start) {
    var $stringLength, var$3;
    $stringLength = jl_String_length($this.$string);
    if ($start >= 0 && $start <= $stringLength) {
        jur_MatchResultImpl_reset0($this.$matchResult);
        $this.$matchResult.$mode0 = 1;
        jur_MatchResultImpl_setStartIndex($this.$matchResult, $start);
        $start = $this.$start2.$find0($start, $this.$string, $this.$matchResult);
        if ($start == (-1))
            $this.$matchResult.$hitEnd = 1;
        if ($start >= 0 && $this.$matchResult.$valid) {
            jur_MatchResultImpl_finalizeMatch($this.$matchResult);
            return 1;
        }
        $this.$matchResult.$startIndex = (-1);
        return 0;
    }
    var$3 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$3, jl_String_valueOf1($start));
    $rt_throw(var$3);
}
function jur_Matcher_find($this) {
    var $length, var$2;
    $length = jl_String_length($this.$string);
    if (!jur_Matcher_hasTransparentBounds($this))
        $length = $this.$rightBound;
    if ($this.$matchResult.$startIndex >= 0 && $this.$matchResult.$mode0 == 1) {
        $this.$matchResult.$startIndex = jur_MatchResultImpl_end($this.$matchResult);
        if (jur_MatchResultImpl_end($this.$matchResult) == jur_MatchResultImpl_start($this.$matchResult)) {
            var$2 = $this.$matchResult;
            var$2.$startIndex = var$2.$startIndex + 1 | 0;
        }
        return $this.$matchResult.$startIndex <= $length && jur_Matcher_find0($this, $this.$matchResult.$startIndex) ? 1 : 0;
    }
    return jur_Matcher_find0($this, $this.$leftBound);
}
function jur_Matcher_start0($this, $group) {
    return jur_MatchResultImpl_start0($this.$matchResult, $group);
}
function jur_Matcher_end0($this, $group) {
    return jur_MatchResultImpl_end0($this.$matchResult, $group);
}
function jur_Matcher_start($this) {
    return jur_Matcher_start0($this, 0);
}
function jur_Matcher_end($this) {
    return jur_Matcher_end0($this, 0);
}
function jur_Matcher_hasTransparentBounds($this) {
    return $this.$matchResult.$transparentBounds;
}
function ju_TreeMap$TreeNode() {
    var a = this; ju_AbstractMap$SimpleEntry.call(a);
    a.$left = null;
    a.$right = null;
    a.$height2 = 0;
    a.$size2 = 0;
}
function ju_TreeMap$TreeNode_balance($this) {
    var $factor;
    $factor = ju_TreeMap$TreeNode_factor($this);
    if ($factor == 2) {
        if (ju_TreeMap$TreeNode_factor($this.$right) < 0)
            $this.$right = ju_TreeMap$TreeNode_rotateRight($this.$right);
        return ju_TreeMap$TreeNode_rotateLeft($this);
    }
    if ($factor != (-2))
        return $this;
    if (ju_TreeMap$TreeNode_factor($this.$left) > 0)
        $this.$left = ju_TreeMap$TreeNode_rotateLeft($this.$left);
    return ju_TreeMap$TreeNode_rotateRight($this);
}
function ju_TreeMap$TreeNode_factor($this) {
    return ($this.$right === null ? 0 : $this.$right.$height2) - ($this.$left === null ? 0 : $this.$left.$height2) | 0;
}
function ju_TreeMap$TreeNode_rotateRight($this) {
    var $left;
    $left = $this.$left;
    $this.$left = $left.$right;
    $left.$right = $this;
    ju_TreeMap$TreeNode_fix($this);
    ju_TreeMap$TreeNode_fix($left);
    return $left;
}
function ju_TreeMap$TreeNode_rotateLeft($this) {
    var $right;
    $right = $this.$right;
    $this.$right = $right.$left;
    $right.$left = $this;
    ju_TreeMap$TreeNode_fix($this);
    ju_TreeMap$TreeNode_fix($right);
    return $right;
}
function ju_TreeMap$TreeNode_fix($this) {
    var var$1, var$2;
    var$1 = $this.$right === null ? 0 : $this.$right.$height2;
    var$2 = $this.$left === null ? 0 : $this.$left.$height2;
    $this.$height2 = jl_Math_max(var$1, var$2) + 1 | 0;
    $this.$size2 = 1;
    if ($this.$left !== null)
        $this.$size2 = $this.$size2 + $this.$left.$size2 | 0;
    if ($this.$right !== null)
        $this.$size2 = $this.$size2 + $this.$right.$size2 | 0;
}
function ju_TreeMap$TreeNode_forward($this, $reverse) {
    return $reverse ? $this.$right : $this.$left;
}
function ju_TreeMap$TreeNode_down($this, $reverse) {
    return $reverse ? $this.$left : $this.$right;
}
function jl_AbstractStringBuilder$Constants() {
    jl_Object.call(this);
}
var jl_AbstractStringBuilder$Constants_intPowersOfTen = null;
var jl_AbstractStringBuilder$Constants_longPowersOfTen = null;
var jl_AbstractStringBuilder$Constants_longLogPowersOfTen = null;
var jl_AbstractStringBuilder$Constants_doubleAnalysisResult = null;
var jl_AbstractStringBuilder$Constants_floatAnalysisResult = null;
function jl_AbstractStringBuilder$Constants__clinit_() {
    var var$1, var$2;
    var$1 = $rt_createIntArray(10);
    var$2 = var$1.data;
    var$2[0] = 1;
    var$2[1] = 10;
    var$2[2] = 100;
    var$2[3] = 1000;
    var$2[4] = 10000;
    var$2[5] = 100000;
    var$2[6] = 1000000;
    var$2[7] = 10000000;
    var$2[8] = 100000000;
    var$2[9] = 1000000000;
    jl_AbstractStringBuilder$Constants_intPowersOfTen = var$1;
    var$1 = $rt_createLongArray(19);
    var$2 = var$1.data;
    var$2[0] = Long_fromInt(1);
    var$2[1] = Long_fromInt(10);
    var$2[2] = Long_fromInt(100);
    var$2[3] = Long_fromInt(1000);
    var$2[4] = Long_fromInt(10000);
    var$2[5] = Long_fromInt(100000);
    var$2[6] = Long_fromInt(1000000);
    var$2[7] = Long_fromInt(10000000);
    var$2[8] = Long_fromInt(100000000);
    var$2[9] = Long_fromInt(1000000000);
    var$2[10] = new Long(1410065408, 2);
    var$2[11] = new Long(1215752192, 23);
    var$2[12] = new Long(3567587328, 232);
    var$2[13] = new Long(1316134912, 2328);
    var$2[14] = new Long(276447232, 23283);
    var$2[15] = new Long(2764472320, 232830);
    var$2[16] = new Long(1874919424, 2328306);
    var$2[17] = new Long(1569325056, 23283064);
    var$2[18] = new Long(2808348672, 232830643);
    jl_AbstractStringBuilder$Constants_longPowersOfTen = var$1;
    var$1 = $rt_createLongArray(6);
    var$2 = var$1.data;
    var$2[0] = Long_fromInt(1);
    var$2[1] = Long_fromInt(10);
    var$2[2] = Long_fromInt(100);
    var$2[3] = Long_fromInt(10000);
    var$2[4] = Long_fromInt(100000000);
    var$2[5] = new Long(1874919424, 2328306);
    jl_AbstractStringBuilder$Constants_longLogPowersOfTen = var$1;
    jl_AbstractStringBuilder$Constants_doubleAnalysisResult = new otcit_DoubleAnalyzer$Result;
    jl_AbstractStringBuilder$Constants_floatAnalysisResult = new otcit_FloatAnalyzer$Result;
}
function otcit_DoubleAnalyzer() {
    jl_Object.call(this);
}
var otcit_DoubleAnalyzer_mantissa10Table = null;
var otcit_DoubleAnalyzer_exp10Table = null;
function otcit_DoubleAnalyzer_analyze($d, $result) {
    var $bits, $mantissa, $exponent, $errorShift, $decExponent, $mantissaShift, $decMantissa, $error, $upError, $downError, $lowerPos, $upperPos;
    $bits = $rt_doubleToLongBits($d);
    $result.$sign0 = Long_eq(Long_and($bits, new Long(0, 2147483648)), Long_ZERO) ? 0 : 1;
    $mantissa = Long_and($bits, new Long(4294967295, 1048575));
    $exponent = Long_shr($bits, 52).lo & 2047;
    if (Long_eq($mantissa, Long_ZERO) && !$exponent) {
        $result.$mantissa0 = Long_ZERO;
        $result.$exponent0 = 0;
        return;
    }
    $errorShift = 0;
    if ($exponent)
        $mantissa = Long_or($mantissa, new Long(0, 1048576));
    else {
        $mantissa = Long_shl($mantissa, 1);
        while (Long_eq(Long_and($mantissa, new Long(0, 1048576)), Long_ZERO)) {
            $mantissa = Long_shl($mantissa, 1);
            $exponent = $exponent + (-1) | 0;
            $errorShift = $errorShift + 1 | 0;
        }
    }
    $decExponent = ju_Arrays_binarySearch(otcit_DoubleAnalyzer_exp10Table, $exponent);
    if ($decExponent < 0)
        $decExponent =  -$decExponent - 2 | 0;
    $mantissaShift = 12 + ($exponent - otcit_DoubleAnalyzer_exp10Table.data[$decExponent] | 0) | 0;
    $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$decExponent], $mantissaShift);
    if (Long_ge($decMantissa, new Long(2808348672, 232830643))) {
        $decExponent = $decExponent + 1 | 0;
        $mantissaShift = 12 + ($exponent - otcit_DoubleAnalyzer_exp10Table.data[$decExponent] | 0) | 0;
        $decMantissa = otcit_DoubleAnalyzer_mulAndShiftRight($mantissa, otcit_DoubleAnalyzer_mantissa10Table.data[$decExponent], $mantissaShift);
    }
    $error = Long_shru(otcit_DoubleAnalyzer_mantissa10Table.data[$decExponent], (63 - $mantissaShift | 0) - $errorShift | 0);
    $upError = Long_shr(Long_add($error, Long_fromInt(1)), 1);
    $downError = Long_shr($error, 1);
    if (Long_eq($mantissa, new Long(0, 1048576)))
        $downError = Long_shr($downError, 2);
    $lowerPos = Long_fromInt(10);
    while (Long_le($lowerPos, $downError)) {
        $lowerPos = Long_mul($lowerPos, Long_fromInt(10));
    }
    if (Long_ge(Long_rem($decMantissa, $lowerPos), Long_div($downError, Long_fromInt(2))))
        $lowerPos = Long_div($lowerPos, Long_fromInt(10));
    $upperPos = Long_fromInt(1);
    while (Long_le($upperPos, $upError)) {
        $upperPos = Long_mul($upperPos, Long_fromInt(10));
    }
    if (Long_gt(Long_sub($upperPos, Long_rem($decMantissa, $upperPos)), Long_div($upError, Long_fromInt(2))))
        $upperPos = Long_div($upperPos, Long_fromInt(10));
    $exponent = Long_compare($lowerPos, $upperPos);
    $mantissa = $exponent > 0 ? Long_mul(Long_div($decMantissa, $lowerPos), $lowerPos) : $exponent < 0 ? Long_add(Long_mul(Long_div($decMantissa, $upperPos), $upperPos), $upperPos) : Long_mul(Long_div(Long_add($decMantissa, Long_div($upperPos, Long_fromInt(2))), $upperPos), $upperPos);
    if (Long_ge($mantissa, new Long(2808348672, 232830643))) {
        $decExponent = $decExponent + 1 | 0;
        $mantissa = Long_div($mantissa, Long_fromInt(10));
    } else if (Long_lt($mantissa, new Long(1569325056, 23283064))) {
        $decExponent = $decExponent + (-1) | 0;
        $mantissa = Long_mul($mantissa, Long_fromInt(10));
    }
    $result.$mantissa0 = $mantissa;
    $result.$exponent0 = $decExponent - 330 | 0;
}
function otcit_DoubleAnalyzer_mulAndShiftRight($a, $b, $shift) {
    var $a1, $a2, $a3, $a4, $b1, $b2, $b3, $b4, $cm, $c0, $c;
    $a1 = Long_and($a, Long_fromInt(65535));
    $a2 = Long_and(Long_shru($a, 16), Long_fromInt(65535));
    $a3 = Long_and(Long_shru($a, 32), Long_fromInt(65535));
    $a4 = Long_and(Long_shru($a, 48), Long_fromInt(65535));
    $b1 = Long_and($b, Long_fromInt(65535));
    $b2 = Long_and(Long_shru($b, 16), Long_fromInt(65535));
    $b3 = Long_and(Long_shru($b, 32), Long_fromInt(65535));
    $b4 = Long_and(Long_shru($b, 48), Long_fromInt(65535));
    $cm = Long_add(Long_add(Long_mul($b3, $a1), Long_mul($b2, $a2)), Long_mul($b1, $a3));
    $c0 = Long_add(Long_add(Long_add(Long_mul($b4, $a1), Long_mul($b3, $a2)), Long_mul($b2, $a3)), Long_mul($b1, $a4));
    $c = Long_add(Long_add(Long_shl(Long_mul($b4, $a4), 32 + $shift | 0), Long_shl(Long_add(Long_mul($b4, $a3), Long_mul($b3, $a4)), 16 + $shift | 0)), Long_shl(Long_add(Long_add(Long_mul($b4, $a2), Long_mul($b3, $a3)), Long_mul($b2, $a4)), $shift));
    return Long_add($shift > 16 ? Long_add($c, Long_shl($c0, $shift - 16 | 0)) : Long_add($c, Long_shru($c0, 16 - $shift | 0)), Long_shru($cm, 32 - $shift | 0));
}
function otcit_DoubleAnalyzer__clinit_() {
    var $decimalMantissaOne, $exponent, $i, $shiftedOffPart, var$5, var$6, $maxMantissa, $i_0, $shift, var$10;
    otcit_DoubleAnalyzer_mantissa10Table = $rt_createLongArray(660);
    otcit_DoubleAnalyzer_exp10Table = $rt_createIntArray(660);
    $decimalMantissaOne = new Long(991952896, 1862645149);
    $exponent = 1023;
    $i = 0;
    $shiftedOffPart = $decimalMantissaOne;
    while ($i < 330) {
        var$5 = otcit_DoubleAnalyzer_mantissa10Table.data;
        var$6 = $i + 330 | 0;
        var$5[var$6] = jl_Long_divideUnsigned($shiftedOffPart, Long_fromInt(80));
        otcit_DoubleAnalyzer_exp10Table.data[var$6] = $exponent;
        $shiftedOffPart = jl_Long_divideUnsigned($shiftedOffPart, Long_fromInt(10));
        $maxMantissa = jl_Long_remainderUnsigned($shiftedOffPart, Long_fromInt(10));
        while (Long_le($shiftedOffPart, $decimalMantissaOne) && Long_eq(Long_and($shiftedOffPart, new Long(0, 2147483648)), Long_ZERO)) {
            $shiftedOffPart = Long_shl($shiftedOffPart, 1);
            $exponent = $exponent + 1 | 0;
            $maxMantissa = Long_shl($maxMantissa, 1);
        }
        $shiftedOffPart = Long_add($shiftedOffPart, Long_div($maxMantissa, Long_fromInt(10)));
        $i = $i + 1 | 0;
    }
    $i = 1023;
    $i_0 = 0;
    while ($i_0 < 330) {
        $shift = 0;
        $shiftedOffPart = $decimalMantissaOne;
        while (Long_gt($shiftedOffPart, new Long(3435973836, 214748364))) {
            $shiftedOffPart = Long_shr($shiftedOffPart, 1);
            $shift = $shift + 1 | 0;
            $i = $i + (-1) | 0;
        }
        var$10 = Long_mul($shiftedOffPart, Long_fromInt(10));
        $decimalMantissaOne = $shift <= 0 ? var$10 : Long_add(var$10, Long_shr(Long_mul(Long_and($decimalMantissaOne, Long_fromInt((1 << $shift) - 1 | 0)), Long_fromInt(10)), $shift));
        var$5 = otcit_DoubleAnalyzer_mantissa10Table.data;
        var$6 = (330 - $i_0 | 0) - 1 | 0;
        var$5[var$6] = jl_Long_divideUnsigned($decimalMantissaOne, Long_fromInt(80));
        otcit_DoubleAnalyzer_exp10Table.data[var$6] = $i;
        $i_0 = $i_0 + 1 | 0;
    }
}
function otcit_DoubleAnalyzer$Result() {
    var a = this; jl_Object.call(a);
    a.$mantissa0 = Long_ZERO;
    a.$exponent0 = 0;
    a.$sign0 = 0;
}
function jl_ArithmeticException() {
    jl_RuntimeException.call(this);
}
function jm_BigDecimal$1() {
    jl_Object.call(this);
}
var jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode = null;
function jm_BigDecimal$1_$callClinit() {
    jm_BigDecimal$1_$callClinit = $rt_eraseClinit(jm_BigDecimal$1);
    jm_BigDecimal$1__clinit_();
}
function jm_BigDecimal$1__clinit_() {
    var $$je;
    jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode = $rt_createIntArray(jm_RoundingMode_$VALUES.$clone().data.length);
    a: {
        try {
            jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode.data[jl_Enum_ordinal(jm_RoundingMode_UNNECESSARY)] = 1;
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    b: {
        try {
            jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode.data[jl_Enum_ordinal(jm_RoundingMode_UP)] = 2;
            break b;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    c: {
        try {
            jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode.data[jl_Enum_ordinal(jm_RoundingMode_DOWN)] = 3;
            break c;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    d: {
        try {
            jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode.data[jl_Enum_ordinal(jm_RoundingMode_CEILING)] = 4;
            break d;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    e: {
        try {
            jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode.data[jl_Enum_ordinal(jm_RoundingMode_FLOOR)] = 5;
            break e;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    f: {
        try {
            jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode.data[jl_Enum_ordinal(jm_RoundingMode_HALF_UP)] = 6;
            break f;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    g: {
        try {
            jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode.data[jl_Enum_ordinal(jm_RoundingMode_HALF_DOWN)] = 7;
            break g;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    h: {
        try {
            jm_BigDecimal$1_$SwitchMap$org$teavm$classlib$java$math$TRoundingMode.data[jl_Enum_ordinal(jm_RoundingMode_HALF_EVEN)] = 8;
            break h;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
}
function otcit_FloatAnalyzer$Result() {
    var a = this; jl_Object.call(a);
    a.$mantissa = 0;
    a.$exponent = 0;
    a.$sign = 0;
}
function cjt_Normalizer$Form() {
    jl_Enum.call(this);
}
var cjt_Normalizer$Form_NFD = null;
var cjt_Normalizer$Form_NFC = null;
var cjt_Normalizer$Form_NFKD = null;
var cjt_Normalizer$Form_NFKC = null;
var cjt_Normalizer$Form_$VALUES = null;
function cjt_Normalizer$Form__clinit_() {
    var var$1, var$2, var$3;
    var$1 = new cjt_Normalizer$Form;
    jl_Enum__init_0(var$1, $rt_s(479), 0);
    cjt_Normalizer$Form_NFD = var$1;
    var$1 = new cjt_Normalizer$Form;
    jl_Enum__init_0(var$1, $rt_s(480), 1);
    cjt_Normalizer$Form_NFC = var$1;
    var$1 = new cjt_Normalizer$Form;
    jl_Enum__init_0(var$1, $rt_s(481), 2);
    cjt_Normalizer$Form_NFKD = var$1;
    var$1 = new cjt_Normalizer$Form;
    jl_Enum__init_0(var$1, $rt_s(482), 3);
    cjt_Normalizer$Form_NFKC = var$1;
    var$2 = $rt_createArray(cjt_Normalizer$Form, 4);
    var$3 = var$2.data;
    var$3[0] = cjt_Normalizer$Form_NFD;
    var$3[1] = cjt_Normalizer$Form_NFC;
    var$3[2] = cjt_Normalizer$Form_NFKD;
    var$3[3] = cjt_Normalizer$Form_NFKC;
    cjt_Normalizer$Form_$VALUES = var$2;
}
function cjt_Normalizer() {
    jl_Object.call(this);
}
function ju_AbstractMap$KeySet$1() {
    var a = this; jl_Object.call(a);
    a.$val$iter = null;
    a.$this$1 = null;
}
function ju_AbstractMap$KeySet$1_next($this) {
    return ju_TreeMap$EntryIterator_next($this.$val$iter).$key0;
}
function ji_Reader() {
    jl_Object.call(this);
}
function ju_HashMap$AbstractMapIterator() {
    var a = this; jl_Object.call(a);
    a.$position2 = 0;
    a.$expectedModCount = 0;
    a.$futureEntry = null;
    a.$currentEntry = null;
    a.$prevEntry = null;
    a.$associatedMap0 = null;
}
function ju_HashMap$AbstractMapIterator__init_0(var_0) {
    var var_1 = new ju_HashMap$AbstractMapIterator();
    ju_HashMap$AbstractMapIterator__init_(var_1, var_0);
    return var_1;
}
function ju_HashMap$AbstractMapIterator__init_($this, $hm) {
    $this.$associatedMap0 = $hm;
    $this.$expectedModCount = $hm.$modCount1;
    $this.$futureEntry = null;
}
function ju_HashMap$AbstractMapIterator_hasNext($this) {
    if ($this.$futureEntry !== null)
        return 1;
    while ($this.$position2 < $this.$associatedMap0.$elementData.data.length) {
        if ($this.$associatedMap0.$elementData.data[$this.$position2] !== null)
            return 1;
        $this.$position2 = $this.$position2 + 1 | 0;
    }
    return 0;
}
function ju_HashMap$AbstractMapIterator_checkConcurrentMod($this) {
    var var$1;
    if ($this.$expectedModCount == $this.$associatedMap0.$modCount1)
        return;
    var$1 = new ju_ConcurrentModificationException;
    jl_Throwable__init_0(var$1);
    $rt_throw(var$1);
}
function ju_HashMap$AbstractMapIterator_makeNext($this) {
    var var$1, var$2, var$3;
    ju_HashMap$AbstractMapIterator_checkConcurrentMod($this);
    if (!ju_HashMap$AbstractMapIterator_hasNext($this)) {
        var$1 = new ju_NoSuchElementException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    if ($this.$futureEntry === null) {
        var$2 = $this.$associatedMap0.$elementData.data;
        var$3 = $this.$position2;
        $this.$position2 = var$3 + 1 | 0;
        $this.$currentEntry = var$2[var$3];
        $this.$futureEntry = $this.$currentEntry.$next2;
        $this.$prevEntry = null;
    } else {
        if ($this.$currentEntry !== null)
            $this.$prevEntry = $this.$currentEntry;
        $this.$currentEntry = $this.$futureEntry;
        $this.$futureEntry = $this.$futureEntry.$next2;
    }
}
function ju_HashMap$KeyIterator() {
    ju_HashMap$AbstractMapIterator.call(this);
}
function ju_HashMap$KeyIterator_next($this) {
    ju_HashMap$AbstractMapIterator_makeNext($this);
    return $this.$currentEntry.$key;
}
function ju_NoSuchElementException() {
    jl_RuntimeException.call(this);
}
function jm_Division() {
    jl_Object.call(this);
}
function jm_Division_divide($quot, $quotLength, $a, $j, $b, $bLength) {
    var var$7, $normA, $normB, var$10, $divisorShift, $firstDivisorDigit, $i, var$14, var$15, var$16, var$17, var$18, $product, $longR, $res, $rem, $rOverflowed, $carry, $borrow, $k;
    var$7 = $b.data;
    $normA = $rt_createIntArray($j + 1 | 0);
    $normB = $rt_createIntArray($bLength + 1 | 0);
    var$10 = $bLength - 1 | 0;
    $divisorShift = jl_Integer_numberOfLeadingZeros(var$7[var$10]);
    if ($divisorShift) {
        jm_BitLevel_shiftLeft0($normB, $b, 0, $divisorShift);
        jm_BitLevel_shiftLeft0($normA, $a, 0, $divisorShift);
    } else {
        jl_System_arraycopy($a, 0, $normA, 0, $j);
        jl_System_arraycopy($b, 0, $normB, 0, $bLength);
    }
    var$7 = $normA.data;
    $a = $normB.data;
    $firstDivisorDigit = $a[var$10];
    $i = $quotLength - 1 | 0;
    var$14 = Long_and(Long_fromInt($firstDivisorDigit), new Long(4294967295, 0));
    var$15 = $bLength - 2 | 0;
    var$16 = Long_fromInt($firstDivisorDigit >>> 1);
    var$10 = $firstDivisorDigit & 1;
    var$17 = Long_shl(var$14, 1);
    while ($i >= 0) {
        a: {
            if (var$7[$j] == $firstDivisorDigit)
                var$18 = (-1);
            else {
                $product = Long_add(Long_shl(Long_and(Long_fromInt(var$7[$j]), new Long(4294967295, 0)), 32), Long_and(Long_fromInt(var$7[$j - 1 | 0]), new Long(4294967295, 0)));
                if (Long_ge($product, Long_ZERO)) {
                    $longR = Long_div($product, var$14);
                    $res = Long_rem($product, var$14);
                } else {
                    $res = Long_shru($product, 1);
                    $longR = Long_div($res, var$16);
                    $res = Long_add(Long_shl(Long_rem($res, var$16), 1), Long_and($product, Long_fromInt(1)));
                    if (var$10) {
                        if (Long_le($longR, $res))
                            $res = Long_sub($res, $longR);
                        else if (Long_gt(Long_sub($longR, $res), var$14)) {
                            $res = Long_add($res, Long_sub(var$17, $longR));
                            $longR = Long_sub($longR, Long_fromInt(2));
                        } else {
                            $res = Long_add($res, Long_sub(var$14, $longR));
                            $longR = Long_sub($longR, Long_fromInt(1));
                        }
                    }
                }
                $res = Long_or(Long_shl($res, 32), Long_and($longR, new Long(4294967295, 0)));
                var$18 = $res.lo;
                $rem = $res.hi;
                if (var$18) {
                    $rOverflowed = 0;
                    var$18 = var$18 + 1 | 0;
                    while (true) {
                        var$18 = var$18 + (-1) | 0;
                        if ($rOverflowed)
                            break;
                        $res = Long_mul(Long_and(Long_fromInt(var$18), new Long(4294967295, 0)), Long_and(Long_fromInt($a[var$15]), new Long(4294967295, 0)));
                        $longR = Long_fromInt($rem);
                        $carry = Long_add(Long_shl($longR, 32), Long_and(Long_fromInt(var$7[$j - 2 | 0]), new Long(4294967295, 0)));
                        $longR = Long_add(Long_and($longR, new Long(4294967295, 0)), var$14);
                        if (jl_Integer_numberOfLeadingZeros($longR.hi) >= 32)
                            $rem = $longR.lo;
                        else
                            $rOverflowed = 1;
                        if (Long_le(Long_xor($res, new Long(0, 2147483648)), Long_xor($carry, new Long(0, 2147483648))))
                            break a;
                    }
                }
            }
        }
        if (var$18) {
            $rem = $j - $bLength | 0;
            $res = Long_ZERO;
            $carry = Long_ZERO;
            $borrow = 0;
            while ($borrow < $bLength) {
                $product = jm_Multiplication_unsignedMultAddAdd($a[$borrow], var$18, $res.lo, 0);
                $rOverflowed = $rem + $borrow | 0;
                $res = Long_add(Long_sub(Long_and(Long_fromInt(var$7[$rOverflowed]), new Long(4294967295, 0)), Long_and($product, new Long(4294967295, 0))), $carry);
                var$7[$rOverflowed] = $res.lo;
                $carry = Long_shr($res, 32);
                $res = Long_shru($product, 32);
                $borrow = $borrow + 1 | 0;
            }
            $quotLength = $rem + $bLength | 0;
            $res = Long_add(Long_sub(Long_and(Long_fromInt(var$7[$quotLength]), new Long(4294967295, 0)), $res), $carry);
            var$7[$quotLength] = $res.lo;
            if ($res.hi) {
                var$18 = var$18 + (-1) | 0;
                $carry = Long_ZERO;
                $k = 0;
                while ($k < $bLength) {
                    $borrow = $rem + $k | 0;
                    $res = Long_add($carry, Long_add(Long_and(Long_fromInt(var$7[$borrow]), new Long(4294967295, 0)), Long_and(Long_fromInt($a[$k]), new Long(4294967295, 0))));
                    var$7[$borrow] = $res.lo;
                    $carry = Long_shru($res, 32);
                    $k = $k + 1 | 0;
                }
            }
        }
        if ($quot !== null)
            $quot.data[$i] = var$18;
        $j = $j + (-1) | 0;
        $i = $i + (-1) | 0;
    }
    if ($divisorShift) {
        jm_BitLevel_shiftRight0($normB, $bLength, $normA, 0, $divisorShift);
        return $normB;
    }
    jl_System_arraycopy($normA, 0, $normB, 0, $bLength);
    return $normA;
}
function ju_ListIterator() {
}
function ju_AbstractList$SubAbstractList$SubAbstractListIterator() {
    var a = this; jl_Object.call(a);
    a.$subList0 = null;
    a.$iterator0 = null;
    a.$start6 = 0;
    a.$end2 = 0;
}
function ju_AbstractList$SubAbstractList$SubAbstractListIterator_hasNext($this) {
    return $this.$iterator0.$i >= $this.$end2 ? 0 : 1;
}
function ju_AbstractList$SubAbstractList$SubAbstractListIterator_next($this) {
    var var$1;
    if ($this.$iterator0.$i < $this.$end2)
        return ju_AbstractList$TListIteratorImpl_next($this.$iterator0);
    var$1 = new ju_NoSuchElementException;
    jl_Throwable__init_0(var$1);
    $rt_throw(var$1);
}
function jur_AbstractCharClass$LazyJavaLowerCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$029 = null;
}
function jur_AbstractCharClass$LazyJavaLowerCase$1_contains($this, $ch) {
    return jl_Character_getType($ch) != 2 ? 0 : 1;
}
function jur_AbstractCharClass$LazyJavaUpperCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$030 = null;
}
function jur_AbstractCharClass$LazyJavaUpperCase$1_contains($this, $ch) {
    return jl_Character_getType($ch) != 1 ? 0 : 1;
}
function jur_AbstractCharClass$LazyJavaWhitespace$1() {
    jur_AbstractCharClass.call(this);
    this.$this$031 = null;
}
function jur_AbstractCharClass$LazyJavaWhitespace$1_contains($this, $ch) {
    return jl_Character_isWhitespace($ch);
}
function jur_AbstractCharClass$LazyJavaMirrored$1() {
    jur_AbstractCharClass.call(this);
    this.$this$032 = null;
}
function jur_AbstractCharClass$LazyJavaMirrored$1_contains($this, $ch) {
    return 0;
}
function jur_AbstractCharClass$LazyJavaDefined$1() {
    jur_AbstractCharClass.call(this);
    this.$this$033 = null;
}
function jur_AbstractCharClass$LazyJavaDefined$1_contains($this, $ch) {
    return !jl_Character_getType($ch) ? 0 : 1;
}
function jur_AbstractCharClass$LazyJavaDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$034 = null;
}
function jur_AbstractCharClass$LazyJavaDigit$1_contains($this, $ch) {
    return jl_Character_getType($ch) != 9 ? 0 : 1;
}
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1() {
    jur_AbstractCharClass.call(this);
    this.$this$035 = null;
}
function jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains($this, $ch) {
    return jl_Character_isIdentifierIgnorable($ch);
}
function jur_AbstractCharClass$LazyJavaISOControl$1() {
    jur_AbstractCharClass.call(this);
    this.$this$036 = null;
}
function jur_AbstractCharClass$LazyJavaISOControl$1_contains($this, $ch) {
    a: {
        b: {
            if (!($ch >= 0 && $ch <= 31)) {
                if ($ch < 127)
                    break b;
                if ($ch > 159)
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = 0;
    }
    return $ch;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$037 = null;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains($this, $ch) {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 23:
                case 26:
                    break;
                case 7:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 24:
                case 25:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$038 = null;
}
function jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains($this, $ch) {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 10:
                case 23:
                case 26:
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                case 24:
                case 25:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
}
function jur_AbstractCharClass$LazyJavaLetter$1() {
    jur_AbstractCharClass.call(this);
    this.$this$039 = null;
}
function jur_AbstractCharClass$LazyJavaLetter$1_contains($this, $ch) {
    a: {
        switch (jl_Character_getType($ch)) {
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
                break;
            default:
                $ch = 0;
                break a;
        }
        $ch = 1;
    }
    return $ch;
}
function jur_AbstractCharClass$LazyJavaLetterOrDigit$1() {
    jur_AbstractCharClass.call(this);
    this.$this$040 = null;
}
function jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains($this, $ch) {
    return jl_Character_isLetterOrDigit($ch);
}
function jur_AbstractCharClass$LazyJavaSpaceChar$1() {
    jur_AbstractCharClass.call(this);
    this.$this$041 = null;
}
function jur_AbstractCharClass$LazyJavaSpaceChar$1_contains($this, $ch) {
    return jl_Character_isSpaceChar($ch);
}
function jur_AbstractCharClass$LazyJavaTitleCase$1() {
    jur_AbstractCharClass.call(this);
    this.$this$042 = null;
}
function jur_AbstractCharClass$LazyJavaTitleCase$1_contains($this, $ch) {
    return jl_Character_getType($ch) != 3 ? 0 : 1;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$043 = null;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains($this, $ch) {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 6:
                case 8:
                case 9:
                case 10:
                case 23:
                    break;
                case 7:
                case 11:
                case 12:
                case 13:
                case 14:
                case 15:
                case 16:
                case 17:
                case 18:
                case 19:
                case 20:
                case 21:
                case 22:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1() {
    jur_AbstractCharClass.call(this);
    this.$this$044 = null;
}
function jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains($this, $ch) {
    a: {
        b: {
            switch (jl_Character_getType($ch)) {
                case 1:
                case 2:
                case 3:
                case 4:
                case 5:
                case 10:
                    break;
                case 6:
                case 7:
                case 8:
                case 9:
                    break b;
                default:
                    break b;
            }
            $ch = 1;
            break a;
        }
        $ch = jl_Character_isIdentifierIgnorable($ch);
    }
    return $ch;
}
function jur_UnicodeCategory() {
    jur_AbstractCharClass.call(this);
    this.$category1 = 0;
}
function jur_UnicodeCategory__init_(var_0) {
    var var_1 = new jur_UnicodeCategory();
    jur_UnicodeCategory__init_0(var_1, var_0);
    return var_1;
}
function jur_UnicodeCategory__init_0($this, $category) {
    jur_AbstractCharClass__init_0($this);
    $this.$category1 = $category;
}
function jur_UnicodeCategory_contains($this, $ch) {
    return $this.$alt0 ^ ($this.$category1 != jl_Character_getType($ch & 65535) ? 0 : 1);
}
function jur_UnicodeCategoryScope() {
    jur_UnicodeCategory.call(this);
}
function jur_UnicodeCategoryScope_contains($this, $ch) {
    return $this.$alt0 ^ (!($this.$category1 >> jl_Character_getType($ch & 65535) & 1) ? 0 : 1);
}
function ju_Objects() {
    jl_Object.call(this);
}
function ju_Vector$1() {
    var a = this; jl_Object.call(a);
    a.$pos = 0;
    a.$this$045 = null;
}
function ju_Vector$1_hasMoreElements($this) {
    return $this.$pos >= $this.$this$045.$elementCount1 ? 0 : 1;
}
function ju_Vector$1_nextElement($this) {
    var var$1, var$2, var$3, var$4, $$je;
    var$1 = $this.$this$045;
    jl_Object_monitorEnterSync(var$1);
    a: {
        b: {
            try {
                if ($this.$pos < $this.$this$045.$elementCount1)
                    break b;
                jl_Object_monitorExitSync(var$1);
            } catch ($$e) {
                $$je = $rt_wrapException($$e);
                var$2 = $$je;
                break a;

            }
            var$1 = new ju_NoSuchElementException;
            jl_Throwable__init_0(var$1);
            $rt_throw(var$1);
        }
        try {
            var$3 = $this.$this$045.$elementData1.data;
            var$4 = $this.$pos;
            $this.$pos = var$4 + 1 | 0;
            var$2 = var$3[var$4];
            jl_Object_monitorExitSync(var$1);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            var$2 = $$je;
            break a;

        }
        return var$2;
    }
    jl_Object_monitorExitSync(var$1);
    $rt_throw(var$2);
}
function cjag_AreaIterator() {
    var a = this; jl_Object.call(a);
    a.$transform0 = null;
    a.$curves0 = null;
    a.$index5 = 0;
    a.$prevcurve = null;
    a.$thiscurve = null;
}
function cjag_AreaIterator_getWindingRule($this) {
    return 1;
}
function cjag_AreaIterator_isDone($this) {
    return $this.$prevcurve === null && $this.$thiscurve === null ? 1 : 0;
}
function cjag_AreaIterator_next($this) {
    if ($this.$prevcurve !== null)
        $this.$prevcurve = null;
    else {
        $this.$prevcurve = $this.$thiscurve;
        $this.$index5 = $this.$index5 + 1 | 0;
        if ($this.$index5 >= ju_Vector_size($this.$curves0))
            $this.$thiscurve = null;
        else {
            $this.$thiscurve = ju_Vector_elementAt($this.$curves0, $this.$index5);
            if ($this.$thiscurve.$getOrder() && $this.$prevcurve.$getX1() === $this.$thiscurve.$getX0() && $this.$prevcurve.$getY1() === $this.$thiscurve.$getY0())
                $this.$prevcurve = null;
        }
    }
}
function cjag_AreaIterator_currentSegment($this, $coords) {
    var var$2, $segtype, $numpoints, var$5;
    a: {
        if ($this.$prevcurve !== null) {
            if ($this.$thiscurve !== null && $this.$thiscurve.$getOrder()) {
                var$2 = $coords.data;
                var$2[0] = $this.$thiscurve.$getX0();
                var$2[1] = $this.$thiscurve.$getY0();
                $segtype = 1;
                $numpoints = 1;
                break a;
            }
            return 4;
        }
        if ($this.$thiscurve === null) {
            var$5 = new ju_NoSuchElementException;
            jl_Throwable__init_(var$5, $rt_s(483));
            $rt_throw(var$5);
        }
        $segtype = $this.$thiscurve.$getSegment($coords);
        $numpoints = $this.$thiscurve.$getOrder();
        if (!$numpoints)
            $numpoints = 1;
    }
    if ($this.$transform0 !== null)
        cjag_AffineTransform_transform0($this.$transform0, $coords, 0, $coords, 0, $numpoints);
    return $segtype;
}
function cjt_Normalizer$1() {
    jl_Object.call(this);
}
var cjt_Normalizer$1_$SwitchMap$compat$java$text$Normalizer$Form = null;
function cjt_Normalizer$1_$callClinit() {
    cjt_Normalizer$1_$callClinit = $rt_eraseClinit(cjt_Normalizer$1);
    cjt_Normalizer$1__clinit_();
}
function cjt_Normalizer$1__clinit_() {
    var $$je;
    cjt_Normalizer$1_$SwitchMap$compat$java$text$Normalizer$Form = $rt_createIntArray(cjt_Normalizer$Form_$VALUES.$clone().data.length);
    a: {
        try {
            cjt_Normalizer$1_$SwitchMap$compat$java$text$Normalizer$Form.data[jl_Enum_ordinal(cjt_Normalizer$Form_NFC)] = 1;
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    b: {
        try {
            cjt_Normalizer$1_$SwitchMap$compat$java$text$Normalizer$Form.data[jl_Enum_ordinal(cjt_Normalizer$Form_NFD)] = 2;
            break b;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    c: {
        try {
            cjt_Normalizer$1_$SwitchMap$compat$java$text$Normalizer$Form.data[jl_Enum_ordinal(cjt_Normalizer$Form_NFKC)] = 3;
            break c;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    d: {
        try {
            cjt_Normalizer$1_$SwitchMap$compat$java$text$Normalizer$Form.data[jl_Enum_ordinal(cjt_Normalizer$Form_NFKD)] = 4;
            break d;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
}
function oacc_IOUtils() {
    jl_Object.call(this);
}
function ju_TreeMap$EntryIterator() {
    var a = this; jl_Object.call(a);
    a.$modCount5 = 0;
    a.$owner1 = null;
    a.$path0 = null;
    a.$last = null;
    a.$to0 = null;
    a.$depth = 0;
    a.$reverse0 = 0;
}
function ju_TreeMap$EntryIterator__init_(var_0, var_1, var_2, var_3) {
    var var_4 = new ju_TreeMap$EntryIterator();
    ju_TreeMap$EntryIterator__init_0(var_4, var_0, var_1, var_2, var_3);
    return var_4;
}
function ju_TreeMap$EntryIterator__init_0($this, $owner, $path, $to, $reverse) {
    var var$5, var$6;
    $this.$owner1 = $owner;
    $this.$modCount5 = $owner.$modCount2;
    var$5 = $owner.$root0 === null ? 0 : $owner.$root0.$height2;
    var$6 = $path.data;
    $this.$path0 = ju_Arrays_copyOf0($path, var$5);
    $this.$depth = var$6.length;
    $this.$to0 = $to;
    $this.$reverse0 = $reverse;
}
function ju_TreeMap$EntryIterator_hasNext($this) {
    return $this.$depth <= 0 ? 0 : 1;
}
function ju_TreeMap$EntryIterator_next($this) {
    var $node, var$2, var$3, $down, var$5;
    if ($this.$modCount5 != $this.$owner1.$modCount2) {
        $node = new ju_ConcurrentModificationException;
        jl_Throwable__init_0($node);
        $rt_throw($node);
    }
    if (!$this.$depth) {
        $node = new ju_NoSuchElementException;
        jl_Throwable__init_0($node);
        $rt_throw($node);
    }
    a: {
        var$2 = $this.$path0.data;
        var$3 = $this.$depth - 1 | 0;
        $this.$depth = var$3;
        $node = var$2[var$3];
        $this.$last = $node;
        $down = ju_TreeMap$TreeNode_down($node, $this.$reverse0);
        if ($down !== null)
            while (true) {
                if ($down === null)
                    break a;
                var$2 = $this.$path0.data;
                var$5 = $this.$depth;
                $this.$depth = var$5 + 1 | 0;
                var$2[var$5] = $down;
                $down = ju_TreeMap$TreeNode_forward($down, $this.$reverse0);
            }
    }
    if ($this.$last === $this.$to0)
        $this.$depth = 0;
    return $this.$last;
}
function ju_TreeMap$EntryIterator_next0($this) {
    return ju_TreeMap$EntryIterator_next($this);
}
function jur_MatchResultImpl() {
    var a = this; jl_Object.call(a);
    a.$groupBounds = null;
    a.$consumers = null;
    a.$compQuantCounters = null;
    a.$string3 = null;
    a.$groupCount = 0;
    a.$valid = 0;
    a.$leftBound0 = 0;
    a.$rightBound0 = 0;
    a.$startIndex = 0;
    a.$transparentBounds = 0;
    a.$anchoringBounds = 0;
    a.$hitEnd = 0;
    a.$requireEnd = 0;
    a.$previousMatch = 0;
    a.$mode0 = 0;
}
function jur_MatchResultImpl_setConsumed($this, $counter, $value) {
    $this.$consumers.data[$counter] = $value;
}
function jur_MatchResultImpl_getConsumed($this, $counter) {
    return $this.$consumers.data[$counter];
}
function jur_MatchResultImpl_end($this) {
    return jur_MatchResultImpl_end0($this, 0);
}
function jur_MatchResultImpl_end0($this, $group) {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
}
function jur_MatchResultImpl_setStart($this, $group, $offset) {
    $this.$groupBounds.data[$group * 2 | 0] = $offset;
}
function jur_MatchResultImpl_setEnd($this, $group, $offset) {
    $this.$groupBounds.data[($group * 2 | 0) + 1 | 0] = $offset;
}
function jur_MatchResultImpl_getStart($this, $group) {
    return $this.$groupBounds.data[$group * 2 | 0];
}
function jur_MatchResultImpl_getEnd($this, $group) {
    return $this.$groupBounds.data[($group * 2 | 0) + 1 | 0];
}
function jur_MatchResultImpl_getGroupNoCheck($this, $group) {
    var $st, $end;
    $st = jur_MatchResultImpl_getStart($this, $group);
    $end = jur_MatchResultImpl_getEnd($this, $group);
    if (($end | $st | ($end - $st | 0)) >= 0 && $end <= jl_String_length($this.$string3))
        return jl_String_substring($this.$string3, $st, $end);
    return null;
}
function jur_MatchResultImpl_start($this) {
    return jur_MatchResultImpl_start0($this, 0);
}
function jur_MatchResultImpl_start0($this, $group) {
    jur_MatchResultImpl_checkGroup($this, $group);
    return $this.$groupBounds.data[$group * 2 | 0];
}
function jur_MatchResultImpl_finalizeMatch($this) {
    if ($this.$groupBounds.data[0] == (-1)) {
        $this.$groupBounds.data[0] = $this.$startIndex;
        $this.$groupBounds.data[1] = $this.$startIndex;
    }
    $this.$previousMatch = jur_MatchResultImpl_end($this);
}
function jur_MatchResultImpl_getEnterCounter($this, $setCounter) {
    return $this.$compQuantCounters.data[$setCounter];
}
function jur_MatchResultImpl_setEnterCounter($this, $setCounter, $value) {
    $this.$compQuantCounters.data[$setCounter] = $value;
}
function jur_MatchResultImpl_checkGroup($this, $group) {
    var var$2;
    if (!$this.$valid) {
        var$2 = new jl_IllegalStateException;
        jl_Throwable__init_0(var$2);
        $rt_throw(var$2);
    }
    if ($group >= 0 && $group < $this.$groupCount)
        return;
    var$2 = new jl_IndexOutOfBoundsException;
    jl_Throwable__init_(var$2, jl_String_valueOf1($group));
    $rt_throw(var$2);
}
function jur_MatchResultImpl_setValid($this) {
    $this.$valid = 1;
}
function jur_MatchResultImpl_isValid($this) {
    return $this.$valid;
}
function jur_MatchResultImpl_reset($this, $newSequence, $leftBound, $rightBound) {
    $this.$valid = 0;
    $this.$mode0 = 2;
    ju_Arrays_fill($this.$groupBounds, (-1));
    ju_Arrays_fill($this.$consumers, (-1));
    if ($newSequence !== null)
        $this.$string3 = $newSequence;
    if ($leftBound >= 0) {
        $this.$leftBound0 = $leftBound;
        $this.$rightBound0 = $rightBound;
    }
    $this.$startIndex = $this.$leftBound0;
}
function jur_MatchResultImpl_reset0($this) {
    jur_MatchResultImpl_reset($this, null, (-1), (-1));
}
function jur_MatchResultImpl_setStartIndex($this, $startIndex) {
    $this.$startIndex = $startIndex;
    if ($this.$previousMatch >= 0)
        $startIndex = $this.$previousMatch;
    $this.$previousMatch = $startIndex;
}
function jur_MatchResultImpl_getLeftBound($this) {
    return $this.$leftBound0;
}
function jur_MatchResultImpl_getRightBound($this) {
    return $this.$rightBound0;
}
function jur_MatchResultImpl_setMode($this, $mode) {
    $this.$mode0 = $mode;
}
function jur_MatchResultImpl_mode($this) {
    return $this.$mode0;
}
function jur_MatchResultImpl_hasAnchoringBounds($this) {
    return $this.$anchoringBounds;
}
function jur_MatchResultImpl_hasTransparentBounds($this) {
    return $this.$transparentBounds;
}
function jur_MatchResultImpl_getPreviousMatchEnd($this) {
    return $this.$previousMatch;
}
function oljis_Boundable() {
}
function oljis_ItemBoundable() {
    var a = this; jl_Object.call(a);
    a.$bounds0 = null;
    a.$item = null;
}
function oljis_ItemBoundable_getBounds($this) {
    return $this.$bounds0;
}
function oljis_ItemBoundable_getItem($this) {
    return $this.$item;
}
function otcit_FloatAnalyzer() {
    jl_Object.call(this);
}
var otcit_FloatAnalyzer_mantissa10Table = null;
var otcit_FloatAnalyzer_exp10Table = null;
function otcit_FloatAnalyzer_analyze($d, $result) {
    var $bits, $mantissa, $exponent, $errorShift, $decExponent, $mantissaShift, var$9, $decMantissa, $error, $upError, $downError, $lowerPos, $upperPos;
    $bits = $rt_floatToIntBits($d);
    $result.$sign = !($bits & (-2147483648)) ? 0 : 1;
    $mantissa = $bits & 8388607;
    $exponent = $bits >> 23 & 255;
    if (!$mantissa && !$exponent) {
        $result.$mantissa = 0;
        $result.$exponent = 0;
        return;
    }
    $errorShift = 0;
    if ($exponent)
        $mantissa = $mantissa | 8388608;
    else {
        $mantissa = $mantissa << 1;
        while (Long_eq(Long_and(Long_fromInt($mantissa), Long_fromInt(8388608)), Long_ZERO)) {
            $mantissa = $mantissa << 1;
            $exponent = $exponent + (-1) | 0;
            $errorShift = $errorShift + 1 | 0;
        }
    }
    $decExponent = ju_Arrays_binarySearch(otcit_FloatAnalyzer_exp10Table, $exponent);
    if ($decExponent < 0)
        $decExponent =  -$decExponent - 2 | 0;
    $mantissaShift = 9 + ($exponent - otcit_FloatAnalyzer_exp10Table.data[$decExponent] | 0) | 0;
    var$9 = Long_fromInt($mantissa);
    $decMantissa = Long_shru(Long_mul(var$9, Long_fromInt(otcit_FloatAnalyzer_mantissa10Table.data[$decExponent])), 32 - $mantissaShift | 0).lo;
    if ($decMantissa >= 1000000000) {
        $decExponent = $decExponent + 1 | 0;
        $mantissaShift = 9 + ($exponent - otcit_FloatAnalyzer_exp10Table.data[$decExponent] | 0) | 0;
        $decMantissa = Long_shru(Long_mul(var$9, Long_fromInt(otcit_FloatAnalyzer_mantissa10Table.data[$decExponent])), 32 - $mantissaShift | 0).lo;
    }
    $errorShift = (31 - $mantissaShift | 0) - $errorShift | 0;
    $error = $errorShift >= 0 ? otcit_FloatAnalyzer_mantissa10Table.data[$decExponent] >>> $errorShift : otcit_FloatAnalyzer_mantissa10Table.data[$decExponent] <<  -$errorShift;
    $upError = ($error + 1 | 0) >> 1;
    $downError = $error >> 1;
    if ($mantissa == 4194304)
        $downError = $downError >> 2;
    $lowerPos = 10;
    while ($lowerPos <= $downError) {
        $lowerPos = $lowerPos * 10 | 0;
    }
    if (($decMantissa % $lowerPos | 0) >= ($downError / 2 | 0))
        $lowerPos = $lowerPos / 10 | 0;
    $upperPos = 10;
    while ($upperPos <= $upError) {
        $upperPos = $upperPos * 10 | 0;
    }
    if (($upperPos - ($decMantissa % $upperPos | 0) | 0) > ($upError / 2 | 0))
        $upperPos = $upperPos / 10 | 0;
    $mantissa = $rt_compare($lowerPos, $upperPos);
    $mantissa = $mantissa > 0 ? $rt_imul($decMantissa / $lowerPos | 0, $lowerPos) : $mantissa < 0 ? $rt_imul($decMantissa / $upperPos | 0, $upperPos) + $upperPos | 0 : $rt_imul(($decMantissa + ($upperPos / 2 | 0) | 0) / $upperPos | 0, $upperPos);
    if ($mantissa >= 1000000000) {
        $decExponent = $decExponent + 1 | 0;
        $mantissa = $mantissa / 10 | 0;
    } else if ($mantissa < 100000000) {
        $decExponent = $decExponent + (-1) | 0;
        $mantissa = $mantissa * 10 | 0;
    }
    $result.$mantissa = $mantissa;
    $result.$exponent = $decExponent - 50 | 0;
}
function otcit_FloatAnalyzer__clinit_() {
    var $decMantissaOne, $exponent, $i, $maxMantissa, var$5, var$6, $remainder, $shift;
    otcit_FloatAnalyzer_mantissa10Table = $rt_createIntArray(100);
    otcit_FloatAnalyzer_exp10Table = $rt_createIntArray(100);
    $decMantissaOne = 2000000000;
    $exponent = 127;
    $i = 0;
    $maxMantissa = $decMantissaOne;
    while ($i < 50) {
        var$5 = otcit_FloatAnalyzer_mantissa10Table.data;
        var$6 = $i + 50 | 0;
        var$5[var$6] = $rt_udiv($maxMantissa, 20);
        otcit_FloatAnalyzer_exp10Table.data[var$6] = $exponent;
        var$6 = $rt_udiv($maxMantissa, 10);
        $remainder = $rt_umod(var$6, 10);
        while (var$6 <= $decMantissaOne && !(var$6 & (-2147483648))) {
            var$6 = var$6 << 1;
            $exponent = $exponent + 1 | 0;
            $remainder = $remainder << 1;
        }
        $maxMantissa = var$6 + ($remainder / 10 | 0) | 0;
        $i = $i + 1 | 0;
    }
    $exponent = 127;
    $i = 0;
    while ($i < 50) {
        $shift = 0;
        $remainder = $decMantissaOne;
        while ($remainder > 214748364) {
            $remainder = $remainder >> 1;
            $shift = $shift + 1 | 0;
            $exponent = $exponent + (-1) | 0;
        }
        $remainder = $remainder * 10 | 0;
        $decMantissaOne = $shift <= 0 ? $remainder : Long_add(Long_fromInt($remainder), Long_shr(Long_mul(Long_fromInt($decMantissaOne & ((1 << $shift) - 1 | 0)), Long_fromInt(10)), $shift)).lo;
        var$5 = otcit_FloatAnalyzer_mantissa10Table.data;
        $shift = (50 - $i | 0) - 1 | 0;
        var$5[$shift] = $rt_udiv($decMantissaOne, 20);
        otcit_FloatAnalyzer_exp10Table.data[$shift] = $exponent;
        $i = $i + 1 | 0;
    }
}
function oacc_CSVFormat$1() {
    jl_Object.call(this);
}
var oacc_CSVFormat$1_$SwitchMap$org$apache$commons$csv$QuoteMode = null;
function oacc_CSVFormat$1_$callClinit() {
    oacc_CSVFormat$1_$callClinit = $rt_eraseClinit(oacc_CSVFormat$1);
    oacc_CSVFormat$1__clinit_();
}
function oacc_CSVFormat$1__clinit_() {
    var $$je;
    oacc_CSVFormat$1_$SwitchMap$org$apache$commons$csv$QuoteMode = $rt_createIntArray(oacc_QuoteMode_$VALUES.$clone().data.length);
    a: {
        try {
            oacc_CSVFormat$1_$SwitchMap$org$apache$commons$csv$QuoteMode.data[jl_Enum_ordinal(oacc_QuoteMode_ALL)] = 1;
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    b: {
        try {
            oacc_CSVFormat$1_$SwitchMap$org$apache$commons$csv$QuoteMode.data[jl_Enum_ordinal(oacc_QuoteMode_ALL_NON_NULL)] = 2;
            break b;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    c: {
        try {
            oacc_CSVFormat$1_$SwitchMap$org$apache$commons$csv$QuoteMode.data[jl_Enum_ordinal(oacc_QuoteMode_NON_NUMERIC)] = 3;
            break c;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    d: {
        try {
            oacc_CSVFormat$1_$SwitchMap$org$apache$commons$csv$QuoteMode.data[jl_Enum_ordinal(oacc_QuoteMode_NONE)] = 4;
            break d;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
    e: {
        try {
            oacc_CSVFormat$1_$SwitchMap$org$apache$commons$csv$QuoteMode.data[jl_Enum_ordinal(oacc_QuoteMode_MINIMAL)] = 5;
            break e;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_NoSuchFieldError) {
            } else {
                throw $$e;
            }
        }
    }
}
function oljis_AbstractNode() {
    var a = this; jl_Object.call(a);
    a.$childBoundables = null;
    a.$bounds = null;
    a.$level = 0;
}
function oljis_AbstractNode_getChildBoundables($this) {
    return $this.$childBoundables;
}
function oljis_AbstractNode_getBounds($this) {
    if ($this.$bounds === null)
        $this.$bounds = oljis_STRtree$STRtreeNode_computeBounds($this);
    return $this.$bounds;
}
function oljis_AbstractNode_isEmpty($this) {
    return ju_AbstractCollection_isEmpty($this.$childBoundables);
}
function oljis_AbstractNode_addChildBoundable($this, $childBoundable) {
    olju_Assert_isTrue0($this.$bounds !== null ? 0 : 1);
    ju_ArrayList_add($this.$childBoundables, $childBoundable);
}
function jnc_CoderMalfunctionError() {
    jl_Error.call(this);
}
function cjag_Point2D$Double() {
    var a = this; cjag_Point2D.call(a);
    a.$x5 = 0.0;
    a.$y5 = 0.0;
}
function cjag_Point2D$Double__init_(var_0, var_1) {
    var var_2 = new cjag_Point2D$Double();
    cjag_Point2D$Double__init_0(var_2, var_0, var_1);
    return var_2;
}
function cjag_Point2D$Double__init_0($this, $x, $y) {
    $this.$x5 = $x;
    $this.$y5 = $y;
}
function cjag_Point2D$Double_getX($this) {
    return $this.$x5;
}
function cjag_Point2D$Double_getY($this) {
    return $this.$y5;
}
function tt_Page$1() {
    jl_Object.call(this);
    this.$this$04 = null;
}
function tt_Page$1_compare($this, $te1, $te2) {
    return $rt_compare($te1.$width0, $te2.$width0);
}
function tt_Page$1_compare0($this, var$1, var$2) {
    return tt_Page$1_compare($this, var$1, var$2);
}
function tt_Page$2() {
    jl_Object.call(this);
    this.$this$05 = null;
}
function tt_Page$2_compare($this, $te1, $te2) {
    return $rt_compare($te1.$height0, $te2.$height0);
}
function tt_Page$2_compare0($this, var$1, var$2) {
    return tt_Page$2_compare($this, var$1, var$2);
}
function ju_Formatter() {
    var a = this; jl_Object.call(a);
    a.$locale = null;
    a.$out3 = null;
    a.$ioException = null;
}
function ju_Formatter__init_(var_0) {
    var var_1 = new ju_Formatter();
    ju_Formatter__init_1(var_1, var_0);
    return var_1;
}
function ju_Formatter__init_0(var_0, var_1) {
    var var_2 = new ju_Formatter();
    ju_Formatter__init_2(var_2, var_0, var_1);
    return var_2;
}
function ju_Formatter__init_1($this, $l) {
    var var$2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    ju_Formatter__init_2($this, var$2, $l);
}
function ju_Formatter__init_2($this, $a, $l) {
    $this.$out3 = $a;
    $this.$locale = $l;
}
function ju_Formatter_requireOpen($this) {
    var var$1;
    if ($this.$out3 !== null)
        return;
    var$1 = new ju_FormatterClosedException;
    jl_Throwable__init_0(var$1);
    $rt_throw(var$1);
}
function ju_Formatter_toString($this) {
    ju_Formatter_requireOpen($this);
    return jl_AbstractStringBuilder_toString($this.$out3);
}
function ju_Formatter_close($this) {
    var $e, $$je;
    ju_Formatter_requireOpen($this);
    a: {
        b: {
            c: {
                d: {
                    try {
                        if ($rt_isInstance($this.$out3, ji_Closeable))
                            $this.$out3.$close();
                    } catch ($$e) {
                        $$je = $rt_wrapException($$e);
                        if ($$je instanceof ji_IOException) {
                            $e = $$je;
                            break d;
                        } else{
                            $e = $$je;
                            break c;
                        }
                    }
                    $this.$out3 = null;
                    break a;
                }
                try {
                    $this.$ioException = $e;
                    break b;
                } catch ($$e) {
                    $$je = $rt_wrapException($$e);
                    $e = $$je;

                }
            }
            $this.$out3 = null;
            $rt_throw($e);
        }
        $this.$out3 = null;
    }
}
function ju_Formatter_format($this, $format, $args) {
    return ju_Formatter_format0($this, $this.$locale, $format, $args);
}
function ju_Formatter_format0($this, $l, $format, $args) {
    var $e, $$je;
    ju_Formatter_requireOpen($this);
    a: {
        try {
            if ($args === null)
                $args = $rt_createArray(jl_Object, 1);
            ju_Formatter$FormatWriter_write(ju_Formatter$FormatWriter__init_($this, $this.$out3, $l, $format, $args));
            break a;
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof ji_IOException) {
                $e = $$je;
            } else {
                throw $$e;
            }
        }
        $this.$ioException = $e;
    }
    return $this;
}
function ju_Locale() {
    var a = this; jl_Object.call(a);
    a.$countryCode = null;
    a.$languageCode = null;
    a.$variantCode = null;
}
var ju_Locale_defaultLocale = null;
var ju_Locale_CANADA = null;
var ju_Locale_CANADA_FRENCH = null;
var ju_Locale_CHINA = null;
var ju_Locale_CHINESE = null;
var ju_Locale_ENGLISH = null;
var ju_Locale_FRANCE = null;
var ju_Locale_FRENCH = null;
var ju_Locale_GERMAN = null;
var ju_Locale_GERMANY = null;
var ju_Locale_ITALIAN = null;
var ju_Locale_ITALY = null;
var ju_Locale_JAPAN = null;
var ju_Locale_JAPANESE = null;
var ju_Locale_KOREA = null;
var ju_Locale_KOREAN = null;
var ju_Locale_PRC = null;
var ju_Locale_SIMPLIFIED_CHINESE = null;
var ju_Locale_TAIWAN = null;
var ju_Locale_TRADITIONAL_CHINESE = null;
var ju_Locale_UK = null;
var ju_Locale_US = null;
var ju_Locale_ROOT = null;
function ju_Locale__init_(var_0, var_1) {
    var var_2 = new ju_Locale();
    ju_Locale__init_0(var_2, var_0, var_1);
    return var_2;
}
function ju_Locale__init_1(var_0, var_1, var_2) {
    var var_3 = new ju_Locale();
    ju_Locale__init_2(var_3, var_0, var_1, var_2);
    return var_3;
}
function ju_Locale__init_0($this, $language, $country) {
    ju_Locale__init_2($this, $language, $country, $rt_s(44));
}
function ju_Locale__init_2($this, $language, $country, $variant) {
    if ($language !== null && $country !== null && $variant !== null) {
        if (!jl_String_length($language) && !jl_String_length($country)) {
            $this.$languageCode = $rt_s(44);
            $this.$countryCode = $rt_s(44);
            $this.$variantCode = $variant;
            return;
        }
        $this.$languageCode = $language;
        $this.$countryCode = $country;
        $this.$variantCode = $variant;
        return;
    }
    $language = new jl_NullPointerException;
    jl_Throwable__init_0($language);
    $rt_throw($language);
}
function ju_Locale_getCountry($this) {
    return $this.$countryCode;
}
function ju_Locale_getLanguage($this) {
    return $this.$languageCode;
}
function ju_Locale__clinit_() {
    var $localeName, $countryIndex;
    ju_Locale_CANADA = ju_Locale__init_($rt_s(484), $rt_s(485));
    ju_Locale_CANADA_FRENCH = ju_Locale__init_($rt_s(486), $rt_s(485));
    ju_Locale_CHINA = ju_Locale__init_($rt_s(487), $rt_s(488));
    ju_Locale_CHINESE = ju_Locale__init_($rt_s(487), $rt_s(44));
    ju_Locale_ENGLISH = ju_Locale__init_($rt_s(484), $rt_s(44));
    ju_Locale_FRANCE = ju_Locale__init_($rt_s(486), $rt_s(489));
    ju_Locale_FRENCH = ju_Locale__init_($rt_s(486), $rt_s(44));
    ju_Locale_GERMAN = ju_Locale__init_($rt_s(490), $rt_s(44));
    ju_Locale_GERMANY = ju_Locale__init_($rt_s(490), $rt_s(491));
    ju_Locale_ITALIAN = ju_Locale__init_($rt_s(492), $rt_s(44));
    ju_Locale_ITALY = ju_Locale__init_($rt_s(492), $rt_s(493));
    ju_Locale_JAPAN = ju_Locale__init_($rt_s(494), $rt_s(495));
    ju_Locale_JAPANESE = ju_Locale__init_($rt_s(494), $rt_s(44));
    ju_Locale_KOREA = ju_Locale__init_($rt_s(496), $rt_s(497));
    ju_Locale_KOREAN = ju_Locale__init_($rt_s(496), $rt_s(44));
    ju_Locale_PRC = ju_Locale__init_($rt_s(487), $rt_s(488));
    ju_Locale_SIMPLIFIED_CHINESE = ju_Locale__init_($rt_s(487), $rt_s(488));
    ju_Locale_TAIWAN = ju_Locale__init_($rt_s(487), $rt_s(498));
    ju_Locale_TRADITIONAL_CHINESE = ju_Locale__init_($rt_s(487), $rt_s(498));
    ju_Locale_UK = ju_Locale__init_($rt_s(484), $rt_s(499));
    ju_Locale_US = ju_Locale__init_($rt_s(484), $rt_s(500));
    ju_Locale_ROOT = ju_Locale__init_($rt_s(44), $rt_s(44));
    if (otciu_CLDRHelper_$$metadata$$10 === null)
        otciu_CLDRHelper_$$metadata$$10 = otciu_CLDRHelper_getDefaultLocale$$create();
    $localeName = (otciu_CLDRHelper_$$metadata$$10.value !== null ? $rt_str(otciu_CLDRHelper_$$metadata$$10.value) : null);
    $countryIndex = jl_String_indexOf0($localeName, 95);
    ju_Locale_defaultLocale = ju_Locale__init_1(jl_String_substring($localeName, 0, $countryIndex), jl_String_substring0($localeName, $countryIndex + 1 | 0), $rt_s(44));
}
function ju_AbstractList$TListIteratorImpl() {
    var a = this; jl_Object.call(a);
    a.$i = 0;
    a.$j = 0;
    a.$lastModCount = 0;
    a.$sz = 0;
    a.$this$01 = null;
}
function ju_AbstractList$TListIteratorImpl_next($this) {
    var var$1, var$2;
    if ($this.$lastModCount < $this.$this$01.$modCount) {
        var$1 = new ju_ConcurrentModificationException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    if ($this.$i == $this.$sz) {
        var$1 = new ju_NoSuchElementException;
        jl_Throwable__init_0(var$1);
        $rt_throw(var$1);
    }
    $this.$j = $this.$i;
    var$1 = $this.$this$01;
    var$2 = $this.$i;
    $this.$i = var$2 + 1 | 0;
    return ju_ArrayList_get(var$1, var$2);
}
function ju_AbstractList$TListIteratorImpl_nextIndex($this) {
    return $this.$i;
}
function otciu_CLDRHelper() {
    jl_Object.call(this);
}
var otciu_CLDRHelper_$$metadata$$0 = null;
var otciu_CLDRHelper_$$metadata$$10 = null;
var otciu_CLDRHelper_$$metadata$$17 = null;
var otciu_CLDRHelper_$$metadata$$20 = null;
function otciu_CLDRHelper_getCode($language, $country) {
    var var$3;
    if (!jl_String_isEmpty($country)) {
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $language);
        jl_AbstractStringBuilder_append(var$3, $rt_s(126));
        jl_AbstractStringBuilder_append(var$3, $country);
        $language = jl_AbstractStringBuilder_toString(var$3);
    }
    return $language;
}
function otciu_CLDRHelper_getLikelySubtagsMap$$create() {
    return {"ksh": {"value" : "ksh-Latn-DE"}, "ksj": {"value" : "ksj-Latn-ZZ"}, "cch": {"value" : "cch-Latn-NG"}, "und-Khar": {"value" : "pra-Khar-PK"}, "gkn": {"value" : "gkn-Latn-ZZ"}, "ksr": {"value" : "ksr-Latn-ZZ"}, "und-Mani": {"value" : "xmn-Mani-CN"}, "gkp": {"value" : "gkp-Latn-ZZ"}, "xmf": {"value" : "xmf-Geor-GE"}, "ccp": {"value" : "ccp-Cakm-BD"}, "ted": {"value" : "ted-Latn-ZZ"}, "und-Mand": {"value" : "myz-Mand-IR"}, "ktb": {"value" : "ktb-Ethi-ZZ"}, "xmn": {"value" : "xmn-Mani-CN"}, "sd-Sind":
    {"value" : "sd-Sind-IN"}, "xmr": {"value" : "xmr-Merc-SD"}, "tem": {"value" : "tem-Latn-SL"}, "und-Mroo": {"value" : "mro-Mroo-BD"}, "teo": {"value" : "teo-Latn-UG"}, "tet": {"value" : "tet-Latn-TL"}, "ktm": {"value" : "ktm-Latn-ZZ"}, "glk": {"value" : "glk-Arab-IR"}, "kto": {"value" : "kto-Latn-ZZ"}, "und-Soyo": {"value" : "cmg-Soyo-MN"}, "xna": {"value" : "xna-Narb-SA"}, "tfi": {"value" : "tfi-Latn-ZZ"}, "kub": {"value" : "kub-Latn-ZZ"}, "kue": {"value" : "kue-Latn-ZZ"}, "kud": {"value" : "kud-Latn-ZZ"}
    , "xnr": {"value" : "xnr-Deva-IN"}, "ceb": {"value" : "ceb-Latn-PH"}, "kuj": {"value" : "kuj-Latn-ZZ"}, "kum": {"value" : "kum-Cyrl-RU"}, "kun": {"value" : "kun-Latn-ZZ"}, "gmm": {"value" : "gmm-Latn-ZZ"}, "kup": {"value" : "kup-Latn-ZZ"}, "kus": {"value" : "kus-Latn-ZZ"}, "gmv": {"value" : "gmv-Ethi-ZZ"}, "tgc": {"value" : "tgc-Latn-ZZ"}, "xog": {"value" : "xog-Latn-UG"}, "und-Arab-YT": {"value" : "swb-Arab-YT"}, "und-Latn-ET": {"value" : "en-Latn-ET"}, "xon": {"value" : "xon-Latn-ZZ"}, "ha-CM": {"value"
    : "ha-Arab-CM"}, "gnd": {"value" : "gnd-Latn-ZZ"}, "kvg": {"value" : "kvg-Latn-ZZ"}, "tgo": {"value" : "tgo-Latn-ZZ"}, "cfa": {"value" : "cfa-Latn-ZZ"}, "gng": {"value" : "gng-Latn-ZZ"}, "tgu": {"value" : "tgu-Latn-ZZ"}, "und-Latn-GE": {"value" : "ku-Latn-GE"}, "kvr": {"value" : "kvr-Latn-ID"}, "kvx": {"value" : "kvx-Arab-PK"}, "und-Gujr": {"value" : "gu-Gujr-IN"}, "thl": {"value" : "thl-Deva-NP"}, "xpr": {"value" : "xpr-Prti-IR"}, "thq": {"value" : "thq-Deva-NP"}, "god": {"value" : "god-Latn-ZZ"}, "gof":
    {"value" : "gof-Ethi-ZZ"}, "kwj": {"value" : "kwj-Latn-ZZ"}, "ky-Arab": {"value" : "ky-Arab-CN"}, "thr": {"value" : "thr-Deva-NP"}, "goi": {"value" : "goi-Latn-ZZ"}, "cgg": {"value" : "cgg-Latn-UG"}, "kwo": {"value" : "kwo-Latn-ZZ"}, "gom": {"value" : "gom-Deva-IN"}, "gon": {"value" : "gon-Telu-IN"}, "gos": {"value" : "gos-Latn-NL"}, "gor": {"value" : "gor-Latn-ID"}, "und-Latn-CY": {"value" : "tr-Latn-CY"}, "got": {"value" : "got-Goth-UA"}, "tif": {"value" : "tif-Latn-ZZ"}, "tig": {"value" : "tig-Ethi-ER"}
    , "kxa": {"value" : "kxa-Latn-ZZ"}, "kxc": {"value" : "kxc-Ethi-ZZ"}, "pag": {"value" : "pag-Latn-PH"}, "tik": {"value" : "tik-Latn-ZZ"}, "tim": {"value" : "tim-Latn-ZZ"}, "pal": {"value" : "pal-Phli-IR"}, "tio": {"value" : "tio-Latn-ZZ"}, "pam": {"value" : "pam-Latn-PH"}, "und-Marc": {"value" : "bo-Marc-CN"}, "pap": {"value" : "pap-Latn-AW"}, "und-Latn-CN": {"value" : "za-Latn-CN"}, "tiv": {"value" : "tiv-Latn-NG"}, "kxm": {"value" : "kxm-Thai-TH"}, "kxp": {"value" : "kxp-Arab-PK"}, "pau": {"value" : "pau-Latn-PW"}
    , "chk": {"value" : "chk-Latn-FM"}, "chm": {"value" : "chm-Cyrl-RU"}, "xrb": {"value" : "xrb-Latn-ZZ"}, "chp": {"value" : "chp-Latn-CA"}, "cho": {"value" : "cho-Latn-US"}, "kxw": {"value" : "kxw-Latn-ZZ"}, "und-Latn-DZ": {"value" : "fr-Latn-DZ"}, "chr": {"value" : "chr-Cher-US"}, "kxz": {"value" : "kxz-Latn-ZZ"}, "und-Batk": {"value" : "bbc-Batk-ID"}, "und-Bass": {"value" : "bsq-Bass-LR"}, "kye": {"value" : "kye-Latn-ZZ"}, "pbi": {"value" : "pbi-Latn-ZZ"}, "und-Deva-MU": {"value" : "bho-Deva-MU"}, "und-Sgnw":
    {"value" : "ase-Sgnw-US"}, "xsa": {"value" : "xsa-Sarb-YE"}, "kyx": {"value" : "kyx-Latn-ZZ"}, "xsi": {"value" : "xsi-Latn-ZZ"}, "pcd": {"value" : "pcd-Latn-FR"}, "und-Latn-AM": {"value" : "ku-Latn-AM"}, "xsm": {"value" : "xsm-Latn-ZZ"}, "tkl": {"value" : "tkl-Latn-TK"}, "und-Thai-CN": {"value" : "lcp-Thai-CN"}, "grb": {"value" : "grb-Latn-ZZ"}, "xsr": {"value" : "xsr-Deva-NP"}, "und-Latn-AF": {"value" : "tk-Latn-AF"}, "grc": {"value" : "grc-Cprt-CY"}, "tkr": {"value" : "tkr-Latn-AZ"}, "cja": {"value" :
    "cja-Arab-KH"}, "pcm": {"value" : "pcm-Latn-NG"}, "tkt": {"value" : "tkt-Deva-NP"}, "und-Olck": {"value" : "sat-Olck-IN"}, "kzr": {"value" : "kzr-Latn-ZZ"}, "cjm": {"value" : "cjm-Cham-VN"}, "grt": {"value" : "grt-Beng-IN"}, "und-Arab-TJ": {"value" : "fa-Arab-TJ"}, "und-Arab-TG": {"value" : "apd-Arab-TG"}, "und-Arab-TH": {"value" : "mfa-Arab-TH"}, "und-Deva-PK": {"value" : "btv-Deva-PK"}, "grw": {"value" : "grw-Latn-ZZ"}, "cjv": {"value" : "cjv-Latn-ZZ"}, "pdc": {"value" : "pdc-Latn-US"}, "tlf": {"value"
    : "tlf-Latn-ZZ"}, "und-Arab-TR": {"value" : "az-Arab-TR"}, "ckb": {"value" : "ckb-Arab-IQ"}, "tly": {"value" : "tly-Latn-AZ"}, "pdt": {"value" : "pdt-Latn-CA"}, "tlx": {"value" : "tlx-Latn-ZZ"}, "ckl": {"value" : "ckl-Latn-ZZ"}, "cko": {"value" : "cko-Latn-ZZ"}, "gsw": {"value" : "gsw-Latn-CH"}, "ped": {"value" : "ped-Latn-ZZ"}, "tmh": {"value" : "tmh-Latn-NE"}, "cky": {"value" : "cky-Latn-ZZ"}, "kk-Arab": {"value" : "kk-Arab-CN"}, "und-Runr": {"value" : "non-Runr-SE"}, "cla": {"value" : "cla-Latn-ZZ"},
    "peo": {"value" : "peo-Xpeo-IR"}, "tmy": {"value" : "tmy-Latn-ZZ"}, "pex": {"value" : "pex-Latn-ZZ"}, "ky-TR": {"value" : "ky-Latn-TR"}, "tnh": {"value" : "tnh-Latn-ZZ"}, "guc": {"value" : "guc-Latn-CO"}, "gub": {"value" : "gub-Latn-BR"}, "gud": {"value" : "gud-Latn-ZZ"}, "pfl": {"value" : "pfl-Latn-DE"}, "cme": {"value" : "cme-Latn-ZZ"}, "cmg": {"value" : "cmg-Soyo-MN"}, "gur": {"value" : "gur-Latn-GH"}, "xwe": {"value" : "xwe-Latn-ZZ"}, "guw": {"value" : "guw-Latn-ZZ"}, "tof": {"value" : "tof-Latn-ZZ"}
    , "gux": {"value" : "gux-Latn-ZZ"}, "guz": {"value" : "guz-Latn-KE"}, "tog": {"value" : "tog-Latn-MW"}, "gvf": {"value" : "gvf-Latn-ZZ"}, "toq": {"value" : "toq-Latn-ZZ"}, "gvr": {"value" : "gvr-Deva-NP"}, "und-Guru": {"value" : "pa-Guru-IN"}, "gvs": {"value" : "gvs-Latn-ZZ"}, "tpi": {"value" : "tpi-Latn-PG"}, "tpm": {"value" : "tpm-Latn-ZZ"}, "und-Tfng": {"value" : "zgh-Tfng-MA"}, "gwc": {"value" : "gwc-Arab-ZZ"}, "und-Arab-PK": {"value" : "ur-Arab-PK"}, "phl": {"value" : "phl-Arab-ZZ"}, "und-Aghb": {"value"
    : "lez-Aghb-RU"}, "phn": {"value" : "phn-Phnx-LB"}, "gwi": {"value" : "gwi-Latn-CA"}, "tpz": {"value" : "tpz-Latn-ZZ"}, "cop": {"value" : "cop-Copt-EG"}, "gwt": {"value" : "gwt-Arab-ZZ"}, "lab": {"value" : "lab-Lina-GR"}, "lad": {"value" : "lad-Hebr-IL"}, "lah": {"value" : "lah-Arab-PK"}, "pil": {"value" : "pil-Latn-ZZ"}, "lag": {"value" : "lag-Latn-TZ"}, "tqo": {"value" : "tqo-Latn-ZZ"}, "laj": {"value" : "laj-Latn-UG"}, "pip": {"value" : "pip-Latn-ZZ"}, "und-Khmr": {"value" : "km-Khmr-KH"}, "las": {"value"
    : "las-Latn-ZZ"}, "sd-Deva": {"value" : "sd-Deva-IN"}, "und-Khoj": {"value" : "sd-Khoj-IN"}, "cps": {"value" : "cps-Latn-PH"}, "kk-AF": {"value" : "kk-Arab-AF"}, "und-Arab-MU": {"value" : "ur-Arab-MU"}, "lbe": {"value" : "lbe-Cyrl-RU"}, "und-Arab-NG": {"value" : "ha-Arab-NG"}, "gyi": {"value" : "gyi-Latn-ZZ"}, "tru": {"value" : "tru-Latn-TR"}, "trw": {"value" : "trw-Arab-ZZ"}, "trv": {"value" : "trv-Latn-TW"}, "lbu": {"value" : "lbu-Latn-ZZ"}, "lbw": {"value" : "lbw-Latn-ID"}, "tsd": {"value" : "tsd-Grek-GR"}
    , "tsf": {"value" : "tsf-Deva-NP"}, "pka": {"value" : "pka-Brah-IN"}, "tsg": {"value" : "tsg-Latn-PH"}, "tsj": {"value" : "tsj-Tibt-BT"}, "und-Deva-FJ": {"value" : "hif-Deva-FJ"}, "pko": {"value" : "pko-Latn-KE"}, "lcm": {"value" : "lcm-Latn-ZZ"}, "crh": {"value" : "crh-Cyrl-UA"}, "lcp": {"value" : "lcp-Thai-CN"}, "tsw": {"value" : "tsw-Latn-ZZ"}, "crj": {"value" : "crj-Cans-CA"}, "crl": {"value" : "crl-Cans-CA"}, "und-Arab-MN": {"value" : "kk-Arab-MN"}, "crk": {"value" : "crk-Cans-CA"}, "crm": {"value"
    : "crm-Cans-CA"}, "und-Arab-MM": {"value" : "rhg-Arab-MM"}, "pla": {"value" : "pla-Latn-ZZ"}, "tte": {"value" : "tte-Latn-ZZ"}, "crs": {"value" : "crs-Latn-SC"}, "ttd": {"value" : "ttd-Latn-ZZ"}, "ldb": {"value" : "ldb-Latn-ZZ"}, "ttj": {"value" : "ttj-Latn-UG"}, "kk-CN": {"value" : "kk-Arab-CN"}, "und-Yiii": {"value" : "ii-Yiii-CN"}, "tts": {"value" : "tts-Thai-TH"}, "csb": {"value" : "csb-Latn-PL"}, "ttr": {"value" : "ttr-Latn-ZZ"}, "ttt": {"value" : "ttt-Latn-AZ"}, "csw": {"value" : "csw-Cans-CA"}, "tuh":
    {"value" : "tuh-Latn-ZZ"}, "led": {"value" : "led-Latn-ZZ"}, "tul": {"value" : "tul-Latn-ZZ"}, "lee": {"value" : "lee-Latn-ZZ"}, "tum": {"value" : "tum-Latn-MW"}, "und-Arab-KH": {"value" : "cja-Arab-KH"}, "tuq": {"value" : "tuq-Latn-ZZ"}, "ctd": {"value" : "ctd-Pauc-MM"}, "lem": {"value" : "lem-Latn-ZZ"}, "lep": {"value" : "lep-Lepc-IN"}, "pms": {"value" : "pms-Latn-IT"}, "leq": {"value" : "leq-Latn-ZZ"}, "und-Pauc": {"value" : "ctd-Pauc-MM"}, "und-Sogo": {"value" : "sog-Sogo-UZ"}, "leu": {"value" : "leu-Latn-ZZ"}
    , "lez": {"value" : "lez-Cyrl-RU"}, "tvd": {"value" : "tvd-Latn-ZZ"}, "mn-CN": {"value" : "mn-Mong-CN"}, "sr-TR": {"value" : "sr-Latn-TR"}, "png": {"value" : "png-Latn-ZZ"}, "tvl": {"value" : "tvl-Latn-TV"}, "und-Brah": {"value" : "pka-Brah-IN"}, "und-Brai": {"value" : "fr-Brai-FR"}, "pnn": {"value" : "pnn-Latn-ZZ"}, "tvu": {"value" : "tvu-Latn-ZZ"}, "pnt": {"value" : "pnt-Grek-GR"}, "uz-CN": {"value" : "uz-Cyrl-CN"}, "ha-SD": {"value" : "ha-Arab-SD"}, "twh": {"value" : "twh-Latn-ZZ"}, "und-Takr": {"value"
    : "doi-Takr-IN"}, "lgg": {"value" : "lgg-Latn-ZZ"}, "pon": {"value" : "pon-Latn-FM"}, "twq": {"value" : "twq-Latn-NE"}, "und-Arab-ID": {"value" : "ms-Arab-ID"}, "und-Arab-IN": {"value" : "ur-Arab-IN"}, "txg": {"value" : "txg-Tang-CN"}, "yam": {"value" : "yam-Latn-ZZ"}, "und-Talu": {"value" : "khb-Talu-CN"}, "yao": {"value" : "yao-Latn-MZ"}, "yap": {"value" : "yap-Latn-FM"}, "yas": {"value" : "yas-Latn-ZZ"}, "yat": {"value" : "yat-Latn-ZZ"}, "ppo": {"value" : "ppo-Latn-ZZ"}, "yav": {"value" : "yav-Latn-CM"}
    , "yay": {"value" : "yay-Latn-ZZ"}, "yaz": {"value" : "yaz-Latn-ZZ"}, "und-Tale": {"value" : "tdd-Tale-CN"}, "ybb": {"value" : "ybb-Latn-CM"}, "yba": {"value" : "yba-Latn-ZZ"}, "tya": {"value" : "tya-Latn-ZZ"}, "lia": {"value" : "lia-Latn-ZZ"}, "lid": {"value" : "lid-Latn-ZZ"}, "und-Latn-TW": {"value" : "trv-Latn-TW"}, "lif": {"value" : "lif-Deva-NP"}, "lih": {"value" : "lih-Latn-ZZ"}, "lig": {"value" : "lig-Latn-ZZ"}, "lij": {"value" : "lij-Latn-IT"}, "hag": {"value" : "hag-Latn-ZZ"}, "und-Latn-TN": {"value"
    : "fr-Latn-TN"}, "tyv": {"value" : "tyv-Cyrl-RU"}, "yby": {"value" : "yby-Latn-ZZ"}, "und-Arab-GB": {"value" : "ks-Arab-GB"}, "hak": {"value" : "hak-Hans-CN"}, "und-Taml": {"value" : "ta-Taml-IN"}, "ham": {"value" : "ham-Latn-ZZ"}, "lis": {"value" : "lis-Lisu-CN"}, "und-Latn-SY": {"value" : "fr-Latn-SY"}, "ky-Latn": {"value" : "ky-Latn-TR"}, "pra": {"value" : "pra-Khar-PK"}, "haw": {"value" : "haw-Latn-US"}, "haz": {"value" : "haz-Arab-AF"}, "ku-LB": {"value" : "ku-Arab-LB"}, "prd": {"value" : "prd-Arab-IR"}
    , "prg": {"value" : "prg-Latn-001"}, "tzm": {"value" : "tzm-Latn-MA"}, "hbb": {"value" : "hbb-Latn-ZZ"}, "und-Latn-UA": {"value" : "pl-Latn-UA"}, "ljp": {"value" : "ljp-Latn-ID"}, "und-Tang": {"value" : "txg-Tang-CN"}, "yue-Hans": {"value" : "yue-Hans-CN"}, "und-Latn-RU": {"value" : "krl-Latn-RU"}, "lki": {"value" : "lki-Arab-IR"}, "pss": {"value" : "pss-Latn-ZZ"}, "lkt": {"value" : "lkt-Latn-US"}, "sr-RO": {"value" : "sr-Latn-RO"}, "und-Arab-CN": {"value" : "ug-Arab-CN"}, "lle": {"value" : "lle-Latn-ZZ"}
    , "und-Cyrl": {"value" : "ru-Cyrl-RU"}, "uz-AF": {"value" : "uz-Arab-AF"}, "yer": {"value" : "yer-Latn-ZZ"}, "und-Beng": {"value" : "bn-Beng-BD"}, "ptp": {"value" : "ptp-Latn-ZZ"}, "lln": {"value" : "lln-Latn-ZZ"}, "sr-RU": {"value" : "sr-Latn-RU"}, "hdy": {"value" : "hdy-Ethi-ZZ"}, "unr-NP": {"value" : "unr-Deva-NP"}, "und-Mend": {"value" : "men-Mend-SL"}, "lmn": {"value" : "lmn-Telu-IN"}, "lmp": {"value" : "lmp-Latn-ZZ"}, "lmo": {"value" : "lmo-Latn-IT"}, "puu": {"value" : "puu-Latn-GA"}, "und-Arab-CC":
    {"value" : "ms-Arab-CC"}, "pal-Phlp": {"value" : "pal-Phlp-CN"}, "ygr": {"value" : "ygr-Latn-ZZ"}, "ygw": {"value" : "ygw-Latn-ZZ"}, "lns": {"value" : "lns-Latn-ZZ"}, "ky-CN": {"value" : "ky-Arab-CN"}, "lnu": {"value" : "lnu-Latn-ZZ"}, "pwa": {"value" : "pwa-Latn-ZZ"}, "und-Mahj": {"value" : "hi-Mahj-IN"}, "rif-NL": {"value" : "rif-Latn-NL"}, "loj": {"value" : "loj-Latn-ZZ"}, "lol": {"value" : "lol-Latn-CD"}, "lok": {"value" : "lok-Latn-ZZ"}, "lor": {"value" : "lor-Latn-ZZ"}, "und-Sora": {"value" : "srb-Sora-IN"}
    , "los": {"value" : "los-Latn-ZZ"}, "loz": {"value" : "loz-Latn-ZM"}, "und-202": {"value" : "en-Latn-NG"}, "und-Latn-MR": {"value" : "fr-Latn-MR"}, "hhy": {"value" : "hhy-Latn-ZZ"}, "hia": {"value" : "hia-Latn-ZZ"}, "hif": {"value" : "hif-Latn-FJ"}, "dad": {"value" : "dad-Latn-ZZ"}, "hih": {"value" : "hih-Latn-ZZ"}, "hig": {"value" : "hig-Latn-ZZ"}, "daf": {"value" : "daf-Latn-ZZ"}, "ubu": {"value" : "ubu-Latn-ZZ"}, "dah": {"value" : "dah-Latn-ZZ"}, "hil": {"value" : "hil-Latn-PH"}, "dag": {"value" : "dag-Latn-ZZ"}
    , "und-Mero": {"value" : "xmr-Mero-SD"}, "dak": {"value" : "dak-Latn-US"}, "und-Merc": {"value" : "xmr-Merc-SD"}, "dar": {"value" : "dar-Cyrl-RU"}, "dav": {"value" : "dav-Latn-KE"}, "lrc": {"value" : "lrc-Arab-IR"}, "yko": {"value" : "yko-Latn-ZZ"}, "und-Latn-MK": {"value" : "sq-Latn-MK"}, "und-Latn-MM": {"value" : "kac-Latn-MM"}, "dbd": {"value" : "dbd-Latn-ZZ"}, "und-Latn-MO": {"value" : "pt-Latn-MO"}, "und-Latn-MA": {"value" : "fr-Latn-MA"}, "und-Bali": {"value" : "ban-Bali-ID"}, "und-Tavt": {"value"
    : "blt-Tavt-VN"}, "dbq": {"value" : "dbq-Latn-ZZ"}, "yle": {"value" : "yle-Latn-ZZ"}, "ylg": {"value" : "ylg-Latn-ZZ"}, "und-Maka": {"value" : "mak-Maka-ID"}, "yll": {"value" : "yll-Latn-ZZ"}, "udm": {"value" : "udm-Cyrl-RU"}, "dcc": {"value" : "dcc-Arab-IN"}, "yml": {"value" : "yml-Latn-ZZ"}, "hla": {"value" : "hla-Latn-ZZ"}, "und-Latn-IR": {"value" : "tk-Latn-IR"}, "ltg": {"value" : "ltg-Latn-LV"}, "und-Latn-KM": {"value" : "fr-Latn-KM"}, "ddn": {"value" : "ddn-Latn-ZZ"}, "hlu": {"value" : "hlu-Hluw-TR"}
    , "lua": {"value" : "lua-Latn-CD"}, "und-Bamu": {"value" : "bax-Bamu-CM"}, "hmd": {"value" : "hmd-Plrd-CN"}, "ded": {"value" : "ded-Latn-ZZ"}, "luo": {"value" : "luo-Latn-KE"}, "und-142": {"value" : "zh-Hans-CN"}, "und-143": {"value" : "uz-Latn-UZ"}, "den": {"value" : "den-Latn-CA"}, "und-Gran": {"value" : "sa-Gran-IN"}, "hmt": {"value" : "hmt-Latn-ZZ"}, "uga": {"value" : "uga-Ugar-SY"}, "luz": {"value" : "luz-Arab-IR"}, "luy": {"value" : "luy-Latn-KE"}, "und-145": {"value" : "ar-Arab-SA"}, "und-Cakm": {"value"
    : "ccp-Cakm-BD"}, "und-Dupl": {"value" : "fr-Dupl-FR"}, "yon": {"value" : "yon-Latn-ZZ"}, "ug-MN": {"value" : "ug-Cyrl-MN"}, "hne": {"value" : "hne-Deva-IN"}, "hnd": {"value" : "hnd-Arab-PK"}, "hnj": {"value" : "hnj-Hmng-LA"}, "hno": {"value" : "hno-Arab-PK"}, "hnn": {"value" : "hnn-Latn-PH"}, "ug-KZ": {"value" : "ug-Cyrl-KZ"}, "und-154": {"value" : "en-Latn-GB"}, "und-155": {"value" : "de-Latn-DE"}, "und-150": {"value" : "ru-Cyrl-RU"}, "und-151": {"value" : "ru-Cyrl-RU"}, "und-Sylo": {"value" : "syl-Sylo-BD"}
    , "hoc": {"value" : "hoc-Deva-IN"}, "dga": {"value" : "dga-Latn-ZZ"}, "lwl": {"value" : "lwl-Thai-TH"}, "und-Ital": {"value" : "ett-Ital-IT"}, "hoj": {"value" : "hoj-Deva-IN"}, "dgh": {"value" : "dgh-Latn-ZZ"}, "dgi": {"value" : "dgi-Latn-ZZ"}, "dgl": {"value" : "dgl-Arab-ZZ"}, "hot": {"value" : "hot-Latn-ZZ"}, "dgr": {"value" : "dgr-Latn-CA"}, "dgz": {"value" : "dgz-Latn-ZZ"}, "yrb": {"value" : "yrb-Latn-ZZ"}, "yre": {"value" : "yre-Latn-ZZ"}, "und-Lyci": {"value" : "xlc-Lyci-TR"}, "und-Cans": {"value"
    : "cr-Cans-CA"}, "und-Hluw": {"value" : "hlu-Hluw-TR"}, "und-Nand": {"value" : "sa-Nand-IN"}, "yrl": {"value" : "yrl-Latn-BR"}, "dia": {"value" : "dia-Latn-ZZ"}, "und-Grek": {"value" : "el-Grek-GR"}, "und-Mong": {"value" : "mn-Mong-CN"}, "und-Lydi": {"value" : "xld-Lydi-TR"}, "yss": {"value" : "yss-Latn-ZZ"}, "und-Newa": {"value" : "new-Newa-NP"}, "lzh": {"value" : "lzh-Hans-CN"}, "dje": {"value" : "dje-Latn-NE"}, "lzz": {"value" : "lzz-Latn-TR"}, "uli": {"value" : "uli-Latn-FM"}, "hsb": {"value" : "hsb-Latn-DE"}
    , "und-Xsux": {"value" : "akk-Xsux-IQ"}, "hsn": {"value" : "hsn-Hans-CN"}, "und-Cari": {"value" : "xcr-Cari-TR"}, "und-Syrc": {"value" : "syr-Syrc-IQ"}, "yua": {"value" : "yua-Latn-MX"}, "yue": {"value" : "yue-Hant-HK"}, "umb": {"value" : "umb-Latn-AO"}, "yuj": {"value" : "yuj-Latn-ZZ"}, "yut": {"value" : "yut-Latn-ZZ"}, "yuw": {"value" : "yuw-Latn-ZZ"}, "und-Bopo": {"value" : "zh-Bopo-TW"}, "und": {"value" : "en-Latn-US"}, "und-Egyp": {"value" : "egy-Egyp-EG"}, "und-Tglg": {"value" : "fil-Tglg-PH"}, "unr":
    {"value" : "unr-Beng-IN"}, "hui": {"value" : "hui-Latn-ZZ"}, "und-Elba": {"value" : "sq-Elba-AL"}, "unx": {"value" : "unx-Beng-IN"}, "und-Narb": {"value" : "xna-Narb-SA"}, "pa-PK": {"value" : "pa-Arab-PK"}, "und-Hebr-CA": {"value" : "yi-Hebr-CA"}, "und-Geor": {"value" : "ka-Geor-GE"}, "und-Shrd": {"value" : "sa-Shrd-IN"}, "dnj": {"value" : "dnj-Latn-CI"}, "dob": {"value" : "dob-Latn-ZZ"}, "und-Mymr-TH": {"value" : "mnw-Mymr-TH"}, "doi": {"value" : "doi-Arab-IN"}, "dop": {"value" : "dop-Latn-ZZ"}, "und-Sund":
    {"value" : "su-Sund-ID"}, "dow": {"value" : "dow-Latn-ZZ"}, "sr-ME": {"value" : "sr-Latn-ME"}, "und-Hung": {"value" : "hu-Hung-HU"}, "mad": {"value" : "mad-Latn-ID"}, "mag": {"value" : "mag-Deva-IN"}, "maf": {"value" : "maf-Latn-CM"}, "mai": {"value" : "mai-Deva-IN"}, "mak": {"value" : "mak-Latn-ID"}, "man": {"value" : "man-Latn-GM"}, "mas": {"value" : "mas-Latn-KE"}, "maw": {"value" : "maw-Latn-ZZ"}, "maz": {"value" : "maz-Latn-MX"}, "uri": {"value" : "uri-Latn-ZZ"}, "mbh": {"value" : "mbh-Latn-ZZ"}, "urt":
    {"value" : "urt-Latn-ZZ"}, "mbo": {"value" : "mbo-Latn-ZZ"}, "urw": {"value" : "urw-Latn-ZZ"}, "mbq": {"value" : "mbq-Latn-ZZ"}, "mbu": {"value" : "mbu-Latn-ZZ"}, "und-Hebr-GB": {"value" : "yi-Hebr-GB"}, "usa": {"value" : "usa-Latn-ZZ"}, "mbw": {"value" : "mbw-Latn-ZZ"}, "mci": {"value" : "mci-Latn-ZZ"}, "dri": {"value" : "dri-Latn-ZZ"}, "mcq": {"value" : "mcq-Latn-ZZ"}, "mcp": {"value" : "mcp-Latn-ZZ"}, "mcr": {"value" : "mcr-Latn-ZZ"}, "mcu": {"value" : "mcu-Latn-ZZ"}, "drs": {"value" : "drs-Ethi-ZZ"}
    , "mda": {"value" : "mda-Latn-ZZ"}, "mdf": {"value" : "mdf-Cyrl-RU"}, "mde": {"value" : "mde-Arab-ZZ"}, "mdh": {"value" : "mdh-Latn-PH"}, "dsb": {"value" : "dsb-Latn-DE"}, "mdj": {"value" : "mdj-Latn-ZZ"}, "utr": {"value" : "utr-Latn-ZZ"}, "mdr": {"value" : "mdr-Latn-ID"}, "mdx": {"value" : "mdx-Ethi-ZZ"}, "mee": {"value" : "mee-Latn-ZZ"}, "med": {"value" : "med-Latn-ZZ"}, "mek": {"value" : "mek-Latn-ZZ"}, "men": {"value" : "men-Latn-SL"}, "az-RU": {"value" : "az-Cyrl-RU"}, "mis-Medf": {"value" : "mis-Medf-NG"}
    , "mer": {"value" : "mer-Latn-KE"}, "dtm": {"value" : "dtm-Latn-ML"}, "meu": {"value" : "meu-Latn-ZZ"}, "met": {"value" : "met-Latn-ZZ"}, "dtp": {"value" : "dtp-Latn-MY"}, "dts": {"value" : "dts-Latn-ZZ"}, "uvh": {"value" : "uvh-Latn-ZZ"}, "dty": {"value" : "dty-Deva-NP"}, "mfa": {"value" : "mfa-Arab-TH"}, "uvl": {"value" : "uvl-Latn-ZZ"}, "mfe": {"value" : "mfe-Latn-MU"}, "dua": {"value" : "dua-Latn-CM"}, "dud": {"value" : "dud-Latn-ZZ"}, "duc": {"value" : "duc-Latn-ZZ"}, "mfn": {"value" : "mfn-Latn-ZZ"}
    , "dug": {"value" : "dug-Latn-ZZ"}, "mfo": {"value" : "mfo-Latn-ZZ"}, "mfq": {"value" : "mfq-Latn-ZZ"}, "und-Phag": {"value" : "lzh-Phag-CN"}, "dva": {"value" : "dva-Latn-ZZ"}, "mgh": {"value" : "mgh-Latn-MZ"}, "mgl": {"value" : "mgl-Latn-ZZ"}, "mgo": {"value" : "mgo-Latn-CM"}, "mgp": {"value" : "mgp-Deva-NP"}, "mgy": {"value" : "mgy-Latn-TZ"}, "zag": {"value" : "zag-Latn-SD"}, "mhi": {"value" : "mhi-Latn-ZZ"}, "mhl": {"value" : "mhl-Latn-ZZ"}, "dww": {"value" : "dww-Latn-ZZ"}, "mif": {"value" : "mif-Latn-ZZ"}
    , "und-Mymr-IN": {"value" : "kht-Mymr-IN"}, "min": {"value" : "min-Latn-ID"}, "mis": {"value" : "mis-Hatr-IQ"}, "ian": {"value" : "ian-Latn-ZZ"}, "miw": {"value" : "miw-Latn-ZZ"}, "iar": {"value" : "iar-Latn-ZZ"}, "uz-Arab": {"value" : "uz-Arab-AF"}, "ibb": {"value" : "ibb-Latn-NG"}, "iba": {"value" : "iba-Latn-MY"}, "dyo": {"value" : "dyo-Latn-SN"}, "dyu": {"value" : "dyu-Latn-BF"}, "iby": {"value" : "iby-Latn-ZZ"}, "zdj": {"value" : "zdj-Arab-KM"}, "ica": {"value" : "ica-Latn-ZZ"}, "mki": {"value" : "mki-Arab-ZZ"}
    , "und-Wcho": {"value" : "nnp-Wcho-IN"}, "ich": {"value" : "ich-Latn-ZZ"}, "mkl": {"value" : "mkl-Latn-ZZ"}, "dzg": {"value" : "dzg-Latn-ZZ"}, "mkp": {"value" : "mkp-Latn-ZZ"}, "zea": {"value" : "zea-Latn-NL"}, "mkw": {"value" : "mkw-Latn-ZZ"}, "mle": {"value" : "mle-Latn-ZZ"}, "idd": {"value" : "idd-Latn-ZZ"}, "idi": {"value" : "idi-Latn-ZZ"}, "lif-Limb": {"value" : "lif-Limb-IN"}, "mlp": {"value" : "mlp-Latn-ZZ"}, "mls": {"value" : "mls-Latn-SD"}, "idu": {"value" : "idu-Latn-ZZ"}, "quc": {"value" : "quc-Latn-GT"}
    , "qug": {"value" : "qug-Latn-EC"}, "und-Jamo": {"value" : "ko-Jamo-KR"}, "mmo": {"value" : "mmo-Latn-ZZ"}, "mmu": {"value" : "mmu-Latn-ZZ"}, "mmx": {"value" : "mmx-Latn-ZZ"}, "zgh": {"value" : "zgh-Tfng-MA"}, "mna": {"value" : "mna-Latn-ZZ"}, "mnf": {"value" : "mnf-Latn-ZZ"}, "ife": {"value" : "ife-Latn-TG"}, "mni": {"value" : "mni-Beng-IN"}, "mnw": {"value" : "mnw-Mymr-MM"}, "moa": {"value" : "moa-Latn-ZZ"}, "moe": {"value" : "moe-Latn-CA"}, "igb": {"value" : "igb-Latn-ZZ"}, "ige": {"value" : "ige-Latn-ZZ"}
    , "moh": {"value" : "moh-Latn-CA"}, "und-Hebr-SE": {"value" : "yi-Hebr-SE"}, "zhx": {"value" : "zhx-Nshu-CN"}, "mos": {"value" : "mos-Latn-BF"}, "und-Shaw": {"value" : "en-Shaw-GB"}, "zia": {"value" : "zia-Latn-ZZ"}, "mox": {"value" : "mox-Latn-ZZ"}, "vag": {"value" : "vag-Latn-ZZ"}, "vai": {"value" : "vai-Vaii-LR"}, "van": {"value" : "van-Latn-ZZ"}, "mpp": {"value" : "mpp-Latn-ZZ"}, "mpt": {"value" : "mpt-Latn-ZZ"}, "mps": {"value" : "mps-Latn-ZZ"}, "mpx": {"value" : "mpx-Latn-ZZ"}, "und-Hebr-US": {"value"
    : "yi-Hebr-US"}, "mql": {"value" : "mql-Latn-ZZ"}, "und-Hebr-UA": {"value" : "yi-Hebr-UA"}, "mrd": {"value" : "mrd-Deva-NP"}, "mrj": {"value" : "mrj-Cyrl-RU"}, "ijj": {"value" : "ijj-Latn-ZZ"}, "mro": {"value" : "mro-Mroo-BD"}, "und-Modi": {"value" : "mr-Modi-IN"}, "ebu": {"value" : "ebu-Latn-KE"}, "zlm": {"value" : "zlm-Latn-TG"}, "arc-Palm": {"value" : "arc-Palm-SY"}, "ikk": {"value" : "ikk-Latn-ZZ"}, "ikt": {"value" : "ikt-Latn-CA"}, "ikw": {"value" : "ikw-Latn-ZZ"}, "vec": {"value" : "vec-Latn-IT"},
    "ikx": {"value" : "ikx-Latn-ZZ"}, "zmi": {"value" : "zmi-Latn-MY"}, "mtc": {"value" : "mtc-Latn-ZZ"}, "mtf": {"value" : "mtf-Latn-ZZ"}, "vep": {"value" : "vep-Latn-RU"}, "zh-Bopo": {"value" : "zh-Bopo-TW"}, "mti": {"value" : "mti-Latn-ZZ"}, "und-Ethi": {"value" : "am-Ethi-ET"}, "mtr": {"value" : "mtr-Deva-IN"}, "und-Thai-LA": {"value" : "kdt-Thai-LA"}, "ilo": {"value" : "ilo-Latn-PH"}, "zne": {"value" : "zne-Latn-ZZ"}, "mua": {"value" : "mua-Latn-CM"}, "und-Thai-KH": {"value" : "kdt-Thai-KH"}, "imo": {"value"
    : "imo-Latn-ZZ"}, "mus": {"value" : "mus-Latn-US"}, "mur": {"value" : "mur-Latn-ZZ"}, "mva": {"value" : "mva-Latn-ZZ"}, "inh": {"value" : "inh-Cyrl-RU"}, "mvn": {"value" : "mvn-Latn-ZZ"}, "efi": {"value" : "efi-Latn-NG"}, "mvy": {"value" : "mvy-Arab-PK"}, "und-Java": {"value" : "jv-Java-ID"}, "mwk": {"value" : "mwk-Latn-ML"}, "mwr": {"value" : "mwr-Deva-IN"}, "und-021": {"value" : "en-Latn-US"}, "egl": {"value" : "egl-Latn-IT"}, "mww": {"value" : "mww-Hmnp-US"}, "mwv": {"value" : "mwv-Latn-ID"}, "iou": {"value"
    : "iou-Latn-ZZ"}, "und-029": {"value" : "es-Latn-CU"}, "vic": {"value" : "vic-Latn-SX"}, "egy": {"value" : "egy-Egyp-EG"}, "und-Ugar": {"value" : "uga-Ugar-SY"}, "mxc": {"value" : "mxc-Latn-ZW"}, "raj": {"value" : "raj-Deva-IN"}, "rai": {"value" : "rai-Latn-ZZ"}, "rao": {"value" : "rao-Latn-ZZ"}, "viv": {"value" : "viv-Latn-ZZ"}, "mxm": {"value" : "mxm-Latn-ZZ"}, "und-034": {"value" : "hi-Deva-IN"}, "und-030": {"value" : "zh-Hans-CN"}, "und-039": {"value" : "it-Latn-IT"}, "und-035": {"value" : "id-Latn-ID"}
    , "ug-Cyrl": {"value" : "ug-Cyrl-KZ"}, "myk": {"value" : "myk-Latn-ZZ"}, "mym": {"value" : "mym-Ethi-ZZ"}, "aai": {"value" : "aai-Latn-ZZ"}, "aak": {"value" : "aak-Latn-ZZ"}, "myw": {"value" : "myw-Latn-ZZ"}, "myv": {"value" : "myv-Cyrl-RU"}, "myx": {"value" : "myx-Latn-UG"}, "myz": {"value" : "myz-Mand-IR"}, "und-Sinh": {"value" : "si-Sinh-LK"}, "und-Sind": {"value" : "sd-Sind-IN"}, "aau": {"value" : "aau-Latn-ZZ"}, "rcf": {"value" : "rcf-Latn-RE"}, "und-Orkh": {"value" : "otk-Orkh-MN"}, "mzk": {"value"
    : "mzk-Latn-ZZ"}, "mzn": {"value" : "mzn-Arab-IR"}, "iri": {"value" : "iri-Latn-ZZ"}, "mzm": {"value" : "mzm-Latn-ZZ"}, "mzp": {"value" : "mzp-Latn-ZZ"}, "und-053": {"value" : "en-Latn-AU"}, "abi": {"value" : "abi-Latn-ZZ"}, "und-054": {"value" : "en-Latn-PG"}, "mzw": {"value" : "mzw-Latn-ZZ"}, "mzz": {"value" : "mzz-Latn-ZZ"}, "abr": {"value" : "abr-Latn-GH"}, "abq": {"value" : "abq-Cyrl-ZZ"}, "abt": {"value" : "abt-Latn-ZZ"}, "und-057": {"value" : "en-Latn-GU"}, "aby": {"value" : "aby-Latn-ZZ"}, "eka":
    {"value" : "eka-Latn-ZZ"}, "vls": {"value" : "vls-Latn-BE"}, "ace": {"value" : "ace-Latn-ID"}, "acd": {"value" : "acd-Latn-ZZ"}, "ach": {"value" : "ach-Latn-UG"}, "vmf": {"value" : "vmf-Latn-DE"}, "eky": {"value" : "eky-Kali-MM"}, "rej": {"value" : "rej-Latn-ID"}, "rel": {"value" : "rel-Latn-ZZ"}, "ada": {"value" : "ada-Latn-GH"}, "res": {"value" : "res-Latn-ZZ"}, "vmw": {"value" : "vmw-Latn-MZ"}, "ade": {"value" : "ade-Latn-ZZ"}, "adj": {"value" : "adj-Latn-ZZ"}, "und-Hira": {"value" : "ja-Hira-JP"}, "adz":
    {"value" : "adz-Latn-ZZ"}, "ady": {"value" : "ady-Cyrl-RU"}, "ema": {"value" : "ema-Latn-ZZ"}, "und-Deva": {"value" : "hi-Deva-IN"}, "aeb": {"value" : "aeb-Arab-TN"}, "emi": {"value" : "emi-Latn-ZZ"}, "und-009": {"value" : "en-Latn-AU"}, "aey": {"value" : "aey-Latn-ZZ"}, "und-002": {"value" : "en-Latn-NG"}, "und-003": {"value" : "en-Latn-US"}, "und-005": {"value" : "pt-Latn-BR"}, "rgn": {"value" : "rgn-Latn-IT"}, "vot": {"value" : "vot-Latn-RU"}, "enn": {"value" : "enn-Latn-ZZ"}, "enq": {"value" : "enq-Latn-ZZ"}
    , "und-011": {"value" : "en-Latn-NG"}, "rhg": {"value" : "rhg-Arab-MM"}, "und-017": {"value" : "sw-Latn-CD"}, "und-018": {"value" : "en-Latn-ZA"}, "und-019": {"value" : "en-Latn-US"}, "und-013": {"value" : "es-Latn-MX"}, "und-014": {"value" : "sw-Latn-TZ"}, "und-015": {"value" : "ar-Arab-EG"}, "agc": {"value" : "agc-Latn-ZZ"}, "und-Zanb": {"value" : "cmg-Zanb-MN"}, "iwm": {"value" : "iwm-Latn-ZZ"}, "agd": {"value" : "agd-Latn-ZZ"}, "agg": {"value" : "agg-Latn-ZZ"}, "iws": {"value" : "iws-Latn-ZZ"}, "agm":
    {"value" : "agm-Latn-ZZ"}, "ago": {"value" : "ago-Latn-ZZ"}, "agq": {"value" : "agq-Latn-CM"}, "ria": {"value" : "ria-Latn-IN"}, "rif": {"value" : "rif-Tfng-MA"}, "nac": {"value" : "nac-Latn-ZZ"}, "naf": {"value" : "naf-Latn-ZZ"}, "nak": {"value" : "nak-Latn-ZZ"}, "nan": {"value" : "nan-Hans-CN"}, "aha": {"value" : "aha-Latn-ZZ"}, "nap": {"value" : "nap-Latn-IT"}, "naq": {"value" : "naq-Latn-NA"}, "zza": {"value" : "zza-Latn-TR"}, "nas": {"value" : "nas-Latn-ZZ"}, "ahl": {"value" : "ahl-Latn-ZZ"}, "en-Shaw":
    {"value" : "en-Shaw-GB"}, "und-Copt": {"value" : "cop-Copt-EG"}, "aho": {"value" : "aho-Ahom-IN"}, "vro": {"value" : "vro-Latn-EE"}, "rjs": {"value" : "rjs-Deva-NP"}, "nca": {"value" : "nca-Latn-ZZ"}, "ncf": {"value" : "ncf-Latn-ZZ"}, "nce": {"value" : "nce-Latn-ZZ"}, "nch": {"value" : "nch-Latn-MX"}, "izh": {"value" : "izh-Latn-RU"}, "izi": {"value" : "izi-Latn-ZZ"}, "rkt": {"value" : "rkt-Beng-BD"}, "nco": {"value" : "nco-Latn-ZZ"}, "eri": {"value" : "eri-Latn-ZZ"}, "ajg": {"value" : "ajg-Latn-ZZ"}, "ncu":
    {"value" : "ncu-Latn-ZZ"}, "ndc": {"value" : "ndc-Latn-MZ"}, "esg": {"value" : "esg-Gonm-IN"}, "nds": {"value" : "nds-Latn-DE"}, "akk": {"value" : "akk-Xsux-IQ"}, "esu": {"value" : "esu-Latn-US"}, "neb": {"value" : "neb-Latn-ZZ"}, "rmf": {"value" : "rmf-Latn-FI"}, "und-061": {"value" : "sm-Latn-WS"}, "und-Limb": {"value" : "lif-Limb-IN"}, "vun": {"value" : "vun-Latn-TZ"}, "ff-Adlm": {"value" : "ff-Adlm-GN"}, "vut": {"value" : "vut-Latn-ZZ"}, "rmo": {"value" : "rmo-Latn-CH"}, "ala": {"value" : "ala-Latn-ZZ"}
    , "rmt": {"value" : "rmt-Arab-IR"}, "rmu": {"value" : "rmu-Latn-SE"}, "ali": {"value" : "ali-Latn-ZZ"}, "nex": {"value" : "nex-Latn-ZZ"}, "new": {"value" : "new-Deva-NP"}, "aln": {"value" : "aln-Latn-XK"}, "etr": {"value" : "etr-Latn-ZZ"}, "und-Rohg": {"value" : "rhg-Rohg-MM"}, "ett": {"value" : "ett-Ital-IT"}, "rna": {"value" : "rna-Latn-ZZ"}, "etu": {"value" : "etu-Latn-ZZ"}, "alt": {"value" : "alt-Cyrl-RU"}, "etx": {"value" : "etx-Latn-ZZ"}, "rng": {"value" : "rng-Latn-MZ"}, "und-Linb": {"value" : "grc-Linb-GR"}
    , "und-Lina": {"value" : "lab-Lina-GR"}, "und-Jpan": {"value" : "ja-Jpan-JP"}, "man-GN": {"value" : "man-Nkoo-GN"}, "nfr": {"value" : "nfr-Latn-ZZ"}, "amm": {"value" : "amm-Latn-ZZ"}, "und-Arab": {"value" : "ar-Arab-EG"}, "amo": {"value" : "amo-Latn-NG"}, "amn": {"value" : "amn-Latn-ZZ"}, "rob": {"value" : "rob-Latn-ID"}, "amp": {"value" : "amp-Latn-ZZ"}, "ngb": {"value" : "ngb-Latn-ZZ"}, "rof": {"value" : "rof-Latn-TZ"}, "nga": {"value" : "nga-Latn-ZZ"}, "ngl": {"value" : "ngl-Latn-MZ"}, "roo": {"value"
    : "roo-Latn-ZZ"}, "anc": {"value" : "anc-Latn-ZZ"}, "ank": {"value" : "ank-Latn-ZZ"}, "ann": {"value" : "ann-Latn-ZZ"}, "und-Bhks": {"value" : "sa-Bhks-IN"}, "nhb": {"value" : "nhb-Latn-ZZ"}, "nhe": {"value" : "nhe-Latn-MX"}, "any": {"value" : "any-Latn-ZZ"}, "und-Orya": {"value" : "or-Orya-IN"}, "ewo": {"value" : "ewo-Latn-CM"}, "nhw": {"value" : "nhw-Latn-MX"}, "aoj": {"value" : "aoj-Latn-ZZ"}, "aom": {"value" : "aom-Latn-ZZ"}, "zh-Hanb": {"value" : "zh-Hanb-TW"}, "jab": {"value" : "jab-Latn-ZZ"}, "nif":
    {"value" : "nif-Latn-ZZ"}, "aoz": {"value" : "aoz-Latn-ID"}, "nij": {"value" : "nij-Latn-ID"}, "nii": {"value" : "nii-Latn-ZZ"}, "zh-PH": {"value" : "zh-Hant-PH"}, "nin": {"value" : "nin-Latn-ZZ"}, "zh-Hant": {"value" : "zh-Hant-TW"}, "zh-PF": {"value" : "zh-Hant-PF"}, "und-Ahom": {"value" : "aho-Ahom-IN"}, "apd": {"value" : "apd-Arab-TG"}, "apc": {"value" : "apc-Arab-ZZ"}, "ape": {"value" : "ape-Latn-ZZ"}, "jam": {"value" : "jam-Latn-JM"}, "zh-PA": {"value" : "zh-Hant-PA"}, "niu": {"value" : "niu-Latn-NU"}
    , "niz": {"value" : "niz-Latn-ZZ"}, "niy": {"value" : "niy-Latn-ZZ"}, "ext": {"value" : "ext-Latn-ES"}, "apr": {"value" : "apr-Latn-ZZ"}, "aps": {"value" : "aps-Latn-ZZ"}, "apz": {"value" : "apz-Latn-ZZ"}, "rro": {"value" : "rro-Latn-ZZ"}, "njo": {"value" : "njo-Latn-IN"}, "jbo": {"value" : "jbo-Latn-001"}, "jbu": {"value" : "jbu-Latn-ZZ"}, "zh-MO": {"value" : "zh-Hant-MO"}, "nkg": {"value" : "nkg-Latn-ZZ"}, "zh-MY": {"value" : "zh-Hant-MY"}, "arc": {"value" : "arc-Armi-IR"}, "nko": {"value" : "nko-Latn-ZZ"}
    , "arh": {"value" : "arh-Latn-ZZ"}, "pa-Arab": {"value" : "pa-Arab-PK"}, "und-Mtei": {"value" : "mni-Mtei-IN"}, "arn": {"value" : "arn-Latn-CL"}, "aro": {"value" : "aro-Latn-BO"}, "und-Cyrl-RO": {"value" : "bg-Cyrl-RO"}, "arq": {"value" : "arq-Arab-DZ"}, "arz": {"value" : "arz-Arab-EG"}, "ary": {"value" : "ary-Arab-MA"}, "rtm": {"value" : "rtm-Latn-FJ"}, "asa": {"value" : "asa-Latn-TZ"}, "und-Grek-TR": {"value" : "bgx-Grek-TR"}, "ase": {"value" : "ase-Sgnw-US"}, "asg": {"value" : "asg-Latn-ZZ"}, "aso": {"value"
    : "aso-Latn-ZZ"}, "ast": {"value" : "ast-Latn-ES"}, "rue": {"value" : "rue-Cyrl-UA"}, "rug": {"value" : "rug-Latn-SB"}, "nmg": {"value" : "nmg-Latn-CM"}, "ata": {"value" : "ata-Latn-ZZ"}, "jen": {"value" : "jen-Latn-ZZ"}, "atg": {"value" : "atg-Latn-ZZ"}, "atj": {"value" : "atj-Latn-CA"}, "nmz": {"value" : "nmz-Latn-ZZ"}, "unr-Deva": {"value" : "unr-Deva-NP"}, "nnf": {"value" : "nnf-Latn-ZZ"}, "nnh": {"value" : "nnh-Latn-CM"}, "nnk": {"value" : "nnk-Latn-ZZ"}, "nnm": {"value" : "nnm-Latn-ZZ"}, "nnp": {"value"
    : "nnp-Wcho-IN"}, "az-IR": {"value" : "az-Arab-IR"}, "und-Adlm": {"value" : "ff-Adlm-GN"}, "az-IQ": {"value" : "az-Arab-IQ"}, "und-Nbat": {"value" : "arc-Nbat-JO"}, "sd-Khoj": {"value" : "sd-Khoj-IN"}, "nod": {"value" : "nod-Lana-TH"}, "auy": {"value" : "auy-Latn-ZZ"}, "noe": {"value" : "noe-Deva-IN"}, "rwk": {"value" : "rwk-Latn-TZ"}, "und-Cyrl-MD": {"value" : "uk-Cyrl-MD"}, "rwo": {"value" : "rwo-Latn-ZZ"}, "non": {"value" : "non-Runr-SE"}, "nop": {"value" : "nop-Latn-ZZ"}, "jgk": {"value" : "jgk-Latn-ZZ"}
    , "jgo": {"value" : "jgo-Latn-CM"}, "und-Vaii": {"value" : "vai-Vaii-LR"}, "nou": {"value" : "nou-Latn-ZZ"}, "avl": {"value" : "avl-Arab-ZZ"}, "avn": {"value" : "avn-Latn-ZZ"}, "wae": {"value" : "wae-Latn-CH"}, "avt": {"value" : "avt-Latn-ZZ"}, "avu": {"value" : "avu-Latn-ZZ"}, "waj": {"value" : "waj-Latn-ZZ"}, "wal": {"value" : "wal-Ethi-ET"}, "wan": {"value" : "wan-Latn-ZZ"}, "zh-HK": {"value" : "zh-Hant-HK"}, "war": {"value" : "war-Latn-PH"}, "awa": {"value" : "awa-Deva-IN"}, "und-Plrd": {"value" : "hmd-Plrd-CN"}
    , "awb": {"value" : "awb-Latn-ZZ"}, "awo": {"value" : "awo-Latn-ZZ"}, "und-Knda": {"value" : "kn-Knda-IN"}, "zh-ID": {"value" : "zh-Hant-ID"}, "jib": {"value" : "jib-Latn-ZZ"}, "awx": {"value" : "awx-Latn-ZZ"}, "wbp": {"value" : "wbp-Latn-AU"}, "und-Sidd": {"value" : "sa-Sidd-IN"}, "fab": {"value" : "fab-Latn-ZZ"}, "wbr": {"value" : "wbr-Deva-IN"}, "faa": {"value" : "faa-Latn-ZZ"}, "wbq": {"value" : "wbq-Telu-IN"}, "und-Kali": {"value" : "eky-Kali-MM"}, "fag": {"value" : "fag-Latn-ZZ"}, "nqo": {"value" :
    "nqo-Nkoo-GN"}, "fai": {"value" : "fai-Latn-ZZ"}, "ryu": {"value" : "ryu-Kana-JP"}, "fan": {"value" : "fan-Latn-GQ"}, "wci": {"value" : "wci-Latn-ZZ"}, "nrb": {"value" : "nrb-Latn-ZZ"}, "und-Phlp": {"value" : "pal-Phlp-CN"}, "ayb": {"value" : "ayb-Latn-ZZ"}, "und-Phli": {"value" : "pal-Phli-IR"}, "cu-Glag": {"value" : "cu-Glag-BG"}, "und-Cyrl-XK": {"value" : "sr-Cyrl-XK"}, "az-Arab": {"value" : "az-Arab-IR"}, "und-Thai": {"value" : "th-Thai-TH"}, "nsk": {"value" : "nsk-Cans-CA"}, "nsn": {"value" : "nsn-Latn-ZZ"}
    , "nso": {"value" : "nso-Latn-ZA"}, "und-Thaa": {"value" : "dv-Thaa-MV"}, "und-Nshu": {"value" : "zhx-Nshu-CN"}, "nss": {"value" : "nss-Latn-ZZ"}, "zh-VN": {"value" : "zh-Hant-VN"}, "und-Hmnp": {"value" : "mww-Hmnp-US"}, "und-Kana": {"value" : "ja-Kana-JP"}, "und-Hmng": {"value" : "hnj-Hmng-LA"}, "wer": {"value" : "wer-Latn-ZZ"}, "zh-TW": {"value" : "zh-Hant-TW"}, "ntm": {"value" : "ntm-Latn-ZZ"}, "ntr": {"value" : "ntr-Latn-ZZ"}, "zh-US": {"value" : "zh-Hant-US"}, "und-Xpeo": {"value" : "peo-Xpeo-IR"},
    "jmc": {"value" : "jmc-Latn-TZ"}, "nui": {"value" : "nui-Latn-ZZ"}, "jml": {"value" : "jml-Deva-NP"}, "nup": {"value" : "nup-Latn-ZZ"}, "und-Cyrl-SK": {"value" : "uk-Cyrl-SK"}, "nus": {"value" : "nus-Latn-SS"}, "nuv": {"value" : "nuv-Latn-ZZ"}, "nux": {"value" : "nux-Latn-ZZ"}, "zh-TH": {"value" : "zh-Hant-TH"}, "wgi": {"value" : "wgi-Latn-ZZ"}, "und-Phnx": {"value" : "phn-Phnx-LB"}, "und-Cyrl-TR": {"value" : "kbd-Cyrl-TR"}, "ffi": {"value" : "ffi-Latn-ZZ"}, "und-Elym": {"value" : "arc-Elym-IR"}, "ffm":
    {"value" : "ffm-Latn-ML"}, "und-Rjng": {"value" : "rej-Rjng-ID"}, "whg": {"value" : "whg-Latn-ZZ"}, "nwb": {"value" : "nwb-Latn-ZZ"}, "zh-SR": {"value" : "zh-Hant-SR"}, "wib": {"value" : "wib-Latn-ZZ"}, "und-Hebr": {"value" : "he-Hebr-IL"}, "saf": {"value" : "saf-Latn-GH"}, "sah": {"value" : "sah-Cyrl-RU"}, "saq": {"value" : "saq-Latn-KE"}, "wiu": {"value" : "wiu-Latn-ZZ"}, "sas": {"value" : "sas-Latn-ID"}, "wiv": {"value" : "wiv-Latn-ZZ"}, "nxq": {"value" : "nxq-Latn-CN"}, "sat": {"value" : "sat-Latn-IN"}
    , "nxr": {"value" : "nxr-Latn-ZZ"}, "sav": {"value" : "sav-Latn-SN"}, "saz": {"value" : "saz-Saur-IN"}, "wja": {"value" : "wja-Latn-ZZ"}, "sba": {"value" : "sba-Latn-ZZ"}, "sbe": {"value" : "sbe-Latn-ZZ"}, "wji": {"value" : "wji-Latn-ZZ"}, "mn-Mong": {"value" : "mn-Mong-CN"}, "und-419": {"value" : "es-Latn-419"}, "fia": {"value" : "fia-Arab-SD"}, "sbp": {"value" : "sbp-Latn-TZ"}, "und-NO": {"value" : "nb-Latn-NO"}, "nyn": {"value" : "nyn-Latn-UG"}, "nym": {"value" : "nym-Latn-TZ"}, "und-NL": {"value" : "nl-Latn-NL"}
    , "und-NP": {"value" : "ne-Deva-NP"}, "fil": {"value" : "fil-Latn-PH"}, "bal": {"value" : "bal-Arab-PK"}, "ban": {"value" : "ban-Latn-ID"}, "bap": {"value" : "bap-Deva-NP"}, "fit": {"value" : "fit-Latn-SE"}, "bar": {"value" : "bar-Latn-AT"}, "bas": {"value" : "bas-Latn-CM"}, "bav": {"value" : "bav-Latn-ZZ"}, "bax": {"value" : "bax-Bamu-CM"}, "jra": {"value" : "jra-Latn-ZZ"}, "sck": {"value" : "sck-Deva-IN"}, "nzi": {"value" : "nzi-Latn-GH"}, "scl": {"value" : "scl-Arab-ZZ"}, "sco": {"value" : "sco-Latn-GB"}
    , "scn": {"value" : "scn-Latn-IT"}, "aa": {"value" : "aa-Latn-ET"}, "bba": {"value" : "bba-Latn-ZZ"}, "und-MN": {"value" : "mn-Cyrl-MN"}, "ab": {"value" : "ab-Cyrl-GE"}, "und-MM": {"value" : "my-Mymr-MM"}, "und-Osma": {"value" : "so-Osma-SO"}, "bbc": {"value" : "bbc-Latn-ID"}, "scs": {"value" : "scs-Latn-CA"}, "und-ML": {"value" : "bm-Latn-ML"}, "bbb": {"value" : "bbb-Latn-ZZ"}, "und-MK": {"value" : "mk-Cyrl-MK"}, "ae": {"value" : "ae-Avst-IR"}, "und-MR": {"value" : "ar-Arab-MR"}, "af": {"value" : "af-Latn-ZA"}
    , "bbd": {"value" : "bbd-Latn-ZZ"}, "und-MQ": {"value" : "fr-Latn-MQ"}, "und-Wara": {"value" : "hoc-Wara-IN"}, "und-MO": {"value" : "zh-Hant-MO"}, "und-MV": {"value" : "dv-Thaa-MV"}, "und-MU": {"value" : "mfe-Latn-MU"}, "ak": {"value" : "ak-Latn-GH"}, "und-MT": {"value" : "mt-Latn-MT"}, "bbj": {"value" : "bbj-Latn-CM"}, "am": {"value" : "am-Ethi-ET"}, "und-MZ": {"value" : "pt-Latn-MZ"}, "und-MY": {"value" : "ms-Latn-MY"}, "und-MX": {"value" : "es-Latn-MX"}, "ar": {"value" : "ar-Arab-EG"}, "bbp": {"value"
    : "bbp-Latn-ZZ"}, "as": {"value" : "as-Beng-IN"}, "bbr": {"value" : "bbr-Latn-ZZ"}, "sdc": {"value" : "sdc-Latn-IT"}, "und-NC": {"value" : "fr-Latn-NC"}, "av": {"value" : "av-Cyrl-RU"}, "sdh": {"value" : "sdh-Arab-IR"}, "und-NA": {"value" : "af-Latn-NA"}, "ay": {"value" : "ay-Latn-BO"}, "az": {"value" : "az-Latn-AZ"}, "und-NE": {"value" : "ha-Latn-NE"}, "und-NI": {"value" : "es-Latn-NI"}, "ba": {"value" : "ba-Cyrl-RU"}, "wls": {"value" : "wls-Latn-WF"}, "und-Kore": {"value" : "ko-Kore-KR"}, "und-LK": {"value"
    : "si-Sinh-LK"}, "be": {"value" : "be-Cyrl-BY"}, "bcf": {"value" : "bcf-Latn-ZZ"}, "bg": {"value" : "bg-Cyrl-BG"}, "bch": {"value" : "bch-Latn-ZZ"}, "bi": {"value" : "bi-Latn-VU"}, "und-LU": {"value" : "fr-Latn-LU"}, "bci": {"value" : "bci-Latn-CI"}, "und-LT": {"value" : "lt-Latn-LT"}, "und-LS": {"value" : "st-Latn-LS"}, "bm": {"value" : "bm-Latn-ML"}, "bcn": {"value" : "bcn-Latn-ZZ"}, "bn": {"value" : "bn-Beng-BD"}, "und-LY": {"value" : "ar-Arab-LY"}, "bcm": {"value" : "bcm-Latn-ZZ"}, "bo": {"value" : "bo-Tibt-CN"}
    , "bco": {"value" : "bco-Latn-ZZ"}, "und-LV": {"value" : "lv-Latn-LV"}, "br": {"value" : "br-Latn-FR"}, "bcq": {"value" : "bcq-Ethi-ZZ"}, "bs": {"value" : "bs-Latn-BA"}, "bcu": {"value" : "bcu-Latn-ZZ"}, "sef": {"value" : "sef-Latn-CI"}, "und-MA": {"value" : "ar-Arab-MA"}, "sei": {"value" : "sei-Latn-MX"}, "seh": {"value" : "seh-Latn-MZ"}, "und-MF": {"value" : "fr-Latn-MF"}, "wmo": {"value" : "wmo-Latn-ZZ"}, "und-ME": {"value" : "sr-Latn-ME"}, "und-MD": {"value" : "ro-Latn-MD"}, "und-MC": {"value" : "fr-Latn-MC"}
    , "ca": {"value" : "ca-Latn-ES"}, "und-MG": {"value" : "mg-Latn-MG"}, "ses": {"value" : "ses-Latn-ML"}, "ce": {"value" : "ce-Cyrl-RU"}, "und-Cyrl-BA": {"value" : "sr-Cyrl-BA"}, "bdd": {"value" : "bdd-Latn-ZZ"}, "und-KP": {"value" : "ko-Kore-KP"}, "ch": {"value" : "ch-Latn-GU"}, "und-KM": {"value" : "ar-Arab-KM"}, "und-KR": {"value" : "ko-Kore-KR"}, "co": {"value" : "co-Latn-FR"}, "flr": {"value" : "flr-Latn-ZZ"}, "und-KW": {"value" : "ar-Arab-KW"}, "wnc": {"value" : "wnc-Latn-ZZ"}, "und-Dogr": {"value" :
    "doi-Dogr-IN"}, "cr": {"value" : "cr-Cans-CA"}, "cs": {"value" : "cs-Latn-CZ"}, "cu": {"value" : "cu-Cyrl-RU"}, "und-KZ": {"value" : "ru-Cyrl-KZ"}, "cv": {"value" : "cv-Cyrl-RU"}, "wni": {"value" : "wni-Arab-KM"}, "und-LA": {"value" : "lo-Laoo-LA"}, "cy": {"value" : "cy-Latn-GB"}, "und-LB": {"value" : "ar-Arab-LB"}, "und-LI": {"value" : "de-Latn-LI"}, "da": {"value" : "da-Latn-DK"}, "und-Cyrl-AL": {"value" : "mk-Cyrl-AL"}, "wnu": {"value" : "wnu-Latn-ZZ"}, "de": {"value" : "de-Latn-DE"}, "bef": {"value"
    : "bef-Latn-ZZ"}, "beh": {"value" : "beh-Latn-ZZ"}, "und-JO": {"value" : "ar-Arab-JO"}, "bej": {"value" : "bej-Arab-SD"}, "fmp": {"value" : "fmp-Latn-ZZ"}, "jut": {"value" : "jut-Latn-DK"}, "bem": {"value" : "bem-Latn-ZM"}, "und-JP": {"value" : "ja-Jpan-JP"}, "wob": {"value" : "wob-Latn-ZZ"}, "sga": {"value" : "sga-Ogam-IE"}, "bet": {"value" : "bet-Latn-ZZ"}, "dv": {"value" : "dv-Thaa-MV"}, "bex": {"value" : "bex-Latn-ZZ"}, "bew": {"value" : "bew-Latn-ID"}, "bez": {"value" : "bez-Latn-TZ"}, "dz": {"value"
    : "dz-Tibt-BT"}, "ms-ID": {"value" : "ms-Arab-ID"}, "wos": {"value" : "wos-Latn-ZZ"}, "und-KH": {"value" : "km-Khmr-KH"}, "und-KG": {"value" : "ky-Cyrl-KG"}, "sgs": {"value" : "sgs-Latn-LT"}, "und-KE": {"value" : "sw-Latn-KE"}, "ee": {"value" : "ee-Latn-GH"}, "bfd": {"value" : "bfd-Latn-CM"}, "sgw": {"value" : "sgw-Ethi-ZZ"}, "und-IN": {"value" : "hi-Deva-IN"}, "und-IL": {"value" : "he-Hebr-IL"}, "el": {"value" : "el-Grek-GR"}, "sgz": {"value" : "sgz-Latn-ZZ"}, "und-IR": {"value" : "fa-Arab-IR"}, "en": {"value"
    : "en-Latn-US"}, "und-IQ": {"value" : "ar-Arab-IQ"}, "und-Perm": {"value" : "kv-Perm-RU"}, "eo": {"value" : "eo-Latn-001"}, "bfq": {"value" : "bfq-Taml-IN"}, "es": {"value" : "es-Latn-ES"}, "und-IT": {"value" : "it-Latn-IT"}, "et": {"value" : "et-Latn-EE"}, "und-IS": {"value" : "is-Latn-IS"}, "eu": {"value" : "eu-Latn-ES"}, "bft": {"value" : "bft-Arab-PK"}, "bfy": {"value" : "bfy-Deva-IN"}, "shi": {"value" : "shi-Tfng-MA"}, "shk": {"value" : "shk-Latn-ZZ"}, "shn": {"value" : "shn-Mymr-MM"}, "fod": {"value"
    : "fod-Latn-ZZ"}, "fa": {"value" : "fa-Arab-IR"}, "bgc": {"value" : "bgc-Deva-IN"}, "ff": {"value" : "ff-Latn-SN"}, "shu": {"value" : "shu-Arab-ZZ"}, "fi": {"value" : "fi-Latn-FI"}, "fj": {"value" : "fj-Latn-FJ"}, "fon": {"value" : "fon-Latn-BJ"}, "und-HM": {"value" : "und-Latn-HM"}, "und-HK": {"value" : "zh-Hant-HK"}, "bgn": {"value" : "bgn-Arab-PK"}, "for": {"value" : "for-Latn-ZZ"}, "fo": {"value" : "fo-Latn-FO"}, "und-HN": {"value" : "es-Latn-HN"}, "fr": {"value" : "fr-Latn-FR"}, "und-HU": {"value" :
    "hu-Latn-HU"}, "und-HT": {"value" : "ht-Latn-HT"}, "ku-Arab": {"value" : "ku-Arab-IQ"}, "sid": {"value" : "sid-Latn-ET"}, "und-HR": {"value" : "hr-Latn-HR"}, "sig": {"value" : "sig-Latn-ZZ"}, "bgx": {"value" : "bgx-Grek-TR"}, "fy": {"value" : "fy-Latn-NL"}, "sim": {"value" : "sim-Latn-ZZ"}, "sil": {"value" : "sil-Latn-ZZ"}, "fpe": {"value" : "fpe-Latn-ZZ"}, "ga": {"value" : "ga-Latn-IE"}, "bhb": {"value" : "bhb-Deva-IN"}, "gd": {"value" : "gd-Latn-GB"}, "und-ID": {"value" : "id-Latn-ID"}, "und-IC": {"value"
    : "es-Latn-IC"}, "bhg": {"value" : "bhg-Latn-ZZ"}, "und-GH": {"value" : "ak-Latn-GH"}, "bhi": {"value" : "bhi-Deva-IN"}, "und-GF": {"value" : "fr-Latn-GF"}, "und-GE": {"value" : "ka-Geor-GE"}, "bhk": {"value" : "bhk-Latn-PH"}, "und-GL": {"value" : "kl-Latn-GL"}, "gl": {"value" : "gl-Latn-ES"}, "bhl": {"value" : "bhl-Latn-ZZ"}, "gn": {"value" : "gn-Latn-PY"}, "bho": {"value" : "bho-Deva-IN"}, "und-GP": {"value" : "fr-Latn-GP"}, "und-GN": {"value" : "fr-Latn-GN"}, "und-GT": {"value" : "es-Latn-GT"}, "und-GS":
    {"value" : "und-Latn-GS"}, "gu": {"value" : "gu-Gujr-IN"}, "und-GR": {"value" : "el-Grek-GR"}, "gv": {"value" : "gv-Latn-IM"}, "und-GQ": {"value" : "es-Latn-GQ"}, "und-Palm": {"value" : "arc-Palm-SY"}, "und-GW": {"value" : "pt-Latn-GW"}, "bhy": {"value" : "bhy-Latn-ZZ"}, "ha": {"value" : "ha-Latn-NG"}, "wrs": {"value" : "wrs-Latn-ZZ"}, "bib": {"value" : "bib-Latn-ZZ"}, "sjr": {"value" : "sjr-Latn-ZZ"}, "he": {"value" : "he-Hebr-IL"}, "big": {"value" : "big-Latn-ZZ"}, "hi": {"value" : "hi-Deva-IN"}, "und-Cyrl-GE":
    {"value" : "ab-Cyrl-GE"}, "bik": {"value" : "bik-Latn-PH"}, "bin": {"value" : "bin-Latn-NG"}, "und-Cham": {"value" : "cjm-Cham-VN"}, "und-FI": {"value" : "fi-Latn-FI"}, "bim": {"value" : "bim-Latn-ZZ"}, "ho": {"value" : "ho-Latn-PG"}, "tg-PK": {"value" : "tg-Arab-PK"}, "und-FO": {"value" : "fo-Latn-FO"}, "bio": {"value" : "bio-Latn-ZZ"}, "fqs": {"value" : "fqs-Latn-ZZ"}, "hr": {"value" : "hr-Latn-HR"}, "skc": {"value" : "skc-Latn-ZZ"}, "wsg": {"value" : "wsg-Gong-IN"}, "biq": {"value" : "biq-Latn-ZZ"}, "ht":
    {"value" : "ht-Latn-HT"}, "hu": {"value" : "hu-Latn-HU"}, "und-FR": {"value" : "fr-Latn-FR"}, "wsk": {"value" : "wsk-Latn-ZZ"}, "hy": {"value" : "hy-Armn-AM"}, "hz": {"value" : "hz-Latn-NA"}, "frc": {"value" : "frc-Latn-US"}, "ia": {"value" : "ia-Latn-001"}, "sks": {"value" : "sks-Latn-ZZ"}, "id": {"value" : "id-Latn-ID"}, "skr": {"value" : "skr-Arab-PK"}, "ig": {"value" : "ig-Latn-NG"}, "und-GA": {"value" : "fr-Latn-GA"}, "bji": {"value" : "bji-Ethi-ZZ"}, "ii": {"value" : "ii-Yiii-CN"}, "bjh": {"value"
    : "bjh-Latn-ZZ"}, "und-EE": {"value" : "et-Latn-EE"}, "ik": {"value" : "ik-Latn-US"}, "bjj": {"value" : "bjj-Deva-IN"}, "und-EC": {"value" : "es-Latn-EC"}, "und-Cprt": {"value" : "grc-Cprt-CY"}, "frp": {"value" : "frp-Latn-FR"}, "in": {"value" : "in-Latn-ID"}, "bjo": {"value" : "bjo-Latn-ZZ"}, "frs": {"value" : "frs-Latn-DE"}, "io": {"value" : "io-Latn-001"}, "und-EH": {"value" : "ar-Arab-EH"}, "bjn": {"value" : "bjn-Latn-ID"}, "frr": {"value" : "frr-Latn-DE"}, "und-EG": {"value" : "ar-Arab-EG"}, "is": {"value"
    : "is-Latn-IS"}, "sld": {"value" : "sld-Latn-ZZ"}, "bjr": {"value" : "bjr-Latn-ZZ"}, "it": {"value" : "it-Latn-IT"}, "iu": {"value" : "iu-Cans-CA"}, "und-ER": {"value" : "ti-Ethi-ER"}, "bjt": {"value" : "bjt-Latn-SN"}, "iw": {"value" : "iw-Hebr-IL"}, "und-Tirh": {"value" : "mai-Tirh-IN"}, "sli": {"value" : "sli-Latn-PL"}, "und-EU": {"value" : "en-Latn-GB"}, "wtm": {"value" : "wtm-Deva-IN"}, "sll": {"value" : "sll-Latn-ZZ"}, "und-ET": {"value" : "am-Ethi-ET"}, "bjz": {"value" : "bjz-Latn-ZZ"}, "und-ES": {"value"
    : "es-Latn-ES"}, "und-EZ": {"value" : "de-Latn-EZ"}, "ja": {"value" : "ja-Jpan-JP"}, "zh-GF": {"value" : "zh-Hant-GF"}, "bkc": {"value" : "bkc-Latn-ZZ"}, "zh-GB": {"value" : "zh-Hant-GB"}, "und-Cyrl-GR": {"value" : "mk-Cyrl-GR"}, "ji": {"value" : "ji-Hebr-UA"}, "und-DE": {"value" : "de-Latn-DE"}, "sly": {"value" : "sly-Latn-ID"}, "bkm": {"value" : "bkm-Latn-CM"}, "sma": {"value" : "sma-Latn-SE"}, "bkq": {"value" : "bkq-Latn-ZZ"}, "und-DK": {"value" : "da-Latn-DK"}, "und-DJ": {"value" : "aa-Latn-DJ"}, "bkv":
    {"value" : "bkv-Latn-ZZ"}, "jv": {"value" : "jv-Latn-ID"}, "bku": {"value" : "bku-Latn-PH"}, "jw": {"value" : "jw-Latn-ID"}, "und-DO": {"value" : "es-Latn-DO"}, "smj": {"value" : "smj-Latn-SE"}, "smn": {"value" : "smn-Latn-FI"}, "ka": {"value" : "ka-Geor-GE"}, "smq": {"value" : "smq-Latn-ZZ"}, "wuu": {"value" : "wuu-Hans-CN"}, "smp": {"value" : "smp-Samr-IL"}, "sms": {"value" : "sms-Latn-FI"}, "wuv": {"value" : "wuv-Latn-ZZ"}, "und-DZ": {"value" : "ar-Arab-DZ"}, "kg": {"value" : "kg-Latn-CD"}, "und-EA":
    {"value" : "es-Latn-EA"}, "ki": {"value" : "ki-Latn-KE"}, "kj": {"value" : "kj-Latn-NA"}, "kk": {"value" : "kk-Cyrl-KZ"}, "man-Nkoo": {"value" : "man-Nkoo-GN"}, "und-CD": {"value" : "sw-Latn-CD"}, "kl": {"value" : "kl-Latn-GL"}, "und-Telu": {"value" : "te-Telu-IN"}, "km": {"value" : "km-Khmr-KH"}, "kn": {"value" : "kn-Knda-IN"}, "ko": {"value" : "ko-Kore-KR"}, "und-CH": {"value" : "de-Latn-CH"}, "und-CG": {"value" : "fr-Latn-CG"}, "und-CF": {"value" : "fr-Latn-CF"}, "kr": {"value" : "kr-Latn-ZZ"}, "ks":
    {"value" : "ks-Arab-IN"}, "und-CL": {"value" : "es-Latn-CL"}, "snc": {"value" : "snc-Latn-ZZ"}, "ku": {"value" : "ku-Latn-TR"}, "blt": {"value" : "blt-Tavt-VN"}, "kv": {"value" : "kv-Cyrl-RU"}, "und-CI": {"value" : "fr-Latn-CI"}, "kw": {"value" : "kw-Latn-GB"}, "und-CP": {"value" : "und-Latn-CP"}, "und-CO": {"value" : "es-Latn-CO"}, "ky": {"value" : "ky-Cyrl-KG"}, "und-CN": {"value" : "zh-Hans-CN"}, "und-CM": {"value" : "fr-Latn-CM"}, "snk": {"value" : "snk-Latn-ML"}, "fub": {"value" : "fub-Arab-CM"}, "und-CR":
    {"value" : "es-Latn-CR"}, "fud": {"value" : "fud-Latn-WF"}, "snp": {"value" : "snp-Latn-ZZ"}, "la": {"value" : "la-Latn-VA"}, "und-CW": {"value" : "pap-Latn-CW"}, "fuf": {"value" : "fuf-Latn-GN"}, "lb": {"value" : "lb-Latn-LU"}, "und-CV": {"value" : "pt-Latn-CV"}, "fue": {"value" : "fue-Latn-ZZ"}, "und-CU": {"value" : "es-Latn-CU"}, "fuh": {"value" : "fuh-Latn-ZZ"}, "und-CZ": {"value" : "cs-Latn-CZ"}, "lg": {"value" : "lg-Latn-UG"}, "und-CY": {"value" : "el-Grek-CY"}, "bmh": {"value" : "bmh-Latn-ZZ"}, "snx":
    {"value" : "snx-Latn-ZZ"}, "li": {"value" : "li-Latn-NL"}, "sny": {"value" : "sny-Latn-ZZ"}, "wwa": {"value" : "wwa-Latn-ZZ"}, "bmk": {"value" : "bmk-Latn-ZZ"}, "und-Cher": {"value" : "chr-Cher-US"}, "fur": {"value" : "fur-Latn-IT"}, "ln": {"value" : "ln-Latn-CD"}, "und-BA": {"value" : "bs-Latn-BA"}, "fuq": {"value" : "fuq-Latn-NE"}, "lo": {"value" : "lo-Laoo-LA"}, "und-BG": {"value" : "bg-Cyrl-BG"}, "und-BF": {"value" : "fr-Latn-BF"}, "fuv": {"value" : "fuv-Latn-NG"}, "und-BE": {"value" : "nl-Latn-BE"}
    , "bmq": {"value" : "bmq-Latn-ML"}, "und-BD": {"value" : "bn-Beng-BD"}, "lt": {"value" : "lt-Latn-LT"}, "lu": {"value" : "lu-Latn-CD"}, "und-BJ": {"value" : "fr-Latn-BJ"}, "lv": {"value" : "lv-Latn-LV"}, "ogc": {"value" : "ogc-Latn-ZZ"}, "sog": {"value" : "sog-Sogd-UZ"}, "und-BI": {"value" : "rn-Latn-BI"}, "bmu": {"value" : "bmu-Latn-ZZ"}, "fuy": {"value" : "fuy-Latn-ZZ"}, "und-BH": {"value" : "ar-Arab-BH"}, "und-BO": {"value" : "es-Latn-BO"}, "und-BN": {"value" : "ms-Latn-BN"}, "sok": {"value" : "sok-Latn-ZZ"}
    , "und-BL": {"value" : "fr-Latn-BL"}, "und-BR": {"value" : "pt-Latn-BR"}, "und-BQ": {"value" : "pap-Latn-BQ"}, "soq": {"value" : "soq-Latn-ZZ"}, "und-BV": {"value" : "und-Latn-BV"}, "und-BT": {"value" : "dz-Tibt-BT"}, "sou": {"value" : "sou-Thai-TH"}, "bng": {"value" : "bng-Latn-ZZ"}, "mg": {"value" : "mg-Latn-MG"}, "und-BY": {"value" : "be-Cyrl-BY"}, "und-Glag": {"value" : "cu-Glag-BG"}, "mh": {"value" : "mh-Latn-MH"}, "mi": {"value" : "mi-Latn-NZ"}, "soy": {"value" : "soy-Latn-ZZ"}, "mk": {"value" : "mk-Cyrl-MK"}
    , "ml": {"value" : "ml-Mlym-IN"}, "bnm": {"value" : "bnm-Latn-ZZ"}, "mn": {"value" : "mn-Cyrl-MN"}, "und-Prti": {"value" : "xpr-Prti-IR"}, "fvr": {"value" : "fvr-Latn-SD"}, "und-AF": {"value" : "fa-Arab-AF"}, "bnp": {"value" : "bnp-Latn-ZZ"}, "mr": {"value" : "mr-Deva-IN"}, "und-AE": {"value" : "ar-Arab-AE"}, "ms": {"value" : "ms-Latn-MY"}, "spd": {"value" : "spd-Latn-ZZ"}, "und-AD": {"value" : "ca-Latn-AD"}, "mt": {"value" : "mt-Latn-MT"}, "my": {"value" : "my-Mymr-MM"}, "zh-BN": {"value" : "zh-Hant-BN"}
    , "und-AM": {"value" : "hy-Armn-AM"}, "spl": {"value" : "spl-Latn-ZZ"}, "und-AL": {"value" : "sq-Latn-AL"}, "und-AR": {"value" : "es-Latn-AR"}, "und-AQ": {"value" : "und-Latn-AQ"}, "na": {"value" : "na-Latn-NR"}, "und-AO": {"value" : "pt-Latn-AO"}, "nb": {"value" : "nb-Latn-NO"}, "nd": {"value" : "nd-Latn-ZW"}, "und-AT": {"value" : "de-Latn-AT"}, "ne": {"value" : "ne-Deva-NP"}, "sps": {"value" : "sps-Latn-ZZ"}, "und-AS": {"value" : "sm-Latn-AS"}, "und-AZ": {"value" : "az-Latn-AZ"}, "ng": {"value" : "ng-Latn-NA"}
    , "und-AX": {"value" : "sv-Latn-AX"}, "und-AW": {"value" : "nl-Latn-AW"}, "boj": {"value" : "boj-Latn-ZZ"}, "nl": {"value" : "nl-Latn-NL"}, "bon": {"value" : "bon-Latn-ZZ"}, "nn": {"value" : "nn-Latn-NO"}, "bom": {"value" : "bom-Latn-ZZ"}, "no": {"value" : "no-Latn-NO"}, "nr": {"value" : "nr-Latn-ZA"}, "arc-Nbat": {"value" : "arc-Nbat-JO"}, "und-Medf": {"value" : "mis-Medf-NG"}, "nv": {"value" : "nv-Latn-US"}, "kaa": {"value" : "kaa-Cyrl-UZ"}, "ny": {"value" : "ny-Latn-MW"}, "kac": {"value" : "kac-Latn-MM"}
    , "kab": {"value" : "kab-Latn-DZ"}, "kad": {"value" : "kad-Latn-ZZ"}, "kai": {"value" : "kai-Latn-ZZ"}, "oc": {"value" : "oc-Latn-FR"}, "zh-AU": {"value" : "zh-Hant-AU"}, "kaj": {"value" : "kaj-Latn-NG"}, "kam": {"value" : "kam-Latn-KE"}, "und-Tagb": {"value" : "tbw-Tagb-PH"}, "kao": {"value" : "kao-Latn-ML"}, "und-Ogam": {"value" : "sga-Ogam-IE"}, "om": {"value" : "om-Latn-ET"}, "srb": {"value" : "srb-Sora-IN"}, "or": {"value" : "or-Orya-IN"}, "tg-Arab": {"value" : "tg-Arab-PK"}, "os": {"value" : "os-Cyrl-GE"}
    , "und-Sogd": {"value" : "sog-Sogd-UZ"}, "bpy": {"value" : "bpy-Beng-IN"}, "kbd": {"value" : "kbd-Cyrl-RU"}, "srn": {"value" : "srn-Latn-SR"}, "pa": {"value" : "pa-Guru-IN"}, "srr": {"value" : "srr-Latn-SN"}, "bqc": {"value" : "bqc-Latn-ZZ"}, "und-Kthi": {"value" : "bho-Kthi-IN"}, "kbm": {"value" : "kbm-Latn-ZZ"}, "kbp": {"value" : "kbp-Latn-ZZ"}, "srx": {"value" : "srx-Deva-IN"}, "bqi": {"value" : "bqi-Arab-IR"}, "kbq": {"value" : "kbq-Latn-ZZ"}, "pl": {"value" : "pl-Latn-PL"}, "bqp": {"value" : "bqp-Latn-ZZ"}
    , "kbx": {"value" : "kbx-Latn-ZZ"}, "kby": {"value" : "kby-Arab-NE"}, "ps": {"value" : "ps-Arab-AF"}, "pt": {"value" : "pt-Latn-BR"}, "ssd": {"value" : "ssd-Latn-ZZ"}, "und-Nkoo": {"value" : "man-Nkoo-GN"}, "bqv": {"value" : "bqv-Latn-CI"}, "ssg": {"value" : "ssg-Latn-ZZ"}, "und-Mymr": {"value" : "my-Mymr-MM"}, "kcg": {"value" : "kcg-Latn-NG"}, "bra": {"value" : "bra-Deva-IN"}, "kck": {"value" : "kck-Latn-ZW"}, "kcl": {"value" : "kcl-Latn-ZZ"}, "okr": {"value" : "okr-Latn-ZZ"}, "ssy": {"value" : "ssy-Latn-ER"}
    , "brh": {"value" : "brh-Arab-PK"}, "okv": {"value" : "okv-Latn-ZZ"}, "kct": {"value" : "kct-Latn-ZZ"}, "und-Hani": {"value" : "zh-Hani-CN"}, "und-Bugi": {"value" : "bug-Bugi-ID"}, "und-Hang": {"value" : "ko-Hang-KR"}, "qu": {"value" : "qu-Latn-PE"}, "brx": {"value" : "brx-Deva-IN"}, "und-Samr": {"value" : "smp-Samr-IL"}, "brz": {"value" : "brz-Latn-ZZ"}, "stk": {"value" : "stk-Latn-ZZ"}, "und-Hano": {"value" : "hnn-Hano-PH"}, "kde": {"value" : "kde-Latn-TZ"}, "kdh": {"value" : "kdh-Arab-TG"}, "stq": {"value"
    : "stq-Latn-DE"}, "kdl": {"value" : "kdl-Latn-ZZ"}, "bsj": {"value" : "bsj-Latn-ZZ"}, "und-Hanb": {"value" : "zh-Hanb-TW"}, "kdt": {"value" : "kdt-Thai-TH"}, "rm": {"value" : "rm-Latn-CH"}, "rn": {"value" : "rn-Latn-BI"}, "ro": {"value" : "ro-Latn-RO"}, "sua": {"value" : "sua-Latn-ZZ"}, "und-Deva-BT": {"value" : "ne-Deva-BT"}, "bsq": {"value" : "bsq-Bass-LR"}, "bst": {"value" : "bst-Ethi-ZZ"}, "sue": {"value" : "sue-Latn-ZZ"}, "bss": {"value" : "bss-Latn-CM"}, "ru": {"value" : "ru-Cyrl-RU"}, "und-Buhd":
    {"value" : "bku-Buhd-PH"}, "rw": {"value" : "rw-Latn-RW"}, "kea": {"value" : "kea-Latn-CV"}, "suk": {"value" : "suk-Latn-TZ"}, "grc-Linb": {"value" : "grc-Linb-GR"}, "sa": {"value" : "sa-Deva-IN"}, "sc": {"value" : "sc-Latn-IT"}, "sus": {"value" : "sus-Latn-GN"}, "sd": {"value" : "sd-Arab-PK"}, "sur": {"value" : "sur-Latn-ZZ"}, "se": {"value" : "se-Latn-NO"}, "sg": {"value" : "sg-Latn-CF"}, "ken": {"value" : "ken-Latn-CM"}, "si": {"value" : "si-Sinh-LK"}, "und-Hant": {"value" : "zh-Hant-TW"}, "und-Hans":
    {"value" : "zh-Hans-CN"}, "sk": {"value" : "sk-Latn-SK"}, "sl": {"value" : "sl-Latn-SI"}, "sm": {"value" : "sm-Latn-WS"}, "sn": {"value" : "sn-Latn-ZW"}, "bto": {"value" : "bto-Latn-PH"}, "so": {"value" : "so-Latn-SO"}, "sq": {"value" : "sq-Latn-AL"}, "sr": {"value" : "sr-Cyrl-RS"}, "ss": {"value" : "ss-Latn-ZA"}, "kez": {"value" : "kez-Latn-ZZ"}, "st": {"value" : "st-Latn-ZA"}, "su": {"value" : "su-Latn-ID"}, "btt": {"value" : "btt-Latn-ZZ"}, "sv": {"value" : "sv-Latn-SE"}, "sw": {"value" : "sw-Latn-TZ"}
    , "btv": {"value" : "btv-Deva-PK"}, "ong": {"value" : "ong-Latn-ZZ"}, "ta": {"value" : "ta-Taml-IN"}, "onn": {"value" : "onn-Latn-ZZ"}, "bua": {"value" : "bua-Cyrl-RU"}, "bud": {"value" : "bud-Latn-ZZ"}, "buc": {"value" : "buc-Latn-YT"}, "te": {"value" : "te-Telu-IN"}, "tg": {"value" : "tg-Cyrl-TJ"}, "th": {"value" : "th-Thai-TH"}, "und-Gong": {"value" : "wsg-Gong-IN"}, "bug": {"value" : "bug-Latn-ID"}, "kfo": {"value" : "kfo-Latn-CI"}, "ons": {"value" : "ons-Latn-ZZ"}, "ti": {"value" : "ti-Ethi-ET"}, "kfr":
    {"value" : "kfr-Deva-IN"}, "tk": {"value" : "tk-Latn-TM"}, "tl": {"value" : "tl-Latn-PH"}, "und-Lisu": {"value" : "lis-Lisu-CN"}, "buk": {"value" : "buk-Latn-ZZ"}, "tn": {"value" : "tn-Latn-ZA"}, "bum": {"value" : "bum-Latn-CM"}, "to": {"value" : "to-Latn-TO"}, "buo": {"value" : "buo-Latn-ZZ"}, "swc": {"value" : "swc-Latn-CD"}, "tr": {"value" : "tr-Latn-TR"}, "und-Gonm": {"value" : "esg-Gonm-IN"}, "kfy": {"value" : "kfy-Deva-IN"}, "swb": {"value" : "swb-Arab-YT"}, "ts": {"value" : "ts-Latn-ZA"}, "tt": {"value"
    : "tt-Cyrl-RU"}, "bus": {"value" : "bus-Latn-ZZ"}, "swg": {"value" : "swg-Latn-DE"}, "buu": {"value" : "buu-Latn-ZZ"}, "ty": {"value" : "ty-Latn-PF"}, "kge": {"value" : "kge-Latn-ID"}, "kgf": {"value" : "kgf-Latn-ZZ"}, "swp": {"value" : "swp-Latn-ZZ"}, "bvb": {"value" : "bvb-Latn-GQ"}, "ug": {"value" : "ug-Arab-CN"}, "swv": {"value" : "swv-Deva-IN"}, "kgp": {"value" : "kgp-Latn-BR"}, "uk": {"value" : "uk-Cyrl-UA"}, "ur": {"value" : "ur-Arab-PK"}, "kk-IR": {"value" : "kk-Arab-IR"}, "khb": {"value" : "khb-Talu-CN"}
    , "kha": {"value" : "kha-Latn-IN"}, "uz": {"value" : "uz-Latn-UZ"}, "sxn": {"value" : "sxn-Latn-ID"}, "xav": {"value" : "xav-Latn-BR"}, "opm": {"value" : "opm-Latn-ZZ"}, "bwd": {"value" : "bwd-Latn-ZZ"}, "und-Mlym": {"value" : "ml-Mlym-IN"}, "ve": {"value" : "ve-Latn-ZA"}, "khn": {"value" : "khn-Deva-IN"}, "sxw": {"value" : "sxw-Latn-ZZ"}, "vi": {"value" : "vi-Latn-VN"}, "khq": {"value" : "khq-Latn-ML"}, "kht": {"value" : "kht-Mymr-IN"}, "khs": {"value" : "khs-Latn-ZZ"}, "vo": {"value" : "vo-Latn-001"},
    "khw": {"value" : "khw-Arab-PK"}, "bwr": {"value" : "bwr-Latn-ZZ"}, "khz": {"value" : "khz-Latn-ZZ"}, "und-ZW": {"value" : "sn-Latn-ZW"}, "xbi": {"value" : "xbi-Latn-ZZ"}, "gaa": {"value" : "gaa-Latn-GH"}, "syl": {"value" : "syl-Beng-BD"}, "wa": {"value" : "wa-Latn-BE"}, "gag": {"value" : "gag-Latn-MD"}, "gaf": {"value" : "gaf-Latn-ZZ"}, "kij": {"value" : "kij-Latn-ZZ"}, "syr": {"value" : "syr-Syrc-IQ"}, "und-YE": {"value" : "ar-Arab-YE"}, "gah": {"value" : "gah-Latn-ZZ"}, "gaj": {"value" : "gaj-Latn-ZZ"}
    , "gam": {"value" : "gam-Latn-ZZ"}, "bxh": {"value" : "bxh-Latn-ZZ"}, "gan": {"value" : "gan-Hans-CN"}, "kiu": {"value" : "kiu-Latn-TR"}, "kiw": {"value" : "kiw-Latn-ZZ"}, "wo": {"value" : "wo-Latn-SN"}, "gaw": {"value" : "gaw-Latn-ZZ"}, "und-Sarb": {"value" : "xsa-Sarb-YE"}, "gay": {"value" : "gay-Latn-ID"}, "und-YT": {"value" : "fr-Latn-YT"}, "kjd": {"value" : "kjd-Latn-ZZ"}, "szl": {"value" : "szl-Latn-PL"}, "xcr": {"value" : "xcr-Cari-TR"}, "gba": {"value" : "gba-Latn-ZZ"}, "und-Mult": {"value" : "skr-Mult-PK"}
    , "kjg": {"value" : "kjg-Laoo-LA"}, "gbf": {"value" : "gbf-Latn-ZZ"}, "oro": {"value" : "oro-Latn-ZZ"}, "und-Hatr": {"value" : "mis-Hatr-IQ"}, "bye": {"value" : "bye-Latn-ZZ"}, "xh": {"value" : "xh-Latn-ZA"}, "gbm": {"value" : "gbm-Deva-IN"}, "oru": {"value" : "oru-Arab-ZZ"}, "kjs": {"value" : "kjs-Latn-ZZ"}, "byn": {"value" : "byn-Ethi-ER"}, "und-XK": {"value" : "sq-Latn-XK"}, "yue-CN": {"value" : "yue-Hans-CN"}, "und-Lepc": {"value" : "lep-Lepc-IN"}, "byr": {"value" : "byr-Latn-ZZ"}, "kjy": {"value" :
    "kjy-Latn-ZZ"}, "osa": {"value" : "osa-Osge-US"}, "bys": {"value" : "bys-Latn-ZZ"}, "byv": {"value" : "byv-Latn-CM"}, "gbz": {"value" : "gbz-Arab-IR"}, "gby": {"value" : "gby-Latn-ZZ"}, "byx": {"value" : "byx-Latn-ZZ"}, "kkc": {"value" : "kkc-Latn-ZZ"}, "und-VU": {"value" : "bi-Latn-VU"}, "bza": {"value" : "bza-Latn-ZZ"}, "und-Goth": {"value" : "got-Goth-UA"}, "kkj": {"value" : "kkj-Latn-CM"}, "bze": {"value" : "bze-Latn-ML"}, "und-Avst": {"value" : "ae-Avst-IR"}, "bzf": {"value" : "bzf-Latn-ZZ"}, "yi":
    {"value" : "yi-Hebr-001"}, "bzh": {"value" : "bzh-Latn-ZZ"}, "und-WF": {"value" : "fr-Latn-WF"}, "yo": {"value" : "yo-Latn-NG"}, "gcr": {"value" : "gcr-Latn-GF"}, "ota": {"value" : "ota-Arab-ZZ"}, "und-WS": {"value" : "sm-Latn-WS"}, "bzw": {"value" : "bzw-Latn-ZZ"}, "und-UZ": {"value" : "uz-Latn-UZ"}, "und-UY": {"value" : "es-Latn-UY"}, "otk": {"value" : "otk-Orkh-MN"}, "xes": {"value" : "xes-Latn-ZZ"}, "za": {"value" : "za-Latn-CN"}, "gde": {"value" : "gde-Latn-ZZ"}, "kln": {"value" : "kln-Latn-KE"}, "und-VA":
    {"value" : "it-Latn-VA"}, "zh": {"value" : "zh-Hans-CN"}, "gdn": {"value" : "gdn-Latn-ZZ"}, "klq": {"value" : "klq-Latn-ZZ"}, "und-Saur": {"value" : "saz-Saur-IN"}, "klt": {"value" : "klt-Latn-ZZ"}, "und-VE": {"value" : "es-Latn-VE"}, "gdr": {"value" : "gdr-Latn-ZZ"}, "klx": {"value" : "klx-Latn-ZZ"}, "und-VN": {"value" : "vi-Latn-VN"}, "kk-MN": {"value" : "kk-Arab-MN"}, "zu": {"value" : "zu-Latn-ZA"}, "und-Armn": {"value" : "hy-Armn-AM"}, "kmb": {"value" : "kmb-Latn-AO"}, "und-TR": {"value" : "tr-Latn-TR"}
    , "geb": {"value" : "geb-Latn-ZZ"}, "und-TW": {"value" : "zh-Hant-TW"}, "kmh": {"value" : "kmh-Latn-ZZ"}, "und-TV": {"value" : "tvl-Latn-TV"}, "und-TZ": {"value" : "sw-Latn-TZ"}, "kmo": {"value" : "kmo-Latn-ZZ"}, "gej": {"value" : "gej-Latn-ZZ"}, "und-UA": {"value" : "uk-Cyrl-UA"}, "gel": {"value" : "gel-Latn-ZZ"}, "kms": {"value" : "kms-Latn-ZZ"}, "kmu": {"value" : "kmu-Latn-ZZ"}, "kmw": {"value" : "kmw-Latn-ZZ"}, "und-Tibt": {"value" : "bo-Tibt-CN"}, "und-UG": {"value" : "sw-Latn-UG"}, "und-Armi": {"value"
    : "arc-Armi-IR"}, "gez": {"value" : "gez-Ethi-ET"}, "und-ST": {"value" : "pt-Latn-ST"}, "knf": {"value" : "knf-Latn-GW"}, "und-SR": {"value" : "nl-Latn-SR"}, "und-SV": {"value" : "es-Latn-SV"}, "und-SY": {"value" : "ar-Arab-SY"}, "knp": {"value" : "knp-Latn-ZZ"}, "gfk": {"value" : "gfk-Latn-ZZ"}, "und-TD": {"value" : "fr-Latn-TD"}, "und-TH": {"value" : "th-Thai-TH"}, "und-TG": {"value" : "fr-Latn-TG"}, "und-TF": {"value" : "fr-Latn-TF"}, "und-TM": {"value" : "tk-Latn-TM"}, "und-TL": {"value" : "pt-Latn-TL"}
    , "und-TK": {"value" : "tkl-Latn-TK"}, "und-TJ": {"value" : "tg-Cyrl-TJ"}, "und-TO": {"value" : "to-Latn-TO"}, "und-TN": {"value" : "ar-Arab-TN"}, "und-RS": {"value" : "sr-Cyrl-RS"}, "koi": {"value" : "koi-Cyrl-RU"}, "und-RW": {"value" : "rw-Latn-RW"}, "kok": {"value" : "kok-Deva-IN"}, "und-RU": {"value" : "ru-Cyrl-RU"}, "kol": {"value" : "kol-Latn-ZZ"}, "kos": {"value" : "kos-Latn-FM"}, "ggn": {"value" : "ggn-Deva-NP"}, "und-SD": {"value" : "ar-Arab-SD"}, "und-SC": {"value" : "fr-Latn-SC"}, "und-SA": {"value"
    : "ar-Arab-SA"}, "koz": {"value" : "koz-Latn-ZZ"}, "und-SE": {"value" : "sv-Latn-SE"}, "und-SK": {"value" : "sk-Latn-SK"}, "und-SJ": {"value" : "nb-Latn-SJ"}, "und-SI": {"value" : "sl-Latn-SI"}, "taj": {"value" : "taj-Deva-NP"}, "und-SO": {"value" : "so-Latn-SO"}, "tal": {"value" : "tal-Latn-ZZ"}, "und-SN": {"value" : "fr-Latn-SN"}, "und-Osge": {"value" : "osa-Osge-US"}, "und-SM": {"value" : "it-Latn-SM"}, "kpf": {"value" : "kpf-Latn-ZZ"}, "tan": {"value" : "tan-Latn-ZZ"}, "kpe": {"value" : "kpe-Latn-LR"}
    , "und-QO": {"value" : "en-Latn-DG"}, "taq": {"value" : "taq-Latn-ZZ"}, "kpo": {"value" : "kpo-Latn-ZZ"}, "kpr": {"value" : "kpr-Latn-ZZ"}, "kpx": {"value" : "kpx-Latn-ZZ"}, "ghs": {"value" : "ghs-Latn-ZZ"}, "und-Lana": {"value" : "nod-Lana-TH"}, "tbc": {"value" : "tbc-Latn-ZZ"}, "und-RE": {"value" : "fr-Latn-RE"}, "tbd": {"value" : "tbd-Latn-ZZ"}, "tbg": {"value" : "tbg-Latn-ZZ"}, "tbf": {"value" : "tbf-Latn-ZZ"}, "und-RO": {"value" : "ro-Latn-RO"}, "kqb": {"value" : "kqb-Latn-ZZ"}, "tbo": {"value" : "tbo-Latn-ZZ"}
    , "kqf": {"value" : "kqf-Latn-ZZ"}, "und-PT": {"value" : "pt-Latn-PT"}, "und-PS": {"value" : "ar-Arab-PS"}, "und-PR": {"value" : "es-Latn-PR"}, "tbw": {"value" : "tbw-Latn-PH"}, "und-PY": {"value" : "gn-Latn-PY"}, "gim": {"value" : "gim-Latn-ZZ"}, "und-PW": {"value" : "pau-Latn-PW"}, "gil": {"value" : "gil-Latn-KI"}, "kqs": {"value" : "kqs-Latn-ZZ"}, "tbz": {"value" : "tbz-Latn-ZZ"}, "und-Laoo": {"value" : "lo-Laoo-LA"}, "can": {"value" : "can-Latn-ZZ"}, "und-QA": {"value" : "ar-Arab-QA"}, "kqy": {"value"
    : "kqy-Ethi-ZZ"}, "ms-CC": {"value" : "ms-Arab-CC"}, "tci": {"value" : "tci-Latn-ZZ"}, "krc": {"value" : "krc-Cyrl-RU"}, "krj": {"value" : "krj-Latn-PH"}, "kri": {"value" : "kri-Latn-SL"}, "ozm": {"value" : "ozm-Latn-ZZ"}, "und-OM": {"value" : "ar-Arab-OM"}, "krl": {"value" : "krl-Latn-RU"}, "gjk": {"value" : "gjk-Arab-PK"}, "cbj": {"value" : "cbj-Latn-ZZ"}, "gjn": {"value" : "gjn-Latn-ZZ"}, "tcy": {"value" : "tcy-Knda-IN"}, "xla": {"value" : "xla-Latn-ZZ"}, "krs": {"value" : "krs-Latn-ZZ"}, "xlc": {"value"
    : "xlc-Lyci-TR"}, "kru": {"value" : "kru-Deva-IN"}, "und-PA": {"value" : "es-Latn-PA"}, "xld": {"value" : "xld-Lydi-TR"}, "gju": {"value" : "gju-Arab-PK"}, "und-PE": {"value" : "es-Latn-PE"}, "tdd": {"value" : "tdd-Tale-CN"}, "tdg": {"value" : "tdg-Deva-NP"}, "tdh": {"value" : "tdh-Deva-NP"}, "und-PH": {"value" : "fil-Latn-PH"}, "und-PG": {"value" : "tpi-Latn-PG"}, "ksb": {"value" : "ksb-Latn-TZ"}, "und-PF": {"value" : "fr-Latn-PF"}, "und-PM": {"value" : "fr-Latn-PM"}, "ksd": {"value" : "ksd-Latn-ZZ"}, "und-PL":
    {"value" : "pl-Latn-PL"}, "und-PK": {"value" : "ur-Arab-PK"}, "ksf": {"value" : "ksf-Latn-CM"}};
}
function otciu_CLDRHelper_getDefaultLocale$$create() {
    return {"value" : "en_GB"};
}
function otciu_CLDRHelper_getNumberFormatMap$$create() {
    return {"root": {"value" : "#,##0.###"}, "en": {"value" : "#,##0.###"}};
}
function otciu_CLDRHelper_getDecimalDataMap$$create() {
    return {"root": {"exponentSeparator" : "E", "minusSign" : 45, "perMille" : 8240, "decimalSeparator" : 46, "listSeparator" : 59, "infinity" : "∞", "naN" : "NaN", "groupingSeparator" : 44, "percent" : 37}, "en": {"exponentSeparator" : "E", "minusSign" : 45, "perMille" : 8240, "decimalSeparator" : 46, "listSeparator" : 59, "infinity" : "∞", "naN" : "NaN", "groupingSeparator" : 44, "percent" : 37}};
}
function jnci_BufferedEncoder$Controller() {
    var a = this; jl_Object.call(a);
    a.$in = null;
    a.$out2 = null;
    a.$inPosition = 0;
    a.$outPosition = 0;
}
function jnci_BufferedEncoder$Controller_hasMoreInput($this) {
    return jn_Buffer_hasRemaining($this.$in);
}
function jnci_BufferedEncoder$Controller_hasMoreOutput($this, $sz) {
    return jn_Buffer_remaining($this.$out2) < $sz ? 0 : 1;
}
function jnci_BufferedEncoder$Controller_setInPosition($this, $inPosition) {
    $this.$inPosition = $inPosition;
}
function jnci_BufferedEncoder$Controller_setOutPosition($this, $outPosition) {
    $this.$outPosition = $outPosition;
}
function ju_Formatter$FormatWriter() {
    var a = this; jl_Object.call(a);
    a.$formatter = null;
    a.$out4 = null;
    a.$locale0 = null;
    a.$format4 = null;
    a.$args = null;
    a.$index6 = 0;
    a.$formatSpecifierStart = 0;
    a.$defaultArgumentIndex = 0;
    a.$argumentIndex = 0;
    a.$previousArgumentIndex = 0;
    a.$width1 = 0;
    a.$precision0 = 0;
    a.$flags1 = 0;
}
function ju_Formatter$FormatWriter__init_(var_0, var_1, var_2, var_3, var_4) {
    var var_5 = new ju_Formatter$FormatWriter();
    ju_Formatter$FormatWriter__init_0(var_5, var_0, var_1, var_2, var_3, var_4);
    return var_5;
}
function ju_Formatter$FormatWriter__init_0($this, $formatter, $out, $locale, $format, $args) {
    $this.$formatter = $formatter;
    $this.$out4 = $out;
    $this.$locale0 = $locale;
    $this.$format4 = $format;
    $this.$args = $args;
}
function ju_Formatter$FormatWriter_write($this) {
    var $next, $specifier, var$3;
    a: while (true) {
        $next = jl_String_indexOf($this.$format4, 37, $this.$index6);
        if ($next < 0) {
            jl_StringBuilder_append9($this.$out4, jl_String_substring0($this.$format4, $this.$index6));
            return;
        }
        jl_StringBuilder_append9($this.$out4, jl_String_substring($this.$format4, $this.$index6, $next));
        $this.$index6 = $next + 1 | 0;
        $this.$formatSpecifierStart = $this.$index6;
        $specifier = ju_Formatter$FormatWriter_parseFormatSpecifier($this);
        if ($this.$flags1 & 256)
            $this.$argumentIndex = jl_Math_max(0, $this.$previousArgumentIndex);
        if ($this.$argumentIndex == (-1)) {
            var$3 = $this.$defaultArgumentIndex;
            $this.$defaultArgumentIndex = var$3 + 1 | 0;
            $this.$argumentIndex = var$3;
        }
        b: {
            $this.$previousArgumentIndex = $this.$argumentIndex;
            switch ($specifier) {
                case 66:
                    break;
                case 67:
                    ju_Formatter$FormatWriter_formatChar($this, $specifier, 1);
                    break b;
                case 68:
                    ju_Formatter$FormatWriter_formatDecimalInt($this, $specifier, 1);
                    break b;
                case 69:
                case 70:
                case 71:
                case 73:
                case 74:
                case 75:
                case 76:
                case 77:
                case 78:
                case 80:
                case 81:
                case 82:
                case 84:
                case 85:
                case 86:
                case 87:
                case 89:
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 101:
                case 102:
                case 103:
                case 105:
                case 106:
                case 107:
                case 108:
                case 109:
                case 110:
                case 112:
                case 113:
                case 114:
                case 116:
                case 117:
                case 118:
                case 119:
                    break a;
                case 72:
                    ju_Formatter$FormatWriter_formatHex($this, $specifier, 1);
                    break b;
                case 79:
                    ju_Formatter$FormatWriter_formatRadixInt($this, $specifier, 3, 1);
                    break b;
                case 83:
                    ju_Formatter$FormatWriter_formatString($this, $specifier, 1);
                    break b;
                case 88:
                    ju_Formatter$FormatWriter_formatRadixInt($this, $specifier, 4, 1);
                    break b;
                case 98:
                    ju_Formatter$FormatWriter_formatBoolean($this, $specifier, 0);
                    break b;
                case 99:
                    ju_Formatter$FormatWriter_formatChar($this, $specifier, 0);
                    break b;
                case 100:
                    ju_Formatter$FormatWriter_formatDecimalInt($this, $specifier, 0);
                    break b;
                case 104:
                    ju_Formatter$FormatWriter_formatHex($this, $specifier, 0);
                    break b;
                case 111:
                    ju_Formatter$FormatWriter_formatRadixInt($this, $specifier, 3, 0);
                    break b;
                case 115:
                    ju_Formatter$FormatWriter_formatString($this, $specifier, 0);
                    break b;
                case 120:
                    ju_Formatter$FormatWriter_formatRadixInt($this, $specifier, 4, 0);
                    break b;
                default:
                    break a;
            }
            ju_Formatter$FormatWriter_formatBoolean($this, $specifier, 1);
        }
    }
    $rt_throw(ju_UnknownFormatConversionException__init_(jl_String_valueOf0($specifier)));
}
function ju_Formatter$FormatWriter_formatBoolean($this, $specifier, $upperCase) {
    var $arg;
    ju_Formatter$FormatWriter_verifyFlagsForGeneralFormat($this, $specifier);
    $arg = $this.$args.data[$this.$argumentIndex];
    ju_Formatter$FormatWriter_formatGivenString($this, $upperCase, jl_Boolean_toString($arg instanceof jl_Boolean ? $arg.$booleanValue() : $arg === null ? 0 : 1));
}
function ju_Formatter$FormatWriter_formatHex($this, $specifier, $upperCase) {
    var $arg;
    ju_Formatter$FormatWriter_verifyFlagsForGeneralFormat($this, $specifier);
    $arg = $this.$args.data[$this.$argumentIndex];
    ju_Formatter$FormatWriter_formatGivenString($this, $upperCase, $arg === null ? $rt_s(57) : jl_Integer_toHexString($arg.$hashCode0()));
}
function ju_Formatter$FormatWriter_formatString($this, $specifier, $upperCase) {
    var $arg, $flagsToPass;
    ju_Formatter$FormatWriter_verifyFlagsForGeneralFormat($this, $specifier);
    $arg = $this.$args.data[$this.$argumentIndex];
    if (!$rt_isInstance($arg, ju_Formattable))
        ju_Formatter$FormatWriter_formatGivenString($this, $upperCase, jl_String_valueOf($arg));
    else {
        $flagsToPass = $this.$flags1 & 7;
        if ($upperCase)
            $flagsToPass = $flagsToPass | 2;
        $arg.$formatTo($this.$formatter, $flagsToPass, $this.$width1, $this.$precision0);
    }
}
function ju_Formatter$FormatWriter_formatChar($this, $specifier, $upperCase) {
    var $arg, $c, var$5;
    ju_Formatter$FormatWriter_verifyFlags($this, $specifier, 259);
    $arg = $this.$args.data[$this.$argumentIndex];
    if ($this.$precision0 >= 0)
        $rt_throw(ju_IllegalFormatPrecisionException__init_($this.$precision0));
    if ($arg instanceof jl_Character)
        $c = $arg.$charValue();
    else if ($arg instanceof jl_Byte)
        $c = $arg.$byteValue() & 65535;
    else if ($arg instanceof jl_Short)
        $c = $arg.$shortValue() & 65535;
    else {
        if (!($arg instanceof jl_Integer)) {
            if ($arg === null) {
                ju_Formatter$FormatWriter_formatGivenString($this, $upperCase, $rt_s(57));
                return;
            }
            $rt_throw(ju_IllegalFormatConversionException__init_($specifier, jl_Object_getClass($arg)));
        }
        $c = $arg.$intValue();
        if (!($c >= 0 && $c <= 1114111 ? 1 : 0)) {
            $arg = new ju_IllegalFormatCodePointException;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(var$5, $rt_s(501));
            var$5 = jl_StringBuilder_append2(var$5, $c);
            jl_AbstractStringBuilder_append(var$5, $rt_s(502));
            jl_Throwable__init_($arg, jl_AbstractStringBuilder_toString(var$5));
            $arg.$codePoint = $c;
            $rt_throw($arg);
        }
    }
    ju_Formatter$FormatWriter_formatGivenString($this, $upperCase, jl_String__init_(jl_Character_toChars($c)));
}
function ju_Formatter$FormatWriter_formatDecimalInt($this, $specifier, $upperCase) {
    var $arg, $value, var$5, $str, $negative, $value_0, $additionalSymbols, $sb, $valueSb, $separator, var$13, var$14, var$15, var$16, var$17, var$18, var$19, $size, $i, $prev, $i_0;
    ju_Formatter$FormatWriter_verifyFlags($this, $specifier, 507);
    ju_Formatter$FormatWriter_verifyIntFlags($this);
    $arg = $this.$args.data[$this.$argumentIndex];
    if ($arg instanceof jl_Long) {
        $value = $arg.$longValue();
        var$5 = jl_Math_abs1($value);
        $arg = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($arg);
        $str = jl_AbstractStringBuilder_toString(jl_StringBuilder_append4($arg, var$5));
        $negative = Long_ge($value, Long_ZERO) ? 0 : 1;
    } else {
        if (!($arg instanceof jl_Integer) && !($arg instanceof jl_Byte) && !($arg instanceof jl_Short))
            $rt_throw(ju_IllegalFormatConversionException__init_($specifier, $arg === null ? null : jl_Object_getClass($arg)));
        $value_0 = jl_Float_intValue($arg);
        $str = jl_Integer_toString(jl_Math_abs0($value_0));
        $negative = $value_0 >= 0 ? 0 : 1;
    }
    $additionalSymbols = 0;
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    if ($negative) {
        if (!($this.$flags1 & 128)) {
            jl_AbstractStringBuilder_append1($sb, 45);
            $additionalSymbols = 1;
        } else {
            jl_AbstractStringBuilder_append1($sb, 40);
            $additionalSymbols = 2;
        }
    } else if ($this.$flags1 & 8) {
        jl_StringBuilder_append5($sb, 43);
        $additionalSymbols = 1;
    } else if ($this.$flags1 & 16) {
        jl_StringBuilder_append5($sb, 32);
        $additionalSymbols = 1;
    }
    $valueSb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($valueSb);
    if (!($this.$flags1 & 64))
        jl_AbstractStringBuilder_append($valueSb, $str);
    else {
        $separator = jt_DecimalFormatSymbols__init_($this.$locale0).$groupingSeparator;
        var$13 = $this.$locale0;
        var$14 = var$13.$languageCode;
        var$15 = var$13.$countryCode;
        if (otciu_CLDRHelper_$$metadata$$17 === null)
            otciu_CLDRHelper_$$metadata$$17 = otciu_CLDRHelper_getNumberFormatMap$$create();
        $arg = otciu_CLDRHelper_$$metadata$$17;
        var$15 = otciu_CLDRHelper_getCode(var$14, var$15);
        $arg = $arg.hasOwnProperty($rt_ustr(var$15)) ? $arg[$rt_ustr(var$15)] : $arg.hasOwnProperty($rt_ustr(var$14)) ? $arg[$rt_ustr(var$14)] : $arg.root;
        var$16 = ($arg.value !== null ? $rt_str($arg.value) : null);
        var$17 = new jt_DecimalFormat;
        var$18 = jt_DecimalFormatSymbols__init_(var$13);
        var$17.$groupingUsed = 1;
        var$17.$maximumIntegerDigits = 40;
        var$17.$minimumIntegerDigits = 1;
        var$17.$maximumFractionDigits = 3;
        var$17.$roundingMode = jm_RoundingMode_HALF_EVEN;
        $arg = ju_Locale_defaultLocale;
        if ($arg === null)
            $rt_throw(jl_NullPointerException__init_());
        var$15 = $arg.$languageCode;
        $arg = $arg.$countryCode;
        if (jl_String_isEmpty($arg)) {
            if (otciu_CLDRHelper_$$metadata$$0 === null)
                otciu_CLDRHelper_$$metadata$$0 = otciu_CLDRHelper_getLikelySubtagsMap$$create();
            $arg = otciu_CLDRHelper_$$metadata$$0;
            if ($arg.hasOwnProperty($rt_ustr(var$15)))
                var$15 = ($arg[$rt_ustr(var$15)].value !== null ? $rt_str($arg[$rt_ustr(var$15)].value) : null);
            $specifier = jl_String_lastIndexOf0(var$15, 95);
            $arg = $specifier <= 0 ? $rt_s(44) : jl_String_substring0(var$15, $specifier + 1 | 0);
        }
        var$15 = otcic_CurrencyHelper_getCountryToCurrencyMap();
        var$17.$currency = !var$15.hasOwnProperty($rt_ustr($arg)) ? null : ju_Currency_getInstance((var$15[$rt_ustr($arg)].value !== null ? $rt_str(var$15[$rt_ustr($arg)].value) : null));
        var$17.$positivePrefix = $rt_createArray(jt_DecimalFormat$FormatField, 0);
        var$19 = $rt_createArray(jt_DecimalFormat$FormatField, 1);
        var$19.data[0] = jt_DecimalFormat$TextField__init_($rt_s(126));
        var$17.$negativePrefix = var$19;
        var$17.$positiveSuffix = $rt_createArray(jt_DecimalFormat$FormatField, 0);
        var$17.$negativeSuffix = $rt_createArray(jt_DecimalFormat$FormatField, 0);
        var$17.$multiplier = 1;
        var$17.$symbols = jt_DecimalFormatSymbols_clone(var$18);
        jt_DecimalFormat_applyPattern(var$17, var$16);
        $size = jt_DecimalFormat_getGroupingSize(var$17);
        $i = jl_String_length($str) % $size | 0;
        if (!$i)
            $i = $size;
        $prev = 0;
        while ($i < jl_String_length($str)) {
            jl_StringBuilder_append1($valueSb, jl_String_substring($str, $prev, $i));
            jl_StringBuilder_append5($valueSb, $separator);
            $i_0 = $i + $size | 0;
            $prev = $i;
            $i = $i_0;
        }
        jl_StringBuilder_append1($valueSb, jl_String_substring0($str, $prev));
    }
    a: {
        if ($this.$flags1 & 32) {
            $i = jl_StringBuilder_length($valueSb) + $additionalSymbols | 0;
            while (true) {
                if ($i >= $this.$width1)
                    break a;
                jl_StringBuilder_append5($sb, jl_Character_forDigit(0, 10));
                $i = $i + 1 | 0;
            }
        }
    }
    jl_StringBuilder_append9($sb, $valueSb);
    if ($negative && $this.$flags1 & 128)
        jl_StringBuilder_append5($sb, 41);
    ju_Formatter$FormatWriter_formatGivenString($this, $upperCase, jl_StringBuilder_toString($sb));
}
function ju_Formatter$FormatWriter_formatRadixInt($this, $specifier, $radixLog2, $upperCase) {
    var $arg, var$5, $str, $i, var$8, var$9, var$10, var$11, var$12, var$13, $sb, $prefix;
    ju_Formatter$FormatWriter_verifyFlags($this, $specifier, 423);
    ju_Formatter$FormatWriter_verifyIntFlags($this);
    $arg = $this.$args.data[$this.$argumentIndex];
    if ($arg instanceof jl_Long) {
        var$5 = $arg.$longValue();
        if (Long_eq(var$5, Long_ZERO))
            $str = $rt_s(67);
        else {
            $specifier = 1 << $radixLog2;
            $i = $specifier - 1 | 0;
            var$8 = (((64 - jl_Long_numberOfLeadingZeros(var$5) | 0) + $radixLog2 | 0) - 1 | 0) / $radixLog2 | 0;
            var$9 = $rt_createCharArray(var$8);
            var$10 = var$9.data;
            var$11 = Long_fromInt($rt_imul(var$8 - 1 | 0, $radixLog2));
            var$12 = 0;
            var$13 = Long_fromInt($radixLog2);
            while (Long_ge(var$11, Long_ZERO)) {
                var$8 = var$12 + 1 | 0;
                var$10[var$12] = jl_Character_forDigit(Long_shru(var$5, var$11.lo).lo & $i, $specifier);
                var$11 = Long_sub(var$11, var$13);
                var$12 = var$8;
            }
            $str = jl_String__init_(var$9);
        }
    } else if ($arg instanceof jl_Integer)
        $str = otci_IntegerUtil_toUnsignedLogRadixString($arg.$intValue(), $radixLog2);
    else if ($arg instanceof jl_Short)
        $str = otci_IntegerUtil_toUnsignedLogRadixString($arg.$shortValue() & 65535, $radixLog2);
    else {
        if (!($arg instanceof jl_Byte))
            $rt_throw(ju_IllegalFormatConversionException__init_($specifier, $arg === null ? null : jl_Object_getClass($arg)));
        $str = otci_IntegerUtil_toUnsignedLogRadixString($arg.$byteValue() & 255, $radixLog2);
    }
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    if ($this.$flags1 & 4) {
        $prefix = $radixLog2 != 4 ? $rt_s(67) : $rt_s(503);
        $arg = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_($arg);
        jl_AbstractStringBuilder_append($arg, $prefix);
        jl_AbstractStringBuilder_append($arg, $str);
        $str = jl_AbstractStringBuilder_toString($arg);
    }
    a: {
        if ($this.$flags1 & 32) {
            $i = jl_String_length($str);
            while (true) {
                if ($i >= $this.$width1)
                    break a;
                jl_AbstractStringBuilder_append1($sb, jl_Character_forDigit(0, 10));
                $i = $i + 1 | 0;
            }
        }
    }
    jl_AbstractStringBuilder_append($sb, $str);
    ju_Formatter$FormatWriter_formatGivenString($this, $upperCase, jl_AbstractStringBuilder_toString($sb));
}
function ju_Formatter$FormatWriter_verifyIntFlags($this) {
    var var$1, var$2, var$3;
    if ($this.$flags1 & 8 && $this.$flags1 & 16)
        $rt_throw(ju_IllegalFormatFlagsException__init_($rt_s(504)));
    if ($this.$flags1 & 32 && $this.$flags1 & 1)
        $rt_throw(ju_IllegalFormatFlagsException__init_($rt_s(505)));
    if ($this.$precision0 >= 0)
        $rt_throw(ju_IllegalFormatPrecisionException__init_($this.$precision0));
    if ($this.$flags1 & 1 && $this.$width1 < 0) {
        var$1 = new ju_MissingFormatWidthException;
        var$2 = jl_String_substring($this.$format4, $this.$formatSpecifierStart, $this.$index6);
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $rt_s(506));
        jl_AbstractStringBuilder_append(var$3, var$2);
        jl_Throwable__init_(var$1, jl_AbstractStringBuilder_toString(var$3));
        var$1.$formatSpecifier = var$2;
        $rt_throw(var$1);
    }
}
function ju_Formatter$FormatWriter_formatGivenString($this, $upperCase, $str) {
    if ($this.$precision0 > 0)
        $str = jl_String_substring($str, 0, $this.$precision0);
    if ($upperCase)
        $str = jl_String_toUpperCase($str);
    if (!($this.$flags1 & 1)) {
        ju_Formatter$FormatWriter_mayBeAppendSpaces($this, $str);
        jl_StringBuilder_append9($this.$out4, $str);
    } else {
        jl_StringBuilder_append9($this.$out4, $str);
        ju_Formatter$FormatWriter_mayBeAppendSpaces($this, $str);
    }
}
function ju_Formatter$FormatWriter_verifyFlagsForGeneralFormat($this, $conversion) {
    ju_Formatter$FormatWriter_verifyFlags($this, $conversion, 263);
}
function ju_Formatter$FormatWriter_verifyFlags($this, $conversion, $mask) {
    var var$3, var$4, var$5;
    if (($this.$flags1 | $mask) == $mask)
        return;
    var$3 = new ju_FormatFlagsConversionMismatchException;
    var$4 = jl_String_valueOf0(jl_String_charAt($rt_s(507), jl_Integer_numberOfTrailingZeros($this.$flags1 & ($mask ^ (-1)))));
    var$5 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$5);
    jl_AbstractStringBuilder_append(var$5, $rt_s(508));
    jl_AbstractStringBuilder_append(var$5, var$4);
    jl_AbstractStringBuilder_append(var$5, $rt_s(509));
    jl_AbstractStringBuilder_append1(var$5, $conversion);
    jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$5));
    var$3.$flags2 = var$4;
    var$3.$conversion = $conversion;
    $rt_throw(var$3);
}
function ju_Formatter$FormatWriter_mayBeAppendSpaces($this, $str) {
    var $diff, $sb, $i;
    if ($this.$width1 > jl_String_length($str)) {
        $diff = $this.$width1 - jl_String_length($str) | 0;
        $sb = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_2($sb, $diff);
        $i = 0;
        while ($i < $diff) {
            jl_AbstractStringBuilder_append1($sb, 32);
            $i = $i + 1 | 0;
        }
        jl_StringBuilder_append9($this.$out4, $sb);
    }
}
function ju_Formatter$FormatWriter_parseFormatSpecifier($this) {
    var $c, $n, var$3, var$4, var$5;
    $this.$flags1 = 0;
    $this.$argumentIndex = (-1);
    $this.$width1 = (-1);
    $this.$precision0 = (-1);
    $c = jl_String_charAt($this.$format4, $this.$index6);
    if ($c != 48 && ju_Formatter$FormatWriter_isDigit($c)) {
        $n = ju_Formatter$FormatWriter_readInt($this);
        if ($this.$index6 < jl_String_length($this.$format4) && jl_String_charAt($this.$format4, $this.$index6) == 36) {
            $this.$index6 = $this.$index6 + 1 | 0;
            $this.$argumentIndex = $n - 1 | 0;
        } else
            $this.$width1 = $n;
    }
    a: {
        b: {
            while (true) {
                if ($this.$index6 >= jl_String_length($this.$format4))
                    break a;
                c: {
                    $c = jl_String_charAt($this.$format4, $this.$index6);
                    switch ($c) {
                        case 32:
                            break;
                        case 33:
                        case 34:
                        case 36:
                        case 37:
                        case 38:
                        case 39:
                        case 41:
                        case 42:
                        case 46:
                        case 47:
                        case 49:
                        case 50:
                        case 51:
                        case 52:
                        case 53:
                        case 54:
                        case 55:
                        case 56:
                        case 57:
                        case 58:
                        case 59:
                            break b;
                        case 35:
                            $n = 4;
                            break c;
                        case 40:
                            $n = 128;
                            break c;
                        case 43:
                            $n = 8;
                            break c;
                        case 44:
                            $n = 64;
                            break c;
                        case 45:
                            $n = 1;
                            break c;
                        case 48:
                            $n = 32;
                            break c;
                        case 60:
                            $n = 256;
                            break c;
                        default:
                            break b;
                    }
                    $n = 16;
                }
                if ($this.$flags1 & $n)
                    break;
                $this.$flags1 = $this.$flags1 | $n;
                $this.$index6 = $this.$index6 + 1 | 0;
            }
            var$3 = new ju_DuplicateFormatFlagsException;
            var$4 = jl_String_valueOf0($c);
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(var$5, $rt_s(510));
            jl_AbstractStringBuilder_append(var$5, var$4);
            jl_Throwable__init_(var$3, jl_AbstractStringBuilder_toString(var$5));
            var$3.$flags3 = var$4;
            $rt_throw(var$3);
        }
    }
    if ($this.$width1 < 0 && $this.$index6 < jl_String_length($this.$format4) && ju_Formatter$FormatWriter_isDigit(jl_String_charAt($this.$format4, $this.$index6)))
        $this.$width1 = ju_Formatter$FormatWriter_readInt($this);
    if ($this.$index6 < jl_String_length($this.$format4) && jl_String_charAt($this.$format4, $this.$index6) == 46) {
        $this.$index6 = $this.$index6 + 1 | 0;
        if ($this.$index6 < jl_String_length($this.$format4) && ju_Formatter$FormatWriter_isDigit(jl_String_charAt($this.$format4, $this.$index6)))
            $this.$precision0 = ju_Formatter$FormatWriter_readInt($this);
        else
            $rt_throw(ju_UnknownFormatConversionException__init_(jl_String_valueOf0(jl_String_charAt($this.$format4, $this.$index6 - 1 | 0))));
    }
    if ($this.$index6 < jl_String_length($this.$format4)) {
        var$3 = $this.$format4;
        $n = $this.$index6;
        $this.$index6 = $n + 1 | 0;
        return jl_String_charAt(var$3, $n);
    }
    $rt_throw(ju_UnknownFormatConversionException__init_(jl_String_valueOf0(jl_String_charAt($this.$format4, jl_String_length($this.$format4) - 1 | 0))));
}
function ju_Formatter$FormatWriter_readInt($this) {
    var $result, var$2, var$3, var$4;
    $result = 0;
    while ($this.$index6 < jl_String_length($this.$format4) && ju_Formatter$FormatWriter_isDigit(jl_String_charAt($this.$format4, $this.$index6))) {
        var$2 = $result * 10 | 0;
        var$3 = $this.$format4;
        var$4 = $this.$index6;
        $this.$index6 = var$4 + 1 | 0;
        $result = var$2 + (jl_String_charAt(var$3, var$4) - 48 | 0) | 0;
    }
    return $result;
}
function ju_Formatter$FormatWriter_isDigit($c) {
    return $c >= 48 && $c <= 57 ? 1 : 0;
}
function oljis_STRtree$STRtreeNode() {
    oljis_AbstractNode.call(this);
}
function oljis_STRtree$STRtreeNode_computeBounds($this) {
    var $bounds, $i, $childBoundable;
    $bounds = null;
    $i = ju_AbstractList_iterator($this.$childBoundables);
    while (ju_AbstractList$1_hasNext($i)) {
        $childBoundable = ju_AbstractList$1_next($i);
        if ($bounds !== null)
            oljg_Envelope_expandToInclude($bounds, $childBoundable.$getBounds0());
        else {
            $bounds = new oljg_Envelope;
            oljg_Envelope_init0($bounds, $childBoundable.$getBounds0());
        }
    }
    return $bounds;
}
function jl_ArrayIndexOutOfBoundsException() {
    jl_IndexOutOfBoundsException.call(this);
}
function tt_Utils$2() {
    jl_Object.call(this);
}
function tt_Utils$2_compare($this, $arg0, $arg1) {
    return $rt_compare(cjag_Point2D$Float_getX($arg0), cjag_Point2D$Float_getX($arg1));
}
function tt_Utils$2_compare0($this, var$1, var$2) {
    return tt_Utils$2_compare($this, var$1, var$2);
}
function tt_Utils$3() {
    jl_Object.call(this);
}
function tt_Utils$3_compare($this, $arg0, $arg1) {
    return $rt_compare(cjag_Point2D$Float_getY($arg0), cjag_Point2D$Float_getY($arg1));
}
function tt_Utils$3_compare0($this, var$1, var$2) {
    return tt_Utils$3_compare($this, var$1, var$2);
}
function ju_FormatterClosedException() {
    jl_IllegalStateException.call(this);
}
function jn_ReadOnlyBufferException() {
    jl_UnsupportedOperationException.call(this);
}
function jn_BufferOverflowException() {
    jl_RuntimeException.call(this);
}
function jn_BufferUnderflowException() {
    jl_RuntimeException.call(this);
}
function ju_HashMap$HashMapEntrySet() {
    ju_AbstractSet.call(this);
    this.$associatedMap = null;
}
function ju_HashMap$HashMapEntrySet_iterator($this) {
    var var$1;
    var$1 = new ju_HashMap$EntryIterator;
    ju_HashMap$AbstractMapIterator__init_(var$1, $this.$associatedMap);
    return var$1;
}
function ju_IllegalFormatException() {
    jl_IllegalArgumentException.call(this);
}
function ju_UnknownFormatConversionException() {
    ju_IllegalFormatException.call(this);
    this.$conversion0 = null;
}
function ju_UnknownFormatConversionException__init_(var_0) {
    var var_1 = new ju_UnknownFormatConversionException();
    ju_UnknownFormatConversionException__init_0(var_1, var_0);
    return var_1;
}
function ju_UnknownFormatConversionException__init_0($this, $conversion) {
    var var$2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(511));
    jl_AbstractStringBuilder_append(var$2, $conversion);
    jl_Throwable__init_($this, jl_AbstractStringBuilder_toString(var$2));
    $this.$conversion0 = $conversion;
}
function ju_DuplicateFormatFlagsException() {
    ju_IllegalFormatException.call(this);
    this.$flags3 = null;
}
function ju_IllegalFormatPrecisionException() {
    ju_IllegalFormatException.call(this);
    this.$precision1 = 0;
}
function ju_IllegalFormatPrecisionException__init_(var_0) {
    var var_1 = new ju_IllegalFormatPrecisionException();
    ju_IllegalFormatPrecisionException__init_0(var_1, var_0);
    return var_1;
}
function ju_IllegalFormatPrecisionException__init_0($this, $precision) {
    var var$2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(512));
    jl_Throwable__init_($this, jl_AbstractStringBuilder_toString(jl_StringBuilder_append2(var$2, $precision)));
    $this.$precision1 = $precision;
}
function jl_Short() {
    jl_Number.call(this);
}
var jl_Short_TYPE = null;
function jl_Short__clinit_() {
    jl_Short_TYPE = $rt_cls($rt_shortcls());
}
function ju_IllegalFormatCodePointException() {
    ju_IllegalFormatException.call(this);
    this.$codePoint = 0;
}
function ju_IllegalFormatConversionException() {
    var a = this; ju_IllegalFormatException.call(a);
    a.$conversion1 = 0;
    a.$argumentClass = null;
}
function ju_IllegalFormatConversionException__init_(var_0, var_1) {
    var var_2 = new ju_IllegalFormatConversionException();
    ju_IllegalFormatConversionException__init_0(var_2, var_0, var_1);
    return var_2;
}
function ju_IllegalFormatConversionException__init_0($this, $conversion, $argumentClass) {
    var var$3;
    var$3 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$3);
    jl_AbstractStringBuilder_append(var$3, $rt_s(513));
    var$3 = jl_StringBuilder_append3(var$3, $argumentClass);
    jl_AbstractStringBuilder_append(var$3, $rt_s(514));
    jl_AbstractStringBuilder_append1(var$3, $conversion);
    jl_AbstractStringBuilder_append(var$3, $rt_s(515));
    jl_Throwable__init_($this, jl_AbstractStringBuilder_toString(var$3));
    $this.$conversion1 = $conversion;
    $this.$argumentClass = $argumentClass;
}
function jt_DecimalFormatSymbols() {
    var a = this; jl_Object.call(a);
    a.$locale1 = null;
    a.$zeroDigit = 0;
    a.$groupingSeparator = 0;
    a.$decimalSeparator = 0;
    a.$perMill = 0;
    a.$percent = 0;
    a.$digit0 = 0;
    a.$patternSeparator = 0;
    a.$nan = null;
    a.$infinity = null;
    a.$minusSign = 0;
    a.$monetaryDecimalSeparator = 0;
    a.$exponentSeparator = null;
}
function jt_DecimalFormatSymbols__init_(var_0) {
    var var_1 = new jt_DecimalFormatSymbols();
    jt_DecimalFormatSymbols__init_0(var_1, var_0);
    return var_1;
}
function jt_DecimalFormatSymbols__init_0($this, $locale) {
    var var$2, var$3, var$4;
    $this.$locale1 = $locale;
    var$2 = $this.$locale1.$languageCode;
    var$3 = $this.$locale1.$countryCode;
    if (otciu_CLDRHelper_$$metadata$$20 === null)
        otciu_CLDRHelper_$$metadata$$20 = otciu_CLDRHelper_getDecimalDataMap$$create();
    var$4 = otciu_CLDRHelper_$$metadata$$20;
    $locale = otciu_CLDRHelper_getCode(var$2, var$3);
    var$4 = var$4.hasOwnProperty($rt_ustr($locale)) ? var$4[$rt_ustr($locale)] : var$4.hasOwnProperty($rt_ustr(var$2)) ? var$4[$rt_ustr(var$2)] : var$4.root;
    $this.$zeroDigit = 48;
    $this.$groupingSeparator = var$4.groupingSeparator & 65535;
    $this.$decimalSeparator = var$4.decimalSeparator & 65535;
    $this.$perMill = var$4.perMille & 65535;
    $this.$percent = var$4.percent & 65535;
    $this.$digit0 = 35;
    $this.$patternSeparator = 59;
    $this.$nan = (var$4.naN !== null ? $rt_str(var$4.naN) : null);
    $this.$infinity = (var$4.infinity !== null ? $rt_str(var$4.infinity) : null);
    $this.$minusSign = var$4.minusSign & 65535;
    $this.$monetaryDecimalSeparator = var$4.decimalSeparator & 65535;
    $this.$exponentSeparator = (var$4.exponentSeparator !== null ? $rt_str(var$4.exponentSeparator) : null);
}
function jt_DecimalFormatSymbols_getGroupingSeparator($this) {
    return $this.$groupingSeparator;
}
function jt_DecimalFormatSymbols_clone($this) {
    var var$1, $e, var$3, $$je;
    a: {
        try {
            var$1 = jl_Object_clone($this);
        } catch ($$e) {
            $$je = $rt_wrapException($$e);
            if ($$je instanceof jl_CloneNotSupportedException) {
                $e = $$je;
                break a;
            } else {
                throw $$e;
            }
        }
        return var$1;
    }
    var$3 = new jl_AssertionError;
    var$3.$suppressionEnabled = 1;
    var$3.$writableStackTrace = 1;
    var$3.$message = $rt_s(516);
    var$3.$cause = $e;
    $rt_throw(var$3);
}
function jt_Format() {
    jl_Object.call(this);
}
function jt_NumberFormat() {
    var a = this; jt_Format.call(a);
    a.$groupingUsed = 0;
    a.$maximumIntegerDigits = 0;
    a.$minimumIntegerDigits = 0;
    a.$maximumFractionDigits = 0;
    a.$minimumFractionDigits = 0;
    a.$roundingMode = null;
    a.$currency = null;
}
function jt_NumberFormat_setGroupingUsed($this, $value) {
    $this.$groupingUsed = $value;
}
function jt_NumberFormat_setMaximumFractionDigits($this, $value) {
    if ($value < 0)
        $value = 0;
    $this.$maximumFractionDigits = $value;
    if ($this.$maximumFractionDigits < $this.$minimumFractionDigits)
        $this.$minimumFractionDigits = $this.$maximumFractionDigits;
}
function jt_NumberFormat_setMaximumIntegerDigits($this, $value) {
    if ($value < 0)
        $value = 0;
    $this.$maximumIntegerDigits = $value;
    if ($this.$maximumIntegerDigits < $this.$minimumIntegerDigits)
        $this.$minimumIntegerDigits = $this.$maximumIntegerDigits;
}
function jt_NumberFormat_setMinimumFractionDigits($this, $value) {
    if ($value < 0)
        $value = 0;
    $this.$minimumFractionDigits = $value;
    if ($this.$maximumFractionDigits < $this.$minimumFractionDigits)
        $this.$maximumFractionDigits = $this.$minimumFractionDigits;
}
function jt_NumberFormat_setMinimumIntegerDigits($this, $value) {
    if ($value < 0)
        $value = 0;
    $this.$minimumIntegerDigits = $value;
    if ($this.$maximumIntegerDigits < $this.$minimumIntegerDigits)
        $this.$maximumIntegerDigits = $this.$minimumIntegerDigits;
}
function ju_Formattable() {
}
function ju_FormatFlagsConversionMismatchException() {
    var a = this; ju_IllegalFormatException.call(a);
    a.$flags2 = null;
    a.$conversion = 0;
}
function ju_IllegalFormatFlagsException() {
    ju_IllegalFormatException.call(this);
    this.$flags4 = null;
}
function ju_IllegalFormatFlagsException__init_(var_0) {
    var var_1 = new ju_IllegalFormatFlagsException();
    ju_IllegalFormatFlagsException__init_0(var_1, var_0);
    return var_1;
}
function ju_IllegalFormatFlagsException__init_0($this, $flags) {
    var var$2;
    var$2 = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_(var$2);
    jl_AbstractStringBuilder_append(var$2, $rt_s(517));
    jl_AbstractStringBuilder_append(var$2, $flags);
    jl_Throwable__init_($this, jl_AbstractStringBuilder_toString(var$2));
    $this.$flags4 = $flags;
}
function ju_MissingFormatWidthException() {
    ju_IllegalFormatException.call(this);
    this.$formatSpecifier = null;
}
function jt_DecimalFormat() {
    var a = this; jt_NumberFormat.call(a);
    a.$symbols = null;
    a.$positivePrefix = null;
    a.$negativePrefix = null;
    a.$positiveSuffix = null;
    a.$negativeSuffix = null;
    a.$multiplier = 0;
    a.$groupingSize = 0;
    a.$decimalSeparatorAlwaysShown = 0;
    a.$exponentDigits = 0;
    a.$pattern2 = null;
}
var jt_DecimalFormat_POW10_ARRAY = null;
var jt_DecimalFormat_POW10_INT_ARRAY = null;
var jt_DecimalFormat_POW10_FRAC_ARRAY = null;
var jt_DecimalFormat_POWM10_FRAC_ARRAY = null;
function jt_DecimalFormat_applyPattern($this, $pattern) {
    var $parser;
    $parser = new jt_DecimalFormatParser;
    jt_DecimalFormatParser_parse($parser, $pattern);
    jt_DecimalFormatParser_apply($parser, $this);
    $this.$pattern2 = $pattern;
}
function jt_DecimalFormat_setMultiplier($this, $newValue) {
    $this.$multiplier = $newValue;
}
function jt_DecimalFormat_getGroupingSize($this) {
    return $this.$groupingSize;
}
function jt_DecimalFormat_setGroupingSize($this, $newValue) {
    $this.$groupingSize = $newValue;
}
function jt_DecimalFormat_setDecimalSeparatorAlwaysShown($this, $newValue) {
    $this.$decimalSeparatorAlwaysShown = $newValue;
}
function jt_DecimalFormat__clinit_() {
    var var$1, var$2;
    var$1 = $rt_createLongArray(19);
    var$2 = var$1.data;
    var$2[0] = Long_fromInt(1);
    var$2[1] = Long_fromInt(10);
    var$2[2] = Long_fromInt(100);
    var$2[3] = Long_fromInt(1000);
    var$2[4] = Long_fromInt(10000);
    var$2[5] = Long_fromInt(100000);
    var$2[6] = Long_fromInt(1000000);
    var$2[7] = Long_fromInt(10000000);
    var$2[8] = Long_fromInt(100000000);
    var$2[9] = Long_fromInt(1000000000);
    var$2[10] = new Long(1410065408, 2);
    var$2[11] = new Long(1215752192, 23);
    var$2[12] = new Long(3567587328, 232);
    var$2[13] = new Long(1316134912, 2328);
    var$2[14] = new Long(276447232, 23283);
    var$2[15] = new Long(2764472320, 232830);
    var$2[16] = new Long(1874919424, 2328306);
    var$2[17] = new Long(1569325056, 23283064);
    var$2[18] = new Long(2808348672, 232830643);
    jt_DecimalFormat_POW10_ARRAY = var$1;
    var$1 = $rt_createIntArray(10);
    var$2 = var$1.data;
    var$2[0] = 1;
    var$2[1] = 10;
    var$2[2] = 100;
    var$2[3] = 1000;
    var$2[4] = 10000;
    var$2[5] = 100000;
    var$2[6] = 1000000;
    var$2[7] = 10000000;
    var$2[8] = 100000000;
    var$2[9] = 1000000000;
    jt_DecimalFormat_POW10_INT_ARRAY = var$1;
    var$1 = $rt_createDoubleArray(9);
    var$2 = var$1.data;
    var$2[0] = 10.0;
    var$2[1] = 100.0;
    var$2[2] = 10000.0;
    var$2[3] = 1.0E8;
    var$2[4] = 1.0E16;
    var$2[5] = 1.0E32;
    var$2[6] = 1.0E64;
    var$2[7] = 1.0E128;
    var$2[8] = 1.0E256;
    jt_DecimalFormat_POW10_FRAC_ARRAY = var$1;
    var$1 = $rt_createDoubleArray(9);
    var$2 = var$1.data;
    var$2[0] = 0.1;
    var$2[1] = 0.01;
    var$2[2] = 1.0E-4;
    var$2[3] = 1.0E-8;
    var$2[4] = 1.0E-16;
    var$2[5] = 1.0E-32;
    var$2[6] = 1.0E-64;
    var$2[7] = 1.0E-128;
    var$2[8] = 1.0E-256;
    jt_DecimalFormat_POWM10_FRAC_ARRAY = var$1;
}
function jt_DecimalFormat$FormatField() {
}
function jt_DecimalFormat$TextField() {
    jl_Object.call(this);
    this.$text0 = null;
}
function jt_DecimalFormat$TextField__init_(var_0) {
    var var_1 = new jt_DecimalFormat$TextField();
    jt_DecimalFormat$TextField__init_0(var_1, var_0);
    return var_1;
}
function jt_DecimalFormat$TextField__init_0($this, $text) {
    $this.$text0 = $text;
}
function jt_DecimalFormat$TextField_equals($this, $obj) {
    var $other;
    if ($this === $obj)
        return 1;
    if (!($obj instanceof jt_DecimalFormat$TextField))
        return 0;
    $other = $obj;
    return jl_String_equals($this.$text0, $other.$text0);
}
function jt_DecimalFormat$TextField_hashCode($this) {
    return jl_String_hashCode($this.$text0);
}
function ju_Currency() {
    jl_Object.call(this);
    this.$resource = null;
}
var ju_Currency_currencies = null;
function ju_Currency_getInstance($currencyCode) {
    var var$2, var$3, var$4, var$5, var$6, $currency;
    if ($currencyCode === null) {
        $currencyCode = new jl_NullPointerException;
        jl_Throwable__init_0($currencyCode);
        $rt_throw($currencyCode);
    }
    if (ju_Currency_currencies === null) {
        ju_Currency_currencies = ju_HashMap__init_();
        if (otcic_CurrencyHelper_$$metadata$$0 === null)
            otcic_CurrencyHelper_$$metadata$$0 = otcic_CurrencyHelper_getCurrencies$$create();
        var$2 = otcic_CurrencyHelper_$$metadata$$0;
        var$3 = 0;
        while (var$3 < var$2.length) {
            var$4 = var$2[var$3];
            var$5 = ju_Currency_currencies;
            var$6 = (var$4.code !== null ? $rt_str(var$4.code) : null);
            $currency = new ju_Currency;
            $currency.$resource = var$4;
            ju_HashMap_putImpl(var$5, var$6, $currency);
            var$3 = var$3 + 1 | 0;
        }
    }
    $currency = ju_HashMap_get(ju_Currency_currencies, $currencyCode);
    if ($currency !== null)
        return $currency;
    var$4 = new jl_IllegalArgumentException;
    $currency = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($currency);
    jl_AbstractStringBuilder_append($currency, $rt_s(518));
    jl_AbstractStringBuilder_append($currency, $currencyCode);
    jl_Throwable__init_(var$4, jl_AbstractStringBuilder_toString($currency));
    $rt_throw(var$4);
}
function otcic_CurrencyHelper() {
    jl_Object.call(this);
}
var otcic_CurrencyHelper_$$metadata$$0 = null;
var otcic_CurrencyHelper_$$metadata$$1 = null;
function otcic_CurrencyHelper_getCountryToCurrencyMap() {
    if (otcic_CurrencyHelper_$$metadata$$1 === null)
        otcic_CurrencyHelper_$$metadata$$1 = otcic_CurrencyHelper_getCountryToCurrencyMap$$create();
    return otcic_CurrencyHelper_$$metadata$$1;
}
function otcic_CurrencyHelper_getCurrencies$$create() {
    return [{"code" : "AFN", "fractionDigits" : 2, "numericCode" : 971}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "ALL", "fractionDigits" : 2, "numericCode" : 8}, {"code" : "DZD", "fractionDigits" : 2, "numericCode" : 12}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "AOA", "fractionDigits" : 2, "numericCode" : 973}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : null,
    "fractionDigits" : 0, "numericCode" : 0}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "ARS", "fractionDigits" : 2, "numericCode" : 32}, {"code" : "AMD", "fractionDigits" : 2, "numericCode" : 51}, {"code" : "AWG", "fractionDigits" : 2, "numericCode" : 533}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "AZN", "fractionDigits" : 2, "numericCode" : 944}, {"code" : "BSD", "fractionDigits" : 2, "numericCode"
    : 44}, {"code" : "BHD", "fractionDigits" : 3, "numericCode" : 48}, {"code" : "BDT", "fractionDigits" : 2, "numericCode" : 50}, {"code" : "BBD", "fractionDigits" : 2, "numericCode" : 52}, {"code" : "BYR", "fractionDigits" : 0, "numericCode" : 974}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "BZD", "fractionDigits" : 2, "numericCode" : 84}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "BMD", "fractionDigits" : 2, "numericCode" : 60}, {"code" : "BTN", "fractionDigits"
    : 2, "numericCode" : 64}, {"code" : "INR", "fractionDigits" : 2, "numericCode" : 356}, {"code" : "BOB", "fractionDigits" : 2, "numericCode" : 68}, {"code" : "BOV", "fractionDigits" : 2, "numericCode" : 984}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "BAM", "fractionDigits" : 2, "numericCode" : 977}, {"code" : "BWP", "fractionDigits" : 2, "numericCode" : 72}, {"code" : "NOK", "fractionDigits" : 2, "numericCode" : 578}, {"code" : "BRL", "fractionDigits" : 2, "numericCode" : 986}
    , {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "BND", "fractionDigits" : 2, "numericCode" : 96}, {"code" : "BGN", "fractionDigits" : 2, "numericCode" : 975}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "BIF", "fractionDigits" : 0, "numericCode" : 108}, {"code" : "KHR", "fractionDigits" : 2, "numericCode" : 116}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "CAD", "fractionDigits" : 2, "numericCode" : 124}, {"code" : "CVE", "fractionDigits"
    : 2, "numericCode" : 132}, {"code" : "KYD", "fractionDigits" : 2, "numericCode" : 136}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "CLF", "fractionDigits" : 4, "numericCode" : 990}, {"code" : "CLP", "fractionDigits" : 0, "numericCode" : 152}, {"code" : "CNY", "fractionDigits" : 2, "numericCode" : 156}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}
    , {"code" : "COP", "fractionDigits" : 2, "numericCode" : 170}, {"code" : "COU", "fractionDigits" : 2, "numericCode" : 970}, {"code" : "KMF", "fractionDigits" : 0, "numericCode" : 174}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "CDF", "fractionDigits" : 2, "numericCode" : 976}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "CRC", "fractionDigits" : 2, "numericCode" : 188}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "HRK", "fractionDigits"
    : 2, "numericCode" : 191}, {"code" : "CUC", "fractionDigits" : 2, "numericCode" : 931}, {"code" : "CUP", "fractionDigits" : 2, "numericCode" : 192}, {"code" : "ANG", "fractionDigits" : 2, "numericCode" : 532}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "CZK", "fractionDigits" : 2, "numericCode" : 203}, {"code" : "DKK", "fractionDigits" : 2, "numericCode" : 208}, {"code" : "DJF", "fractionDigits" : 0, "numericCode" : 262}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" :
    951}, {"code" : "DOP", "fractionDigits" : 2, "numericCode" : 214}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "EGP", "fractionDigits" : 2, "numericCode" : 818}, {"code" : "SVC", "fractionDigits" : 2, "numericCode" : 222}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "ERN", "fractionDigits" : 2, "numericCode" : 232}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "ETB",
    "fractionDigits" : 2, "numericCode" : 230}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "FKP", "fractionDigits" : 2, "numericCode" : 238}, {"code" : "DKK", "fractionDigits" : 2, "numericCode" : 208}, {"code" : "FJD", "fractionDigits" : 2, "numericCode" : 242}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XPF", "fractionDigits" : 0,
    "numericCode" : 953}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XAF", "fractionDigits" : 0, "numericCode" : 950}, {"code" : "GMD", "fractionDigits" : 2, "numericCode" : 270}, {"code" : "GEL", "fractionDigits" : 2, "numericCode" : 981}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "GHS", "fractionDigits" : 2, "numericCode" : 936}, {"code" : "GIP", "fractionDigits" : 2, "numericCode" : 292}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}
    , {"code" : "DKK", "fractionDigits" : 2, "numericCode" : 208}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "GTQ", "fractionDigits" : 2, "numericCode" : 320}, {"code" : "GBP", "fractionDigits" : 2, "numericCode" : 826}, {"code" : "GNF", "fractionDigits" : 0, "numericCode" : 324}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "GYD", "fractionDigits"
    : 2, "numericCode" : 328}, {"code" : "HTG", "fractionDigits" : 2, "numericCode" : 332}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "HNL", "fractionDigits" : 2, "numericCode" : 340}, {"code" : "HKD", "fractionDigits" : 2, "numericCode" : 344}, {"code" : "HUF", "fractionDigits" : 2, "numericCode" : 348}, {"code" : "ISK", "fractionDigits" : 0, "numericCode" : 352}
    , {"code" : "INR", "fractionDigits" : 2, "numericCode" : 356}, {"code" : "IDR", "fractionDigits" : 2, "numericCode" : 360}, {"code" : "XDR", "fractionDigits" : -1, "numericCode" : 960}, {"code" : "IRR", "fractionDigits" : 2, "numericCode" : 364}, {"code" : "IQD", "fractionDigits" : 3, "numericCode" : 368}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "GBP", "fractionDigits" : 2, "numericCode" : 826}, {"code" : "ILS", "fractionDigits" : 2, "numericCode" : 376}, {"code" : "EUR", "fractionDigits"
    : 2, "numericCode" : 978}, {"code" : "JMD", "fractionDigits" : 2, "numericCode" : 388}, {"code" : "JPY", "fractionDigits" : 0, "numericCode" : 392}, {"code" : "GBP", "fractionDigits" : 2, "numericCode" : 826}, {"code" : "JOD", "fractionDigits" : 3, "numericCode" : 400}, {"code" : "KZT", "fractionDigits" : 2, "numericCode" : 398}, {"code" : "KES", "fractionDigits" : 2, "numericCode" : 404}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "KPW", "fractionDigits" : 2, "numericCode" : 408}
    , {"code" : "KRW", "fractionDigits" : 0, "numericCode" : 410}, {"code" : "KWD", "fractionDigits" : 3, "numericCode" : 414}, {"code" : "KGS", "fractionDigits" : 2, "numericCode" : 417}, {"code" : "LAK", "fractionDigits" : 2, "numericCode" : 418}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "LBP", "fractionDigits" : 2, "numericCode" : 422}, {"code" : "LSL", "fractionDigits" : 2, "numericCode" : 426}, {"code" : "ZAR", "fractionDigits" : 2, "numericCode" : 710}, {"code" : "LRD", "fractionDigits"
    : 2, "numericCode" : 430}, {"code" : "LYD", "fractionDigits" : 3, "numericCode" : 434}, {"code" : "CHF", "fractionDigits" : 2, "numericCode" : 756}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "MOP", "fractionDigits" : 2, "numericCode" : 446}, {"code" : "MKD", "fractionDigits" : 2, "numericCode" : 807}, {"code" : "MGA", "fractionDigits" : 2, "numericCode" : 969}, {"code" : "MWK", "fractionDigits" : 2, "numericCode" :
    454}, {"code" : "MYR", "fractionDigits" : 2, "numericCode" : 458}, {"code" : "MVR", "fractionDigits" : 2, "numericCode" : 462}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "MRO", "fractionDigits" : 2, "numericCode" : 478}, {"code" : "MUR", "fractionDigits" : 2, "numericCode" : 480}, {"code" : "EUR",
    "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XUA", "fractionDigits" : -1, "numericCode" : 965}, {"code" : "MXN", "fractionDigits" : 2, "numericCode" : 484}, {"code" : "MXV", "fractionDigits" : 2, "numericCode" : 979}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "MDL", "fractionDigits" : 2, "numericCode" : 498}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "MNT", "fractionDigits" : 2, "numericCode" : 496}, {"code" : "EUR", "fractionDigits" : 2,
    "numericCode" : 978}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "MAD", "fractionDigits" : 2, "numericCode" : 504}, {"code" : "MZN", "fractionDigits" : 2, "numericCode" : 943}, {"code" : "MMK", "fractionDigits" : 2, "numericCode" : 104}, {"code" : "NAD", "fractionDigits" : 2, "numericCode" : 516}, {"code" : "ZAR", "fractionDigits" : 2, "numericCode" : 710}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "NPR", "fractionDigits" : 2, "numericCode" : 524},
    {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XPF", "fractionDigits" : 0, "numericCode" : 953}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "NIO", "fractionDigits" : 2, "numericCode" : 558}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "NGN", "fractionDigits" : 2, "numericCode" : 566}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "USD", "fractionDigits"
    : 2, "numericCode" : 840}, {"code" : "NOK", "fractionDigits" : 2, "numericCode" : 578}, {"code" : "OMR", "fractionDigits" : 3, "numericCode" : 512}, {"code" : "PKR", "fractionDigits" : 2, "numericCode" : 586}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : null, "fractionDigits" : 0, "numericCode" : 0}, {"code" : "PAB", "fractionDigits" : 2, "numericCode" : 590}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "PGK", "fractionDigits" : 2, "numericCode" : 598}
    , {"code" : "PYG", "fractionDigits" : 0, "numericCode" : 600}, {"code" : "PEN", "fractionDigits" : 2, "numericCode" : 604}, {"code" : "PHP", "fractionDigits" : 2, "numericCode" : 608}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "PLN", "fractionDigits" : 2, "numericCode" : 985}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "QAR", "fractionDigits" : 2, "numericCode" : 634}, {"code" : "EUR", "fractionDigits"
    : 2, "numericCode" : 978}, {"code" : "RON", "fractionDigits" : 2, "numericCode" : 946}, {"code" : "RUB", "fractionDigits" : 2, "numericCode" : 643}, {"code" : "RWF", "fractionDigits" : 0, "numericCode" : 646}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "SHP", "fractionDigits" : 2, "numericCode" : 654}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" :
    978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "XCD", "fractionDigits" : 2, "numericCode" : 951}, {"code" : "WST", "fractionDigits" : 2, "numericCode" : 882}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "STD", "fractionDigits" : 2, "numericCode" : 678}, {"code" : "SAR", "fractionDigits" : 2, "numericCode" : 682}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "RSD", "fractionDigits" : 2, "numericCode" : 941}, {"code" : "SCR",
    "fractionDigits" : 2, "numericCode" : 690}, {"code" : "SLL", "fractionDigits" : 2, "numericCode" : 694}, {"code" : "SGD", "fractionDigits" : 2, "numericCode" : 702}, {"code" : "ANG", "fractionDigits" : 2, "numericCode" : 532}, {"code" : "XSU", "fractionDigits" : -1, "numericCode" : 994}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "SBD", "fractionDigits" : 2, "numericCode" : 90}, {"code" : "SOS", "fractionDigits" : 2,
    "numericCode" : 706}, {"code" : "ZAR", "fractionDigits" : 2, "numericCode" : 710}, {"code" : null, "fractionDigits" : 0, "numericCode" : 0}, {"code" : "SSP", "fractionDigits" : 2, "numericCode" : 728}, {"code" : "EUR", "fractionDigits" : 2, "numericCode" : 978}, {"code" : "LKR", "fractionDigits" : 2, "numericCode" : 144}, {"code" : "SDG", "fractionDigits" : 2, "numericCode" : 938}, {"code" : "SRD", "fractionDigits" : 2, "numericCode" : 968}, {"code" : "NOK", "fractionDigits" : 2, "numericCode" : 578}, {"code"
    : "SZL", "fractionDigits" : 2, "numericCode" : 748}, {"code" : "SEK", "fractionDigits" : 2, "numericCode" : 752}, {"code" : "CHE", "fractionDigits" : 2, "numericCode" : 947}, {"code" : "CHF", "fractionDigits" : 2, "numericCode" : 756}, {"code" : "CHW", "fractionDigits" : 2, "numericCode" : 948}, {"code" : "SYP", "fractionDigits" : 2, "numericCode" : 760}, {"code" : "TWD", "fractionDigits" : 2, "numericCode" : 901}, {"code" : "TJS", "fractionDigits" : 2, "numericCode" : 972}, {"code" : "TZS", "fractionDigits"
    : 2, "numericCode" : 834}, {"code" : "THB", "fractionDigits" : 2, "numericCode" : 764}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "XOF", "fractionDigits" : 0, "numericCode" : 952}, {"code" : "NZD", "fractionDigits" : 2, "numericCode" : 554}, {"code" : "TOP", "fractionDigits" : 2, "numericCode" : 776}, {"code" : "TTD", "fractionDigits" : 2, "numericCode" : 780}, {"code" : "TND", "fractionDigits" : 3, "numericCode" : 788}, {"code" : "TRY", "fractionDigits" : 2, "numericCode" :
    949}, {"code" : "TMT", "fractionDigits" : 2, "numericCode" : 934}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "AUD", "fractionDigits" : 2, "numericCode" : 36}, {"code" : "UGX", "fractionDigits" : 0, "numericCode" : 800}, {"code" : "UAH", "fractionDigits" : 2, "numericCode" : 980}, {"code" : "AED", "fractionDigits" : 2, "numericCode" : 784}, {"code" : "GBP", "fractionDigits" : 2, "numericCode" : 826}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "USN",
    "fractionDigits" : 2, "numericCode" : 997}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "UYI", "fractionDigits" : 0, "numericCode" : 940}, {"code" : "UYU", "fractionDigits" : 2, "numericCode" : 858}, {"code" : "UZS", "fractionDigits" : 2, "numericCode" : 860}, {"code" : "VUV", "fractionDigits" : 0, "numericCode" : 548}, {"code" : "VEF", "fractionDigits" : 2, "numericCode" : 937}, {"code" : "VND", "fractionDigits" : 0, "numericCode" : 704}, {"code" : "USD", "fractionDigits" : 2,
    "numericCode" : 840}, {"code" : "USD", "fractionDigits" : 2, "numericCode" : 840}, {"code" : "XPF", "fractionDigits" : 0, "numericCode" : 953}, {"code" : "MAD", "fractionDigits" : 2, "numericCode" : 504}, {"code" : "YER", "fractionDigits" : 2, "numericCode" : 886}, {"code" : "ZMW", "fractionDigits" : 2, "numericCode" : 967}, {"code" : "ZWL", "fractionDigits" : 2, "numericCode" : 932}, {"code" : "XBA", "fractionDigits" : -1, "numericCode" : 955}, {"code" : "XBB", "fractionDigits" : -1, "numericCode" : 956}
    , {"code" : "XBC", "fractionDigits" : -1, "numericCode" : 957}, {"code" : "XBD", "fractionDigits" : -1, "numericCode" : 958}, {"code" : "XTS", "fractionDigits" : -1, "numericCode" : 963}, {"code" : "XXX", "fractionDigits" : -1, "numericCode" : 999}, {"code" : "XAU", "fractionDigits" : -1, "numericCode" : 959}, {"code" : "XPD", "fractionDigits" : -1, "numericCode" : 964}, {"code" : "XPT", "fractionDigits" : -1, "numericCode" : 962}, {"code" : "XAG", "fractionDigits" : -1, "numericCode" : 961}];
}
function otcic_CurrencyHelper_getCountryToCurrencyMap$$create() {
    return {"": {"value" : "CYP"}, "PR": {"value" : "USD"}, "PT": {"value" : "EUR"}, "PW": {"value" : "USD"}, "PY": {"value" : "PYG"}, "QA": {"value" : "QAR"}, "AC": {"value" : "SHP"}, "AD": {"value" : "EUR"}, "AE": {"value" : "AED"}, "AF": {"value" : "AFN"}, "AG": {"value" : "XCD"}, "AI": {"value" : "XCD"}, "AL": {"value" : "ALL"}, "AM": {"value" : "AMD"}, "AN": {"value" : "ANG"}, "AO": {"value" : "AOA"}, "242": {"value" : "Brazzaville"}, "AQ": {"value" : ""}, "AR": {"value" : "ARS"}, "243": {"value" : "Kinshasa"}
    , "AS": {"value" : "USD"}, "AT": {"value" : "EUR"}, "RE": {"value" : "EUR"}, "AU": {"value" : ""}, "AW": {"value" : "AWG"}, "AX": {"value" : "EUR"}, "AZ": {"value" : "AMD"}, "RO": {"value" : "RON"}, "BA": {"value" : "BAM"}, "BB": {"value" : "BBD"}, "RS": {"value" : "RSD"}, "BD": {"value" : "BDT"}, "BE": {"value" : "EUR"}, "RU": {"value" : "RUB"}, "BF": {"value" : "XOF"}, "BG": {"value" : "BGN"}, "RW": {"value" : "RWF"}, "27": {"value" : ""}, "BH": {"value" : "BHD"}, "BI": {"value" : "BIF"}, "BJ": {"value"
    : "XOF"}, "BM": {"value" : "BMD"}, "BN": {"value" : "BND"}, "BO": {"value" : "BOB"}, "SA": {"value" : "SAR"}, "SB": {"value" : "SBD"}, "BR": {"value" : "BRL"}, "SC": {"value" : "SCR"}, "SD": {"value" : "SDD"}, "BT": {"value" : "BTN"}, "SE": {"value" : "SEK"}, "SG": {"value" : "SGD"}, "BV": {"value" : ""}, "BW": {"value" : "BWP"}, "SH": {"value" : "SHP"}, "SI": {"value" : "EUR"}, "BY": {"value" : "BYR"}, "SJ": {"value" : "NOK"}, "BZ": {"value" : "BZD"}, "SK": {"value" : "SKK"}, "SL": {"value" : "SLL"}, "SM":
    {"value" : "EUR"}, "SN": {"value" : "XOF"}, "SO": {"value" : ""}, "CA": {"value" : "CAD"}, "SR": {"value" : "SRD"}, "CC": {"value" : "AUD"}, "ST": {"value" : "STD"}, "CF": {"value" : "XAF"}, "SV": {"value" : "USD"}, "CH": {"value" : "CHF"}, "CI": {"value" : "XOF"}, "SY": {"value" : "SYP"}, "SZ": {"value" : "SZL"}, "CK": {"value" : "NZD"}, "CL": {"value" : "CLP"}, "CM": {"value" : "XAF"}, "CO": {"value" : "COP"}, "TA": {"value" : "SHP"}, "CR": {"value" : "CRC"}, "TC": {"value" : "USD"}, "TD": {"value" : "XAF"}
    , "CU": {"value" : "CUP"}, "TF": {"value" : ""}, "CV": {"value" : "CVE"}, "TG": {"value" : "XOF"}, "TH": {"value" : "THB"}, "CX": {"value" : "AUD"}, "CY": {"value" : "TRY"}, "TJ": {"value" : "TJS"}, "CZ": {"value" : "CZK"}, "TK": {"value" : "NZD"}, "TL": {"value" : "USD"}, "TM": {"value" : "TMM"}, "TN": {"value" : "TND"}, "TO": {"value" : "TOP"}, "TR": {"value" : "TRY"}, "TT": {"value" : "TTD"}, "DE": {"value" : "EUR"}, "TV": {"value" : "AUD"}, "DJ": {"value" : "DJF"}, "TZ": {"value" : "TZS"}, "DK": {"value"
    : "DKK"}, "DM": {"value" : "XCD"}, "DO": {"value" : "DOP"}, "UA": {"value" : "UAH"}, "UG": {"value" : "UGX"}, "DZ": {"value" : "DZD"}, "UM": {"value" : ""}, "EC": {"value" : "USD"}, "US": {"value" : "USD"}, "EE": {"value" : "EEK"}, "EG": {"value" : "EGP"}, "UY": {"value" : "UYU"}, "UZ": {"value" : "UZS"}, "VA": {"value" : "EUR"}, "ER": {"value" : "ERN"}, "VC": {"value" : "XCD"}, "ES": {"value" : "EUR"}, "ET": {"value" : "ETB"}, "VE": {"value" : "VEB"}, "VG": {"value" : "USD"}, "VI": {"value" : "USD"}, "VN":
    {"value" : "VND"}, "VU": {"value" : "VUV"}, "FI": {"value" : "EUR"}, "FJ": {"value" : "FJD"}, "FK": {"value" : "FKP"}, "FM": {"value" : "USD"}, "FO": {"value" : "DKK"}, "FR": {"value" : "EUR"}, "WF": {"value" : "XPF"}, "850": {"value" : "Pyongyang"}, "GA": {"value" : "XAF"}, "GB": {"value" : "GBP"}, "WS": {"value" : "WST"}, "GD": {"value" : "XCD"}, "GE": {"value" : "RUB and GEL"}, "GF": {"value" : "EUR"}, "GG": {"value" : "GGP"}, "GH": {"value" : "GHC"}, "GI": {"value" : "GIP"}, "GL": {"value" : "DKK"},
    "GN": {"value" : "GNF"}, "GP": {"value" : "EUR"}, "GQ": {"value" : "XAF"}, "GR": {"value" : "EUR"}, "GS": {"value" : ""}, "GT": {"value" : "GTQ"}, "GU": {"value" : "USD"}, "GW": {"value" : "XOF"}, "GY": {"value" : "GYD"}, "-241": {"value" : "Nassau"}, "82": {"value" : "Seoul"}, "86": {"value" : "Beijing"}, "HK": {"value" : "HKD"}, "HM": {"value" : ""}, "HN": {"value" : "HNL"}, "HR": {"value" : "HRK"}, "HT": {"value" : "HTG"}, "YE": {"value" : "YER"}, "HU": {"value" : "HUF"}, "ID": {"value" : "IDR"}, "YT":
    {"value" : "EUR"}, "IE": {"value" : "EUR"}, "IL": {"value" : "ILS"}, "IM": {"value" : "IMP"}, "IN": {"value" : "INR"}, "IO": {"value" : ""}, "IQ": {"value" : "IQD"}, "IR": {"value" : "IRR"}, "IS": {"value" : "ISK"}, "IT": {"value" : "EUR"}, "ZM": {"value" : "ZMK"}, "886": {"value" : "Taipei"}, "JE": {"value" : "JEP"}, "ZW": {"value" : "ZWD"}, "JM": {"value" : "JMD"}, "JO": {"value" : "JOD"}, "JP": {"value" : "JPY"}, "KE": {"value" : "KES"}, "KG": {"value" : "KGS"}, "KH": {"value" : "KHR"}, "KI": {"value"
    : "AUD"}, "KM": {"value" : "KMF"}, "KN": {"value" : "XCD"}, "KW": {"value" : "KWD"}, "KY": {"value" : "KYD"}, "KZ": {"value" : "KZT"}, "LA": {"value" : "LAK"}, "LB": {"value" : "LBP"}, "LC": {"value" : "XCD"}, "LI": {"value" : "CHF"}, "LK": {"value" : "LKR"}, "LR": {"value" : "LRD"}, "LS": {"value" : "LSL"}, "LT": {"value" : "LTL"}, "LU": {"value" : "EUR"}, "LV": {"value" : "LVL"}, "LY": {"value" : "LYD"}, "MA": {"value" : "MAD"}, "MC": {"value" : "EUR"}, "MD": {"value" : ""}, "ME": {"value" : "EUR"}, "MG":
    {"value" : "MGA"}, "MH": {"value" : "USD"}, "MK": {"value" : "MKD"}, "ML": {"value" : "XOF"}, "MM": {"value" : "MMK"}, "MN": {"value" : "MNT"}, "MO": {"value" : "MOP"}, "MP": {"value" : "USD"}, "MQ": {"value" : "EUR"}, "MR": {"value" : "MRO"}, "MS": {"value" : "XCD"}, "MT": {"value" : "MTL"}, "MU": {"value" : "MUR"}, "MV": {"value" : "MVR"}, "MW": {"value" : "MWK"}, "MX": {"value" : "MXN"}, "MY": {"value" : "MYR"}, "MZ": {"value" : "MZM"}, "NA": {"value" : "NAD"}, "NC": {"value" : "XPF"}, "NE": {"value"
    : "XOF"}, "NF": {"value" : "AUD"}, "NG": {"value" : "NGN"}, "NI": {"value" : "NIO"}, "NL": {"value" : "EUR"}, "NO": {"value" : "NOK"}, "NP": {"value" : "NPR"}, "NR": {"value" : "AUD"}, "NU": {"value" : "NZD"}, "NZ": {"value" : "NZD"}, "OM": {"value" : "OMR"}, "220": {"value" : "Banjul"}, "PA": {"value" : "PAB"}, "PE": {"value" : "PEN"}, "PF": {"value" : ""}, "PG": {"value" : "PGK"}, "PH": {"value" : "PHP"}, "PK": {"value" : "PKR"}, "PL": {"value" : "PLN"}, "PM": {"value" : "EUR"}, "PN": {"value" : "NZD"}
    };
}
function ju_HashMap$EntryIterator() {
    ju_HashMap$AbstractMapIterator.call(this);
}
function ju_HashMap$EntryIterator_next($this) {
    ju_HashMap$AbstractMapIterator_makeNext($this);
    return $this.$currentEntry;
}
function ju_HashMap$EntryIterator_next0($this) {
    return ju_HashMap$EntryIterator_next($this);
}
function jt_DecimalFormatParser() {
    var a = this; jl_Object.call(a);
    a.$positivePrefix0 = null;
    a.$positiveSuffix0 = null;
    a.$negativePrefix0 = null;
    a.$negativeSuffix0 = null;
    a.$groupSize = 0;
    a.$minimumIntLength = 0;
    a.$intLength = 0;
    a.$minimumFracLength = 0;
    a.$fracLength = 0;
    a.$exponentLength = 0;
    a.$decimalSeparatorRequired = 0;
    a.$string4 = null;
    a.$index7 = 0;
    a.$multiplier0 = 0;
}
function jt_DecimalFormatParser_parse($this, $string) {
    var var$2, var$3, var$4;
    $this.$groupSize = 0;
    $this.$minimumFracLength = 0;
    $this.$fracLength = 0;
    $this.$exponentLength = 0;
    $this.$decimalSeparatorRequired = 0;
    $this.$multiplier0 = 1;
    $this.$string4 = $string;
    $this.$index7 = 0;
    $this.$positivePrefix0 = jt_DecimalFormatParser_parseText($this, 0, 0);
    if ($this.$index7 == jl_String_length($string)) {
        var$2 = new jl_IllegalArgumentException;
        var$3 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$3);
        jl_AbstractStringBuilder_append(var$3, $rt_s(519));
        jl_AbstractStringBuilder_append(var$3, $string);
        jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
        $rt_throw(var$2);
    }
    jt_DecimalFormatParser_parseNumber($this, 1);
    $this.$negativePrefix0 = null;
    $this.$negativeSuffix0 = null;
    if ($this.$index7 < jl_String_length($string) && jl_String_charAt($string, $this.$index7) != 59)
        $this.$positiveSuffix0 = jt_DecimalFormatParser_parseText($this, 1, 0);
    if ($this.$index7 < jl_String_length($string)) {
        var$4 = $this.$index7;
        $this.$index7 = var$4 + 1 | 0;
        if (jl_String_charAt($string, var$4) != 59) {
            var$2 = new jl_IllegalArgumentException;
            var$3 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$3);
            jl_AbstractStringBuilder_append(var$3, $rt_s(520));
            var$3 = jl_StringBuilder_append2(var$3, $this.$index7);
            jl_AbstractStringBuilder_append(var$3, $rt_s(521));
            jl_AbstractStringBuilder_append(var$3, $string);
            jl_Throwable__init_(var$2, jl_AbstractStringBuilder_toString(var$3));
            $rt_throw(var$2);
        }
        $this.$negativePrefix0 = jt_DecimalFormatParser_parseText($this, 0, 1);
        jt_DecimalFormatParser_parseNumber($this, 0);
        $this.$negativeSuffix0 = jt_DecimalFormatParser_parseText($this, 1, 1);
    }
}
function jt_DecimalFormatParser_apply($this, $format) {
    $format.$positivePrefix = $this.$positivePrefix0;
    $format.$positiveSuffix = $this.$positiveSuffix0;
    if ($this.$negativePrefix0 !== null)
        $format.$negativePrefix = $this.$negativePrefix0;
    else {
        $format.$negativePrefix = $rt_createArray(jt_DecimalFormat$FormatField, $this.$positivePrefix0.data.length + 1 | 0);
        jl_System_arraycopy($this.$positivePrefix0, 0, $format.$negativePrefix, 1, $this.$positivePrefix0.data.length);
        $format.$negativePrefix.data[0] = new jt_DecimalFormat$MinusField;
    }
    $format.$negativeSuffix = $this.$negativeSuffix0 === null ? $this.$positiveSuffix0 : $this.$negativeSuffix0;
    $format.$groupingSize = $this.$groupSize;
    $format.$groupingUsed = $this.$groupSize <= 0 ? 0 : 1;
    jt_NumberFormat_setMinimumIntegerDigits($format, !$this.$decimalSeparatorRequired ? $this.$minimumIntLength : jl_Math_max(1, $this.$minimumIntLength));
    jt_NumberFormat_setMaximumIntegerDigits($format, $this.$intLength);
    jt_NumberFormat_setMinimumFractionDigits($format, $this.$minimumFracLength);
    jt_NumberFormat_setMaximumFractionDigits($format, $this.$fracLength);
    $format.$decimalSeparatorAlwaysShown = $this.$decimalSeparatorRequired;
    $format.$exponentDigits = $this.$exponentLength;
    $format.$multiplier = $this.$multiplier0;
}
function jt_DecimalFormatParser_parseText($this, $suffix, $end) {
    var $fields, $sb, $c, $next;
    $fields = ju_ArrayList__init_();
    $sb = new jl_StringBuilder;
    jl_AbstractStringBuilder__init_($sb);
    a: {
        b: {
            c: while (true) {
                if ($this.$index7 >= jl_String_length($this.$string4))
                    break a;
                d: {
                    $c = jl_String_charAt($this.$string4, $this.$index7);
                    switch ($c) {
                        case 35:
                        case 48:
                            if (!$suffix)
                                break a;
                            $fields = new jl_IllegalArgumentException;
                            $sb = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_($sb);
                            jl_AbstractStringBuilder_append($sb, $rt_s(522));
                            $sb = jl_StringBuilder_append2($sb, $this.$index7);
                            jl_AbstractStringBuilder_append($sb, $rt_s(521));
                            jl_AbstractStringBuilder_append($sb, $this.$string4);
                            jl_Throwable__init_($fields, jl_AbstractStringBuilder_toString($sb));
                            $rt_throw($fields);
                        case 37:
                            if ($sb.$length0 > 0) {
                                ju_ArrayList_add($fields, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
                                jl_StringBuilder_setLength($sb, 0);
                            }
                            ju_ArrayList_add($fields, new jt_DecimalFormat$PercentField);
                            $this.$index7 = $this.$index7 + 1 | 0;
                            $this.$multiplier0 = 100;
                            break d;
                        case 39:
                            $this.$index7 = $this.$index7 + 1 | 0;
                            $next = jl_String_indexOf($this.$string4, 39, $this.$index7);
                            if ($next < 0) {
                                $fields = new jl_IllegalArgumentException;
                                $sb = new jl_StringBuilder;
                                jl_AbstractStringBuilder__init_($sb);
                                jl_AbstractStringBuilder_append($sb, $rt_s(523));
                                $sb = jl_StringBuilder_append2($sb, $this.$index7);
                                jl_AbstractStringBuilder_append($sb, $rt_s(524));
                                jl_AbstractStringBuilder_append($sb, $this.$string4);
                                jl_Throwable__init_($fields, jl_AbstractStringBuilder_toString($sb));
                                $rt_throw($fields);
                            }
                            if ($next == $this.$index7)
                                jl_AbstractStringBuilder_append1($sb, 39);
                            else
                                jl_AbstractStringBuilder_append($sb, jl_String_substring($this.$string4, $this.$index7, $next));
                            $this.$index7 = $next + 1 | 0;
                            break d;
                        case 45:
                            if ($sb.$length0 > 0) {
                                ju_ArrayList_add($fields, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
                                jl_StringBuilder_setLength($sb, 0);
                            }
                            ju_ArrayList_add($fields, new jt_DecimalFormat$MinusField);
                            $this.$index7 = $this.$index7 + 1 | 0;
                            break d;
                        case 46:
                        case 69:
                            break c;
                        case 59:
                            break b;
                        case 164:
                            if ($sb.$length0 > 0) {
                                ju_ArrayList_add($fields, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
                                jl_StringBuilder_setLength($sb, 0);
                            }
                            ju_ArrayList_add($fields, new jt_DecimalFormat$CurrencyField);
                            $this.$index7 = $this.$index7 + 1 | 0;
                            break d;
                        case 8240:
                            if ($sb.$length0 > 0) {
                                ju_ArrayList_add($fields, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
                                jl_StringBuilder_setLength($sb, 0);
                            }
                            ju_ArrayList_add($fields, new jt_DecimalFormat$PerMillField);
                            $this.$index7 = $this.$index7 + 1 | 0;
                            $this.$multiplier0 = 1000;
                            break d;
                        default:
                    }
                    jl_AbstractStringBuilder_append1($sb, $c);
                    $this.$index7 = $this.$index7 + 1 | 0;
                }
            }
            $fields = new jl_IllegalArgumentException;
            $sb = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($sb);
            jl_AbstractStringBuilder_append($sb, $rt_s(522));
            $sb = jl_StringBuilder_append2($sb, $this.$index7);
            jl_AbstractStringBuilder_append($sb, $rt_s(521));
            jl_AbstractStringBuilder_append($sb, $this.$string4);
            jl_Throwable__init_($fields, jl_AbstractStringBuilder_toString($sb));
            $rt_throw($fields);
        }
        if ($end) {
            $fields = new jl_IllegalArgumentException;
            $sb = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_($sb);
            jl_AbstractStringBuilder_append($sb, $rt_s(522));
            $sb = jl_StringBuilder_append2($sb, $this.$index7);
            jl_AbstractStringBuilder_append($sb, $rt_s(521));
            jl_AbstractStringBuilder_append($sb, $this.$string4);
            jl_Throwable__init_($fields, jl_AbstractStringBuilder_toString($sb));
            $rt_throw($fields);
        }
    }
    if ($sb.$length0 > 0)
        ju_ArrayList_add($fields, jt_DecimalFormat$TextField__init_(jl_AbstractStringBuilder_toString($sb)));
    return ju_AbstractCollection_toArray($fields, $rt_createArray(jt_DecimalFormat$FormatField, $fields.$size0));
}
function jt_DecimalFormatParser_parseNumber($this, $apply) {
    var var$2, var$3, var$4, var$5, var$6;
    jt_DecimalFormatParser_parseIntegerPart($this, $apply);
    if ($this.$index7 < jl_String_length($this.$string4) && jl_String_charAt($this.$string4, $this.$index7) == 46) {
        $this.$index7 = $this.$index7 + 1 | 0;
        var$2 = 0;
        var$3 = 0;
        var$4 = 0;
        a: {
            b: while (true) {
                if ($this.$index7 >= jl_String_length($this.$string4))
                    break a;
                c: {
                    switch (jl_String_charAt($this.$string4, $this.$index7)) {
                        case 35:
                            break;
                        case 44:
                            var$5 = new jl_IllegalArgumentException;
                            var$6 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$6);
                            jl_AbstractStringBuilder_append(var$6, $rt_s(525));
                            var$6 = jl_StringBuilder_append2(var$6, $this.$index7);
                            jl_AbstractStringBuilder_append(var$6, $rt_s(521));
                            jl_AbstractStringBuilder_append(var$6, $this.$string4);
                            jl_Throwable__init_(var$5, jl_AbstractStringBuilder_toString(var$6));
                            $rt_throw(var$5);
                        case 46:
                            var$6 = new jl_IllegalArgumentException;
                            var$5 = new jl_StringBuilder;
                            jl_AbstractStringBuilder__init_(var$5);
                            jl_AbstractStringBuilder_append(var$5, $rt_s(526));
                            var$5 = jl_StringBuilder_append2(var$5, $this.$index7);
                            jl_AbstractStringBuilder_append(var$5, $rt_s(521));
                            jl_AbstractStringBuilder_append(var$5, $this.$string4);
                            jl_Throwable__init_(var$6, jl_AbstractStringBuilder_toString(var$5));
                            $rt_throw(var$6);
                        case 48:
                            if (var$2)
                                break b;
                            var$3 = var$3 + 1 | 0;
                            var$4 = var$4 + 1 | 0;
                            break c;
                        default:
                            break a;
                    }
                    var$3 = var$3 + 1 | 0;
                    var$2 = 1;
                }
                $this.$index7 = $this.$index7 + 1 | 0;
            }
            var$6 = new jl_IllegalArgumentException;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(var$5, $rt_s(527));
            var$5 = jl_StringBuilder_append2(var$5, $this.$index7);
            jl_AbstractStringBuilder_append(var$5, $rt_s(521));
            jl_AbstractStringBuilder_append(var$5, $this.$string4);
            jl_Throwable__init_(var$6, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw(var$6);
        }
        if ($apply) {
            $this.$fracLength = var$3;
            $this.$minimumFracLength = var$4;
            $this.$decimalSeparatorRequired = var$3 ? 0 : 1;
        }
    }
    if ($this.$index7 < jl_String_length($this.$string4) && jl_String_charAt($this.$string4, $this.$index7) == 69) {
        $this.$index7 = $this.$index7 + 1 | 0;
        var$2 = 0;
        d: {
            e: while (true) {
                if ($this.$index7 >= jl_String_length($this.$string4))
                    break d;
                switch (jl_String_charAt($this.$string4, $this.$index7)) {
                    case 35:
                    case 44:
                    case 46:
                    case 69:
                        break e;
                    case 48:
                        break;
                    default:
                        break d;
                }
                var$2 = var$2 + 1 | 0;
                $this.$index7 = $this.$index7 + 1 | 0;
            }
            var$6 = new jl_IllegalArgumentException;
            var$5 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$5);
            jl_AbstractStringBuilder_append(var$5, $rt_s(528));
            var$5 = jl_StringBuilder_append2(var$5, $this.$index7);
            jl_AbstractStringBuilder_append(var$5, $rt_s(521));
            jl_AbstractStringBuilder_append(var$5, $this.$string4);
            jl_Throwable__init_(var$6, jl_AbstractStringBuilder_toString(var$5));
            $rt_throw(var$6);
        }
        if (!var$2) {
            var$5 = new jl_IllegalArgumentException;
            var$6 = new jl_StringBuilder;
            jl_AbstractStringBuilder__init_(var$6);
            jl_AbstractStringBuilder_append(var$6, $rt_s(529));
            var$6 = jl_StringBuilder_append2(var$6, $this.$index7);
            jl_AbstractStringBuilder_append(var$6, $rt_s(521));
            jl_AbstractStringBuilder_append(var$6, $this.$string4);
            jl_Throwable__init_(var$5, jl_AbstractStringBuilder_toString(var$6));
            $rt_throw(var$5);
        }
        if ($apply)
            $this.$exponentLength = var$2;
    }
}
function jt_DecimalFormatParser_parseIntegerPart($this, $apply) {
    var $start, $lastGroup, $optionalDigits, $length, $minimumLength, var$7, var$8;
    $start = $this.$index7;
    $lastGroup = $this.$index7;
    $optionalDigits = 1;
    $length = 0;
    $minimumLength = 0;
    a: {
        b: while (true) {
            if ($this.$index7 >= jl_String_length($this.$string4))
                break a;
            c: {
                d: {
                    switch (jl_String_charAt($this.$string4, $this.$index7)) {
                        case 35:
                            if (!$optionalDigits)
                                break b;
                            $length = $length + 1 | 0;
                            break c;
                        case 44:
                            break d;
                        case 48:
                            break;
                        default:
                            break a;
                    }
                    $optionalDigits = 0;
                    $length = $length + 1 | 0;
                    $minimumLength = $minimumLength + 1 | 0;
                    break c;
                }
                if ($lastGroup == $this.$index7) {
                    var$7 = new jl_IllegalArgumentException;
                    var$8 = new jl_StringBuilder;
                    jl_AbstractStringBuilder__init_(var$8);
                    jl_AbstractStringBuilder_append(var$8, $rt_s(530));
                    var$8 = jl_StringBuilder_append2(var$8, $this.$index7);
                    jl_AbstractStringBuilder_append(var$8, $rt_s(521));
                    jl_AbstractStringBuilder_append(var$8, $this.$string4);
                    jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(var$8));
                    $rt_throw(var$7);
                }
                if ($apply)
                    $this.$groupSize = $this.$index7 - $lastGroup | 0;
                $lastGroup = $this.$index7 + 1 | 0;
            }
            $this.$index7 = $this.$index7 + 1 | 0;
        }
        var$7 = new jl_IllegalArgumentException;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append(var$8, $rt_s(531));
        var$8 = jl_StringBuilder_append2(var$8, $this.$index7);
        jl_AbstractStringBuilder_append(var$8, $rt_s(521));
        jl_AbstractStringBuilder_append(var$8, $this.$string4);
        jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(var$8));
        $rt_throw(var$7);
    }
    if (!$length) {
        var$7 = new jl_IllegalArgumentException;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append(var$8, $rt_s(532));
        var$8 = jl_StringBuilder_append2(var$8, $this.$index7);
        jl_AbstractStringBuilder_append(var$8, $rt_s(521));
        jl_AbstractStringBuilder_append(var$8, $this.$string4);
        jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(var$8));
        $rt_throw(var$7);
    }
    if ($lastGroup == $this.$index7) {
        var$7 = new jl_IllegalArgumentException;
        var$8 = new jl_StringBuilder;
        jl_AbstractStringBuilder__init_(var$8);
        jl_AbstractStringBuilder_append(var$8, $rt_s(533));
        var$8 = jl_StringBuilder_append2(var$8, $this.$index7);
        jl_AbstractStringBuilder_append(var$8, $rt_s(521));
        jl_AbstractStringBuilder_append(var$8, $this.$string4);
        jl_Throwable__init_(var$7, jl_AbstractStringBuilder_toString(var$8));
        $rt_throw(var$7);
    }
    if ($apply && $lastGroup > $start)
        $this.$groupSize = $this.$index7 - $lastGroup | 0;
    if ($apply) {
        $this.$intLength = $length;
        $this.$minimumIntLength = $minimumLength;
    }
}
function jur_IntArrHash() {
    jl_Object.call(this);
}
function jt_DecimalFormat$MinusField() {
    jl_Object.call(this);
}
function jt_DecimalFormat$MinusField_equals($this, $obj) {
    return $obj instanceof jt_DecimalFormat$MinusField;
}
function jt_DecimalFormat$MinusField_hashCode($this) {
    return 3;
}
function jt_DecimalFormat$PerMillField() {
    jl_Object.call(this);
}
function jt_DecimalFormat$PerMillField_equals($this, $obj) {
    return $obj instanceof jt_DecimalFormat$PerMillField;
}
function jt_DecimalFormat$PerMillField_hashCode($this) {
    return 2;
}
function jt_DecimalFormat$CurrencyField() {
    jl_Object.call(this);
}
function jt_DecimalFormat$CurrencyField_equals($this, $obj) {
    return $obj instanceof jt_DecimalFormat$CurrencyField;
}
function jt_DecimalFormat$CurrencyField_hashCode($this) {
    return 0;
}
function jt_DecimalFormat$PercentField() {
    jl_Object.call(this);
}
function jt_DecimalFormat$PercentField_equals($this, $obj) {
    return $obj instanceof jt_DecimalFormat$PercentField;
}
function jt_DecimalFormat$PercentField_hashCode($this) {
    return 1;
}
$rt_packages([-1, "java", 0, "util", 1, "regex", 0, "nio", 3, "charset", 0, "text", 0, "lang", -1, "org", 7, "apache", 8, "commons", 9, "csv", 7, "teavm", 11, "classlib", 12, "impl", 13, "unicode", 7, "locationtech", 15, "jts", 16, "index", 17, "strtree", -1, "technology", 19, "tabula", 20, "extractors", -1, "compat", 22, "java", 23, "awt", 24, "geom", 22, "sun", 26, "awt", 27, "geom"
]);
$rt_metadata([jl_Object, "Object", 6, 0, [], 0, 3, 0, ["$hashCode0", function() { return jl_Object_hashCode(this); }, "$equals", function(var_1) { return jl_Object_equals(this, var_1); }, "$toString", function() { return jl_Object_toString(this); }],
oe_Client, 0, jl_Object, [], 0, 3, 0, 0,
jlr_AnnotatedElement, 0, jl_Object, [], 3, 3, 0, 0,
jl_Class, "Class", 6, jl_Object, [jlr_AnnotatedElement], 0, 3, 0, 0,
otji_JS, 0, jl_Object, [], 4, 0, 0, 0,
otp_Platform, 0, jl_Object, [], 4, 3, 0, 0,
ji_Serializable, 0, jl_Object, [], 3, 3, 0, 0,
jl_Comparable, 0, jl_Object, [], 3, 3, 0, 0,
jl_CharSequence, 0, jl_Object, [], 3, 3, 0, 0,
jl_String, "String", 6, jl_Object, [ji_Serializable, jl_Comparable, jl_CharSequence], 0, 3, 0, ["$charAt", function(var_1) { return jl_String_charAt(this, var_1); }, "$length", function() { return jl_String_length(this); }, "$subSequence", function(var_1, var_2) { return jl_String_subSequence(this, var_1, var_2); }, "$toString", function() { return jl_String_toString(this); }, "$equals", function(var_1) { return jl_String_equals(this, var_1); }, "$hashCode0", function() { return jl_String_hashCode(this); },
"$compareTo5", function(var_1) { return jl_String_compareTo0(this, var_1); }],
jl_Throwable, 0, jl_Object, [], 0, 3, 0, ["$toString", function() { return jl_Throwable_toString(this); }],
jl_Error, 0, jl_Throwable, [], 0, 3, 0, 0,
jl_LinkageError, 0, jl_Error, [], 0, 3, 0, 0,
jl_NoClassDefFoundError, 0, jl_LinkageError, [], 0, 3, 0, 0,
jl_AbstractStringBuilder, 0, jl_Object, [ji_Serializable, jl_CharSequence], 0, 0, 0, ["$ensureCapacity", function(var_1) { jl_AbstractStringBuilder_ensureCapacity(this, var_1); }, "$toString", function() { return jl_AbstractStringBuilder_toString(this); }],
jl_Appendable, 0, jl_Object, [], 3, 3, 0, 0,
jl_StringBuilder, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, ["$insert2", function(var_1, var_2, var_3, var_4) { return jl_StringBuilder_insert8(this, var_1, var_2, var_3, var_4); }, "$append5", function(var_1, var_2, var_3) { return jl_StringBuilder_append10(this, var_1, var_2, var_3); }, "$charAt", function(var_1) { return jl_StringBuilder_charAt(this, var_1); }, "$length", function() { return jl_StringBuilder_length(this); }, "$toString", function() { return jl_StringBuilder_toString(this); },
"$ensureCapacity", function(var_1) { jl_StringBuilder_ensureCapacity(this, var_1); }, "$insert1", function(var_1, var_2) { return jl_StringBuilder_insert11(this, var_1, var_2); }, "$insert", function(var_1, var_2) { return jl_StringBuilder_insert5(this, var_1, var_2); }],
jl_Number, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0,
jl_Integer, "Integer", 6, jl_Number, [jl_Comparable], 0, 3, 0, ["$toString", function() { return jl_Integer_toString0(this); }, "$hashCode0", function() { return jl_Integer_hashCode(this); }, "$equals", function(var_1) { return jl_Integer_equals(this, var_1); }, "$compareTo5", function(var_1) { return jl_Integer_compareTo0(this, var_1); }],
jl_IncompatibleClassChangeError, 0, jl_LinkageError, [], 0, 3, 0, 0,
jl_NoSuchFieldError, 0, jl_IncompatibleClassChangeError, [], 0, 3, 0, 0,
jl_NoSuchMethodError, 0, jl_IncompatibleClassChangeError, [], 0, 3, 0, 0,
jl_Exception, 0, jl_Throwable, [], 0, 3, 0, 0,
jl_RuntimeException, "RuntimeException", 6, jl_Exception, [], 0, 3, 0, 0,
otci_IntegerUtil, 0, jl_Object, [], 4, 3, 0, 0,
otj_JSObject, 0, jl_Object, [], 3, 3, 0, 0,
p_PDDocument, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0,
p_PDFGraphicsStreamEngine, 0, jl_Object, [], 0, 3, 0, 0,
p_PDFGraphicsStreamEngineOverlay, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0,
tt_ObjectExtractorStreamEngine, 0, p_PDFGraphicsStreamEngine, [p_PDFGraphicsStreamEngineOverlay], 0, 3, 0, ["$clip$exported$0", function(var_1) { return tt_ObjectExtractorStreamEngine_clip$exported$0(this, var_1); }, "$fillPath$exported$1", function(var_1) { return tt_ObjectExtractorStreamEngine_fillPath$exported$1(this, var_1); }, "$endPath$exported$2", function() { return tt_ObjectExtractorStreamEngine_endPath$exported$2(this); }, "$appendRectangle$exported$3", function(var_1, var_2, var_3, var_4, var_5, var_6,
var_7, var_8) { return tt_ObjectExtractorStreamEngine_appendRectangle$exported$3(this, var_1, var_2, var_3, var_4, var_5, var_6, var_7, var_8); }, "$curveTo$exported$4", function(var_1, var_2, var_3, var_4, var_5, var_6) { return tt_ObjectExtractorStreamEngine_curveTo$exported$4(this, var_1, var_2, var_3, var_4, var_5, var_6); }, "$fillAndStrokePath$exported$5", function(var_1) { return tt_ObjectExtractorStreamEngine_fillAndStrokePath$exported$5(this, var_1); }, "$lineTo$exported$6", function(var_1, var_2) {
return tt_ObjectExtractorStreamEngine_lineTo$exported$6(this, var_1, var_2); }, "$strokePath$exported$7", function() { return tt_ObjectExtractorStreamEngine_strokePath$exported$7(this); }, "$moveTo$exported$8", function(var_1, var_2) { return tt_ObjectExtractorStreamEngine_moveTo$exported$8(this, var_1, var_2); }, "$setGraphicsState$exported$9", function(var_1) { return tt_ObjectExtractorStreamEngine_setGraphicsState$exported$9(this, var_1); }, "$closePath$exported$10", function() { return tt_ObjectExtractorStreamEngine_closePath$exported$10(this);
}, "$shadingFill$exported$11", function(var_1) { return tt_ObjectExtractorStreamEngine_shadingFill$exported$11(this, var_1); }, "$drawImage$exported$12", function(var_1) { return tt_ObjectExtractorStreamEngine_drawImage$exported$12(this, var_1); }],
ji_IOException, 0, jl_Exception, [], 0, 3, 0, 0,
jl_AssertionError, 0, jl_Error, [], 0, 3, 0, 0,
p_PDFTextStripper, 0, jl_Object, [], 0, 3, 0, 0,
p_PDFTextStripperOverlay, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0,
tt_TextStripper, 0, p_PDFTextStripper, [p_PDFTextStripperOverlay], 0, 3, 0, ["$writeStringJS$exported$0", function(var_1, var_2) { return tt_TextStripper_writeStringJS$exported$0(this, var_1, var_2); }],
jl_System, 0, jl_Object, [], 4, 3, 0, 0,
jl_Float, "Float", 6, jl_Number, [jl_Comparable], 0, 3, 0, ["$toString", function() { return jl_Float_toString(this); }, "$equals", function(var_1) { return jl_Float_equals(this, var_1); }, "$hashCode0", function() { return jl_Float_hashCode(this); }, "$compareTo5", function(var_1) { return jl_Float_compareTo0(this, var_1); }],
tt_ObjectExtractor, 0, jl_Object, [], 0, 3, 0, 0,
cja_Shape, 0, jl_Object, [], 3, 3, 0, 0,
jl_Cloneable, 0, jl_Object, [], 3, 3, 0, 0,
cjag_RectangularShape, 0, jl_Object, [cja_Shape, jl_Cloneable], 1, 3, 0, 0,
cjag_Rectangle2D, 0, cjag_RectangularShape, [], 1, 3, 0, ["$hashCode0", function() { return cjag_Rectangle2D_hashCode(this); }, "$equals", function(var_1) { return cjag_Rectangle2D_equals(this, var_1); }],
cjag_Rectangle2D$Float, 0, cjag_Rectangle2D, [ji_Serializable], 0, 3, 0, ["$getX", function() { return cjag_Rectangle2D$Float_getX(this); }, "$getY", function() { return cjag_Rectangle2D$Float_getY(this); }, "$getWidth", function() { return cjag_Rectangle2D$Float_getWidth(this); }, "$getHeight", function() { return cjag_Rectangle2D$Float_getHeight(this); }, "$setRect", function(var_1, var_2, var_3, var_4) { cjag_Rectangle2D$Float_setRect0(this, var_1, var_2, var_3, var_4); }, "$outcode", function(var_1, var_2)
{ return cjag_Rectangle2D$Float_outcode(this, var_1, var_2); }],
tt_Rectangle, "Rectangle", 20, cjag_Rectangle2D$Float, [], 0, 3, 0, ["$isLtrDominant", function() { return tt_Rectangle_isLtrDominant(this); }, "$toString", function() { return tt_Rectangle_toString(this); }],
jl_Iterable, 0, jl_Object, [], 3, 3, 0, 0,
ju_Collection, 0, jl_Object, [jl_Iterable], 3, 3, 0, 0,
ju_AbstractCollection, 0, jl_Object, [ju_Collection], 1, 3, 0, ["$toString", function() { return ju_AbstractCollection_toString(this); }],
ju_List, 0, jl_Object, [ju_Collection], 3, 3, 0, 0,
ju_AbstractList, 0, ju_AbstractCollection, [ju_List], 1, 3, 0, ["$iterator", function() { return ju_AbstractList_iterator(this); }, "$remove0", function(var_1) { return ju_AbstractList_remove(this, var_1); }, "$hashCode0", function() { return ju_AbstractList_hashCode(this); }, "$equals", function(var_1) { return ju_AbstractList_equals(this, var_1); }],
ju_RandomAccess, 0, jl_Object, [], 3, 3, 0, 0]);
$rt_metadata([ju_ArrayList, "ArrayList", 1, ju_AbstractList, [jl_Cloneable, ji_Serializable, ju_RandomAccess], 0, 3, 0, ["$get", function(var_1) { return ju_ArrayList_get(this, var_1); }, "$size", function() { return ju_ArrayList_size(this); }, "$remove0", function(var_1) { return ju_ArrayList_remove(this, var_1); }],
tte_ExtractionAlgorithm, 0, jl_Object, [], 3, 3, 0, 0,
tte_BasicExtractionAlgorithm, 0, jl_Object, [tte_ExtractionAlgorithm], 0, 3, 0, ["$toString", function() { return tte_BasicExtractionAlgorithm_toString(this); }],
tte_SpreadsheetExtractionAlgorithm, 0, jl_Object, [tte_ExtractionAlgorithm], 0, 3, 0, ["$toString", function() { return tte_SpreadsheetExtractionAlgorithm_toString(this); }],
jl_AutoCloseable, 0, jl_Object, [], 3, 3, 0, 0,
ji_Closeable, 0, jl_Object, [jl_AutoCloseable], 3, 3, 0, 0,
ji_Flushable, 0, jl_Object, [], 3, 3, 0, 0,
ji_Writer, 0, jl_Object, [jl_Appendable, ji_Closeable, ji_Flushable], 1, 3, 0, 0,
ji_StringWriter, 0, ji_Writer, [], 0, 3, 0, 0,
ttw_Writer, 0, jl_Object, [], 3, 3, 0, 0,
ttw_CSVWriter, 0, jl_Object, [ttw_Writer], 0, 3, 0, 0,
ju_Comparator, 0, jl_Object, [], 3, 3, 0, 0,
jl_String$_clinit_$lambda$_81_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0,
jl_Character, "Character", 6, jl_Object, [jl_Comparable], 0, 3, 0, ["$toString", function() { return jl_Character_toString(this); }, "$equals", function(var_1) { return jl_Character_equals(this, var_1); }, "$hashCode0", function() { return jl_Character_hashCode(this); }, "$compareTo5", function(var_1) { return jl_Character_compareTo0(this, var_1); }],
cjag_Path2D, 0, jl_Object, [cja_Shape], 1, 3, 0, 0,
cjag_Path2D$Float, 0, cjag_Path2D, [ji_Serializable], 0, 3, 0, ["$needRoom", function(var_1, var_2) { cjag_Path2D$Float_needRoom(this, var_1, var_2); }],
cjag_GeneralPath, 0, cjag_Path2D$Float, [], 4, 3, 0, 0,
cjag_AffineTransform, 0, jl_Object, [ji_Serializable], 0, 3, 0, 0,
jl_Math, 0, jl_Object, [], 4, 3, 0, 0,
cjag_Line2D, 0, jl_Object, [cja_Shape, jl_Cloneable], 1, 3, 0, 0,
cjag_Line2D$Float, 0, cjag_Line2D, [ji_Serializable], 0, 3, 0, 0,
tt_HasText, 0, jl_Object, [], 3, 3, 0, 0,
tt_TextElement, "TextElement", 20, tt_Rectangle, [tt_HasText], 0, 3, 0, ["$toString", function() { return tt_TextElement_toString(this); }, "$hashCode0", function() { return tt_TextElement_hashCode(this); }, "$equals", function(var_1) { return tt_TextElement_equals(this, var_1); }],
tt_RectangleSpatialIndex, 0, jl_Object, [], 0, 3, 0, 0,
ji_OutputStream, 0, jl_Object, [ji_Closeable, ji_Flushable], 1, 3, 0, 0,
ji_FilterOutputStream, 0, ji_OutputStream, [], 0, 3, 0, 0,
ji_PrintStream, 0, ji_FilterOutputStream, [], 0, 3, 0, 0,
jl_ConsoleOutputStreamStdout, 0, ji_OutputStream, [], 0, 0, 0, ["$write0", function(var_1) { jl_ConsoleOutputStreamStdout_write(this, var_1); }],
jl_IllegalArgumentException, "IllegalArgumentException", 6, jl_RuntimeException, [], 0, 3, 0, 0,
jl_NumberFormatException, 0, jl_IllegalArgumentException, [], 0, 3, 0, 0,
jl_ConsoleOutputStreamStderr, 0, ji_OutputStream, [], 0, 0, 0, ["$write0", function(var_1) { jl_ConsoleOutputStreamStderr_write(this, var_1); }],
tt_Page, 0, tt_Rectangle, [], 0, 3, 0, 0,
jl_StringBuffer, 0, jl_AbstractStringBuilder, [jl_Appendable], 0, 3, 0, ["$insert2", function(var_1, var_2, var_3, var_4) { return jl_StringBuffer_insert2(this, var_1, var_2, var_3, var_4); }, "$append5", function(var_1, var_2, var_3) { return jl_StringBuffer_append3(this, var_1, var_2, var_3); }, "$ensureCapacity", function(var_1) { jl_StringBuffer_ensureCapacity(this, var_1); }, "$insert1", function(var_1, var_2) { return jl_StringBuffer_insert3(this, var_1, var_2); }, "$insert", function(var_1, var_2) { return jl_StringBuffer_insert4(this,
var_1, var_2); }],
oacc_CSVFormat, 0, jl_Object, [ji_Serializable], 4, 3, oacc_CSVFormat_$callClinit, 0,
oti_AsyncCallback, 0, jl_Object, [], 3, 3, 0, 0,
otpp_AsyncCallbackWrapper, 0, jl_Object, [oti_AsyncCallback], 0, 0, 0, ["$complete", function(var_1) { otpp_AsyncCallbackWrapper_complete(this, var_1); }, "$error", function(var_1) { otpp_AsyncCallbackWrapper_error(this, var_1); }],
p_PDDocument$PDPageConsumer, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0,
p_PDDocument$getPage$lambda$_5_0, 0, jl_Object, [p_PDDocument$PDPageConsumer], 0, 3, 0, ["$complete$exported$0", function(var_1) { return p_PDDocument$getPage$lambda$_5_0_complete$exported$0(this, var_1); }],
p_TextPosition, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0,
oljis_AbstractSTRtree, 0, jl_Object, [ji_Serializable], 1, 3, 0, 0,
olji_SpatialIndex, 0, jl_Object, [], 3, 3, 0, 0,
oljis_STRtree, 0, oljis_AbstractSTRtree, [olji_SpatialIndex, ji_Serializable], 0, 3, 0, 0,
jnc_Charset, 0, jl_Object, [jl_Comparable], 1, 3, 0, 0,
jnci_UTF8Charset, 0, jnc_Charset, [], 0, 3, 0, 0,
tt_Rectangle$1, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tt_Rectangle$1_compare(this, var_1, var_2); }],
tte_SpreadsheetExtractionAlgorithm$1, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tte_SpreadsheetExtractionAlgorithm$1_compare0(this, var_1, var_2); }],
tte_SpreadsheetExtractionAlgorithm$2, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tte_SpreadsheetExtractionAlgorithm$2_compare0(this, var_1, var_2); }],
jlr_Array, 0, jl_Object, [], 4, 3, 0, 0,
oacc_Constants, 0, jl_Object, [], 4, 0, 0, 0,
jl_Enum, 0, jl_Object, [jl_Comparable, ji_Serializable], 1, 3, 0, ["$toString", function() { return jl_Enum_toString(this); }]]);
$rt_metadata([oacc_QuoteMode, "QuoteMode", 10, jl_Enum, [], 12, 3, 0, 0,
jl_NullPointerException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
jl_NegativeArraySizeException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
oljis_STRtree$1, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return oljis_STRtree$1_compare(this, var_1, var_2); }],
oljis_STRtree$2, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return oljis_STRtree$2_compare(this, var_1, var_2); }],
oljis_AbstractSTRtree$IntersectsOp, 0, jl_Object, [], 3, 3, 0, 0,
oljis_STRtree$3, 0, jl_Object, [oljis_AbstractSTRtree$IntersectsOp], 4, 0, 0, 0,
olju_Assert, 0, jl_Object, [], 0, 3, 0, 0,
otpp_ResourceAccessor, 0, jl_Object, [], 4, 0, 0, 0,
otciu_UnicodeHelper, 0, jl_Object, [], 4, 3, 0, 0,
jnc_IllegalCharsetNameException, "IllegalCharsetNameException", 4, jl_IllegalArgumentException, [], 0, 3, 0, 0,
jl_CloneNotSupportedException, "CloneNotSupportedException", 6, jl_Exception, [], 0, 3, 0, 0,
ju_Set, 0, jl_Object, [ju_Collection], 3, 3, 0, 0,
ju_AbstractSet, 0, ju_AbstractCollection, [ju_Set], 1, 3, 0, 0,
ju_HashSet, 0, ju_AbstractSet, [jl_Cloneable, ji_Serializable], 0, 3, 0, ["$iterator", function() { return ju_HashSet_iterator(this); }, "$size", function() { return ju_HashSet_size(this); }],
ju_Arrays, 0, jl_Object, [], 0, 3, 0, 0,
olju_AssertionFailedException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
otci_CharFlow, 0, jl_Object, [], 0, 3, 0, 0,
otci_Base46, 0, jl_Object, [], 4, 3, 0, 0,
ju_Map, 0, jl_Object, [], 3, 3, 0, 0,
ju_AbstractMap, 0, jl_Object, [ju_Map], 1, 3, 0, 0,
ju_HashMap, 0, ju_AbstractMap, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0,
jur_Pattern, 0, jl_Object, [ji_Serializable], 4, 3, 0, 0,
ju_Iterator, 0, jl_Object, [], 3, 3, 0, 0,
ju_AbstractList$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, ["$next", function() { return ju_AbstractList$1_next(this); }],
jl_IndexOutOfBoundsException, "IndexOutOfBoundsException", 6, jl_RuntimeException, [], 0, 3, 0, 0,
jl_StringIndexOutOfBoundsException, "StringIndexOutOfBoundsException", 6, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0,
tt_Utils, 0, jl_Object, [], 0, 3, 0, 0,
tt_Table, "Table", 20, tt_Rectangle, [], 0, 3, 0, 0,
tt_RectangularTextContainer, 0, tt_Rectangle, [], 1, 3, 0, ["$toString", function() { return tt_RectangularTextContainer_toString(this); }],
tt_TextChunk, "TextChunk", 20, tt_RectangularTextContainer, [tt_HasText], 0, 3, tt_TextChunk_$callClinit, ["$isLtrDominant", function() { return tt_TextChunk_isLtrDominant(this); }, "$getTextElements", function() { return tt_TextChunk_getTextElements(this); }, "$getText1", function() { return tt_TextChunk_getText(this); }, "$hashCode0", function() { return tt_TextChunk_hashCode(this); }, "$equals", function(var_1) { return tt_TextChunk_equals(this, var_1); }],
tte_BasicExtractionAlgorithm$1, 0, jl_Object, [ju_Comparator], 0, 0, 0, ["$compare0", function(var_1, var_2) { return tte_BasicExtractionAlgorithm$1_compare0(this, var_1, var_2); }],
ju_Collections, 0, jl_Object, [], 0, 3, 0, 0,
tte_BasicExtractionAlgorithm$2, 0, jl_Object, [ju_Comparator], 0, 0, 0, ["$compare0", function(var_1, var_2) { return tte_BasicExtractionAlgorithm$2_compare0(this, var_1, var_2); }],
tt_Line, "Line", 20, tt_Rectangle, [], 0, 3, 0, ["$toString", function() { return tt_Line_toString(this); }],
oacc_CSVPrinter, 0, jl_Object, [ji_Flushable, ji_Closeable], 4, 3, 0, 0,
p_PDGraphicsState, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0,
cjag_Point2D, 0, jl_Object, [jl_Cloneable], 1, 3, 0, ["$hashCode0", function() { return cjag_Point2D_hashCode(this); }, "$equals", function(var_1) { return cjag_Point2D_equals(this, var_1); }],
cjag_Point2D$Float, "Point2D$Float", 25, cjag_Point2D, [ji_Serializable], 0, 3, 0, ["$getX", function() { return cjag_Point2D$Float_getX(this); }, "$getY", function() { return cjag_Point2D$Float_getY(this); }, "$toString", function() { return cjag_Point2D$Float_toString(this); }],
ju_Map$Entry, 0, jl_Object, [], 3, 3, 0, 0,
ju_MapEntry, 0, jl_Object, [ju_Map$Entry, jl_Cloneable], 0, 0, 0, 0,
ju_HashMap$HashEntry, 0, ju_MapEntry, [], 0, 0, 0, 0,
p_PDFGraphicsStreamEngine$FinishConsumer, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0,
p_PDFGraphicsStreamEngine$getObjectsAsync$lambda$_19_0, 0, jl_Object, [p_PDFGraphicsStreamEngine$FinishConsumer], 0, 3, 0, ["$complete$exported$0", function(var_1) { return p_PDFGraphicsStreamEngine$getObjectsAsync$lambda$_19_0_complete$exported$0(this, var_1); }],
tt_Utils$1, 0, ju_AbstractList, [], 4, 0, 0, ["$size", function() { return tt_Utils$1_size(this); }, "$get", function(var_1) { return tt_Utils$1_get0(this, var_1); }],
tt_PageIterator, 0, jl_Object, [ju_Iterator], 0, 3, 0, 0,
ju_Arrays$ArrayAsList, 0, ju_AbstractList, [ju_RandomAccess], 0, 0, 0, ["$get", function(var_1) { return ju_Arrays$ArrayAsList_get(this, var_1); }, "$size", function() { return ju_Arrays$ArrayAsList_size(this); }],
jl_Boolean, "Boolean", 6, jl_Object, [ji_Serializable, jl_Comparable], 0, 3, 0, ["$toString", function() { return jl_Boolean_toString0(this); }, "$hashCode0", function() { return jl_Boolean_hashCode(this); }, "$equals", function(var_1) { return jl_Boolean_equals(this, var_1); }],
tt_Ruling, "Ruling", 20, cjag_Line2D$Float, [], 0, 3, 0, ["$equals", function(var_1) { return tt_Ruling_equals(this, var_1); }, "$hashCode0", function() { return tt_Ruling_hashCode(this); }, "$toString", function() { return tt_Ruling_toString(this); }],
oacc_Assertions, 0, jl_Object, [], 4, 0, 0, 0]);
$rt_metadata([tt_ObjectExtractorStreamEngine$PointComparator, 0, jl_Object, [ju_Comparator], 0, 0, 0, 0,
jur_AbstractSet, 0, jl_Object, [], 1, 0, 0, ["$find0", function(var_1, var_2, var_3) { return jur_AbstractSet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_AbstractSet_findBack(this, var_1, var_2, var_3, var_4); }, "$getType0", function() { return jur_AbstractSet_getType(this); }, "$toString", function() { return jur_AbstractSet_toString(this); }, "$setNext", function(var_1) { jur_AbstractSet_setNext(this, var_1); }, "$first", function(var_1) { return jur_AbstractSet_first(this,
var_1); }, "$processBackRefReplacement", function() { return jur_AbstractSet_processBackRefReplacement(this); }, "$processSecondPass", function() { jur_AbstractSet_processSecondPass(this); }],
jn_Buffer, 0, jl_Object, [], 1, 3, 0, 0,
jl_Readable, 0, jl_Object, [], 3, 3, 0, 0,
jn_CharBuffer, 0, jn_Buffer, [jl_Comparable, jl_Appendable, jl_CharSequence, jl_Readable], 1, 3, 0, ["$toString", function() { return jn_CharBuffer_toString(this); }],
jn_ByteBuffer, 0, jn_Buffer, [jl_Comparable], 1, 3, 0, 0,
jnc_CodingErrorAction, 0, jl_Object, [], 0, 3, 0, 0,
ju_SortedMap, 0, jl_Object, [ju_Map], 3, 3, 0, 0,
ju_NavigableMap, 0, jl_Object, [ju_SortedMap], 3, 3, 0, 0,
ju_TreeMap, 0, ju_AbstractMap, [jl_Cloneable, ji_Serializable, ju_NavigableMap], 0, 3, 0, 0,
jl_Byte, "Byte", 6, jl_Number, [jl_Comparable], 0, 3, 0, ["$toString", function() { return jl_Byte_toString(this); }, "$equals", function(var_1) { return jl_Byte_equals(this, var_1); }, "$hashCode0", function() { return jl_Byte_hashCode(this); }, "$compareTo5", function(var_1) { return jl_Byte_compareTo0(this, var_1); }],
tt_TextChunk$DirectionalityOptions, 0, jl_Enum, [], 12, 0, 0, 0,
ju_Collections$_clinit_$lambda$_61_0, 0, jl_Object, [ju_Comparator], 0, 3, 0, ["$compare0", function(var_1, var_2) { return ju_Collections$_clinit_$lambda$_61_0_compare(this, var_1, var_2); }],
ju_Collections$_clinit_$lambda$_61_1, 0, jl_Object, [ju_Comparator], 0, 3, 0, 0,
jm_BigDecimal, 0, jl_Number, [jl_Comparable, ji_Serializable], 0, 3, jm_BigDecimal_$callClinit, 0,
jl_Double, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0,
jur_FSet, "FSet", 2, jur_AbstractSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_FSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_FSet_getName(this); }, "$hasConsumed", function(var_1) { return jur_FSet_hasConsumed(this, var_1); }],
jur_Lexer, 0, jl_Object, [], 0, 0, 0, 0,
jur_PatternSyntaxException, 0, jl_IllegalArgumentException, [], 0, 3, 0, 0,
jn_CharBufferImpl, 0, jn_CharBuffer, [], 1, 0, 0, ["$subSequence", function(var_1, var_2) { return jn_CharBufferImpl_subSequence0(this, var_1, var_2); }],
jn_CharBufferOverArray, 0, jn_CharBufferImpl, [], 0, 0, 0, 0,
jnc_CharsetEncoder, 0, jl_Object, [], 1, 3, 0, 0,
jnc_CoderResult, 0, jl_Object, [], 0, 3, 0, 0,
ju_Collections$5, 0, ju_AbstractSet, [], 4, 0, 0, 0,
ju_Collections$6, 0, ju_AbstractMap, [], 4, 0, 0, 0,
ju_Collections$3, 0, ju_AbstractList, [], 4, 0, 0, 0,
jur_NonCapFSet, "NonCapFSet", 2, jur_FSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_NonCapFSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_NonCapFSet_getName(this); }, "$hasConsumed", function(var_1) { return jur_NonCapFSet_hasConsumed(this, var_1); }],
jur_AheadFSet, "AheadFSet", 2, jur_FSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_AheadFSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_AheadFSet_getName(this); }],
jur_BehindFSet, "BehindFSet", 2, jur_FSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_BehindFSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_BehindFSet_getName(this); }],
jur_AtomicFSet, "AtomicFSet", 2, jur_FSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_AtomicFSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_AtomicFSet_getName(this); }, "$hasConsumed", function(var_1) { return jur_AtomicFSet_hasConsumed(this, var_1); }],
jur_FinalSet, "FinalSet", 2, jur_FSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_FinalSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_FinalSet_getName(this); }],
jur_LeafSet, 0, jur_AbstractSet, [], 1, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_LeafSet_matches(this, var_1, var_2, var_3); }, "$charCount0", function() { return jur_LeafSet_charCount(this); }, "$hasConsumed", function(var_1) { return jur_LeafSet_hasConsumed(this, var_1); }],
jur_EmptySet, "EmptySet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_EmptySet_accepts(this, var_1, var_2); }, "$find0", function(var_1, var_2, var_3) { return jur_EmptySet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_EmptySet_findBack(this, var_1, var_2, var_3, var_4); }, "$getName", function() { return jur_EmptySet_getName(this); }, "$hasConsumed", function(var_1) { return jur_EmptySet_hasConsumed(this, var_1); }],
jur_JointSet, "JointSet", 2, jur_AbstractSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_JointSet_matches(this, var_1, var_2, var_3); }, "$setNext", function(var_1) { jur_JointSet_setNext(this, var_1); }, "$getName", function() { return jur_JointSet_getName(this); }, "$first", function(var_1) { return jur_JointSet_first(this, var_1); }, "$hasConsumed", function(var_1) { return jur_JointSet_hasConsumed(this, var_1); }, "$processSecondPass", function() { jur_JointSet_processSecondPass(this);
}],
jur_NonCapJointSet, "NonCapJointSet", 2, jur_JointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_NonCapJointSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_NonCapJointSet_getName(this); }, "$hasConsumed", function(var_1) { return jur_NonCapJointSet_hasConsumed(this, var_1); }],
jur_AtomicJointSet, "AtomicJointSet", 2, jur_NonCapJointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_AtomicJointSet_matches(this, var_1, var_2, var_3); }, "$setNext", function(var_1) { jur_AtomicJointSet_setNext(this, var_1); }, "$getName", function() { return jur_AtomicJointSet_getName(this); }],
jur_PositiveLookAhead, "PositiveLookAhead", 2, jur_AtomicJointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PositiveLookAhead_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_PositiveLookAhead_hasConsumed(this, var_1); }, "$getName", function() { return jur_PositiveLookAhead_getName(this); }],
jur_NegativeLookAhead, "NegativeLookAhead", 2, jur_AtomicJointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_NegativeLookAhead_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_NegativeLookAhead_hasConsumed(this, var_1); }, "$getName", function() { return jur_NegativeLookAhead_getName(this); }],
jur_PositiveLookBehind, "PositiveLookBehind", 2, jur_AtomicJointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PositiveLookBehind_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_PositiveLookBehind_hasConsumed(this, var_1); }, "$getName", function() { return jur_PositiveLookBehind_getName(this); }],
jur_NegativeLookBehind, "NegativeLookBehind", 2, jur_AtomicJointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_NegativeLookBehind_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_NegativeLookBehind_hasConsumed(this, var_1); }, "$getName", function() { return jur_NegativeLookBehind_getName(this); }],
jur_SingleSet, "SingleSet", 2, jur_JointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_SingleSet_matches(this, var_1, var_2, var_3); }, "$find0", function(var_1, var_2, var_3) { return jur_SingleSet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_SingleSet_findBack(this, var_1, var_2, var_3, var_4); }, "$first", function(var_1) { return jur_SingleSet_first(this, var_1); }, "$processBackRefReplacement", function() { return jur_SingleSet_processBackRefReplacement(this);
}, "$processSecondPass", function() { jur_SingleSet_processSecondPass(this); }],
jn_ByteBufferImpl, 0, jn_ByteBuffer, [], 0, 0, 0, 0,
ju_TreeMap$1, 0, jl_Object, [ju_Comparator], 0, 0, 0, ["$compare0", function(var_1, var_2) { return ju_TreeMap$1_compare(this, var_1, var_2); }],
jm_BigInteger, 0, jl_Number, [jl_Comparable, ji_Serializable], 0, 3, 0, 0,
jl_Long, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0,
jm_Multiplication, 0, jl_Object, [], 0, 0, jm_Multiplication_$callClinit, 0,
jl_ArrayStoreException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
jur_SpecialToken, 0, jl_Object, [], 1, 0, 0, 0,
jur_AbstractCharClass, 0, jur_SpecialToken, [], 1, 0, 0, ["$getBits", function() { return jur_AbstractCharClass_getBits(this); }, "$getLowHighSurrogates", function() { return jur_AbstractCharClass_getLowHighSurrogates(this); }, "$getInstance0", function() { return jur_AbstractCharClass_getInstance(this); }, "$hasUCI", function() { return jur_AbstractCharClass_hasUCI(this); }],
jur_CharClass, "CharClass", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass_contains(this, var_1); }, "$getBits", function() { return jur_CharClass_getBits(this); }, "$getLowHighSurrogates", function() { return jur_CharClass_getLowHighSurrogates(this); }, "$getInstance0", function() { return jur_CharClass_getInstance(this); }, "$toString", function() { return jur_CharClass_toString(this); }, "$hasUCI", function() { return jur_CharClass_hasUCI(this); }]]);
$rt_metadata([ju_MissingResourceException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
jur_QuantifierSet, 0, jur_AbstractSet, [], 1, 0, 0, ["$first", function(var_1) { return jur_QuantifierSet_first(this, var_1); }, "$hasConsumed", function(var_1) { return jur_QuantifierSet_hasConsumed(this, var_1); }, "$processSecondPass", function() { jur_QuantifierSet_processSecondPass(this); }],
jur_LeafQuantifierSet, "LeafQuantifierSet", 2, jur_QuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_LeafQuantifierSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_LeafQuantifierSet_getName(this); }],
jur_CompositeQuantifierSet, "CompositeQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_CompositeQuantifierSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_CompositeQuantifierSet_getName(this); }],
jur_GroupQuantifierSet, "GroupQuantifierSet", 2, jur_QuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_GroupQuantifierSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_GroupQuantifierSet_getName(this); }],
jur_AltQuantifierSet, "AltQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_AltQuantifierSet_matches(this, var_1, var_2, var_3); }, "$setNext", function(var_1) { jur_AltQuantifierSet_setNext(this, var_1); }],
jur_UnifiedQuantifierSet, "UnifiedQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_UnifiedQuantifierSet_matches(this, var_1, var_2, var_3); }, "$find0", function(var_1, var_2, var_3) { return jur_UnifiedQuantifierSet_find(this, var_1, var_2, var_3); }],
ju_Dictionary, 0, jl_Object, [], 1, 3, 0, 0,
ju_Hashtable, 0, ju_Dictionary, [ju_Map, jl_Cloneable, ji_Serializable], 0, 3, 0, 0,
ju_Properties, 0, ju_Hashtable, [], 0, 3, 0, 0,
jur_Quantifier, "Quantifier", 2, jur_SpecialToken, [jl_Cloneable], 0, 0, 0, ["$toString", function() { return jur_Quantifier_toString(this); }],
jur_FSet$PossessiveFSet, "FSet$PossessiveFSet", 2, jur_AbstractSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_FSet$PossessiveFSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_FSet$PossessiveFSet_getName(this); }, "$hasConsumed", function(var_1) { return jur_FSet$PossessiveFSet_hasConsumed(this, var_1); }],
ju_BitSet, 0, jl_Object, [jl_Cloneable, ji_Serializable], 0, 3, 0, 0,
jur_LowHighSurrogateRangeSet, "LowHighSurrogateRangeSet", 2, jur_JointSet, [], 0, 0, 0, ["$getName", function() { return jur_LowHighSurrogateRangeSet_getName(this); }],
jur_CompositeRangeSet, "CompositeRangeSet", 2, jur_JointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_CompositeRangeSet_matches(this, var_1, var_2, var_3); }, "$setNext", function(var_1) { jur_CompositeRangeSet_setNext(this, var_1); }, "$getName", function() { return jur_CompositeRangeSet_getName(this); }, "$hasConsumed", function(var_1) { return jur_CompositeRangeSet_hasConsumed(this, var_1); }, "$first", function(var_1) { return jur_CompositeRangeSet_first(this, var_1); }],
jur_SupplRangeSet, "SupplRangeSet", 2, jur_JointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_SupplRangeSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_SupplRangeSet_getName(this); }, "$contains3", function(var_1) { return jur_SupplRangeSet_contains(this, var_1); }, "$first", function(var_1) { return jur_SupplRangeSet_first(this, var_1); }, "$setNext", function(var_1) { jur_SupplRangeSet_setNext(this, var_1); }, "$hasConsumed", function(var_1) { return jur_SupplRangeSet_hasConsumed(this,
var_1); }],
jur_UCISupplRangeSet, "UCISupplRangeSet", 2, jur_SupplRangeSet, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_UCISupplRangeSet_contains(this, var_1); }, "$getName", function() { return jur_UCISupplRangeSet_getName(this); }],
jur_UCIRangeSet, "UCIRangeSet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_UCIRangeSet_accepts(this, var_1, var_2); }, "$getName", function() { return jur_UCIRangeSet_getName(this); }],
jur_RangeSet, "RangeSet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_RangeSet_accepts(this, var_1, var_2); }, "$getName", function() { return jur_RangeSet_getName(this); }, "$first", function(var_1) { return jur_RangeSet_first(this, var_1); }],
jur_HangulDecomposedCharSet, "HangulDecomposedCharSet", 2, jur_JointSet, [], 0, 0, 0, ["$setNext", function(var_1) { jur_HangulDecomposedCharSet_setNext(this, var_1); }, "$getName", function() { return jur_HangulDecomposedCharSet_getName(this); }, "$matches", function(var_1, var_2, var_3) { return jur_HangulDecomposedCharSet_matches(this, var_1, var_2, var_3); }, "$first", function(var_1) { return jur_HangulDecomposedCharSet_first(this, var_1); }, "$hasConsumed", function(var_1) { return jur_HangulDecomposedCharSet_hasConsumed(this,
var_1); }],
jur_CharSet, "CharSet", 2, jur_LeafSet, [], 0, 0, 0, ["$charCount0", function() { return jur_CharSet_charCount(this); }, "$accepts", function(var_1, var_2) { return jur_CharSet_accepts(this, var_1, var_2); }, "$find0", function(var_1, var_2, var_3) { return jur_CharSet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_CharSet_findBack(this, var_1, var_2, var_3, var_4); }, "$getName", function() { return jur_CharSet_getName(this); }, "$first", function(var_1) {
return jur_CharSet_first(this, var_1); }],
jur_UCICharSet, "UCICharSet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_UCICharSet_accepts(this, var_1, var_2); }, "$getName", function() { return jur_UCICharSet_getName(this); }],
jur_CICharSet, "CICharSet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_CICharSet_accepts(this, var_1, var_2); }, "$getName", function() { return jur_CICharSet_getName(this); }],
jur_DecomposedCharSet, "DecomposedCharSet", 2, jur_JointSet, [], 0, 0, 0, ["$setNext", function(var_1) { jur_DecomposedCharSet_setNext(this, var_1); }, "$matches", function(var_1, var_2, var_3) { return jur_DecomposedCharSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_DecomposedCharSet_getName(this); }, "$first", function(var_1) { return jur_DecomposedCharSet_first(this, var_1); }, "$hasConsumed", function(var_1) { return jur_DecomposedCharSet_hasConsumed(this, var_1); }],
jur_UCIDecomposedCharSet, "UCIDecomposedCharSet", 2, jur_DecomposedCharSet, [], 0, 0, 0, 0,
jur_CIDecomposedCharSet, "CIDecomposedCharSet", 2, jur_DecomposedCharSet, [], 0, 0, 0, 0,
jur_PossessiveGroupQuantifierSet, "PossessiveGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PossessiveGroupQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_PosPlusGroupQuantifierSet, "PosPlusGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PosPlusGroupQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_AltGroupQuantifierSet, "AltGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_AltGroupQuantifierSet_matches(this, var_1, var_2, var_3); }, "$setNext", function(var_1) { jur_AltGroupQuantifierSet_setNext(this, var_1); }],
jur_PosAltGroupQuantifierSet, "PosAltGroupQuantifierSet", 2, jur_AltGroupQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PosAltGroupQuantifierSet_matches(this, var_1, var_2, var_3); }, "$setNext", function(var_1) { jur_PosAltGroupQuantifierSet_setNext(this, var_1); }],
jur_CompositeGroupQuantifierSet, "CompositeGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_CompositeGroupQuantifierSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_CompositeGroupQuantifierSet_getName(this); }],
jur_PosCompositeGroupQuantifierSet, "PosCompositeGroupQuantifierSet", 2, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PosCompositeGroupQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_ReluctantGroupQuantifierSet, "ReluctantGroupQuantifierSet", 2, jur_GroupQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_ReluctantGroupQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_RelAltGroupQuantifierSet, "RelAltGroupQuantifierSet", 2, jur_AltGroupQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_RelAltGroupQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_RelCompositeGroupQuantifierSet, "RelCompositeGroupQuantifierSet", 2, jur_CompositeGroupQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_RelCompositeGroupQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_DotAllQuantifierSet, "DotAllQuantifierSet", 2, jur_QuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_DotAllQuantifierSet_matches(this, var_1, var_2, var_3); }, "$find0", function(var_1, var_2, var_3) { return jur_DotAllQuantifierSet_find(this, var_1, var_2, var_3); }, "$getName", function() { return jur_DotAllQuantifierSet_getName(this); }],
jur_DotQuantifierSet, "DotQuantifierSet", 2, jur_QuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_DotQuantifierSet_matches(this, var_1, var_2, var_3); }, "$find0", function(var_1, var_2, var_3) { return jur_DotQuantifierSet_find(this, var_1, var_2, var_3); }, "$getName", function() { return jur_DotQuantifierSet_getName(this); }],
jur_AbstractLineTerminator, 0, jl_Object, [], 1, 0, 0, 0,
jur_PossessiveQuantifierSet, "PossessiveQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PossessiveQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_PossessiveAltQuantifierSet, "PossessiveAltQuantifierSet", 2, jur_AltQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PossessiveAltQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_PossessiveCompositeQuantifierSet, "PossessiveCompositeQuantifierSet", 2, jur_CompositeQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PossessiveCompositeQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_ReluctantQuantifierSet, "ReluctantQuantifierSet", 2, jur_LeafQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_ReluctantQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_ReluctantAltQuantifierSet, "ReluctantAltQuantifierSet", 2, jur_AltQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_ReluctantAltQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_ReluctantCompositeQuantifierSet, "ReluctantCompositeQuantifierSet", 2, jur_CompositeQuantifierSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_ReluctantCompositeQuantifierSet_matches(this, var_1, var_2, var_3); }],
jur_SOLSet, "SOLSet", 2, jur_AbstractSet, [], 4, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_SOLSet_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_SOLSet_hasConsumed(this, var_1); }, "$getName", function() { return jur_SOLSet_getName(this); }],
jur_WordBoundary, "WordBoundary", 2, jur_AbstractSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_WordBoundary_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_WordBoundary_hasConsumed(this, var_1); }, "$getName", function() { return jur_WordBoundary_getName(this); }],
jur_PreviousMatch, "PreviousMatch", 2, jur_AbstractSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_PreviousMatch_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_PreviousMatch_hasConsumed(this, var_1); }, "$getName", function() { return jur_PreviousMatch_getName(this); }],
jur_EOLSet, "EOLSet", 2, jur_AbstractSet, [], 4, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_EOLSet_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_EOLSet_hasConsumed(this, var_1); }, "$getName", function() { return jur_EOLSet_getName(this); }],
jur_EOISet, "EOISet", 2, jur_AbstractSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_EOISet_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_EOISet_hasConsumed(this, var_1); }, "$getName", function() { return jur_EOISet_getName(this); }],
jur_MultiLineSOLSet, "MultiLineSOLSet", 2, jur_AbstractSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_MultiLineSOLSet_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_MultiLineSOLSet_hasConsumed(this, var_1); }, "$getName", function() { return jur_MultiLineSOLSet_getName(this); }]]);
$rt_metadata([jur_DotAllSet, "DotAllSet", 2, jur_JointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_DotAllSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_DotAllSet_getName(this); }, "$setNext", function(var_1) { jur_DotAllSet_setNext(this, var_1); }, "$getType0", function() { return jur_DotAllSet_getType(this); }, "$hasConsumed", function(var_1) { return jur_DotAllSet_hasConsumed(this, var_1); }],
jur_DotSet, "DotSet", 2, jur_JointSet, [], 4, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_DotSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_DotSet_getName(this); }, "$setNext", function(var_1) { jur_DotSet_setNext(this, var_1); }, "$getType0", function() { return jur_DotSet_getType(this); }, "$hasConsumed", function(var_1) { return jur_DotSet_hasConsumed(this, var_1); }],
jur_UEOLSet, "UEOLSet", 2, jur_AbstractSet, [], 4, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_UEOLSet_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_UEOLSet_hasConsumed(this, var_1); }, "$getName", function() { return jur_UEOLSet_getName(this); }],
jur_UMultiLineEOLSet, "UMultiLineEOLSet", 2, jur_AbstractSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_UMultiLineEOLSet_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_UMultiLineEOLSet_hasConsumed(this, var_1); }, "$getName", function() { return jur_UMultiLineEOLSet_getName(this); }],
jur_MultiLineEOLSet, "MultiLineEOLSet", 2, jur_AbstractSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_MultiLineEOLSet_matches(this, var_1, var_2, var_3); }, "$hasConsumed", function(var_1) { return jur_MultiLineEOLSet_hasConsumed(this, var_1); }, "$getName", function() { return jur_MultiLineEOLSet_getName(this); }],
jur_CIBackReferenceSet, "CIBackReferenceSet", 2, jur_JointSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_CIBackReferenceSet_matches(this, var_1, var_2, var_3); }, "$setNext", function(var_1) { jur_CIBackReferenceSet_setNext(this, var_1); }, "$getName", function() { return jur_CIBackReferenceSet_getName(this); }, "$hasConsumed", function(var_1) { return jur_CIBackReferenceSet_hasConsumed(this, var_1); }],
jur_BackReferenceSet, "BackReferenceSet", 2, jur_CIBackReferenceSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_BackReferenceSet_matches(this, var_1, var_2, var_3); }, "$find0", function(var_1, var_2, var_3) { return jur_BackReferenceSet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_BackReferenceSet_findBack(this, var_1, var_2, var_3, var_4); }, "$first", function(var_1) { return jur_BackReferenceSet_first(this, var_1); }, "$getName",
function() { return jur_BackReferenceSet_getName(this); }],
jur_UCIBackReferenceSet, "UCIBackReferenceSet", 2, jur_CIBackReferenceSet, [], 0, 0, 0, ["$matches", function(var_1, var_2, var_3) { return jur_UCIBackReferenceSet_matches(this, var_1, var_2, var_3); }, "$getName", function() { return jur_UCIBackReferenceSet_getName(this); }],
jur_SequenceSet, "SequenceSet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_SequenceSet_accepts(this, var_1, var_2); }, "$find0", function(var_1, var_2, var_3) { return jur_SequenceSet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_SequenceSet_findBack(this, var_1, var_2, var_3, var_4); }, "$getName", function() { return jur_SequenceSet_getName(this); }, "$first", function(var_1) { return jur_SequenceSet_first(this, var_1);
}],
jur_UCISequenceSet, "UCISequenceSet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_UCISequenceSet_accepts(this, var_1, var_2); }, "$getName", function() { return jur_UCISequenceSet_getName(this); }],
jur_CISequenceSet, "CISequenceSet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_CISequenceSet_accepts(this, var_1, var_2); }, "$getName", function() { return jur_CISequenceSet_getName(this); }],
jn_ByteOrder, 0, jl_Object, [], 4, 3, 0, 0,
jur_AbstractCharClass$PredefinedCharacterClasses, 0, jl_Object, [], 4, 0, 0, 0,
jur_AbstractCharClass$LazyCharClass, 0, jl_Object, [], 1, 0, 0, 0,
jur_UCISupplCharSet, "UCISupplCharSet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_UCISupplCharSet_accepts(this, var_1, var_2); }, "$getName", function() { return jur_UCISupplCharSet_getName(this); }],
jur_LowSurrogateCharSet, "LowSurrogateCharSet", 2, jur_JointSet, [], 0, 0, 0, ["$setNext", function(var_1) { jur_LowSurrogateCharSet_setNext(this, var_1); }, "$matches", function(var_1, var_2, var_3) { return jur_LowSurrogateCharSet_matches(this, var_1, var_2, var_3); }, "$find0", function(var_1, var_2, var_3) { return jur_LowSurrogateCharSet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_LowSurrogateCharSet_findBack(this, var_1, var_2, var_3, var_4); }, "$getName",
function() { return jur_LowSurrogateCharSet_getName(this); }, "$first", function(var_1) { return jur_LowSurrogateCharSet_first(this, var_1); }, "$hasConsumed", function(var_1) { return jur_LowSurrogateCharSet_hasConsumed(this, var_1); }],
jur_HighSurrogateCharSet, "HighSurrogateCharSet", 2, jur_JointSet, [], 0, 0, 0, ["$setNext", function(var_1) { jur_HighSurrogateCharSet_setNext(this, var_1); }, "$matches", function(var_1, var_2, var_3) { return jur_HighSurrogateCharSet_matches(this, var_1, var_2, var_3); }, "$find0", function(var_1, var_2, var_3) { return jur_HighSurrogateCharSet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_HighSurrogateCharSet_findBack(this, var_1, var_2, var_3, var_4);
}, "$getName", function() { return jur_HighSurrogateCharSet_getName(this); }, "$first", function(var_1) { return jur_HighSurrogateCharSet_first(this, var_1); }, "$hasConsumed", function(var_1) { return jur_HighSurrogateCharSet_hasConsumed(this, var_1); }],
jur_SupplCharSet, "SupplCharSet", 2, jur_LeafSet, [], 0, 0, 0, ["$accepts", function(var_1, var_2) { return jur_SupplCharSet_accepts(this, var_1, var_2); }, "$find0", function(var_1, var_2, var_3) { return jur_SupplCharSet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_SupplCharSet_findBack(this, var_1, var_2, var_3, var_4); }, "$getName", function() { return jur_SupplCharSet_getName(this); }, "$first", function(var_1) { return jur_SupplCharSet_first(this,
var_1); }],
jur_AbstractLineTerminator$1, 0, jur_AbstractLineTerminator, [], 4, 0, 0, ["$isLineTerminator", function(var_1) { return jur_AbstractLineTerminator$1_isLineTerminator(this, var_1); }, "$isAfterLineTerminator", function(var_1, var_2) { return jur_AbstractLineTerminator$1_isAfterLineTerminator(this, var_1, var_2); }],
jur_AbstractLineTerminator$2, 0, jur_AbstractLineTerminator, [], 4, 0, 0, ["$isLineTerminator", function(var_1) { return jur_AbstractLineTerminator$2_isLineTerminator(this, var_1); }, "$isAfterLineTerminator", function(var_1, var_2) { return jur_AbstractLineTerminator$2_isAfterLineTerminator(this, var_1, var_2); }],
jur_SequenceSet$IntHash, 0, jl_Object, [], 0, 0, 0, 0,
jm_Conversion, 0, jl_Object, [], 0, 0, 0, 0,
jm_Elementary, 0, jl_Object, [], 0, 0, 0, 0,
jur_IntHash, 0, jl_Object, [], 0, 0, 0, 0,
ju_Enumeration, 0, jl_Object, [], 3, 3, 0, 0,
ju_Hashtable$1, 0, jl_Object, [ju_Enumeration], 4, 0, 0, 0,
ju_Hashtable$2, 0, jl_Object, [ju_Iterator], 4, 0, 0, 0,
jur_AbstractCharClass$LazySpace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazySpace_computeValue(this); }],
jur_AbstractCharClass$LazyDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyDigit_computeValue(this); }],
jur_AbstractCharClass$LazyLower, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyLower_computeValue(this); }],
jur_AbstractCharClass$LazyUpper, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyUpper_computeValue(this); }],
jur_AbstractCharClass$LazyASCII, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyASCII_computeValue(this); }],
jur_AbstractCharClass$LazyAlpha, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyAlpha_computeValue(this); }],
jur_AbstractCharClass$LazyAlnum, 0, jur_AbstractCharClass$LazyAlpha, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyAlnum_computeValue(this); }],
jur_AbstractCharClass$LazyPunct, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyPunct_computeValue(this); }],
jur_AbstractCharClass$LazyGraph, 0, jur_AbstractCharClass$LazyAlnum, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyGraph_computeValue(this); }],
jur_AbstractCharClass$LazyPrint, 0, jur_AbstractCharClass$LazyGraph, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyPrint_computeValue(this); }],
jur_AbstractCharClass$LazyBlank, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyBlank_computeValue(this); }],
jur_AbstractCharClass$LazyCntrl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyCntrl_computeValue(this); }],
jur_AbstractCharClass$LazyXDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyXDigit_computeValue(this); }],
jur_AbstractCharClass$LazyJavaLowerCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaLowerCase_computeValue(this); }],
jur_AbstractCharClass$LazyJavaUpperCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaUpperCase_computeValue(this); }],
jur_AbstractCharClass$LazyJavaWhitespace, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaWhitespace_computeValue(this); }],
jur_AbstractCharClass$LazyJavaMirrored, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaMirrored_computeValue(this); }],
jur_AbstractCharClass$LazyJavaDefined, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaDefined_computeValue(this); }],
jur_AbstractCharClass$LazyJavaDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaDigit_computeValue(this); }],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaIdentifierIgnorable_computeValue(this); }],
jur_AbstractCharClass$LazyJavaISOControl, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaISOControl_computeValue(this); }],
jur_AbstractCharClass$LazyJavaJavaIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaJavaIdentifierPart_computeValue(this); }],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaJavaIdentifierStart_computeValue(this); }]]);
$rt_metadata([jur_AbstractCharClass$LazyJavaLetter, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaLetter_computeValue(this); }],
jur_AbstractCharClass$LazyJavaLetterOrDigit, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaLetterOrDigit_computeValue(this); }],
jur_AbstractCharClass$LazyJavaSpaceChar, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaSpaceChar_computeValue(this); }],
jur_AbstractCharClass$LazyJavaTitleCase, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaTitleCase_computeValue(this); }],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart_computeValue(this); }],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart_computeValue(this); }],
jur_AbstractCharClass$LazyWord, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyWord_computeValue(this); }],
jur_AbstractCharClass$LazyNonWord, 0, jur_AbstractCharClass$LazyWord, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyNonWord_computeValue(this); }],
jur_AbstractCharClass$LazyNonSpace, 0, jur_AbstractCharClass$LazySpace, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyNonSpace_computeValue(this); }],
jur_AbstractCharClass$LazyNonDigit, 0, jur_AbstractCharClass$LazyDigit, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyNonDigit_computeValue(this); }],
jur_AbstractCharClass$LazyRange, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyRange_computeValue(this); }],
jur_AbstractCharClass$LazySpecialsBlock, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazySpecialsBlock_computeValue(this); }],
jur_AbstractCharClass$LazyCategory, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyCategory_computeValue(this); }],
jur_AbstractCharClass$LazyCategoryScope, 0, jur_AbstractCharClass$LazyCharClass, [], 0, 0, 0, ["$computeValue", function() { return jur_AbstractCharClass$LazyCategoryScope_computeValue(this); }],
ju_Hashtable$Entry, 0, ju_MapEntry, [], 0, 0, 0, 0,
otjc_JSString, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0,
otciu_UnicodeHelper$Range, "UnicodeHelper$Range", 14, jl_Object, [], 0, 3, 0, 0,
ju_AbstractList$SubAbstractList, 0, ju_AbstractList, [], 0, 0, 0, ["$get", function(var_1) { return ju_AbstractList$SubAbstractList_get(this, var_1); }, "$size", function() { return ju_AbstractList$SubAbstractList_size(this); }],
ju_AbstractList$SubAbstractListRandomAccess, 0, ju_AbstractList$SubAbstractList, [ju_RandomAccess], 4, 0, 0, 0,
tt_CellPosition, "CellPosition", 20, jl_Object, [jl_Comparable], 0, 0, 0, ["$hashCode0", function() { return tt_CellPosition_hashCode(this); }, "$equals", function(var_1) { return tt_CellPosition_equals(this, var_1); }, "$compareTo5", function(var_1) { return tt_CellPosition_compareTo(this, var_1); }],
tt_TableWithRulingLines, "TableWithRulingLines", 20, tt_Table, [], 0, 3, 0, 0,
cjag_PathIterator, 0, jl_Object, [], 3, 3, 0, 0,
cjag_Path2D$Iterator, 0, jl_Object, [cjag_PathIterator], 1, 0, 0, 0,
cjag_Path2D$Float$TxIterator, 0, cjag_Path2D$Iterator, [], 0, 0, 0, ["$currentSegment", function(var_1) { return cjag_Path2D$Float$TxIterator_currentSegment(this, var_1); }],
cjag_Path2D$Float$CopyIterator, 0, cjag_Path2D$Iterator, [], 0, 0, 0, ["$currentSegment", function(var_1) { return cjag_Path2D$Float$CopyIterator_currentSegment(this, var_1); }],
tt_CohenSutherlandClipping, 0, jl_Object, [], 4, 3, 0, 0,
jnci_BufferedEncoder, 0, jnc_CharsetEncoder, [], 1, 3, 0, 0,
jnci_UTF8Encoder, 0, jnci_BufferedEncoder, [], 0, 3, 0, 0,
jm_RoundingMode, 0, jl_Enum, [], 12, 3, 0, 0,
jm_BitLevel, 0, jl_Object, [], 0, 0, 0, 0,
jur_AbstractCharClass$1, "AbstractCharClass$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$1_contains(this, var_1); }],
jur_AbstractCharClass$2, "AbstractCharClass$2", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$2_contains(this, var_1); }],
jur_CharClass$18, "CharClass$18", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$18_contains(this, var_1); }, "$toString", function() { return jur_CharClass$18_toString(this); }],
jur_CharClass$1, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$1_contains(this, var_1); }],
jur_CharClass$3, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$3_contains(this, var_1); }],
jur_CharClass$2, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$2_contains(this, var_1); }],
jur_CharClass$5, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$5_contains(this, var_1); }],
jur_CharClass$4, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$4_contains(this, var_1); }],
jur_CharClass$7, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$7_contains(this, var_1); }],
jur_CharClass$6, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$6_contains(this, var_1); }],
jur_CharClass$9, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$9_contains(this, var_1); }],
jur_CharClass$8, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$8_contains(this, var_1); }],
jur_CharClass$11, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$11_contains(this, var_1); }],
jur_CharClass$10, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$10_contains(this, var_1); }],
jur_CharClass$13, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$13_contains(this, var_1); }],
jur_CharClass$12, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$12_contains(this, var_1); }],
jur_CharClass$15, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$15_contains(this, var_1); }],
jur_CharClass$14, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$14_contains(this, var_1); }],
jur_CharClass$17, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$17_contains(this, var_1); }],
jur_CharClass$16, 0, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_CharClass$16_contains(this, var_1); }]]);
$rt_metadata([ju_ConcurrentModificationException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
p_PDFTextStripper$FinishConsumer, 0, jl_Object, [otj_JSObject], 3, 3, 0, 0,
p_PDFTextStripper$getTextAsync$lambda$_7_0, 0, jl_Object, [p_PDFTextStripper$FinishConsumer], 0, 3, 0, ["$complete$exported$0", function(var_1) { return p_PDFTextStripper$getTextAsync$lambda$_7_0_complete$exported$0(this, var_1); }],
tt_Cell, "Cell", 20, tt_RectangularTextContainer, [], 0, 3, 0, ["$getText1", function() { return tt_Cell_getText0(this); }, "$getTextElements", function() { return tt_Cell_getTextElements(this); }],
tte_SpreadsheetExtractionAlgorithm$PolygonVertex, "SpreadsheetExtractionAlgorithm$PolygonVertex", 21, jl_Object, [], 0, 0, 0, ["$equals", function(var_1) { return tte_SpreadsheetExtractionAlgorithm$PolygonVertex_equals(this, var_1); }, "$hashCode0", function() { return tte_SpreadsheetExtractionAlgorithm$PolygonVertex_hashCode(this); }, "$toString", function() { return tte_SpreadsheetExtractionAlgorithm$PolygonVertex_toString(this); }],
tte_SpreadsheetExtractionAlgorithm$Direction, 0, jl_Enum, [], 12, 0, 0, 0,
tt_QuickSort, 0, jl_Object, [], 4, 3, 0, 0,
jl_Object$Monitor, 0, jl_Object, [], 0, 0, 0, 0,
jl_Runnable, 0, jl_Object, [], 3, 3, 0, 0,
jl_Thread, 0, jl_Object, [jl_Runnable], 0, 3, 0, 0,
jl_IllegalStateException, "IllegalStateException", 6, jl_Exception, [], 0, 3, 0, 0,
jl_IllegalMonitorStateException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
cjag_Area, 0, jl_Object, [cja_Shape], 0, 3, 0, 0,
cjag_Rectangle2D$Double, 0, cjag_Rectangle2D, [ji_Serializable], 0, 3, 0, ["$getX", function() { return cjag_Rectangle2D$Double_getX(this); }, "$getY", function() { return cjag_Rectangle2D$Double_getY(this); }, "$getWidth", function() { return cjag_Rectangle2D$Double_getWidth(this); }, "$getHeight", function() { return cjag_Rectangle2D$Double_getHeight(this); }, "$setRect", function(var_1, var_2, var_3, var_4) { cjag_Rectangle2D$Double_setRect(this, var_1, var_2, var_3, var_4); }, "$outcode", function(var_1,
var_2) { return cjag_Rectangle2D$Double_outcode(this, var_1, var_2); }],
tt_Ruling$4, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tt_Ruling$4_compare0(this, var_1, var_2); }],
tt_Ruling$1, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tt_Ruling$1_compare0(this, var_1, var_2); }],
tt_Ruling$2, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tt_Ruling$2_compare0(this, var_1, var_2); }],
tt_Ruling$1SortObject, "Ruling$1SortObject", 20, jl_Object, [], 0, 0, 0, 0,
tt_Ruling$SOType, 0, jl_Enum, [], 12, 0, 0, 0,
tt_Ruling$3, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tt_Ruling$3_compare0(this, var_1, var_2); }],
tt_Ruling$5, 0, jl_Object, [], 32, 0, tt_Ruling$5_$callClinit, 0,
otp_PlatformQueue, 0, jl_Object, [otj_JSObject], 1, 3, 0, 0,
otp_PlatformRunnable, 0, jl_Object, [], 3, 3, 0, 0,
jl_Object$monitorExit$lambda$_8_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0,
jl_UnsupportedOperationException, "UnsupportedOperationException", 6, jl_RuntimeException, [], 0, 3, 0, 0,
tt_QuickSort$1, 0, jl_Object, [ju_Comparator], 4, 0, 0, 0,
ju_Vector, 0, ju_AbstractList, [ju_List, ju_RandomAccess, jl_Cloneable, ji_Serializable], 0, 3, 0, 0,
ju_Stack, 0, ju_Vector, [], 0, 3, 0, 0,
tt_TableWithRulingLines$1, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tt_TableWithRulingLines$1_compare0(this, var_1, var_2); }],
jl_Object$monitorEnterWait$lambda$_6_0, 0, jl_Object, [otp_PlatformRunnable], 0, 3, 0, 0,
csag_Curve, 0, jl_Object, [], 1, 3, 0, ["$toString", function() { return csag_Curve_toString(this); }, "$controlPointString", function() { return csag_Curve_controlPointString(this); }, "$compareTo9", function(var_1, var_2) { return csag_Curve_compareTo(this, var_1, var_2); }],
csag_AreaOp, 0, jl_Object, [], 1, 3, 0, 0,
csag_AreaOp$NZWindOp, 0, csag_AreaOp, [], 0, 3, 0, ["$newRow", function() { csag_AreaOp$NZWindOp_newRow(this); }, "$classify", function(var_1) { return csag_AreaOp$NZWindOp_classify(this, var_1); }, "$getState", function() { return csag_AreaOp$NZWindOp_getState(this); }],
csag_AreaOp$EOWindOp, 0, csag_AreaOp, [], 0, 3, 0, ["$newRow", function() { csag_AreaOp$EOWindOp_newRow(this); }, "$classify", function(var_1) { return csag_AreaOp$EOWindOp_classify(this, var_1); }, "$getState", function() { return csag_AreaOp$EOWindOp_getState(this); }],
csag_Order1, "Order1", 28, csag_Curve, [], 4, 0, 0, ["$getOrder", function() { return csag_Order1_getOrder(this); }, "$getXTop", function() { return csag_Order1_getXTop(this); }, "$getYTop", function() { return csag_Order1_getYTop(this); }, "$getYBot", function() { return csag_Order1_getYBot(this); }, "$getXMin", function() { return csag_Order1_getXMin(this); }, "$getXMax", function() { return csag_Order1_getXMax(this); }, "$getX0", function() { return csag_Order1_getX0(this); }, "$getY0", function() { return csag_Order1_getY0(this);
}, "$getX1", function() { return csag_Order1_getX1(this); }, "$getY1", function() { return csag_Order1_getY1(this); }, "$XforY", function(var_1) { return csag_Order1_XforY(this, var_1); }, "$TforY", function(var_1) { return csag_Order1_TforY(this, var_1); }, "$XforT", function(var_1) { return csag_Order1_XforT(this, var_1); }, "$YforT", function(var_1) { return csag_Order1_YforT(this, var_1); }, "$nextVertical", function(var_1, var_2) { return csag_Order1_nextVertical(this, var_1, var_2); }, "$getSubCurve0",
function(var_1, var_2, var_3) { return csag_Order1_getSubCurve(this, var_1, var_2, var_3); }, "$getReversedCurve", function() { return csag_Order1_getReversedCurve(this); }, "$compareTo9", function(var_1, var_2) { return csag_Order1_compareTo(this, var_1, var_2); }, "$getSegment", function(var_1) { return csag_Order1_getSegment(this, var_1); }],
csag_Order0, "Order0", 28, csag_Curve, [], 4, 0, 0, ["$getOrder", function() { return csag_Order0_getOrder(this); }, "$getXTop", function() { return csag_Order0_getXTop(this); }, "$getYTop", function() { return csag_Order0_getYTop(this); }, "$getYBot", function() { return csag_Order0_getYBot(this); }, "$getXMin", function() { return csag_Order0_getXMin(this); }, "$getXMax", function() { return csag_Order0_getXMax(this); }, "$getX0", function() { return csag_Order0_getX0(this); }, "$getY0", function() { return csag_Order0_getY0(this);
}, "$getX1", function() { return csag_Order0_getX1(this); }, "$getY1", function() { return csag_Order0_getY1(this); }, "$XforY", function(var_1) { return csag_Order0_XforY(this, var_1); }, "$TforY", function(var_1) { return csag_Order0_TforY(this, var_1); }, "$XforT", function(var_1) { return csag_Order0_XforT(this, var_1); }, "$YforT", function(var_1) { return csag_Order0_YforT(this, var_1); }, "$nextVertical", function(var_1, var_2) { return csag_Order0_nextVertical(this, var_1, var_2); }, "$getSubCurve0",
function(var_1, var_2, var_3) { return csag_Order0_getSubCurve(this, var_1, var_2, var_3); }, "$getReversedCurve", function() { return csag_Order0_getReversedCurve(this); }, "$getSegment", function(var_1) { return csag_Order0_getSegment(this, var_1); }],
csag_Order2, "Order2", 28, csag_Curve, [], 4, 0, 0, ["$getOrder", function() { return csag_Order2_getOrder(this); }, "$getXTop", function() { return csag_Order2_getXTop(this); }, "$getYTop", function() { return csag_Order2_getYTop(this); }, "$getYBot", function() { return csag_Order2_getYBot(this); }, "$getXMin", function() { return csag_Order2_getXMin(this); }, "$getXMax", function() { return csag_Order2_getXMax(this); }, "$getX0", function() { return csag_Order2_getX0(this); }, "$getY0", function() { return csag_Order2_getY0(this);
}, "$getX1", function() { return csag_Order2_getX1(this); }, "$getY1", function() { return csag_Order2_getY1(this); }, "$XforY", function(var_1) { return csag_Order2_XforY(this, var_1); }, "$TforY", function(var_1) { return csag_Order2_TforY(this, var_1); }, "$XforT", function(var_1) { return csag_Order2_XforT(this, var_1); }, "$YforT", function(var_1) { return csag_Order2_YforT(this, var_1); }, "$nextVertical", function(var_1, var_2) { return csag_Order2_nextVertical(this, var_1, var_2); }, "$getSubCurve0",
function(var_1, var_2, var_3) { return csag_Order2_getSubCurve(this, var_1, var_2, var_3); }, "$getReversedCurve", function() { return csag_Order2_getReversedCurve(this); }, "$getSegment", function(var_1) { return csag_Order2_getSegment(this, var_1); }, "$controlPointString", function() { return csag_Order2_controlPointString(this); }],
csag_Order3, "Order3", 28, csag_Curve, [], 4, 0, 0, ["$getOrder", function() { return csag_Order3_getOrder(this); }, "$getXTop", function() { return csag_Order3_getXTop(this); }, "$getYTop", function() { return csag_Order3_getYTop(this); }, "$getYBot", function() { return csag_Order3_getYBot(this); }, "$getXMin", function() { return csag_Order3_getXMin(this); }, "$getXMax", function() { return csag_Order3_getXMax(this); }, "$getX0", function() { return csag_Order3_getX0(this); }, "$getY0", function() { return csag_Order3_getY0(this);
}, "$getX1", function() { return csag_Order3_getX1(this); }, "$getY1", function() { return csag_Order3_getY1(this); }, "$TforY", function(var_1) { return csag_Order3_TforY(this, var_1); }, "$XforY", function(var_1) { return csag_Order3_XforY(this, var_1); }, "$XforT", function(var_1) { return csag_Order3_XforT(this, var_1); }, "$YforT", function(var_1) { return csag_Order3_YforT(this, var_1); }, "$nextVertical", function(var_1, var_2) { return csag_Order3_nextVertical(this, var_1, var_2); }, "$getSubCurve0",
function(var_1, var_2, var_3) { return csag_Order3_getSubCurve(this, var_1, var_2, var_3); }, "$getReversedCurve", function() { return csag_Order3_getReversedCurve(this); }, "$getSegment", function(var_1) { return csag_Order3_getSegment(this, var_1); }, "$controlPointString", function() { return csag_Order3_controlPointString(this); }],
cjag_QuadCurve2D, 0, jl_Object, [cja_Shape, jl_Cloneable], 1, 3, 0, 0,
csag_AreaOp$1, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return csag_AreaOp$1_compare(this, var_1, var_2); }],
csag_CurveLink, "CurveLink", 28, jl_Object, [], 4, 0, 0, 0,
csag_ChainEnd, "ChainEnd", 28, jl_Object, [], 4, 0, 0, 0,
jur_BackReferencedSingleSet, "BackReferencedSingleSet", 2, jur_SingleSet, [], 0, 0, 0, ["$find0", function(var_1, var_2, var_3) { return jur_BackReferencedSingleSet_find(this, var_1, var_2, var_3); }, "$findBack", function(var_1, var_2, var_3, var_4) { return jur_BackReferencedSingleSet_findBack(this, var_1, var_2, var_3, var_4); }, "$processBackRefReplacement", function() { return jur_BackReferencedSingleSet_processBackRefReplacement(this); }],
ju_AbstractMap$KeySet, 0, ju_AbstractSet, [], 0, 0, 0, ["$iterator", function() { return ju_AbstractMap$KeySet_iterator(this); }, "$size", function() { return ju_AbstractMap$KeySet_size(this); }],
cjl_Character, 0, jl_Object, [ji_Serializable, jl_Comparable], 4, 3, 0, 0,
cjag_IllegalPathStateException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
cgh_Arrays, 0, jl_Object, [], 0, 3, 0, 0,
oljg_Envelope, 0, jl_Object, [jl_Comparable, ji_Serializable], 0, 3, 0, 0,
cjag_Path2D$Double, 0, cjag_Path2D, [ji_Serializable], 0, 3, 0, ["$needRoom", function(var_1, var_2) { cjag_Path2D$Double_needRoom(this, var_1, var_2); }],
ju_HashMap$1, 0, ju_AbstractSet, [], 0, 0, 0, ["$size", function() { return ju_HashMap$1_size(this); }, "$iterator", function() { return ju_HashMap$1_iterator(this); }]]);
$rt_metadata([ju_TreeMap$EntrySet, 0, ju_AbstractSet, [], 0, 0, 0, 0,
cjag_RectIterator, 0, jl_Object, [cjag_PathIterator], 0, 0, 0, 0,
ju_EmptyStackException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
ju_AbstractMap$SimpleEntry, 0, jl_Object, [ju_Map$Entry, ji_Serializable], 0, 3, 0, ["$equals", function(var_1) { return ju_AbstractMap$SimpleEntry_equals(this, var_1); }, "$hashCode0", function() { return ju_AbstractMap$SimpleEntry_hashCode(this); }, "$toString", function() { return ju_AbstractMap$SimpleEntry_toString(this); }],
csag_Edge, "Edge", 28, jl_Object, [], 4, 0, 0, ["$toString", function() { return csag_Edge_toString(this); }],
oahlu_BinarySearch, 0, jl_Object, [], 0, 3, 0, 0,
jur_MatchResult, 0, jl_Object, [], 3, 3, 0, 0,
jur_Matcher, 0, jl_Object, [jur_MatchResult], 4, 3, 0, 0,
ju_TreeMap$TreeNode, "TreeMap$TreeNode", 1, ju_AbstractMap$SimpleEntry, [], 0, 0, 0, 0,
jl_AbstractStringBuilder$Constants, 0, jl_Object, [], 0, 0, 0, 0,
otcit_DoubleAnalyzer, 0, jl_Object, [], 4, 3, 0, 0,
otcit_DoubleAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0,
jl_ArithmeticException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
jm_BigDecimal$1, 0, jl_Object, [], 32, 0, jm_BigDecimal$1_$callClinit, 0,
otcit_FloatAnalyzer$Result, 0, jl_Object, [], 0, 3, 0, 0,
cjt_Normalizer$Form, 0, jl_Enum, [], 12, 3, 0, 0,
cjt_Normalizer, 0, jl_Object, [], 4, 3, 0, 0,
ju_AbstractMap$KeySet$1, 0, jl_Object, [ju_Iterator], 0, 0, 0, ["$next", function() { return ju_AbstractMap$KeySet$1_next(this); }],
ji_Reader, 0, jl_Object, [ji_Closeable], 1, 3, 0, 0,
ju_HashMap$AbstractMapIterator, 0, jl_Object, [], 0, 0, 0, 0,
ju_HashMap$KeyIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, ["$next", function() { return ju_HashMap$KeyIterator_next(this); }],
ju_NoSuchElementException, 0, jl_RuntimeException, [], 0, 3, 0, 0,
jm_Division, 0, jl_Object, [], 0, 0, 0, 0,
ju_ListIterator, 0, jl_Object, [ju_Iterator], 3, 3, 0, 0,
ju_AbstractList$SubAbstractList$SubAbstractListIterator, 0, jl_Object, [ju_ListIterator], 4, 0, 0, 0,
jur_AbstractCharClass$LazyJavaLowerCase$1, "AbstractCharClass$LazyJavaLowerCase$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaLowerCase$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaUpperCase$1, "AbstractCharClass$LazyJavaUpperCase$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaUpperCase$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaWhitespace$1, "AbstractCharClass$LazyJavaWhitespace$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaWhitespace$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaMirrored$1, "AbstractCharClass$LazyJavaMirrored$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaMirrored$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaDefined$1, "AbstractCharClass$LazyJavaDefined$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaDefined$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaDigit$1, "AbstractCharClass$LazyJavaDigit$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaDigit$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1, "AbstractCharClass$LazyJavaIdentifierIgnorable$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaIdentifierIgnorable$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaISOControl$1, "AbstractCharClass$LazyJavaISOControl$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaISOControl$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1, "AbstractCharClass$LazyJavaJavaIdentifierPart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaJavaIdentifierPart$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1, "AbstractCharClass$LazyJavaJavaIdentifierStart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaJavaIdentifierStart$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaLetter$1, "AbstractCharClass$LazyJavaLetter$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaLetter$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaLetterOrDigit$1, "AbstractCharClass$LazyJavaLetterOrDigit$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaLetterOrDigit$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaSpaceChar$1, "AbstractCharClass$LazyJavaSpaceChar$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaSpaceChar$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaTitleCase$1, "AbstractCharClass$LazyJavaTitleCase$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaTitleCase$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierPart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaUnicodeIdentifierPart$1_contains(this, var_1); }],
jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1, "AbstractCharClass$LazyJavaUnicodeIdentifierStart$1", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_AbstractCharClass$LazyJavaUnicodeIdentifierStart$1_contains(this, var_1); }],
jur_UnicodeCategory, "UnicodeCategory", 2, jur_AbstractCharClass, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_UnicodeCategory_contains(this, var_1); }],
jur_UnicodeCategoryScope, "UnicodeCategoryScope", 2, jur_UnicodeCategory, [], 0, 0, 0, ["$contains3", function(var_1) { return jur_UnicodeCategoryScope_contains(this, var_1); }],
ju_Objects, 0, jl_Object, [], 4, 3, 0, 0,
ju_Vector$1, 0, jl_Object, [ju_Enumeration], 0, 0, 0, 0,
cjag_AreaIterator, 0, jl_Object, [cjag_PathIterator], 0, 0, 0, 0,
cjt_Normalizer$1, 0, jl_Object, [], 32, 0, cjt_Normalizer$1_$callClinit, 0,
oacc_IOUtils, 0, jl_Object, [], 0, 0, 0, 0,
ju_TreeMap$EntryIterator, 0, jl_Object, [ju_Iterator], 0, 0, 0, 0,
jur_MatchResultImpl, 0, jl_Object, [jur_MatchResult], 0, 0, 0, 0]);
$rt_metadata([oljis_Boundable, 0, jl_Object, [], 3, 3, 0, 0,
oljis_ItemBoundable, "ItemBoundable", 18, jl_Object, [oljis_Boundable, ji_Serializable], 0, 3, 0, ["$getBounds0", function() { return oljis_ItemBoundable_getBounds(this); }],
otcit_FloatAnalyzer, 0, jl_Object, [], 4, 3, 0, 0,
oacc_CSVFormat$1, 0, jl_Object, [], 32, 0, oacc_CSVFormat$1_$callClinit, 0,
oljis_AbstractNode, 0, jl_Object, [oljis_Boundable, ji_Serializable], 1, 3, 0, ["$getBounds0", function() { return oljis_AbstractNode_getBounds(this); }],
jnc_CoderMalfunctionError, "CoderMalfunctionError", 4, jl_Error, [], 0, 3, 0, 0,
cjag_Point2D$Double, 0, cjag_Point2D, [ji_Serializable], 0, 3, 0, ["$getX", function() { return cjag_Point2D$Double_getX(this); }, "$getY", function() { return cjag_Point2D$Double_getY(this); }],
tt_Page$1, 0, jl_Object, [ju_Comparator], 0, 0, 0, ["$compare0", function(var_1, var_2) { return tt_Page$1_compare0(this, var_1, var_2); }],
tt_Page$2, 0, jl_Object, [ju_Comparator], 0, 0, 0, ["$compare0", function(var_1, var_2) { return tt_Page$2_compare0(this, var_1, var_2); }],
ju_Formatter, 0, jl_Object, [ji_Closeable, ji_Flushable], 4, 3, 0, 0,
ju_Locale, 0, jl_Object, [jl_Cloneable, ji_Serializable], 4, 3, 0, 0,
ju_AbstractList$TListIteratorImpl, 0, jl_Object, [ju_ListIterator], 0, 0, 0, 0,
otciu_CLDRHelper, 0, jl_Object, [], 4, 3, 0, 0,
jnci_BufferedEncoder$Controller, 0, jl_Object, [], 0, 3, 0, 0,
ju_Formatter$FormatWriter, 0, jl_Object, [], 0, 0, 0, 0,
oljis_STRtree$STRtreeNode, "STRtree$STRtreeNode", 18, oljis_AbstractNode, [], 4, 0, 0, 0,
jl_ArrayIndexOutOfBoundsException, 0, jl_IndexOutOfBoundsException, [], 0, 3, 0, 0,
tt_Utils$2, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tt_Utils$2_compare0(this, var_1, var_2); }],
tt_Utils$3, 0, jl_Object, [ju_Comparator], 4, 0, 0, ["$compare0", function(var_1, var_2) { return tt_Utils$3_compare0(this, var_1, var_2); }],
ju_FormatterClosedException, 0, jl_IllegalStateException, [], 0, 3, 0, 0,
jn_ReadOnlyBufferException, "ReadOnlyBufferException", 3, jl_UnsupportedOperationException, [], 0, 3, 0, 0,
jn_BufferOverflowException, "BufferOverflowException", 3, jl_RuntimeException, [], 0, 3, 0, 0,
jn_BufferUnderflowException, "BufferUnderflowException", 3, jl_RuntimeException, [], 0, 3, 0, 0,
ju_HashMap$HashMapEntrySet, 0, ju_AbstractSet, [], 0, 0, 0, 0,
ju_IllegalFormatException, 0, jl_IllegalArgumentException, [], 0, 3, 0, 0,
ju_UnknownFormatConversionException, 0, ju_IllegalFormatException, [], 0, 3, 0, 0,
ju_DuplicateFormatFlagsException, 0, ju_IllegalFormatException, [], 0, 3, 0, 0,
ju_IllegalFormatPrecisionException, 0, ju_IllegalFormatException, [], 0, 3, 0, 0,
jl_Short, 0, jl_Number, [jl_Comparable], 0, 3, 0, 0,
ju_IllegalFormatCodePointException, 0, ju_IllegalFormatException, [], 0, 3, 0, 0,
ju_IllegalFormatConversionException, 0, ju_IllegalFormatException, [], 0, 3, 0, 0,
jt_DecimalFormatSymbols, 0, jl_Object, [jl_Cloneable], 0, 3, 0, 0,
jt_Format, 0, jl_Object, [ji_Serializable, jl_Cloneable], 1, 3, 0, 0,
jt_NumberFormat, 0, jt_Format, [], 1, 3, 0, 0,
ju_Formattable, 0, jl_Object, [], 3, 3, 0, 0,
ju_FormatFlagsConversionMismatchException, 0, ju_IllegalFormatException, [], 0, 3, 0, 0,
ju_IllegalFormatFlagsException, 0, ju_IllegalFormatException, [], 0, 3, 0, 0,
ju_MissingFormatWidthException, 0, ju_IllegalFormatException, [], 0, 3, 0, 0,
jt_DecimalFormat, 0, jt_NumberFormat, [], 0, 3, 0, 0,
jt_DecimalFormat$FormatField, 0, jl_Object, [], 3, 0, 0, 0,
jt_DecimalFormat$TextField, "DecimalFormat$TextField", 5, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, ["$equals", function(var_1) { return jt_DecimalFormat$TextField_equals(this, var_1); }, "$hashCode0", function() { return jt_DecimalFormat$TextField_hashCode(this); }],
ju_Currency, 0, jl_Object, [ji_Serializable], 4, 3, 0, 0,
otcic_CurrencyHelper, 0, jl_Object, [], 4, 3, 0, 0,
ju_HashMap$EntryIterator, 0, ju_HashMap$AbstractMapIterator, [ju_Iterator], 0, 0, 0, 0,
jt_DecimalFormatParser, 0, jl_Object, [], 0, 0, 0, 0,
jur_IntArrHash, 0, jl_Object, [], 0, 0, 0, 0,
jt_DecimalFormat$MinusField, "DecimalFormat$MinusField", 5, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, ["$equals", function(var_1) { return jt_DecimalFormat$MinusField_equals(this, var_1); }, "$hashCode0", function() { return jt_DecimalFormat$MinusField_hashCode(this); }],
jt_DecimalFormat$PerMillField, "DecimalFormat$PerMillField", 5, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, ["$equals", function(var_1) { return jt_DecimalFormat$PerMillField_equals(this, var_1); }, "$hashCode0", function() { return jt_DecimalFormat$PerMillField_hashCode(this); }],
jt_DecimalFormat$CurrencyField, "DecimalFormat$CurrencyField", 5, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, ["$equals", function(var_1) { return jt_DecimalFormat$CurrencyField_equals(this, var_1); }, "$hashCode0", function() { return jt_DecimalFormat$CurrencyField_hashCode(this); }],
jt_DecimalFormat$PercentField, "DecimalFormat$PercentField", 5, jl_Object, [jt_DecimalFormat$FormatField], 0, 0, 0, ["$equals", function(var_1) { return jt_DecimalFormat$PercentField_equals(this, var_1); }, "$hashCode0", function() { return jt_DecimalFormat$PercentField_hashCode(this); }]]);
function $rt_array(cls, data) {
    this.$monitor = null;
    this.$id$ = 0;
    this.type = cls;
    this.data = data;
    this.constructor = $rt_arraycls(cls);
}
$rt_array.prototype = Object.create(($rt_objcls()).prototype);
$rt_array.prototype.toString = function() {
    var str = "[";
    for (var i = 0;i < this.data.length;++i) {
        if (i > 0) {
            str += ", ";
        }
        str += this.data[i].toString();
    }
    str += "]";
    return str;
};
$rt_setCloneMethod($rt_array.prototype, function() {
    var dataCopy;
    if ('slice' in this.data) {
        dataCopy = this.data.slice();
    } else {
        dataCopy = new this.data.constructor(this.data.length);
        for (var i = 0;i < dataCopy.length;++i) {
            dataCopy[i] = this.data[i];
        }
    }
    return new $rt_array(this.type, dataCopy);
});
$rt_stringPool(["Can\'t enter monitor from another thread synchronously", "@", ": ", " != ", "S", "h", "e", "t", "1", "P", "a", "g", " ", "A", "B", "C", "2", "3", "Test data length mismatch", "textElements wrong length", "i=", " getX", " getY", " getWidth", " getHeight", " getFontSize", " getWidthOfSpace", " getDirection", "%", "Arg % split length is not 4: ", "AREA: ", "PAGE: ", ",", "pageNum = ", "top = ", "left = ", "bottom = ", "right = ", "Bad pagenum: ", "height = ", "width = ", "Running", "l", "DONe DONEE DONE",
"", "test-doc-load", "test-text-stripper", "test-object-extractor", "test-rulings", "test-text-elements", "[", "{\"x1\": ", ",\"y1\": ", ",\"x2\": ", ",\"y2\": ", "},", "]", "null", "Patter is null", "    at ", "Caused by: ", "Index out of bounds", "String contains invalid digits: ", "String contains digits out of radix ", "The value is too big for int type: ", "String is null or empty", "Illegal radix: ", "0", "das sind shapes", " ", "Either src or dest is null", "java.version", "1.8", "os.name", "TeaVM", "file.separator",
"/", "path.separator", ":", "line.separator", "\n", "java.io.tmpdir", "/tmp", "java.vm.version", "user.home", "Page number does not exist", "[x=", ",y=", ",w=", ",h=", ",bottom=%f,right=%f]", ", ", "stream", "lattice", "out", "format", "winding rule must be WIND_EVEN_ODD or WIND_NON_ZERO", "missing initial moveto in path definition", "missing case in transform state switch", ",text=\"%s\"]", "Node capacity must be greater than 1", "UTF-8", "Can\'t add an oblique ruling", "Unexpected Quote value: ", "The delimiter cannot be a line break",
"The quoteChar character and the delimiter cannot be the same (\'", "\')", "The escape character and the delimiter cannot be the same (\'", "The comment start character and the delimiter cannot be the same (\'", "The comment start character and the quoteChar cannot be the same (\'", "The comment start and the escape character cannot be the same (\'", "No quotes mode set but no escape character is set", "The header contains a duplicate entry: \'", "\' in ", "The escape character cannot be a line break", "The quoteChar cannot be a line break",
"\r\n", "\\N", "Should never reach here", "Cannot insert items into an STR packed R-tree after it has been built.", "Replacement preconditions do not hold", "ALL", "ALL_NON_NULL", "MINIMAL", "NON_NUMERIC", "NONE", "-", "\\.", "java.util.Arrays.useLegacyMergeSort", "true", "\"", ",text=%s]", "\u0000\t\u000c\u000e\u001c\u001f!#&+/1:<A[a{ ¢¦ª¬°²´·¹»À×Ù÷ùȢɐʰʹʻ˂ː˒ˠ˥ˮ̀͠ʹͺ;΄ΆΉΌΎΣϐϚЀ҃҈ҌӇӋӐӸԱՙա։ֻ֑֣־ׂאװ،؛؟ءـً٠٪٬ٰٲۖۥۧ۩۫۰ۺ܀܏ܑܓܰހަँःअ़ाुॉ्ॐ॒क़ॢ।ঁঃঅএওপলশ়াুেো্ৗড়য়ৢ০৲৴ਂਅਏਓਪਲਵਸ਼ਾੁੇੋਖ਼ਫ਼੦ੰੲઁઃઅઍએઓપલવ઼ાુેૉો્ૐૠ૦ଁଃଅଏଓପଲଶ଼ାୂେୋ୍ୖଡ଼ୟ୦ஂஅஎஒஙஜஞணநமஷாீூெொ்ௗ௧ఁఅఎఒపవాుెొౕౠ౦ಂಅಎಒಪವಾುೆೈೊೌೕೞೠ೦ംഅഎഒപാുെൊ്ൗൠ൦ංඅකඳලව්ාිූෘෲกัำี฿แ็๏ກຄງຊຍດນມລວສອັຳີົຽເໆ່໐ໜༀ༘༚༵༺༾ཉཱཿཱྀ྅྇ྉྐྙ྾࿆࿈࿏ကဣဩာီေံး၀ၘႠა჻ᄀᅟᆨሀለቈቊቐቘቚበኈኊነኰኲኸዀዂወዐዘደጐጒጘጠፈ፡Ꭰᐁ ᚂ᚛ᚠកិើំៈ៊។៛០᠀᠋᠐ᠠᢀᢩḀẠἀἘἠὈὐὙὛὝὟᾀᾶ᾽῀ῂῆ῍ῐῖ῝ῠ῭ῲῶ´ ​‎‐‪‬‮‰‵⁈⁪⁰⁴⁺⁼ⁿ₁₊₌₠⃐℀ℂ℄ℇ℉ℋ℔℗ℙ℞ℤÅ℮ℰℲℴ℺⅓Ⅰ←∀−∔⌀⌶⍻⍽⎕⎗␀⑀①⒜⓪─■☀☙✁✆✌✩❍❏❖❘❡❶➘➱⠀⺀⺛⼀⿰　。々〈〡〪〰〲〶〸〾ぁ゙゛ゝァ・ヽㄅㄱ㆐㈀㈠㉠㉿㋀㋐㌀㍻㏠"
+ "㐀一ꀀ꒐꒤꒵꓂꓆가\ud800ﬀﬓיִﬠ﬩שׂטּמּנּףּצּﭐﯓ﴾ﵐﶒﷰ︠︰﹉﹐﹔﹗﹟﹡﹣﹥﹨﹪ﹰﹴﹶ﻿！＃＆＋／１：＜Ａ［ａ｛｡ｦￂￊￒￚ￠￢￥￨￹￼", ",chunks=", "\'", "\', ", "Point2D.Float[", "false", "lines must be orthogonal, vertical and horizontal", "%s[x1=%f y1=%f x2=%f y2=%f]", "Parameter \'", "\' must not be null!", "<", ">", "The last char in dst ", " is outside of array of size ", "Length ", " must be non-negative", "Offset ", " is outside of range [0;", ")", "New position ", "The last byte in src ", "IGNORE", "REPLACE", "REPORT", "LTR", "RTL", "Scale out of range.",
"Zero length BigInteger", "Invalid rounding mode", "Rounding necessary", "fSet", "Is", "In", "Action must be non-null", "NonCapFSet", "AheadFSet", "BehindFSet", "AtomicFSet", "FinalSet", "<Empty set>", "JointSet", "NonCapJointSet", "PosLookaheadJointSet", "NegLookaheadJointSet", "PosBehindJointSet", "NegBehindJointSet", "Negative bit address", "Negative exponent", "BigInteger divide by zero", "power of ten too big", "<Quant>", "<GroupQuant>", "{", "}", "posFSet", "range:", "^ ", "CompositeRangeSet:  <nonsurrogate> ",
" <surrogate> ", "UCI range:", "decomposed Hangul syllable:", "UCI ", "CI ", "decomposed char:", "<DotAllQuant>", "<DotQuant>", "<SOL>", "WordBoundary", "PreviousMatch", "<EOL>", "EOI", "^", "DotAll", ".", "<Unix MultiLine $>", "<MultiLine $>", "CI back reference: ", "back reference: ", "UCI back reference: ", "sequence: ", "UCI sequence: ", "CI sequence: ", "BIG_ENDIAN", "LITTLE_ENDIAN", "Lower", "Upper", "ASCII", "Alpha", "Digit", "Alnum", "Punct", "Graph", "Print", "Blank", "Cntrl", "XDigit", "javaLowerCase",
"javaUpperCase", "javaWhitespace", "javaMirrored", "javaDefined", "javaDigit", "javaIdentifierIgnorable", "javaISOControl", "javaJavaIdentifierPart", "javaJavaIdentifierStart", "javaLetter", "javaLetterOrDigit", "javaSpaceChar", "javaTitleCase", "javaUnicodeIdentifierPart", "javaUnicodeIdentifierStart", "Space", "w", "W", "s", "d", "D", "BasicLatin", "Latin-1Supplement", "LatinExtended-A", "LatinExtended-B", "IPAExtensions", "SpacingModifierLetters", "CombiningDiacriticalMarks", "Greek", "Cyrillic", "CyrillicSupplement",
"Armenian", "Hebrew", "Arabic", "Syriac", "ArabicSupplement", "Thaana", "Devanagari", "Bengali", "Gurmukhi", "Gujarati", "Oriya", "Tamil", "Telugu", "Kannada", "Malayalam", "Sinhala", "Thai", "Lao", "Tibetan", "Myanmar", "Georgian", "HangulJamo", "Ethiopic", "EthiopicSupplement", "Cherokee", "UnifiedCanadianAboriginalSyllabics", "Ogham", "Runic", "Tagalog", "Hanunoo", "Buhid", "Tagbanwa", "Khmer", "Mongolian", "Limbu", "TaiLe", "NewTaiLue", "KhmerSymbols", "Buginese", "PhoneticExtensions", "PhoneticExtensionsSupplement",
"CombiningDiacriticalMarksSupplement", "LatinExtendedAdditional", "GreekExtended", "GeneralPunctuation", "SuperscriptsandSubscripts", "CurrencySymbols", "CombiningMarksforSymbols", "LetterlikeSymbols", "NumberForms", "Arrows", "MathematicalOperators", "MiscellaneousTechnical", "ControlPictures", "OpticalCharacterRecognition", "EnclosedAlphanumerics", "BoxDrawing", "BlockElements", "GeometricShapes", "MiscellaneousSymbols", "Dingbats", "MiscellaneousMathematicalSymbols-A", "SupplementalArrows-A", "BraillePatterns",
"SupplementalArrows-B", "MiscellaneousMathematicalSymbols-B", "SupplementalMathematicalOperators", "MiscellaneousSymbolsandArrows", "Glagolitic", "Coptic", "GeorgianSupplement", "Tifinagh", "EthiopicExtended", "SupplementalPunctuation", "CJKRadicalsSupplement", "KangxiRadicals", "IdeographicDescriptionCharacters", "CJKSymbolsandPunctuation", "Hiragana", "Katakana", "Bopomofo", "HangulCompatibilityJamo", "Kanbun", "BopomofoExtended", "CJKStrokes", "KatakanaPhoneticExtensions", "EnclosedCJKLettersandMonths", "CJKCompatibility",
"CJKUnifiedIdeographsExtensionA", "YijingHexagramSymbols", "CJKUnifiedIdeographs", "YiSyllables", "YiRadicals", "ModifierToneLetters", "SylotiNagri", "HangulSyllables", "HighSurrogates", "HighPrivateUseSurrogates", "LowSurrogates", "PrivateUseArea", "CJKCompatibilityIdeographs", "AlphabeticPresentationForms", "ArabicPresentationForms-A", "VariationSelectors", "VerticalForms", "CombiningHalfMarks", "CJKCompatibilityForms", "SmallFormVariants", "ArabicPresentationForms-B", "HalfwidthandFullwidthForms", "all",
"Specials", "Cn", "IsL", "Lu", "Ll", "Lt", "Lm", "Lo", "IsM", "Mn", "Me", "Mc", "N", "Nd", "Nl", "No", "IsZ", "Zs", "Zl", "Zp", "IsC", "Cc", "Cf", "Co", "Cs", "IsP", "Pd", "Ps", "Pe", "Pc", "Po", "IsS", "Sm", "Sc", "Sk", "So", "Pi", "Pf", "UP", "DOWN", "CEILING", "FLOOR", "HALF_UP", "HALF_DOWN", "HALF_EVEN", "UNNECESSARY", "%s[point=%s,direction=%s]", "HORIZONTAL", "VERTICAL", "main", "HRIGHT", "HLEFT", "Curve[", "(", "), ", "U", "this == ", "that == ", "target range = ", "=>", "backstepping from ", " to ",
"ymin = ", "Error: ", "y range was ", "s y range is ", "t y range is ", "ymin is ", "t0 = ", "t1 = ", "no t progress!", "Uh oh!", "s0 = ", "s1 = ", "no s progress!", "Still inside at end of active edge list!", "num curves = ", "num links = ", "y top = ", "no more curves", "y top of next curve = ", "  was equal to ", "...", "backstepping to ", " from ", "Odd number of chains!", "Odd number of new curves!", "yrange already screwed up...", "bad curvelink [", "] for ", "Linking chains of the same type!", "ChainEnd linked more than once!",
"\u0008\n\u000bఋ\r\u0b0d\u001b\n\u001e\u000b \u0c0d\"\u000e%\u0006*\u000e.؈0Ԅ9\u0004;จ@\u000eZ\u0001`\u000ez\u0001~\u000e\nଊ\n¡จ¥\u0006©\u000e«ก¯\u000e±\u0006³\u0004¶Ď¸\u000eºЁ¿\u000eÖ\u0001Øกö\u0001øกȟ\u0001ȳ\u0001ʭ\u0001ʸ\u0001ʺ\u000eˁ\u0001ˏ\u000eˑ\u0001˟\u000eˤ\u0001˭\u000eˮ\u0001͎\t͢\t͵\u000eͺ\u0001;\u000e΅\u000eΈกΊ\u0001Ό\u0001Ρ\u0001ώ\u0001ϗ\u0001ϳ\u0001҂\u0001҆\t҉\tӄ\u0001ӈ\u0001ӌ\u0001ӵ\u0001ӹ\u0001Ֆ\u0001՟\u0001և\u0001֊Ď֡\tֹ\tֽ\tׁंׄȉת\u0002״\u0002،\u0008؛̀؟̀غ\u0003ي\u0003ٕ\t٩\u0007٫܆٭̇ٱ̉ە\u0003ۤ\tۦ\u0003ۨ\t۪ฉۭ\t۹\u0004۾\u0003܍\u0003ܐਃܒःܬ\u0003݊\tޥ\u0003ް\tं\tःĀह\u0001ऽĉी\u0001ै\tौ\u0001्ऀ॑ँ॔\tॡ\u0001ॣ\t॰\u0001ংँঃĀঌ\u0001ঐ\u0001ন\u0001র\u0001ল\u0001হ\u0001়\tী\u0001ৄ\tৈ\u0001ৌ\u0001্ऀৗĀঢ়\u0001ৡ\u0001ৣ\tৱ\u0001৳\u0006৺\u0001ਂ\tਊ\u0001ਐ\u0001ਨ\u0001ਰ\u0001ਲ਼\u0001ਸ਼\u0001ਹ\u0001਼\tੀ\u0001ੂ\tੈ\t੍\tੜ\u0001ਫ਼\u0001੯\u0001ੱ\tੴ\u0001ં\tઃĀઋ\u0001ઍĀઑ\u0001ન\u0001ર\u0001ળ\u0001હ\u0001ઽĉી\u0001ૅ\tૈ\tૉĀૌ\u0001્ऀૐ\u0001ૠ\u0001૯\u0001ଂँଃĀଌ\u0001ଐ\u0001ନ\u0001ର\u0001ଳ\u0001ହ\u0001ଽĉୁँୃ\tୈ\u0001ୌ\u0001୍ऀୗĉଢ଼\u0001ୡ\u0001୰\u0001ஃĉஊ\u0001ஐ\u0001க\u0001ச\u0001ஜ\u0001ட\u0001த\u0001ப\u0001வ\u0001ஹ\u0001ி\u0001ுĉூ\u0001ை\u0001ௌ\u0001்ऀௗĀ௲\u0001ః\u0001ఌ\u0001ఐ\u0001న\u0001ళ\u0001హ\u0001ీ\tౄ\u0001ై\t్\tౖ\tౡ\u0001౯\u0001ಃ\u0001ಌ\u0001ಐ\u0001ನ\u0001ಳ\u0001ಹ\u0001ೀँೄ\u0001ೇĉೈ\u0001ೋ\u0001್\tೖ\u0001ೞ\u0001ೡ\u0001೯\u0001ഃ\u0001ഌ\u0001ഐ\u0001ന\u0001ഹ\u0001ീ\u0001ൃ\tൈ\u0001ൌ\u0001്ऀൗĀൡ\u0001൯\u0001ඃ\u0001"
+ "ඖ\u0001න\u0001ර\u0001ලĀෆ\u0001්\tෑ\u0001ු\tූ\tෟ\u0001෴\u0001ะ\u0001าँิĉฺ\tเ؁ๆ\u0001๎\t๛\u0001ຂ\u0001ຄ\u0001ຈ\u0001ຊ\u0001ຍĀທ\u0001ຟ\u0001ຣ\u0001ລĀວĀຫ\u0001ະ\u0001າँິĉູ\tຼ\tຽĀໄ\u0001ໆ\u0001ໍ\t໙\u0001ໝ\u0001༗\u0001༙\t༴\u0001༹ँ༽\u000eཇ\u0001ཪ\u0001ཾ\tྀĉ྄\t྆ĉྈँྋ\u0001ྗ\tྼ\t࿅\u0001࿇ĉ࿌\u0001࿏Āအ\u0001ဧ\u0001ဪ\u0001ိँူ\tဲĉ့\t္ँၗ\u0001ၙ\tჅ\u0001ჶ\u0001჻Āᅙ\u0001ᆢ\u0001ᇹ\u0001ሆ\u0001ቆ\u0001ቈ\u0001ቍ\u0001ቖ\u0001ቘ\u0001ቝ\u0001ኆ\u0001ኈ\u0001ኍ\u0001ኮ\u0001ኰ\u0001ኵ\u0001ኾ\u0001ዀ\u0001ዅ\u0001ዎ\u0001ዖ\u0001ዮ\u0001ጎ\u0001ጐ\u0001ጕ\u0001ጞ\u0001ፆ\u0001ፚ\u0001፼\u0001Ᏼ\u0001ᙶ\u0001ᚁčᚚ\u0001᚜\u000eᛰ\u0001ា\u0001ួ\tៅ\u0001ះĉ៉ँ៓\t៚\u0001ៜ؁៩\u0001᠊\u000e᠎\n᠙\u0001ᡷ\u0001ᢨ\u0001ᢩऀẛ\u0001ỹ\u0001ἕ\u0001Ἕ\u0001ὅ\u0001Ὅ\u0001ὗ\u0001ὙĀὛĀὝĀώ\u0001ᾴ\u0001ᾼ\u0001᾿ก῁\u000eῄ\u0001ῌ\u0001῏\u000eΐ\u0001Ί\u0001῟\u000eῬ\u0001`\u000eῴ\u0001ῼ\u0001῾\u000e \r‍\n‏ȁ‧\u000e\u0b0d‫ᄏ‭ဓ ഒ‴\u0006⁆\u000e⁍\u000e⁯\n⁰\u0004⁹\u0004⁻\u0006⁾\u000e₀Ą₉\u0004₋\u0006₎\u000e₯\u0006⃣\t℁\u000e℃ก℆\u000e℈Ďℊกℓ\u0001№Ď℘\u000eℝ\u0001℣\u000eKกℭ\u0001ℯĆℱ\u0001ℳĎℹ\u0001℺\u000e⅟\u000eↃ\u0001⇳\u000e∑\u000e∓\u0006⋱\u000e⌵\u000e⍺\u0001⍻\u0e00⎔\u000e⎖Ď⎚\u000e␦\u000e⑊\u000e⒛\u0004ⓩ\u0001⓪\u0004▕\u000e◷\u000e☓\u000e♱\u000e✄\u000e✉\u000e✧\u000e❋\u000e❍\u0e00❒\u000e❖\u000e❞\u000e❧\u000e➔\u000e➯\u000e➾\u000e⣿\u000e⺙\u000e⻳\u000e⿕\u000e⿻\u000e、ญ〄\u000e〇\u0001〠\u000e〩\u0001〯\t〱Ď〵\u0001〷\u000e〺\u0001〿\u000eゔ\u0001゚\t゜\u000eゞ\u0001ヺ\u0001ーกヾ\u0001ㄬ\u0001ㆎ\u0001ㆷ\u0001㈜\u0001㉃\u0001㉻\u0001㊰\u0001㋋\u0001㋾\u0001㍶\u0001㏝\u0001㏾\u0001"
+ "䶵\u0001龥\u0001ꒌ\u0001꒡\u000e꒳\u000e꓀\u000e꓄\u000e꓆\u000e힣\u0001鶴\u0001ﬆ\u0001ﬗ\u0001ײַȉﬨ\u0002שׁ؂זּ\u0002לּ\u0002מּ\u0002סּ\u0002פּ\u0002ﭏ\u0002ﮱ\u0003ﴽ\u0003﴿\u000eﶏ\u0003ﷇ\u0003ﷻ\u0003︣\t﹄\u000e﹏\u000e﹒จ﹖ࠎ﹞\u000e﹠؎﹢ฆ﹤؎﹦\u000e﹩؎﹫ฆﹲ\u0003ﹴ\u0003ﻼ\u0003﻿\u0a00＂\u000e％\u0006＊\u000e．؈０Ԅ９\u0004；จ＠\u000eＺ\u0001｀\u000eｚ\u0001～\u000e･\u000eﾾ\u0001ￇ\u0001ￏ\u0001ￗ\u0001ￜ\u0001￡\u0006￤\u000e￦\u0006￮\u000e￻\n�\u000e", "\u0000\u0000̀倀\u0000⠀\u0000⠀\u0000\u0000ࠀࠀ\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000"
+ "\u0000\u0000\u0000؀`\u0000\u0000怀怀\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000㼞뱢﨏\u1fff耼쿵\uffff\u9fffćￌ쇿㸀ￃ㿿\u0003ༀ\u0000؃\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\uff00\u0ff3",
"\u001f\u000f!᠌#\u0018%\u181a\'\u0018)ᘕ,ᤘ.ᐘ0᠉9\t;\u0018>\u0019@\u0018Z\u0001\\ᔘ^ᘛ`\u171bz\u0002|ᔙ~ᘙ\u000f¡᠌¥\u001a§\u001c©ᰛ«ᴂ­ᐙ°ᬜ²ᤋ´ଛ¶Ȝ¸\u181bºଂ¼ḋ¾\u000bÀ᠁Ö\u0001ØᤁÞ\u0001ö\u0002øᤂÿ\u0002ķȁňĂŸȁžĂƀ\u0002Ƃ\u0001ƆȁƉĂƋ\u0001ƍ\u0002Ƒ\u0001ƓĂƖȁƘ\u0001ƛ\u0002Ɲ\u0001ƟĂƦȁƪĂƮȁƱĂƳ\u0001ƷĂƹȁƻԂƽȁƿ\u0002ǃ\u0005ǅ́ǇĂǉȃǋ́ǜĂǯȁǱĂǳȃǶȁǸ\u0001ȟȁȳȁʭ\u0002ʸ\u0004ʺ\u001bˁ\u0004ˏ\u001bˑ\u0004˟\u001bˤ\u0004˭\u001bˮ\u0004͎\u0006͢\u0006͵\u001bͺ\u0004;\u0018΅\u001bΈ᠁Ί\u0001Ό\u0001Ώ\u0001ΑĂΡ\u0001Ϋ\u0001ώ\u0002ϑ\u0002ϔ\u0001ϗ\u0002ϯȁϳ\u0002Я\u0001џ\u0002ҁȁ҃\u061c҆\u0006҉\u0007ӀȁӄĂӈĂӌĂӵȁӹȁՖ\u0001՚И՟\u0018և\u0002֊᠔֡\u0006ֹ\u0006ֽ\u0006ׁؘׄ᠆ת\u0005ײ\u0005״\u0018،\u0018؛᠀؟᠀غ\u0005فԄي\u0005ٕ\u0006٩\t٭\u0018ٱԆۓ\u0005ەԘۜ\u0006۞\u0007ۤ\u0006ۦ\u0004ۨ\u0006۪ᰆۭ\u0006۹\tۼ\u0005۾\u001c܍\u0018ܐစܒ\u0605ܬ\u0005݊\u0006ޥ\u0005ް\u0006ं\u0006ःࠀह\u0005ऽԆी\u0008ै\u0006ौ\u0008्؀॑\u0605॔\u0006ॡ\u0005ॣ\u0006॥\u0018९\t॰\u0018ং؈ঃࠀঌ\u0005ঐ\u0005ন\u0005র\u0005ল\u0005হ\u0005়\u0006ী\u0008ৄ\u0006ৈ\u0008ৌ\u0008্؀ৗࠀঢ়\u0005ৡ\u0005ৣ\u0006৯\tৱ\u0005৳\u001a৹\u000b৺\u001cਂ\u0006ਊ\u0005ਐ\u0005ਨ\u0005ਰ\u0005ਲ਼\u0005ਸ਼\u0005ਹ\u0005਼\u0006ੀ\u0008ੂ\u0006ੈ\u0006੍\u0006ੜ\u0005ਫ਼\u0005੯\tੱ\u0006ੴ\u0005ં\u0006ઃࠀઋ\u0005ઍԀઑ\u0005ન\u0005ર\u0005ળ\u0005હ\u0005ઽԆી\u0008ૅ\u0006ૈ\u0006ૉࠀૌ\u0008્؀ૐ\u0005ૠ\u0005૯\tଂ؈ଃࠀଌ\u0005ଐ\u0005ନ\u0005ର\u0005ଳ\u0005ହ\u0005ଽԆୁ؈ୃ\u0006ୈ\u0008ୌ\u0008୍؀ୗࠆଢ଼\u0005"
+ "ୡ\u0005୯\t୰\u001cஃࠆஊ\u0005ஐ\u0005க\u0005ச\u0005ஜ\u0005ட\u0005த\u0005ப\u0005வ\u0005ஹ\u0005ி\u0008ுࠆூ\u0008ை\u0008ௌ\u0008்؀ௗࠀ௯\t௲\u000bః\u0008ఌ\u0005ఐ\u0005న\u0005ళ\u0005హ\u0005ీ\u0006ౄ\u0008ై\u0006్\u0006ౖ\u0006ౡ\u0005౯\tಃ\u0008ಌ\u0005ಐ\u0005ನ\u0005ಳ\u0005ಹ\u0005ೀ؈ೄ\u0008ೇࠆೈ\u0008ೋ\u0008್\u0006ೖ\u0008ೞ\u0005ೡ\u0005೯\tഃ\u0008ഌ\u0005ഐ\u0005ന\u0005ഹ\u0005ീ\u0008ൃ\u0006ൈ\u0008ൌ\u0008്؀ൗࠀൡ\u0005൯\tඃ\u0008ඖ\u0005න\u0005ර\u0005ලԀෆ\u0005්\u0006ෑ\u0008ු\u0006ූ\u0006ෟ\u0008ෳ\u0008෴\u0018ะ\u0005า\u0605ิԆฺ\u0006เᨅๅ\u0005็؄๎\u0006๐᠉๙\t๛\u0018ຂ\u0005ຄ\u0005ຈ\u0005ຊ\u0005ຍԀທ\u0005ຟ\u0005ຣ\u0005ລԀວԀຫ\u0005ະ\u0005າ\u0605ິԆູ\u0006ຼ\u0006ຽԀໄ\u0005ໆ\u0004ໍ\u0006໙\tໝ\u0005༁ᰅ༃\u001c༒\u0018༗\u001c༙\u0006༟\u001c༩\t༳\u000b༹\u061c༽ᘕ༿\u0008ཇ\u0005ཪ\u0005ཾ\u0006ྀࠆ྄\u0006྆᠆ྈ\u0605ྋ\u0005ྗ\u0006ྼ\u0006࿅\u001c࿇ᰆ࿌\u001c࿏ᰀအ\u0005ဧ\u0005ဪ\u0005ိ؈ူ\u0006ဲࠆ့\u0006္؈၉\t၏\u0018ၕ\u0005ၗ\u0008ၙ\u0006Ⴥ\u0001ჶ\u0005჻᠀ᅙ\u0005ᆢ\u0005ᇹ\u0005ሆ\u0005ቆ\u0005ቈ\u0005ቍ\u0005ቖ\u0005ቘ\u0005ቝ\u0005ኆ\u0005ኈ\u0005ኍ\u0005ኮ\u0005ኰ\u0005ኵ\u0005ኾ\u0005ዀ\u0005ዅ\u0005ዎ\u0005ዖ\u0005ዮ\u0005ጎ\u0005ጐ\u0005ጕ\u0005ጞ\u0005ፆ\u0005ፚ\u0005፨\u0018፱\t፼\u000bᏴ\u0005ᙬ\u0005᙮\u0018ᙶ\u0005ᚁԌᚚ\u0005᚜ᔖᛪ\u0005᛭\u0018ᛰ\u000bឳ\u0005ា\u0008ួ\u0006ៅ\u0008ះࠆ៉؈៓\u0006៚\u0018ៜᨘ៩\t᠅\u0018᠇᠔᠊\u0018᠎\u0010᠙\tᡂ\u0005ᡄЅᡷ\u0005ᢨ\u0005ᢩ؀ẕȁẛ\u0002ỹȁἇ\u0002Ἇ\u0001ἕ\u0002Ἕ\u0001ἧ\u0002Ἧ\u0001ἷ\u0002Ἷ\u0001ὅ\u0002Ὅ\u0001ὗ\u0002ὙĀὛĀὝĀὠĂὧ\u0002Ὧ\u0001ώ\u0002ᾇ\u0002ᾏ\u0003ᾗ\u0002ᾟ\u0003ᾧ\u0002ᾯ\u0003ᾴ\u0002ᾷ\u0002Ά\u0001᾽ᬃ᾿ᬂ῁\u001bῄ\u0002ῇ\u0002Ή\u0001῍ᬃ῏\u001bΐ\u0002ῗ\u0002Ί\u0001῟\u001bῧ\u0002"
+ "Ῥ\u0001`\u001bῴ\u0002ῷ\u0002Ώ\u0001´ᬃ῾\u001b​\u000c‏\u0010―\u0014‗\u0018’ḝ‛ᴕ”ḝ‟ᴕ‧\u0018ญ‮\u0010‰ఘ‸\u0018›ᴞ‾\u0018⁀\u0017⁃\u0018⁅ᔙ⁆\u0016⁍\u0018⁯\u0010⁰\u000b⁹\u000b⁼\u0019⁾ᔖ₀ȋ₉\u000b₌\u0019₎ᔖ₯\u001a⃜\u0006⃠\u0007⃢؇⃣܀℁\u001c℃ᰁ℆\u001c℈Ĝℊᰂℍ\u0001ℏ\u0002ℒ\u0001℔Ȝ№Ĝ℘\u001cℝ\u0001℣\u001cKᰁℭ\u0001ℯȜℱ\u0001ℳĜℵԂℸ\u0005℺Ȝ⅟\u000bↃ\n↔\u0019↙\u001c↛\u0019↟\u001c↡ᰙ↤ᤜ↧ᰙ↭\u001c↯ᰙ⇍\u001c⇏\u0019⇑\u001c⇕ᰙ⇳\u001c⋱\u0019⌇\u001c⌋\u0019⌟\u001c⌡\u0019⌨\u001c〉ᔖ⍻\u001c⎚\u001c␦\u001c⑊\u001c⒛\u000bⓩ\u001c⓪\u000b▕\u001c▶\u001c▸ᤜ◀\u001c◂ᤜ◷\u001c☓\u001c♮\u001c♰ᤜ♱ᰀ✄\u001c✉\u001c✧\u001c❋\u001c❍ᰀ❒\u001c❖\u001c❞\u001c❧\u001c➓\u000b➔\u001c➯\u001c➾\u001c⣿\u001c⺙\u001c⻳\u001c⿕\u001c⿻\u001c、᠌〃\u0018々М〇ਅ】ᘕ〓\u001c〛ᘕ〝ᔔ〟\u0016〡ਜ〩\n〯\u0006〱Д〵\u0004〷\u001c〺\n〿\u001cゔ\u0005゚\u0006゜\u001bゞ\u0004ヺ\u0005ーᜄヾ\u0004ㄬ\u0005ㆎ\u0005㆑\u001c㆕\u000b㆟\u001cㆷ\u0005㈜\u001c㈩\u000b㉃\u001c㉻\u001c㊀ᰋ㊉\u000b㊰\u001c㋋\u001c㋾\u001c㍶\u001c㏝\u001c㏾\u001c䶵\u0005龥\u0005ꒌ\u0005꒡\u001c꒳\u001c꓀\u001c꓄\u001c꓆\u001c힣\u0005\udfff\u0013\u0012鶴\u0005ﬆ\u0002ﬗ\u0002ײַԆﬨ\u0005שׁᤅזּ\u0005לּ\u0005מּ\u0005סּ\u0005פּ\u0005ﮱ\u0005ﴽ\u0005﴿ᘕﶏ\u0005ﷇ\u0005ﷻ\u0005︣\u0006︱ᐘ︳᜔︵ᔗ﹄ᔖ﹌\u0018﹏\u0017﹒\u0018﹗\u0018﹙ᔔ﹞ᔖ﹡\u0018﹤ᐙ﹦\u0019﹪ᨘ﹫᠀ﹲ\u0005ﹴ\u0005ﻼ\u0005﻿က＃\u0018％\u181a＇\u0018）ᘕ，ᤘ．ᐘ０᠉９\t；\u0018＞\u0019＠\u0018Ｚ\u0001＼ᔘ＾ᘛ｀\u171bｚ\u0002｜ᔙ～ᘙ｢᠕､ᘘｦᜅｯ\u0005ｱԄﾝ\u0005ﾟ\u0004ﾾ\u0005ￇ\u0005ￏ\u0005ￗ\u0005ￜ\u0005￡\u001a￣ᬙ￥\u1a1c￦\u001a￩ᤜ￬\u0019￮\u001c￻\u0010�\u001c",
"z￠µ˧ö￠þ￠ÿy脯\uffffı８脷\uffff腈\uffff腷\uffff腾\uffffſﻔ膅\uffffƈ\uffffƌ\uffffƒ\uffffƕaƙ\uffff膥\uffffƨ\uffffƭ\uffffư\uffff膶\uffffƹ\uffffƽ\uffffƿ8ǅ\uffffǆ\ufffeǈ\uffffǉ\ufffeǋ\uffffǌ\ufffe臜\uffffǝﾱ臯\uffffǲ\uffffǳ\ufffeǵ\uffff舟\uffff舳\uffffɓＮɔＲɗＳəＶɛＵɠＳɣＱɨＯɩＭɯＭɲＫɵＪʀＦʃＦʈＦʋＧʒＥͅTάￚίￛρ￠ς￡ϋ￠ό\uffc0ώ\uffc1ϐￂϑￇϕ\uffd1ϖￊ華\uffffϰﾪϱﾰϲﾱя￠џﾰ蒁\uffff蒿\uffff蓄\uffffӈ\uffffӌ\uffff蓵\uffffӹ\uffffֆ\uffd0麕\uffffẛￅ黹\uffffἇ\u0008ἕ\u0008ἧ\u0008ἷ\u0008ὅ\u0008齗\u0008ὧ\u0008άJήVίdόύpώ~ᾇ\u0008ᾗ\u0008ᾧ\u0008ᾱ\u0008ᾳ\tιῃ\tῑ\u0008ῡ\u0008ῥ\u0007ῳ\tⅿ\ufff0ⓩ￦ｚ￠",
"Z Ö Þ 脮\u0001İＹ脶\u0001腇\u0001腶\u0001Ÿﾇ腽\u0001ƁÒ膄\u0001ƆÎƇ\u0001ƊÍƋ\u0001ƎOƏÊƐËƑ\u0001ƓÍƔÏƖÓƗÑƘ\u0001ƜÓƝÕƟÖ膤\u0001ƦÚƧ\u0001ƩÚƬ\u0001ƮÚƯ\u0001ƲÙ膵\u0001ƷÛƸ\u0001Ƽ\u0001Ǆ\u0002ǅ\u0001Ǉ\u0002ǈ\u0001Ǌ\u0002臛\u0001臮\u0001Ǳ\u0002致\u0001ǶﾟǷ\uffc8舞\u0001舲\u0001Ά&Ί%Ό@Ώ?Ρ Ϋ 菮\u0001ЏPЯ 蒀\u0001蒾\u0001蓃\u0001Ӈ\u0001Ӌ\u0001蓴\u0001Ӹ\u0001Ֆ0麔\u0001黸\u0001Ἇ\ufff8Ἕ\ufff8Ἧ\ufff8Ἷ\ufff8Ὅ\ufff8齟\ufff8Ὧ\ufff8ᾏ\ufff8ᾟ\ufff8ᾯ\ufff8Ᾱ\ufff8Άﾶᾼ\ufff7Ήﾪῌ\ufff7Ῑ\ufff8ΊﾜῩ\ufff8ΎﾐῬ￹ΌﾀΏﾂῼ\ufff7ΩK\udf41Å\udfbaⅯ\u0010Ⓩ\u001aＺ ", "90Z7zW٩٠۹۰९०৯০੯੦૯૦୯୦௯௦౯౦೯೦൯൦๙๐໙໐༩༠၉၀፱፨៩០᠙᠐９０Ｚ７ｚＷ",
"\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0000\u0000\u0000\u0000\u0000\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0000\u0000\u0000\u0000\u0003\u0000\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0000\u0000\u0000\u0000\u0002",
"ǅǅǈǈǋǋǲǲ", "90Z7zW³°¹¸¾\u0000٩٠۹۰९०৯০৷৳৹৩੯੦૯૦୯୦௰௦௱\u0b8d௲ࠊ౯౦೯೦൯൦๙๐໙໐༩༠၉၀፲፨፳፟፴ፖ፵ፍ፶ፄ፷ጻ፸ጲ፹ጩ፺ጠ፻\u1317፼ᛰᛝ៩០᠙᠐⁰⁰⁹⁰₉₀⅞\u0000⅟⅞Ⅻ⅟Ⅼ℺Ⅽ℉ⅮὺⅯᶇⅻⅯⅼ⅊ⅽℙⅾᾊⅿᶗↀᶘↁ\u0df9ↂ全⑳\u245f⒇⑳⒛⒇⓪⓪❿❵➉❿➓➉〇〇〩〠〸〮〹〥〺〜㊉㉿９０Ｚ７ｚＷ", "rect iterator out of bounds", "=", "Edge[", "R", "L", "I", "O", "NFD", "NFC", "NFKD", "NFKC", "area iterator out of bounds", "en", "CA", "fr", "zh", "CN", "FR", "de", "DE", "it", "IT", "ja", "JP", "ko", "KR", "TW", "GB", "US", "Can\'t convert code point ", " to char", "0x", "+ ", "0-", "Missing format with for specifier ",
"--#+ 0,(<", "Illegal format flags ", " for conversion ", "Duplicate format flags: ", "Unknown format conversion: ", "Illegal precision: ", "Can\'t format argument of ", " using ", " conversion", "This exception should not been thrown", "Illegal format flags: ", "Currency not found: ", "Positive number pattern not found in ", "Expected \';\' at ", " in ", "Prefix contains special character at ", "Quote opened at ", " was not closed in ", "Group separator found at fractional part at ", "Unexpected second decimal separator at ",
"Unexpected \'0\' at optional digit part at ", "Unexpected char at exponent at ", "Pattern does not specify exponent digits at ", "Two group separators at ", "Unexpected \'#\' at non-optional digit part at ", "Pattern does not specify integer digits at ", "Group separator at the end of number at "]);
jl_String.prototype.toString = function() {
    return $rt_ustr(this);
};
jl_String.prototype.valueOf = jl_String.prototype.toString;
jl_Object.prototype.toString = function() {
    return $rt_ustr(jl_Object_toString(this));
};
jl_Object.prototype.__teavm_class__ = function() {
    return $dbg_class(this);
};
function Long_eq(a, b) {
    return a.hi === b.hi && a.lo === b.lo;
}
function Long_ne(a, b) {
    return a.hi !== b.hi || a.lo !== b.lo;
}
function Long_gt(a, b) {
    if (a.hi < b.hi) {
        return false;
    }
    if (a.hi > b.hi) {
        return true;
    }
    var x = a.lo >>> 1;
    var y = b.lo >>> 1;
    if (x !== y) {
        return x > y;
    }
    return (a.lo & 1) > (b.lo & 1);
}
function Long_ge(a, b) {
    if (a.hi < b.hi) {
        return false;
    }
    if (a.hi > b.hi) {
        return true;
    }
    var x = a.lo >>> 1;
    var y = b.lo >>> 1;
    if (x !== y) {
        return x >= y;
    }
    return (a.lo & 1) >= (b.lo & 1);
}
function Long_lt(a, b) {
    if (a.hi > b.hi) {
        return false;
    }
    if (a.hi < b.hi) {
        return true;
    }
    var x = a.lo >>> 1;
    var y = b.lo >>> 1;
    if (x !== y) {
        return x < y;
    }
    return (a.lo & 1) < (b.lo & 1);
}
function Long_le(a, b) {
    if (a.hi > b.hi) {
        return false;
    }
    if (a.hi < b.hi) {
        return true;
    }
    var x = a.lo >>> 1;
    var y = b.lo >>> 1;
    if (x !== y) {
        return x <= y;
    }
    return (a.lo & 1) <= (b.lo & 1);
}
function Long_add(a, b) {
    if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
        return Long_fromNumber(a.lo + b.lo);
    } else if (Math.abs(a.hi) < Long_MAX_NORMAL && Math.abs(b.hi) < Long_MAX_NORMAL) {
        return Long_fromNumber(Long_toNumber(a) + Long_toNumber(b));
    }
    var a_lolo = a.lo & 0xFFFF;
    var a_lohi = a.lo >>> 16;
    var a_hilo = a.hi & 0xFFFF;
    var a_hihi = a.hi >>> 16;
    var b_lolo = b.lo & 0xFFFF;
    var b_lohi = b.lo >>> 16;
    var b_hilo = b.hi & 0xFFFF;
    var b_hihi = b.hi >>> 16;
    var lolo = a_lolo + b_lolo | 0;
    var lohi = a_lohi + b_lohi + (lolo >> 16) | 0;
    var hilo = a_hilo + b_hilo + (lohi >> 16) | 0;
    var hihi = a_hihi + b_hihi + (hilo >> 16) | 0;
    return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
}
function Long_inc(a) {
    var lo = a.lo + 1 | 0;
    var hi = a.hi;
    if (lo === 0) {
        hi = hi + 1 | 0;
    }
    return new Long(lo, hi);
}
function Long_dec(a) {
    var lo = a.lo - 1 | 0;
    var hi = a.hi;
    if (lo ===  -1) {
        hi = hi - 1 | 0;
    }
    return new Long(lo, hi);
}
function Long_neg(a) {
    return Long_inc(new Long(a.lo ^ 0xFFFFFFFF, a.hi ^ 0xFFFFFFFF));
}
function Long_sub(a, b) {
    if (a.hi === a.lo >> 31 && b.hi === b.lo >> 31) {
        return Long_fromNumber(a.lo - b.lo);
    }
    var a_lolo = a.lo & 0xFFFF;
    var a_lohi = a.lo >>> 16;
    var a_hilo = a.hi & 0xFFFF;
    var a_hihi = a.hi >>> 16;
    var b_lolo = b.lo & 0xFFFF;
    var b_lohi = b.lo >>> 16;
    var b_hilo = b.hi & 0xFFFF;
    var b_hihi = b.hi >>> 16;
    var lolo = a_lolo - b_lolo | 0;
    var lohi = a_lohi - b_lohi + (lolo >> 16) | 0;
    var hilo = a_hilo - b_hilo + (lohi >> 16) | 0;
    var hihi = a_hihi - b_hihi + (hilo >> 16) | 0;
    return new Long(lolo & 0xFFFF | (lohi & 0xFFFF) << 16, hilo & 0xFFFF | (hihi & 0xFFFF) << 16);
}
function Long_compare(a, b) {
    var r = a.hi - b.hi;
    if (r !== 0) {
        return r;
    }
    r = (a.lo >>> 1) - (b.lo >>> 1);
    if (r !== 0) {
        return r;
    }
    return (a.lo & 1) - (b.lo & 1);
}
function Long_isPositive(a) {
    return (a.hi & 0x80000000) === 0;
}
function Long_isNegative(a) {
    return (a.hi & 0x80000000) !== 0;
}
function Long_mul(a, b) {
    var positive = Long_isNegative(a) === Long_isNegative(b);
    if (Long_isNegative(a)) {
        a = Long_neg(a);
    }
    if (Long_isNegative(b)) {
        b = Long_neg(b);
    }
    var a_lolo = a.lo & 0xFFFF;
    var a_lohi = a.lo >>> 16;
    var a_hilo = a.hi & 0xFFFF;
    var a_hihi = a.hi >>> 16;
    var b_lolo = b.lo & 0xFFFF;
    var b_lohi = b.lo >>> 16;
    var b_hilo = b.hi & 0xFFFF;
    var b_hihi = b.hi >>> 16;
    var lolo = 0;
    var lohi = 0;
    var hilo = 0;
    var hihi = 0;
    lolo = a_lolo * b_lolo | 0;
    lohi = lolo >>> 16;
    lohi = (lohi & 0xFFFF) + a_lohi * b_lolo | 0;
    hilo = hilo + (lohi >>> 16) | 0;
    lohi = (lohi & 0xFFFF) + a_lolo * b_lohi | 0;
    hilo = hilo + (lohi >>> 16) | 0;
    hihi = hilo >>> 16;
    hilo = (hilo & 0xFFFF) + a_hilo * b_lolo | 0;
    hihi = hihi + (hilo >>> 16) | 0;
    hilo = (hilo & 0xFFFF) + a_lohi * b_lohi | 0;
    hihi = hihi + (hilo >>> 16) | 0;
    hilo = (hilo & 0xFFFF) + a_lolo * b_hilo | 0;
    hihi = hihi + (hilo >>> 16) | 0;
    hihi = hihi + a_hihi * b_lolo + a_hilo * b_lohi + a_lohi * b_hilo + a_lolo * b_hihi | 0;
    var result = new Long(lolo & 0xFFFF | lohi << 16, hilo & 0xFFFF | hihi << 16);
    return positive ? result : Long_neg(result);
}
function Long_div(a, b) {
    if (Math.abs(a.hi) < Long_MAX_NORMAL && Math.abs(b.hi) < Long_MAX_NORMAL) {
        return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
    }
    return (Long_divRem(a, b))[0];
}
function Long_udiv(a, b) {
    if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
        return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
    }
    return (Long_udivRem(a, b))[0];
}
function Long_rem(a, b) {
    if (Math.abs(a.hi) < Long_MAX_NORMAL && Math.abs(b.hi) < Long_MAX_NORMAL) {
        return Long_fromNumber(Long_toNumber(a) % Long_toNumber(b));
    }
    return (Long_divRem(a, b))[1];
}
function Long_urem(a, b) {
    if (a.hi >= 0 && a.hi < Long_MAX_NORMAL && b.hi >= 0 && b.hi < Long_MAX_NORMAL) {
        return Long_fromNumber(Long_toNumber(a) / Long_toNumber(b));
    }
    return (Long_udivRem(a, b))[1];
}
function Long_divRem(a, b) {
    if (b.lo === 0 && b.hi === 0) {
        throw new Error("Division by zero");
    }
    var positive = Long_isNegative(a) === Long_isNegative(b);
    if (Long_isNegative(a)) {
        a = Long_neg(a);
    }
    if (Long_isNegative(b)) {
        b = Long_neg(b);
    }
    a = new LongInt(a.lo, a.hi, 0);
    b = new LongInt(b.lo, b.hi, 0);
    var q = LongInt_div(a, b);
    a = new Long(a.lo, a.hi);
    q = new Long(q.lo, q.hi);
    return positive ? [q, a] : [Long_neg(q), Long_neg(a)];
}
function Long_udivRem(a, b) {
    if (b.lo === 0 && b.hi === 0) {
        throw new Error("Division by zero");
    }
    a = new LongInt(a.lo, a.hi, 0);
    b = new LongInt(b.lo, b.hi, 0);
    var q = LongInt_div(a, b);
    a = new Long(a.lo, a.hi);
    q = new Long(q.lo, q.hi);
    return [q, a];
}
function Long_shiftLeft16(a) {
    return new Long(a.lo << 16, a.lo >>> 16 | a.hi << 16);
}
function Long_shiftRight16(a) {
    return new Long(a.lo >>> 16 | a.hi << 16, a.hi >>> 16);
}
function Long_and(a, b) {
    return new Long(a.lo & b.lo, a.hi & b.hi);
}
function Long_or(a, b) {
    return new Long(a.lo | b.lo, a.hi | b.hi);
}
function Long_xor(a, b) {
    return new Long(a.lo ^ b.lo, a.hi ^ b.hi);
}
function Long_shl(a, b) {
    b &= 63;
    if (b === 0) {
        return a;
    } else if (b < 32) {
        return new Long(a.lo << b, a.lo >>> 32 - b | a.hi << b);
    } else if (b === 32) {
        return new Long(0, a.lo);
    } else {
        return new Long(0, a.lo << b - 32);
    }
}
function Long_shr(a, b) {
    b &= 63;
    if (b === 0) {
        return a;
    } else if (b < 32) {
        return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >> b);
    } else if (b === 32) {
        return new Long(a.hi, a.hi >> 31);
    } else {
        return new Long(a.hi >> b - 32, a.hi >> 31);
    }
}
function Long_shru(a, b) {
    b &= 63;
    if (b === 0) {
        return a;
    } else if (b < 32) {
        return new Long(a.lo >>> b | a.hi << 32 - b, a.hi >>> b);
    } else if (b === 32) {
        return new Long(a.hi, 0);
    } else {
        return new Long(a.hi >>> b - 32, 0);
    }
}
function LongInt(lo, hi, sup) {
    this.lo = lo;
    this.hi = hi;
    this.sup = sup;
}
function LongInt_mul(a, b) {
    var a_lolo = (a.lo & 0xFFFF) * b | 0;
    var a_lohi = (a.lo >>> 16) * b | 0;
    var a_hilo = (a.hi & 0xFFFF) * b | 0;
    var a_hihi = (a.hi >>> 16) * b | 0;
    var sup = a.sup * b | 0;
    a_lohi = a_lohi + (a_lolo >>> 16) | 0;
    a_hilo = a_hilo + (a_lohi >>> 16) | 0;
    a_hihi = a_hihi + (a_hilo >>> 16) | 0;
    sup = sup + (a_hihi >>> 16) | 0;
    a.lo = a_lolo & 0xFFFF | a_lohi << 16;
    a.hi = a_hilo & 0xFFFF | a_hihi << 16;
    a.sup = sup & 0xFFFF;
}
function LongInt_sub(a, b) {
    var a_lolo = a.lo & 0xFFFF;
    var a_lohi = a.lo >>> 16;
    var a_hilo = a.hi & 0xFFFF;
    var a_hihi = a.hi >>> 16;
    var b_lolo = b.lo & 0xFFFF;
    var b_lohi = b.lo >>> 16;
    var b_hilo = b.hi & 0xFFFF;
    var b_hihi = b.hi >>> 16;
    a_lolo = a_lolo - b_lolo | 0;
    a_lohi = a_lohi - b_lohi + (a_lolo >> 16) | 0;
    a_hilo = a_hilo - b_hilo + (a_lohi >> 16) | 0;
    a_hihi = a_hihi - b_hihi + (a_hilo >> 16) | 0;
    var sup = a.sup - b.sup + (a_hihi >> 16) | 0;
    a.lo = a_lolo & 0xFFFF | a_lohi << 16;
    a.hi = a_hilo & 0xFFFF | a_hihi << 16;
    a.sup = sup;
}
function LongInt_add(a, b) {
    var a_lolo = a.lo & 0xFFFF;
    var a_lohi = a.lo >>> 16;
    var a_hilo = a.hi & 0xFFFF;
    var a_hihi = a.hi >>> 16;
    var b_lolo = b.lo & 0xFFFF;
    var b_lohi = b.lo >>> 16;
    var b_hilo = b.hi & 0xFFFF;
    var b_hihi = b.hi >>> 16;
    a_lolo = a_lolo + b_lolo | 0;
    a_lohi = a_lohi + b_lohi + (a_lolo >> 16) | 0;
    a_hilo = a_hilo + b_hilo + (a_lohi >> 16) | 0;
    a_hihi = a_hihi + b_hihi + (a_hilo >> 16) | 0;
    var sup = a.sup + b.sup + (a_hihi >> 16) | 0;
    a.lo = a_lolo & 0xFFFF | a_lohi << 16;
    a.hi = a_hilo & 0xFFFF | a_hihi << 16;
    a.sup = sup;
}
function LongInt_inc(a) {
    a.lo = a.lo + 1 | 0;
    if (a.lo === 0) {
        a.hi = a.hi + 1 | 0;
        if (a.hi === 0) {
            a.sup = a.sup + 1 & 0xFFFF;
        }
    }
}
function LongInt_dec(a) {
    a.lo = a.lo - 1 | 0;
    if (a.lo ===  -1) {
        a.hi = a.hi - 1 | 0;
        if (a.hi ===  -1) {
            a.sup = a.sup - 1 & 0xFFFF;
        }
    }
}
function LongInt_ucompare(a, b) {
    var r = a.sup - b.sup;
    if (r !== 0) {
        return r;
    }
    r = (a.hi >>> 1) - (b.hi >>> 1);
    if (r !== 0) {
        return r;
    }
    r = (a.hi & 1) - (b.hi & 1);
    if (r !== 0) {
        return r;
    }
    r = (a.lo >>> 1) - (b.lo >>> 1);
    if (r !== 0) {
        return r;
    }
    return (a.lo & 1) - (b.lo & 1);
}
function LongInt_numOfLeadingZeroBits(a) {
    var n = 0;
    var d = 16;
    while (d > 0) {
        if (a >>> d !== 0) {
            a >>>= d;
            n = n + d | 0;
        }
        d = d / 2 | 0;
    }
    return 31 - n;
}
function LongInt_shl(a, b) {
    if (b === 0) {
        return;
    }
    if (b < 32) {
        a.sup = (a.hi >>> 32 - b | a.sup << b) & 0xFFFF;
        a.hi = a.lo >>> 32 - b | a.hi << b;
        a.lo <<= b;
    } else if (b === 32) {
        a.sup = a.hi & 0xFFFF;
        a.hi = a.lo;
        a.lo = 0;
    } else if (b < 64) {
        a.sup = (a.lo >>> 64 - b | a.hi << b - 32) & 0xFFFF;
        a.hi = a.lo << b;
        a.lo = 0;
    } else if (b === 64) {
        a.sup = a.lo & 0xFFFF;
        a.hi = 0;
        a.lo = 0;
    } else {
        a.sup = a.lo << b - 64 & 0xFFFF;
        a.hi = 0;
        a.lo = 0;
    }
}
function LongInt_shr(a, b) {
    if (b === 0) {
        return;
    }
    if (b === 32) {
        a.lo = a.hi;
        a.hi = a.sup;
        a.sup = 0;
    } else if (b < 32) {
        a.lo = a.lo >>> b | a.hi << 32 - b;
        a.hi = a.hi >>> b | a.sup << 32 - b;
        a.sup >>>= b;
    } else if (b === 64) {
        a.lo = a.sup;
        a.hi = 0;
        a.sup = 0;
    } else if (b < 64) {
        a.lo = a.hi >>> b - 32 | a.sup << 64 - b;
        a.hi = a.sup >>> b - 32;
        a.sup = 0;
    } else {
        a.lo = a.sup >>> b - 64;
        a.hi = 0;
        a.sup = 0;
    }
}
function LongInt_copy(a) {
    return new LongInt(a.lo, a.hi, a.sup);
}
function LongInt_div(a, b) {
    var bits = b.hi !== 0 ? LongInt_numOfLeadingZeroBits(b.hi) : LongInt_numOfLeadingZeroBits(b.lo) + 32;
    var sz = 1 + (bits / 16 | 0);
    var dividentBits = bits % 16;
    LongInt_shl(b, bits);
    LongInt_shl(a, dividentBits);
    var q = new LongInt(0, 0, 0);
    while (sz-- > 0) {
        LongInt_shl(q, 16);
        var digitA = (a.hi >>> 16) + 0x10000 * a.sup;
        var digitB = b.hi >>> 16;
        var digit = digitA / digitB | 0;
        var t = LongInt_copy(b);
        LongInt_mul(t, digit);
        if (LongInt_ucompare(t, a) >= 0) {
            while (LongInt_ucompare(t, a) > 0) {
                LongInt_sub(t, b);
                 --digit;
            }
        } else {
            while (true) {
                var nextT = LongInt_copy(t);
                LongInt_add(nextT, b);
                if (LongInt_ucompare(nextT, a) > 0) {
                    break;
                }
                t = nextT;
                ++digit;
            }
        }
        LongInt_sub(a, t);
        q.lo |= digit;
        LongInt_shl(a, 16);
    }
    LongInt_shr(a, bits + 16);
    return q;
}
function TeaVMThread(runner) {
    this.status = 3;
    this.stack = [];
    this.suspendCallback = null;
    this.runner = runner;
    this.attribute = null;
    this.completeCallback = null;
}
TeaVMThread.prototype.push = function() {
    for (var i = 0;i < arguments.length;++i) {
        this.stack.push(arguments[i]);
    }
    return this;
};
TeaVMThread.prototype.s = TeaVMThread.prototype.push;
TeaVMThread.prototype.pop = function() {
    return this.stack.pop();
};
TeaVMThread.prototype.l = TeaVMThread.prototype.pop;
TeaVMThread.prototype.isResuming = function() {
    return this.status === 2;
};
TeaVMThread.prototype.isSuspending = function() {
    return this.status === 1;
};
TeaVMThread.prototype.suspend = function(callback) {
    this.suspendCallback = callback;
    this.status = 1;
};
TeaVMThread.prototype.start = function(callback) {
    if (this.status !== 3) {
        throw new Error("Thread already started");
    }
    if ($rt_currentNativeThread !== null) {
        throw new Error("Another thread is running");
    }
    this.status = 0;
    this.completeCallback = callback ? callback : function(result) {
        if (result instanceof Error) {
            throw result;
        }
    };
    this.run();
};
TeaVMThread.prototype.resume = function() {
    if ($rt_currentNativeThread !== null) {
        throw new Error("Another thread is running");
    }
    this.status = 2;
    this.run();
};
TeaVMThread.prototype.run = function() {
    $rt_currentNativeThread = this;
    var result;
    try {
        result = this.runner();
    } catch (e){
        result = e;
    } finally {
        $rt_currentNativeThread = null;
    }
    if (this.suspendCallback !== null) {
        var self = this;
        var callback = this.suspendCallback;
        this.suspendCallback = null;
        callback(function() {
            self.resume();
        });
    } else if (this.status === 0) {
        this.completeCallback(result);
    }
};
function $rt_suspending() {
    var thread = $rt_nativeThread();
    return thread != null && thread.isSuspending();
}
function $rt_resuming() {
    var thread = $rt_nativeThread();
    return thread != null && thread.isResuming();
}
function $rt_suspend(callback) {
    var nativeThread = $rt_nativeThread();
    if (nativeThread === null) {
        throw new Error("Suspension point reached from non-threading context (perhaps, from native JS method).");
    }
    return nativeThread.suspend(callback);
}
function $rt_startThread(runner, callback) {
    (new TeaVMThread(runner)).start(callback);
}
var $rt_currentNativeThread = null;
function $rt_nativeThread() {
    return $rt_currentNativeThread;
}
function $rt_invalidPointer() {
    throw new Error("Invalid recorded state");
}
main = $rt_mainStarter(oe_Client_main);
(function() {
    var c;
    c = tt_ObjectExtractorStreamEngine.prototype;
    c.lineTo = c.$lineTo$exported$6;
    c.clip = c.$clip$exported$0;
    c.closePath = c.$closePath$exported$10;
    c.setGraphicsState = c.$setGraphicsState$exported$9;
    c.fillPath = c.$fillPath$exported$1;
    c.endPath = c.$endPath$exported$2;
    c.appendRectangle = c.$appendRectangle$exported$3;
    c.curveTo = c.$curveTo$exported$4;
    c.moveTo = c.$moveTo$exported$8;
    c.strokePath = c.$strokePath$exported$7;
    c.drawImage = c.$drawImage$exported$12;
    c.fillAndStrokePath = c.$fillAndStrokePath$exported$5;
    c.shadingFill = c.$shadingFill$exported$11;
    c = tt_TextStripper.prototype;
    c.writeStringJS = c.$writeStringJS$exported$0;
    c = p_PDDocument$getPage$lambda$_5_0.prototype;
    c.complete = c.$complete$exported$0;
    c = p_PDFGraphicsStreamEngine$getObjectsAsync$lambda$_19_0.prototype;
    c.complete = c.$complete$exported$0;
    c = p_PDFTextStripper$getTextAsync$lambda$_7_0.prototype;
    c.complete = c.$complete$exported$0;
})();
})();

//# sourceMappingURL=classes.js.map